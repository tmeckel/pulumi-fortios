// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to get information on an fortios firewallconsolidated policy
 */
export function getPolicy(args: GetPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortios:firewallconsolidated/getPolicy:getPolicy", {
        "policyid": args.policyid,
        "vdomparam": args.vdomparam,
    }, opts);
}

/**
 * A collection of arguments for invoking getPolicy.
 */
export interface GetPolicyArgs {
    /**
     * Specify the policyid of the desired firewallconsolidated policy.
     */
    policyid: number;
    /**
     * Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: string;
}

/**
 * A collection of values returned by getPolicy.
 */
export interface GetPolicyResult {
    /**
     * Policy action (allow/deny/ipsec).
     */
    readonly action: string;
    /**
     * Application category ID list. The structure of `appCategory` block is documented below.
     */
    readonly appCategories: outputs.firewallconsolidated.GetPolicyAppCategory[];
    /**
     * Application group names. The structure of `appGroup` block is documented below.
     */
    readonly appGroups: outputs.firewallconsolidated.GetPolicyAppGroup[];
    /**
     * Name of an existing Application list.
     */
    readonly applicationList: string;
    /**
     * Application ID list. The structure of `application` block is documented below.
     */
    readonly applications: outputs.firewallconsolidated.GetPolicyApplication[];
    /**
     * Enable/disable policy traffic ASIC offloading.
     */
    readonly autoAsicOffload: string;
    /**
     * Name of an existing Antivirus profile.
     */
    readonly avProfile: string;
    /**
     * Enable exemption of some users from the captive portal.
     */
    readonly captivePortalExempt: string;
    /**
     * Name of an existing CIFS profile.
     */
    readonly cifsProfile: string;
    /**
     * Comment.
     */
    readonly comments: string;
    /**
     * Enable to change packet's DiffServ values to the specified diffservcode-forward value.
     */
    readonly diffservForward: string;
    /**
     * Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.
     */
    readonly diffservReverse: string;
    /**
     * Change packet's DiffServ to this value.
     */
    readonly diffservcodeForward: string;
    /**
     * Change packet's reverse (reply) DiffServ to this value.
     */
    readonly diffservcodeRev: string;
    /**
     * Name of an existing DLP sensor.
     */
    readonly dlpSensor: string;
    /**
     * Name of an existing DNS filter profile.
     */
    readonly dnsfilterProfile: string;
    /**
     * Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
     */
    readonly dstaddr4s: outputs.firewallconsolidated.GetPolicyDstaddr4[];
    /**
     * Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
     */
    readonly dstaddr6s: outputs.firewallconsolidated.GetPolicyDstaddr6[];
    /**
     * When enabled dstaddr specifies what the destination address must NOT be.
     */
    readonly dstaddrNegate: string;
    /**
     * Outgoing (egress) interface. The structure of `dstintf` block is documented below.
     */
    readonly dstintfs: outputs.firewallconsolidated.GetPolicyDstintf[];
    /**
     * Name of an existing email filter profile.
     */
    readonly emailfilterProfile: string;
    /**
     * Enable to prevent source NAT from changing a session's source port.
     */
    readonly fixedport: string;
    /**
     * Names of FSSO groups. The structure of `fssoGroups` block is documented below.
     */
    readonly fssoGroups: outputs.firewallconsolidated.GetPolicyFssoGroup[];
    /**
     * Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
     */
    readonly groups: outputs.firewallconsolidated.GetPolicyGroup[];
    /**
     * Redirect HTTP(S) traffic to matching transparent web proxy policy.
     */
    readonly httpPolicyRedirect: string;
    /**
     * Name of an existing ICAP profile.
     */
    readonly icapProfile: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN.
     */
    readonly inbound: string;
    /**
     * Policy inspection mode (Flow/proxy). Default is Flow mode.
     */
    readonly inspectionMode: string;
    /**
     * Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
     */
    readonly internetService: string;
    /**
     * Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
     */
    readonly internetServiceCustomGroups: outputs.firewallconsolidated.GetPolicyInternetServiceCustomGroup[];
    /**
     * Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
     */
    readonly internetServiceCustoms: outputs.firewallconsolidated.GetPolicyInternetServiceCustom[];
    /**
     * Internet Service group name. The structure of `internetServiceGroup` block is documented below.
     */
    readonly internetServiceGroups: outputs.firewallconsolidated.GetPolicyInternetServiceGroup[];
    /**
     * Internet Service ID. The structure of `internetServiceId` block is documented below.
     */
    readonly internetServiceIds: outputs.firewallconsolidated.GetPolicyInternetServiceId[];
    /**
     * Internet Service name. The structure of `internetServiceName` block is documented below.
     */
    readonly internetServiceNames: outputs.firewallconsolidated.GetPolicyInternetServiceName[];
    /**
     * When enabled internet-service specifies what the service must NOT be.
     */
    readonly internetServiceNegate: string;
    /**
     * Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.
     */
    readonly internetServiceSrc: string;
    /**
     * Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
     */
    readonly internetServiceSrcCustomGroups: outputs.firewallconsolidated.GetPolicyInternetServiceSrcCustomGroup[];
    /**
     * Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
     */
    readonly internetServiceSrcCustoms: outputs.firewallconsolidated.GetPolicyInternetServiceSrcCustom[];
    /**
     * Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
     */
    readonly internetServiceSrcGroups: outputs.firewallconsolidated.GetPolicyInternetServiceSrcGroup[];
    /**
     * Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
     */
    readonly internetServiceSrcIds: outputs.firewallconsolidated.GetPolicyInternetServiceSrcId[];
    /**
     * Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
     */
    readonly internetServiceSrcNames: outputs.firewallconsolidated.GetPolicyInternetServiceSrcName[];
    /**
     * When enabled internet-service-src specifies what the service must NOT be.
     */
    readonly internetServiceSrcNegate: string;
    /**
     * Enable to use IP Pools for source NAT.
     */
    readonly ippool: string;
    /**
     * Name of an existing IPS sensor.
     */
    readonly ipsSensor: string;
    /**
     * Enable or disable logging. Log all sessions or security profile sessions.
     */
    readonly logtraffic: string;
    /**
     * Record logs when a session starts.
     */
    readonly logtrafficStart: string;
    /**
     * Application group names.
     */
    readonly name: string;
    /**
     * Enable/disable source NAT.
     */
    readonly nat: string;
    /**
     * Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN.
     */
    readonly outbound: string;
    /**
     * Per-IP traffic shaper.
     */
    readonly perIpShaper: string;
    /**
     * Policy ID.
     */
    readonly policyid: number;
    /**
     * IPv4 pool names. The structure of `poolname4` block is documented below.
     */
    readonly poolname4s: outputs.firewallconsolidated.GetPolicyPoolname4[];
    /**
     * IPv6 pool names. The structure of `poolname6` block is documented below.
     */
    readonly poolname6s: outputs.firewallconsolidated.GetPolicyPoolname6[];
    /**
     * Name of profile group.
     */
    readonly profileGroup: string;
    /**
     * Name of an existing Protocol options profile.
     */
    readonly profileProtocolOptions: string;
    /**
     * Determine whether the firewall policy allows security profile groups or single profiles only.
     */
    readonly profileType: string;
    /**
     * Schedule name.
     */
    readonly schedule: string;
    /**
     * When enabled service specifies what the service must NOT be.
     */
    readonly serviceNegate: string;
    /**
     * Service and service group names. The structure of `service` block is documented below.
     */
    readonly services: outputs.firewallconsolidated.GetPolicyService[];
    /**
     * TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
     */
    readonly sessionTtl: number;
    /**
     * Name of an existing Spam filter profile.
     */
    readonly spamfilterProfile: string;
    /**
     * Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
     */
    readonly srcaddr4s: outputs.firewallconsolidated.GetPolicySrcaddr4[];
    /**
     * Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
     */
    readonly srcaddr6s: outputs.firewallconsolidated.GetPolicySrcaddr6[];
    /**
     * When enabled srcaddr specifies what the source address must NOT be.
     */
    readonly srcaddrNegate: string;
    /**
     * Incoming (ingress) interface. The structure of `srcintf` block is documented below.
     */
    readonly srcintfs: outputs.firewallconsolidated.GetPolicySrcintf[];
    /**
     * Name of an existing SSH filter profile.
     */
    readonly sshFilterProfile: string;
    /**
     * Redirect SSH traffic to matching transparent proxy policy.
     */
    readonly sshPolicyRedirect: string;
    /**
     * Name of an existing SSL SSH profile.
     */
    readonly sslSshProfile: string;
    /**
     * Enable or disable this policy.
     */
    readonly status: string;
    /**
     * Receiver TCP maximum segment size (MSS).
     */
    readonly tcpMssReceiver: number;
    /**
     * Sender TCP maximum segment size (MSS).
     */
    readonly tcpMssSender: number;
    /**
     * Traffic shaper.
     */
    readonly trafficShaper: string;
    /**
     * Reverse traffic shaper.
     */
    readonly trafficShaperReverse: string;
    /**
     * URL category ID list. The structure of `urlCategory` block is documented below.
     */
    readonly urlCategories: outputs.firewallconsolidated.GetPolicyUrlCategory[];
    /**
     * Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
     */
    readonly users: outputs.firewallconsolidated.GetPolicyUser[];
    /**
     * Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
     */
    readonly utmStatus: string;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    readonly uuid: string;
    readonly vdomparam?: string;
    /**
     * Name of an existing VoIP profile.
     */
    readonly voipProfile: string;
    /**
     * Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
     */
    readonly vpntunnel: string;
    /**
     * Name of an existing Web application firewall profile.
     */
    readonly wafProfile: string;
    /**
     * Enable/disable WAN optimization.
     */
    readonly wanopt: string;
    /**
     * WAN optimization auto-detection mode.
     */
    readonly wanoptDetection: string;
    /**
     * WAN optimization passive mode options. This option decides what IP address will be used to connect to server.
     */
    readonly wanoptPassiveOpt: string;
    /**
     * WAN optimization peer.
     */
    readonly wanoptPeer: string;
    /**
     * WAN optimization profile.
     */
    readonly wanoptProfile: string;
    /**
     * Enable/disable web cache.
     */
    readonly webcache: string;
    /**
     * Enable/disable web cache for HTTPS.
     */
    readonly webcacheHttps: string;
    /**
     * Name of an existing Web filter profile.
     */
    readonly webfilterProfile: string;
    /**
     * Webproxy forward server name.
     */
    readonly webproxyForwardServer: string;
    /**
     * Webproxy profile name.
     */
    readonly webproxyProfile: string;
}
/**
 * Use this data source to get information on an fortios firewallconsolidated policy
 */
export function getPolicyOutput(args: GetPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPolicyResult> {
    return pulumi.output(args).apply((a: any) => getPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getPolicy.
 */
export interface GetPolicyOutputArgs {
    /**
     * Specify the policyid of the desired firewallconsolidated policy.
     */
    policyid: pulumi.Input<number>;
    /**
     * Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BwlArgs, BwlState } from "./bwl";
export type Bwl = import("./bwl").Bwl;
export const Bwl: typeof import("./bwl").Bwl = null as any;
utilities.lazyLoad(exports, ["Bwl"], () => require("./bwl"));

export { BwordArgs, BwordState } from "./bword";
export type Bword = import("./bword").Bword;
export const Bword: typeof import("./bword").Bword = null as any;
utilities.lazyLoad(exports, ["Bword"], () => require("./bword"));

export { DnsblArgs, DnsblState } from "./dnsbl";
export type Dnsbl = import("./dnsbl").Dnsbl;
export const Dnsbl: typeof import("./dnsbl").Dnsbl = null as any;
utilities.lazyLoad(exports, ["Dnsbl"], () => require("./dnsbl"));

export { FortishieldArgs, FortishieldState } from "./fortishield";
export type Fortishield = import("./fortishield").Fortishield;
export const Fortishield: typeof import("./fortishield").Fortishield = null as any;
utilities.lazyLoad(exports, ["Fortishield"], () => require("./fortishield"));

export { IptrustArgs, IptrustState } from "./iptrust";
export type Iptrust = import("./iptrust").Iptrust;
export const Iptrust: typeof import("./iptrust").Iptrust = null as any;
utilities.lazyLoad(exports, ["Iptrust"], () => require("./iptrust"));

export { MheaderArgs, MheaderState } from "./mheader";
export type Mheader = import("./mheader").Mheader;
export const Mheader: typeof import("./mheader").Mheader = null as any;
utilities.lazyLoad(exports, ["Mheader"], () => require("./mheader"));

export { OptionsArgs, OptionsState } from "./options";
export type Options = import("./options").Options;
export const Options: typeof import("./options").Options = null as any;
utilities.lazyLoad(exports, ["Options"], () => require("./options"));

export { ProfileArgs, ProfileState } from "./profile";
export type Profile = import("./profile").Profile;
export const Profile: typeof import("./profile").Profile = null as any;
utilities.lazyLoad(exports, ["Profile"], () => require("./profile"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fortios:spamfilter/bwl:Bwl":
                return new Bwl(name, <any>undefined, { urn })
            case "fortios:spamfilter/bword:Bword":
                return new Bword(name, <any>undefined, { urn })
            case "fortios:spamfilter/dnsbl:Dnsbl":
                return new Dnsbl(name, <any>undefined, { urn })
            case "fortios:spamfilter/fortishield:Fortishield":
                return new Fortishield(name, <any>undefined, { urn })
            case "fortios:spamfilter/iptrust:Iptrust":
                return new Iptrust(name, <any>undefined, { urn })
            case "fortios:spamfilter/mheader:Mheader":
                return new Mheader(name, <any>undefined, { urn })
            case "fortios:spamfilter/options:Options":
                return new Options(name, <any>undefined, { urn })
            case "fortios:spamfilter/profile:Profile":
                return new Profile(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fortios", "spamfilter/bwl", _module)
pulumi.runtime.registerResourceModule("fortios", "spamfilter/bword", _module)
pulumi.runtime.registerResourceModule("fortios", "spamfilter/dnsbl", _module)
pulumi.runtime.registerResourceModule("fortios", "spamfilter/fortishield", _module)
pulumi.runtime.registerResourceModule("fortios", "spamfilter/iptrust", _module)
pulumi.runtime.registerResourceModule("fortios", "spamfilter/mheader", _module)
pulumi.runtime.registerResourceModule("fortios", "spamfilter/options", _module)
pulumi.runtime.registerResourceModule("fortios", "spamfilter/profile", _module)

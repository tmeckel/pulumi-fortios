// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Speed test schedule for each interface. Applies to FortiOS Version `>= 7.0.0`.
 *
 * ## Import
 *
 * System SpeedTestSchedule can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import fortios:sys/speedtestschedule:Speedtestschedule labelname {{interface}}
 * ```
 *
 *  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 *  $ pulumi import fortios:sys/speedtestschedule:Speedtestschedule labelname {{interface}}
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Speedtestschedule extends pulumi.CustomResource {
    /**
     * Get an existing Speedtestschedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpeedtestscheduleState, opts?: pulumi.CustomResourceOptions): Speedtestschedule {
        return new Speedtestschedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:sys/speedtestschedule:Speedtestschedule';

    /**
     * Returns true if the given object is an instance of Speedtestschedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Speedtestschedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Speedtestschedule.__pulumiType;
    }

    /**
     * DSCP used for speed test.
     */
    public readonly diffserv!: pulumi.Output<string>;
    /**
     * Enable/disable dynamic server option. Valid values: `disable`, `enable`.
     */
    public readonly dynamicServer!: pulumi.Output<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Interface name.
     */
    public readonly interface!: pulumi.Output<string>;
    /**
     * Schedules for the interface. The structure of `schedules` block is documented below.
     */
    public readonly schedules!: pulumi.Output<outputs.sys.SpeedtestscheduleSchedule[] | undefined>;
    /**
     * Speed test server name.
     */
    public readonly serverName!: pulumi.Output<string>;
    /**
     * Enable/disable scheduled speed test. Valid values: `disable`, `enable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Enable/disable bypassing interface's inbound bandwidth setting. Valid values: `disable`, `enable`.
     */
    public readonly updateInbandwidth!: pulumi.Output<string>;
    /**
     * Maximum downloading bandwidth (kbps) to be used in a speed test.
     */
    public readonly updateInbandwidthMaximum!: pulumi.Output<number>;
    /**
     * Minimum downloading bandwidth (kbps) to be considered effective.
     */
    public readonly updateInbandwidthMinimum!: pulumi.Output<number>;
    /**
     * Enable/disable bypassing interface's outbound bandwidth setting. Valid values: `disable`, `enable`.
     */
    public readonly updateOutbandwidth!: pulumi.Output<string>;
    /**
     * Maximum uploading bandwidth (kbps) to be used in a speed test.
     */
    public readonly updateOutbandwidthMaximum!: pulumi.Output<number>;
    /**
     * Minimum uploading bandwidth (kbps) to be considered effective.
     */
    public readonly updateOutbandwidthMinimum!: pulumi.Output<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a Speedtestschedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SpeedtestscheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpeedtestscheduleArgs | SpeedtestscheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpeedtestscheduleState | undefined;
            resourceInputs["diffserv"] = state ? state.diffserv : undefined;
            resourceInputs["dynamicServer"] = state ? state.dynamicServer : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["schedules"] = state ? state.schedules : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updateInbandwidth"] = state ? state.updateInbandwidth : undefined;
            resourceInputs["updateInbandwidthMaximum"] = state ? state.updateInbandwidthMaximum : undefined;
            resourceInputs["updateInbandwidthMinimum"] = state ? state.updateInbandwidthMinimum : undefined;
            resourceInputs["updateOutbandwidth"] = state ? state.updateOutbandwidth : undefined;
            resourceInputs["updateOutbandwidthMaximum"] = state ? state.updateOutbandwidthMaximum : undefined;
            resourceInputs["updateOutbandwidthMinimum"] = state ? state.updateOutbandwidthMinimum : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SpeedtestscheduleArgs | undefined;
            resourceInputs["diffserv"] = args ? args.diffserv : undefined;
            resourceInputs["dynamicServer"] = args ? args.dynamicServer : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["schedules"] = args ? args.schedules : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["updateInbandwidth"] = args ? args.updateInbandwidth : undefined;
            resourceInputs["updateInbandwidthMaximum"] = args ? args.updateInbandwidthMaximum : undefined;
            resourceInputs["updateInbandwidthMinimum"] = args ? args.updateInbandwidthMinimum : undefined;
            resourceInputs["updateOutbandwidth"] = args ? args.updateOutbandwidth : undefined;
            resourceInputs["updateOutbandwidthMaximum"] = args ? args.updateOutbandwidthMaximum : undefined;
            resourceInputs["updateOutbandwidthMinimum"] = args ? args.updateOutbandwidthMinimum : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Speedtestschedule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Speedtestschedule resources.
 */
export interface SpeedtestscheduleState {
    /**
     * DSCP used for speed test.
     */
    diffserv?: pulumi.Input<string>;
    /**
     * Enable/disable dynamic server option. Valid values: `disable`, `enable`.
     */
    dynamicServer?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    interface?: pulumi.Input<string>;
    /**
     * Schedules for the interface. The structure of `schedules` block is documented below.
     */
    schedules?: pulumi.Input<pulumi.Input<inputs.sys.SpeedtestscheduleSchedule>[]>;
    /**
     * Speed test server name.
     */
    serverName?: pulumi.Input<string>;
    /**
     * Enable/disable scheduled speed test. Valid values: `disable`, `enable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Enable/disable bypassing interface's inbound bandwidth setting. Valid values: `disable`, `enable`.
     */
    updateInbandwidth?: pulumi.Input<string>;
    /**
     * Maximum downloading bandwidth (kbps) to be used in a speed test.
     */
    updateInbandwidthMaximum?: pulumi.Input<number>;
    /**
     * Minimum downloading bandwidth (kbps) to be considered effective.
     */
    updateInbandwidthMinimum?: pulumi.Input<number>;
    /**
     * Enable/disable bypassing interface's outbound bandwidth setting. Valid values: `disable`, `enable`.
     */
    updateOutbandwidth?: pulumi.Input<string>;
    /**
     * Maximum uploading bandwidth (kbps) to be used in a speed test.
     */
    updateOutbandwidthMaximum?: pulumi.Input<number>;
    /**
     * Minimum uploading bandwidth (kbps) to be considered effective.
     */
    updateOutbandwidthMinimum?: pulumi.Input<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Speedtestschedule resource.
 */
export interface SpeedtestscheduleArgs {
    /**
     * DSCP used for speed test.
     */
    diffserv?: pulumi.Input<string>;
    /**
     * Enable/disable dynamic server option. Valid values: `disable`, `enable`.
     */
    dynamicServer?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    interface?: pulumi.Input<string>;
    /**
     * Schedules for the interface. The structure of `schedules` block is documented below.
     */
    schedules?: pulumi.Input<pulumi.Input<inputs.sys.SpeedtestscheduleSchedule>[]>;
    /**
     * Speed test server name.
     */
    serverName?: pulumi.Input<string>;
    /**
     * Enable/disable scheduled speed test. Valid values: `disable`, `enable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Enable/disable bypassing interface's inbound bandwidth setting. Valid values: `disable`, `enable`.
     */
    updateInbandwidth?: pulumi.Input<string>;
    /**
     * Maximum downloading bandwidth (kbps) to be used in a speed test.
     */
    updateInbandwidthMaximum?: pulumi.Input<number>;
    /**
     * Minimum downloading bandwidth (kbps) to be considered effective.
     */
    updateInbandwidthMinimum?: pulumi.Input<number>;
    /**
     * Enable/disable bypassing interface's outbound bandwidth setting. Valid values: `disable`, `enable`.
     */
    updateOutbandwidth?: pulumi.Input<string>;
    /**
     * Maximum uploading bandwidth (kbps) to be used in a speed test.
     */
    updateOutbandwidthMaximum?: pulumi.Input<number>;
    /**
     * Minimum uploading bandwidth (kbps) to be considered effective.
     */
    updateOutbandwidthMinimum?: pulumi.Input<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class SettingGlobal extends pulumi.CustomResource {
    /**
     * Get an existing SettingGlobal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingGlobalState, opts?: pulumi.CustomResourceOptions): SettingGlobal {
        return new SettingGlobal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:sys/settingGlobal:SettingGlobal';

    /**
     * Returns true if the given object is an instance of SettingGlobal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SettingGlobal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SettingGlobal.__pulumiType;
    }

    /**
     * Enable SCP over SSH
     */
    public readonly adminScp!: pulumi.Output<string>;
    /**
     * Administrative access port for HTTPS.
     */
    public readonly adminSport!: pulumi.Output<string>;
    /**
     * Administrative access port for SSH.
     */
    public readonly adminSshPort!: pulumi.Output<string>;
    /**
     * Number of minutes before an idle administrator session time out.
     */
    public readonly admintimeout!: pulumi.Output<string>;
    /**
     * FortiGate unit's hostname.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * Number corresponding to your time zone from 00 to 86.
     */
    public readonly timezone!: pulumi.Output<string>;

    /**
     * Create a SettingGlobal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SettingGlobalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingGlobalArgs | SettingGlobalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingGlobalState | undefined;
            resourceInputs["adminScp"] = state ? state.adminScp : undefined;
            resourceInputs["adminSport"] = state ? state.adminSport : undefined;
            resourceInputs["adminSshPort"] = state ? state.adminSshPort : undefined;
            resourceInputs["admintimeout"] = state ? state.admintimeout : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
        } else {
            const args = argsOrState as SettingGlobalArgs | undefined;
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            resourceInputs["adminScp"] = args ? args.adminScp : undefined;
            resourceInputs["adminSport"] = args ? args.adminSport : undefined;
            resourceInputs["adminSshPort"] = args ? args.adminSshPort : undefined;
            resourceInputs["admintimeout"] = args ? args.admintimeout : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SettingGlobal.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SettingGlobal resources.
 */
export interface SettingGlobalState {
    /**
     * Enable SCP over SSH
     */
    adminScp?: pulumi.Input<string>;
    /**
     * Administrative access port for HTTPS.
     */
    adminSport?: pulumi.Input<string>;
    /**
     * Administrative access port for SSH.
     */
    adminSshPort?: pulumi.Input<string>;
    /**
     * Number of minutes before an idle administrator session time out.
     */
    admintimeout?: pulumi.Input<string>;
    /**
     * FortiGate unit's hostname.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Number corresponding to your time zone from 00 to 86.
     */
    timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SettingGlobal resource.
 */
export interface SettingGlobalArgs {
    /**
     * Enable SCP over SSH
     */
    adminScp?: pulumi.Input<string>;
    /**
     * Administrative access port for HTTPS.
     */
    adminSport?: pulumi.Input<string>;
    /**
     * Administrative access port for SSH.
     */
    adminSshPort?: pulumi.Input<string>;
    /**
     * Number of minutes before an idle administrator session time out.
     */
    admintimeout?: pulumi.Input<string>;
    /**
     * FortiGate unit's hostname.
     */
    hostname: pulumi.Input<string>;
    /**
     * Number corresponding to your time zone from 00 to 86.
     */
    timezone?: pulumi.Input<string>;
}

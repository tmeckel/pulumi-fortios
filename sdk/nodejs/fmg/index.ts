// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DevicemanagerDeviceArgs, DevicemanagerDeviceState } from "./devicemanagerDevice";
export type DevicemanagerDevice = import("./devicemanagerDevice").DevicemanagerDevice;
export const DevicemanagerDevice: typeof import("./devicemanagerDevice").DevicemanagerDevice = null as any;
utilities.lazyLoad(exports, ["DevicemanagerDevice"], () => require("./devicemanagerDevice"));

export { DevicemanagerInstallDeviceArgs, DevicemanagerInstallDeviceState } from "./devicemanagerInstallDevice";
export type DevicemanagerInstallDevice = import("./devicemanagerInstallDevice").DevicemanagerInstallDevice;
export const DevicemanagerInstallDevice: typeof import("./devicemanagerInstallDevice").DevicemanagerInstallDevice = null as any;
utilities.lazyLoad(exports, ["DevicemanagerInstallDevice"], () => require("./devicemanagerInstallDevice"));

export { DevicemanagerInstallPolicypackageArgs, DevicemanagerInstallPolicypackageState } from "./devicemanagerInstallPolicypackage";
export type DevicemanagerInstallPolicypackage = import("./devicemanagerInstallPolicypackage").DevicemanagerInstallPolicypackage;
export const DevicemanagerInstallPolicypackage: typeof import("./devicemanagerInstallPolicypackage").DevicemanagerInstallPolicypackage = null as any;
utilities.lazyLoad(exports, ["DevicemanagerInstallPolicypackage"], () => require("./devicemanagerInstallPolicypackage"));

export { DevicemanagerScriptArgs, DevicemanagerScriptState } from "./devicemanagerScript";
export type DevicemanagerScript = import("./devicemanagerScript").DevicemanagerScript;
export const DevicemanagerScript: typeof import("./devicemanagerScript").DevicemanagerScript = null as any;
utilities.lazyLoad(exports, ["DevicemanagerScript"], () => require("./devicemanagerScript"));

export { DevicemanagerScriptExecuteArgs, DevicemanagerScriptExecuteState } from "./devicemanagerScriptExecute";
export type DevicemanagerScriptExecute = import("./devicemanagerScriptExecute").DevicemanagerScriptExecute;
export const DevicemanagerScriptExecute: typeof import("./devicemanagerScriptExecute").DevicemanagerScriptExecute = null as any;
utilities.lazyLoad(exports, ["DevicemanagerScriptExecute"], () => require("./devicemanagerScriptExecute"));

export { FirewallObjectAddressArgs, FirewallObjectAddressState } from "./firewallObjectAddress";
export type FirewallObjectAddress = import("./firewallObjectAddress").FirewallObjectAddress;
export const FirewallObjectAddress: typeof import("./firewallObjectAddress").FirewallObjectAddress = null as any;
utilities.lazyLoad(exports, ["FirewallObjectAddress"], () => require("./firewallObjectAddress"));

export { FirewallObjectIppoolArgs, FirewallObjectIppoolState } from "./firewallObjectIppool";
export type FirewallObjectIppool = import("./firewallObjectIppool").FirewallObjectIppool;
export const FirewallObjectIppool: typeof import("./firewallObjectIppool").FirewallObjectIppool = null as any;
utilities.lazyLoad(exports, ["FirewallObjectIppool"], () => require("./firewallObjectIppool"));

export { FirewallObjectServiceArgs, FirewallObjectServiceState } from "./firewallObjectService";
export type FirewallObjectService = import("./firewallObjectService").FirewallObjectService;
export const FirewallObjectService: typeof import("./firewallObjectService").FirewallObjectService = null as any;
utilities.lazyLoad(exports, ["FirewallObjectService"], () => require("./firewallObjectService"));

export { FirewallObjectVipArgs, FirewallObjectVipState } from "./firewallObjectVip";
export type FirewallObjectVip = import("./firewallObjectVip").FirewallObjectVip;
export const FirewallObjectVip: typeof import("./firewallObjectVip").FirewallObjectVip = null as any;
utilities.lazyLoad(exports, ["FirewallObjectVip"], () => require("./firewallObjectVip"));

export { FirewallSecurityPolicyArgs, FirewallSecurityPolicyState } from "./firewallSecurityPolicy";
export type FirewallSecurityPolicy = import("./firewallSecurityPolicy").FirewallSecurityPolicy;
export const FirewallSecurityPolicy: typeof import("./firewallSecurityPolicy").FirewallSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["FirewallSecurityPolicy"], () => require("./firewallSecurityPolicy"));

export { FirewallSecurityPolicypackageArgs, FirewallSecurityPolicypackageState } from "./firewallSecurityPolicypackage";
export type FirewallSecurityPolicypackage = import("./firewallSecurityPolicypackage").FirewallSecurityPolicypackage;
export const FirewallSecurityPolicypackage: typeof import("./firewallSecurityPolicypackage").FirewallSecurityPolicypackage = null as any;
utilities.lazyLoad(exports, ["FirewallSecurityPolicypackage"], () => require("./firewallSecurityPolicypackage"));

export { JsonrpcRequestArgs, JsonrpcRequestState } from "./jsonrpcRequest";
export type JsonrpcRequest = import("./jsonrpcRequest").JsonrpcRequest;
export const JsonrpcRequest: typeof import("./jsonrpcRequest").JsonrpcRequest = null as any;
utilities.lazyLoad(exports, ["JsonrpcRequest"], () => require("./jsonrpcRequest"));

export { ObjectAdomRevisionArgs, ObjectAdomRevisionState } from "./objectAdomRevision";
export type ObjectAdomRevision = import("./objectAdomRevision").ObjectAdomRevision;
export const ObjectAdomRevision: typeof import("./objectAdomRevision").ObjectAdomRevision = null as any;
utilities.lazyLoad(exports, ["ObjectAdomRevision"], () => require("./objectAdomRevision"));

export { SystemAdminArgs, SystemAdminState } from "./systemAdmin";
export type SystemAdmin = import("./systemAdmin").SystemAdmin;
export const SystemAdmin: typeof import("./systemAdmin").SystemAdmin = null as any;
utilities.lazyLoad(exports, ["SystemAdmin"], () => require("./systemAdmin"));

export { SystemAdminProfilesArgs, SystemAdminProfilesState } from "./systemAdminProfiles";
export type SystemAdminProfiles = import("./systemAdminProfiles").SystemAdminProfiles;
export const SystemAdminProfiles: typeof import("./systemAdminProfiles").SystemAdminProfiles = null as any;
utilities.lazyLoad(exports, ["SystemAdminProfiles"], () => require("./systemAdminProfiles"));

export { SystemAdminUserArgs, SystemAdminUserState } from "./systemAdminUser";
export type SystemAdminUser = import("./systemAdminUser").SystemAdminUser;
export const SystemAdminUser: typeof import("./systemAdminUser").SystemAdminUser = null as any;
utilities.lazyLoad(exports, ["SystemAdminUser"], () => require("./systemAdminUser"));

export { SystemAdomArgs, SystemAdomState } from "./systemAdom";
export type SystemAdom = import("./systemAdom").SystemAdom;
export const SystemAdom: typeof import("./systemAdom").SystemAdom = null as any;
utilities.lazyLoad(exports, ["SystemAdom"], () => require("./systemAdom"));

export { SystemDnsArgs, SystemDnsState } from "./systemDns";
export type SystemDns = import("./systemDns").SystemDns;
export const SystemDns: typeof import("./systemDns").SystemDns = null as any;
utilities.lazyLoad(exports, ["SystemDns"], () => require("./systemDns"));

export { SystemGlobalArgs, SystemGlobalState } from "./systemGlobal";
export type SystemGlobal = import("./systemGlobal").SystemGlobal;
export const SystemGlobal: typeof import("./systemGlobal").SystemGlobal = null as any;
utilities.lazyLoad(exports, ["SystemGlobal"], () => require("./systemGlobal"));

export { SystemLicenseForticareArgs, SystemLicenseForticareState } from "./systemLicenseForticare";
export type SystemLicenseForticare = import("./systemLicenseForticare").SystemLicenseForticare;
export const SystemLicenseForticare: typeof import("./systemLicenseForticare").SystemLicenseForticare = null as any;
utilities.lazyLoad(exports, ["SystemLicenseForticare"], () => require("./systemLicenseForticare"));

export { SystemLicenseVmArgs, SystemLicenseVmState } from "./systemLicenseVm";
export type SystemLicenseVm = import("./systemLicenseVm").SystemLicenseVm;
export const SystemLicenseVm: typeof import("./systemLicenseVm").SystemLicenseVm = null as any;
utilities.lazyLoad(exports, ["SystemLicenseVm"], () => require("./systemLicenseVm"));

export { SystemNetworkInterfaceArgs, SystemNetworkInterfaceState } from "./systemNetworkInterface";
export type SystemNetworkInterface = import("./systemNetworkInterface").SystemNetworkInterface;
export const SystemNetworkInterface: typeof import("./systemNetworkInterface").SystemNetworkInterface = null as any;
utilities.lazyLoad(exports, ["SystemNetworkInterface"], () => require("./systemNetworkInterface"));

export { SystemNetworkRouteArgs, SystemNetworkRouteState } from "./systemNetworkRoute";
export type SystemNetworkRoute = import("./systemNetworkRoute").SystemNetworkRoute;
export const SystemNetworkRoute: typeof import("./systemNetworkRoute").SystemNetworkRoute = null as any;
utilities.lazyLoad(exports, ["SystemNetworkRoute"], () => require("./systemNetworkRoute"));

export { SystemNtpArgs, SystemNtpState } from "./systemNtp";
export type SystemNtp = import("./systemNtp").SystemNtp;
export const SystemNtp: typeof import("./systemNtp").SystemNtp = null as any;
utilities.lazyLoad(exports, ["SystemNtp"], () => require("./systemNtp"));

export { SystemSyslogserverArgs, SystemSyslogserverState } from "./systemSyslogserver";
export type SystemSyslogserver = import("./systemSyslogserver").SystemSyslogserver;
export const SystemSyslogserver: typeof import("./systemSyslogserver").SystemSyslogserver = null as any;
utilities.lazyLoad(exports, ["SystemSyslogserver"], () => require("./systemSyslogserver"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fortios:fmg/devicemanagerDevice:DevicemanagerDevice":
                return new DevicemanagerDevice(name, <any>undefined, { urn })
            case "fortios:fmg/devicemanagerInstallDevice:DevicemanagerInstallDevice":
                return new DevicemanagerInstallDevice(name, <any>undefined, { urn })
            case "fortios:fmg/devicemanagerInstallPolicypackage:DevicemanagerInstallPolicypackage":
                return new DevicemanagerInstallPolicypackage(name, <any>undefined, { urn })
            case "fortios:fmg/devicemanagerScript:DevicemanagerScript":
                return new DevicemanagerScript(name, <any>undefined, { urn })
            case "fortios:fmg/devicemanagerScriptExecute:DevicemanagerScriptExecute":
                return new DevicemanagerScriptExecute(name, <any>undefined, { urn })
            case "fortios:fmg/firewallObjectAddress:FirewallObjectAddress":
                return new FirewallObjectAddress(name, <any>undefined, { urn })
            case "fortios:fmg/firewallObjectIppool:FirewallObjectIppool":
                return new FirewallObjectIppool(name, <any>undefined, { urn })
            case "fortios:fmg/firewallObjectService:FirewallObjectService":
                return new FirewallObjectService(name, <any>undefined, { urn })
            case "fortios:fmg/firewallObjectVip:FirewallObjectVip":
                return new FirewallObjectVip(name, <any>undefined, { urn })
            case "fortios:fmg/firewallSecurityPolicy:FirewallSecurityPolicy":
                return new FirewallSecurityPolicy(name, <any>undefined, { urn })
            case "fortios:fmg/firewallSecurityPolicypackage:FirewallSecurityPolicypackage":
                return new FirewallSecurityPolicypackage(name, <any>undefined, { urn })
            case "fortios:fmg/jsonrpcRequest:JsonrpcRequest":
                return new JsonrpcRequest(name, <any>undefined, { urn })
            case "fortios:fmg/objectAdomRevision:ObjectAdomRevision":
                return new ObjectAdomRevision(name, <any>undefined, { urn })
            case "fortios:fmg/systemAdmin:SystemAdmin":
                return new SystemAdmin(name, <any>undefined, { urn })
            case "fortios:fmg/systemAdminProfiles:SystemAdminProfiles":
                return new SystemAdminProfiles(name, <any>undefined, { urn })
            case "fortios:fmg/systemAdminUser:SystemAdminUser":
                return new SystemAdminUser(name, <any>undefined, { urn })
            case "fortios:fmg/systemAdom:SystemAdom":
                return new SystemAdom(name, <any>undefined, { urn })
            case "fortios:fmg/systemDns:SystemDns":
                return new SystemDns(name, <any>undefined, { urn })
            case "fortios:fmg/systemGlobal:SystemGlobal":
                return new SystemGlobal(name, <any>undefined, { urn })
            case "fortios:fmg/systemLicenseForticare:SystemLicenseForticare":
                return new SystemLicenseForticare(name, <any>undefined, { urn })
            case "fortios:fmg/systemLicenseVm:SystemLicenseVm":
                return new SystemLicenseVm(name, <any>undefined, { urn })
            case "fortios:fmg/systemNetworkInterface:SystemNetworkInterface":
                return new SystemNetworkInterface(name, <any>undefined, { urn })
            case "fortios:fmg/systemNetworkRoute:SystemNetworkRoute":
                return new SystemNetworkRoute(name, <any>undefined, { urn })
            case "fortios:fmg/systemNtp:SystemNtp":
                return new SystemNtp(name, <any>undefined, { urn })
            case "fortios:fmg/systemSyslogserver:SystemSyslogserver":
                return new SystemSyslogserver(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fortios", "fmg/devicemanagerDevice", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/devicemanagerInstallDevice", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/devicemanagerInstallPolicypackage", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/devicemanagerScript", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/devicemanagerScriptExecute", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/firewallObjectAddress", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/firewallObjectIppool", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/firewallObjectService", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/firewallObjectVip", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/firewallSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/firewallSecurityPolicypackage", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/jsonrpcRequest", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/objectAdomRevision", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/systemAdmin", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/systemAdminProfiles", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/systemAdminUser", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/systemAdom", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/systemDns", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/systemGlobal", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/systemLicenseForticare", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/systemLicenseVm", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/systemNetworkInterface", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/systemNetworkRoute", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/systemNtp", _module)
pulumi.runtime.registerResourceModule("fortios", "fmg/systemSyslogserver", _module)

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ChartArgs, ChartState } from "./chart";
export type Chart = import("./chart").Chart;
export const Chart: typeof import("./chart").Chart = null as any;
utilities.lazyLoad(exports, ["Chart"], () => require("./chart"));

export { DatasetArgs, DatasetState } from "./dataset";
export type Dataset = import("./dataset").Dataset;
export const Dataset: typeof import("./dataset").Dataset = null as any;
utilities.lazyLoad(exports, ["Dataset"], () => require("./dataset"));

export { LayoutArgs, LayoutState } from "./layout";
export type Layout = import("./layout").Layout;
export const Layout: typeof import("./layout").Layout = null as any;
utilities.lazyLoad(exports, ["Layout"], () => require("./layout"));

export { SettingArgs, SettingState } from "./setting";
export type Setting = import("./setting").Setting;
export const Setting: typeof import("./setting").Setting = null as any;
utilities.lazyLoad(exports, ["Setting"], () => require("./setting"));

export { StyleArgs, StyleState } from "./style";
export type Style = import("./style").Style;
export const Style: typeof import("./style").Style = null as any;
utilities.lazyLoad(exports, ["Style"], () => require("./style"));

export { ThemeArgs, ThemeState } from "./theme";
export type Theme = import("./theme").Theme;
export const Theme: typeof import("./theme").Theme = null as any;
utilities.lazyLoad(exports, ["Theme"], () => require("./theme"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fortios:report/chart:Chart":
                return new Chart(name, <any>undefined, { urn })
            case "fortios:report/dataset:Dataset":
                return new Dataset(name, <any>undefined, { urn })
            case "fortios:report/layout:Layout":
                return new Layout(name, <any>undefined, { urn })
            case "fortios:report/setting:Setting":
                return new Setting(name, <any>undefined, { urn })
            case "fortios:report/style:Style":
                return new Style(name, <any>undefined, { urn })
            case "fortios:report/theme:Theme":
                return new Theme(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fortios", "report/chart", _module)
pulumi.runtime.registerResourceModule("fortios", "report/dataset", _module)
pulumi.runtime.registerResourceModule("fortios", "report/layout", _module)
pulumi.runtime.registerResourceModule("fortios", "report/setting", _module)
pulumi.runtime.registerResourceModule("fortios", "report/style", _module)
pulumi.runtime.registerResourceModule("fortios", "report/theme", _module)

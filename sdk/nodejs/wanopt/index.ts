// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AuthgroupArgs, AuthgroupState } from "./authgroup";
export type Authgroup = import("./authgroup").Authgroup;
export const Authgroup: typeof import("./authgroup").Authgroup = null as any;
utilities.lazyLoad(exports, ["Authgroup"], () => require("./authgroup"));

export { CacheserviceArgs, CacheserviceState } from "./cacheservice";
export type Cacheservice = import("./cacheservice").Cacheservice;
export const Cacheservice: typeof import("./cacheservice").Cacheservice = null as any;
utilities.lazyLoad(exports, ["Cacheservice"], () => require("./cacheservice"));

export { ContentdeliverynetworkruleArgs, ContentdeliverynetworkruleState } from "./contentdeliverynetworkrule";
export type Contentdeliverynetworkrule = import("./contentdeliverynetworkrule").Contentdeliverynetworkrule;
export const Contentdeliverynetworkrule: typeof import("./contentdeliverynetworkrule").Contentdeliverynetworkrule = null as any;
utilities.lazyLoad(exports, ["Contentdeliverynetworkrule"], () => require("./contentdeliverynetworkrule"));

export { PeerArgs, PeerState } from "./peer";
export type Peer = import("./peer").Peer;
export const Peer: typeof import("./peer").Peer = null as any;
utilities.lazyLoad(exports, ["Peer"], () => require("./peer"));

export { ProfileArgs, ProfileState } from "./profile";
export type Profile = import("./profile").Profile;
export const Profile: typeof import("./profile").Profile = null as any;
utilities.lazyLoad(exports, ["Profile"], () => require("./profile"));

export { RemotestorageArgs, RemotestorageState } from "./remotestorage";
export type Remotestorage = import("./remotestorage").Remotestorage;
export const Remotestorage: typeof import("./remotestorage").Remotestorage = null as any;
utilities.lazyLoad(exports, ["Remotestorage"], () => require("./remotestorage"));

export { SettingsArgs, SettingsState } from "./settings";
export type Settings = import("./settings").Settings;
export const Settings: typeof import("./settings").Settings = null as any;
utilities.lazyLoad(exports, ["Settings"], () => require("./settings"));

export { WebcacheArgs, WebcacheState } from "./webcache";
export type Webcache = import("./webcache").Webcache;
export const Webcache: typeof import("./webcache").Webcache = null as any;
utilities.lazyLoad(exports, ["Webcache"], () => require("./webcache"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fortios:wanopt/authgroup:Authgroup":
                return new Authgroup(name, <any>undefined, { urn })
            case "fortios:wanopt/cacheservice:Cacheservice":
                return new Cacheservice(name, <any>undefined, { urn })
            case "fortios:wanopt/contentdeliverynetworkrule:Contentdeliverynetworkrule":
                return new Contentdeliverynetworkrule(name, <any>undefined, { urn })
            case "fortios:wanopt/peer:Peer":
                return new Peer(name, <any>undefined, { urn })
            case "fortios:wanopt/profile:Profile":
                return new Profile(name, <any>undefined, { urn })
            case "fortios:wanopt/remotestorage:Remotestorage":
                return new Remotestorage(name, <any>undefined, { urn })
            case "fortios:wanopt/settings:Settings":
                return new Settings(name, <any>undefined, { urn })
            case "fortios:wanopt/webcache:Webcache":
                return new Webcache(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fortios", "wanopt/authgroup", _module)
pulumi.runtime.registerResourceModule("fortios", "wanopt/cacheservice", _module)
pulumi.runtime.registerResourceModule("fortios", "wanopt/contentdeliverynetworkrule", _module)
pulumi.runtime.registerResourceModule("fortios", "wanopt/peer", _module)
pulumi.runtime.registerResourceModule("fortios", "wanopt/profile", _module)
pulumi.runtime.registerResourceModule("fortios", "wanopt/remotestorage", _module)
pulumi.runtime.registerResourceModule("fortios", "wanopt/settings", _module)
pulumi.runtime.registerResourceModule("fortios", "wanopt/webcache", _module)

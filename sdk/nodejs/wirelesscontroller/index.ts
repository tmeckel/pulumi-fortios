// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccesscontrollistArgs, AccesscontrollistState } from "./accesscontrollist";
export type Accesscontrollist = import("./accesscontrollist").Accesscontrollist;
export const Accesscontrollist: typeof import("./accesscontrollist").Accesscontrollist = null as any;
utilities.lazyLoad(exports, ["Accesscontrollist"], () => require("./accesscontrollist"));

export { AddressArgs, AddressState } from "./address";
export type Address = import("./address").Address;
export const Address: typeof import("./address").Address = null as any;
utilities.lazyLoad(exports, ["Address"], () => require("./address"));

export { AddrgrpArgs, AddrgrpState } from "./addrgrp";
export type Addrgrp = import("./addrgrp").Addrgrp;
export const Addrgrp: typeof import("./addrgrp").Addrgrp = null as any;
utilities.lazyLoad(exports, ["Addrgrp"], () => require("./addrgrp"));

export { ApcfgprofileArgs, ApcfgprofileState } from "./apcfgprofile";
export type Apcfgprofile = import("./apcfgprofile").Apcfgprofile;
export const Apcfgprofile: typeof import("./apcfgprofile").Apcfgprofile = null as any;
utilities.lazyLoad(exports, ["Apcfgprofile"], () => require("./apcfgprofile"));

export { ApstatusArgs, ApstatusState } from "./apstatus";
export type Apstatus = import("./apstatus").Apstatus;
export const Apstatus: typeof import("./apstatus").Apstatus = null as any;
utilities.lazyLoad(exports, ["Apstatus"], () => require("./apstatus"));

export { ArrpprofileArgs, ArrpprofileState } from "./arrpprofile";
export type Arrpprofile = import("./arrpprofile").Arrpprofile;
export const Arrpprofile: typeof import("./arrpprofile").Arrpprofile = null as any;
utilities.lazyLoad(exports, ["Arrpprofile"], () => require("./arrpprofile"));

export { BleprofileArgs, BleprofileState } from "./bleprofile";
export type Bleprofile = import("./bleprofile").Bleprofile;
export const Bleprofile: typeof import("./bleprofile").Bleprofile = null as any;
utilities.lazyLoad(exports, ["Bleprofile"], () => require("./bleprofile"));

export { BonjourprofileArgs, BonjourprofileState } from "./bonjourprofile";
export type Bonjourprofile = import("./bonjourprofile").Bonjourprofile;
export const Bonjourprofile: typeof import("./bonjourprofile").Bonjourprofile = null as any;
utilities.lazyLoad(exports, ["Bonjourprofile"], () => require("./bonjourprofile"));

export { GlobalArgs, GlobalState } from "./global";
export type Global = import("./global").Global;
export const Global: typeof import("./global").Global = null as any;
utilities.lazyLoad(exports, ["Global"], () => require("./global"));

export { IntercontrollerArgs, IntercontrollerState } from "./intercontroller";
export type Intercontroller = import("./intercontroller").Intercontroller;
export const Intercontroller: typeof import("./intercontroller").Intercontroller = null as any;
utilities.lazyLoad(exports, ["Intercontroller"], () => require("./intercontroller"));

export { LogArgs, LogState } from "./log";
export type Log = import("./log").Log;
export const Log: typeof import("./log").Log = null as any;
utilities.lazyLoad(exports, ["Log"], () => require("./log"));

export { MpskprofileArgs, MpskprofileState } from "./mpskprofile";
export type Mpskprofile = import("./mpskprofile").Mpskprofile;
export const Mpskprofile: typeof import("./mpskprofile").Mpskprofile = null as any;
utilities.lazyLoad(exports, ["Mpskprofile"], () => require("./mpskprofile"));

export { NacprofileArgs, NacprofileState } from "./nacprofile";
export type Nacprofile = import("./nacprofile").Nacprofile;
export const Nacprofile: typeof import("./nacprofile").Nacprofile = null as any;
utilities.lazyLoad(exports, ["Nacprofile"], () => require("./nacprofile"));

export { QosprofileArgs, QosprofileState } from "./qosprofile";
export type Qosprofile = import("./qosprofile").Qosprofile;
export const Qosprofile: typeof import("./qosprofile").Qosprofile = null as any;
utilities.lazyLoad(exports, ["Qosprofile"], () => require("./qosprofile"));

export { RegionArgs, RegionState } from "./region";
export type Region = import("./region").Region;
export const Region: typeof import("./region").Region = null as any;
utilities.lazyLoad(exports, ["Region"], () => require("./region"));

export { SettingArgs, SettingState } from "./setting";
export type Setting = import("./setting").Setting;
export const Setting: typeof import("./setting").Setting = null as any;
utilities.lazyLoad(exports, ["Setting"], () => require("./setting"));

export { SnmpArgs, SnmpState } from "./snmp";
export type Snmp = import("./snmp").Snmp;
export const Snmp: typeof import("./snmp").Snmp = null as any;
utilities.lazyLoad(exports, ["Snmp"], () => require("./snmp"));

export { SsidpolicyArgs, SsidpolicyState } from "./ssidpolicy";
export type Ssidpolicy = import("./ssidpolicy").Ssidpolicy;
export const Ssidpolicy: typeof import("./ssidpolicy").Ssidpolicy = null as any;
utilities.lazyLoad(exports, ["Ssidpolicy"], () => require("./ssidpolicy"));

export { SyslogprofileArgs, SyslogprofileState } from "./syslogprofile";
export type Syslogprofile = import("./syslogprofile").Syslogprofile;
export const Syslogprofile: typeof import("./syslogprofile").Syslogprofile = null as any;
utilities.lazyLoad(exports, ["Syslogprofile"], () => require("./syslogprofile"));

export { TimersArgs, TimersState } from "./timers";
export type Timers = import("./timers").Timers;
export const Timers: typeof import("./timers").Timers = null as any;
utilities.lazyLoad(exports, ["Timers"], () => require("./timers"));

export { UtmprofileArgs, UtmprofileState } from "./utmprofile";
export type Utmprofile = import("./utmprofile").Utmprofile;
export const Utmprofile: typeof import("./utmprofile").Utmprofile = null as any;
utilities.lazyLoad(exports, ["Utmprofile"], () => require("./utmprofile"));

export { VapArgs, VapState } from "./vap";
export type Vap = import("./vap").Vap;
export const Vap: typeof import("./vap").Vap = null as any;
utilities.lazyLoad(exports, ["Vap"], () => require("./vap"));

export { VapgroupArgs, VapgroupState } from "./vapgroup";
export type Vapgroup = import("./vapgroup").Vapgroup;
export const Vapgroup: typeof import("./vapgroup").Vapgroup = null as any;
utilities.lazyLoad(exports, ["Vapgroup"], () => require("./vapgroup"));

export { WagprofileArgs, WagprofileState } from "./wagprofile";
export type Wagprofile = import("./wagprofile").Wagprofile;
export const Wagprofile: typeof import("./wagprofile").Wagprofile = null as any;
utilities.lazyLoad(exports, ["Wagprofile"], () => require("./wagprofile"));

export { WidsprofileArgs, WidsprofileState } from "./widsprofile";
export type Widsprofile = import("./widsprofile").Widsprofile;
export const Widsprofile: typeof import("./widsprofile").Widsprofile = null as any;
utilities.lazyLoad(exports, ["Widsprofile"], () => require("./widsprofile"));

export { WtpArgs, WtpState } from "./wtp";
export type Wtp = import("./wtp").Wtp;
export const Wtp: typeof import("./wtp").Wtp = null as any;
utilities.lazyLoad(exports, ["Wtp"], () => require("./wtp"));

export { WtpgroupArgs, WtpgroupState } from "./wtpgroup";
export type Wtpgroup = import("./wtpgroup").Wtpgroup;
export const Wtpgroup: typeof import("./wtpgroup").Wtpgroup = null as any;
utilities.lazyLoad(exports, ["Wtpgroup"], () => require("./wtpgroup"));

export { WtpprofileArgs, WtpprofileState } from "./wtpprofile";
export type Wtpprofile = import("./wtpprofile").Wtpprofile;
export const Wtpprofile: typeof import("./wtpprofile").Wtpprofile = null as any;
utilities.lazyLoad(exports, ["Wtpprofile"], () => require("./wtpprofile"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fortios:wirelesscontroller/accesscontrollist:Accesscontrollist":
                return new Accesscontrollist(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/address:Address":
                return new Address(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/addrgrp:Addrgrp":
                return new Addrgrp(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/apcfgprofile:Apcfgprofile":
                return new Apcfgprofile(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/apstatus:Apstatus":
                return new Apstatus(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/arrpprofile:Arrpprofile":
                return new Arrpprofile(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/bleprofile:Bleprofile":
                return new Bleprofile(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/bonjourprofile:Bonjourprofile":
                return new Bonjourprofile(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/global:Global":
                return new Global(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/intercontroller:Intercontroller":
                return new Intercontroller(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/log:Log":
                return new Log(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/mpskprofile:Mpskprofile":
                return new Mpskprofile(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/nacprofile:Nacprofile":
                return new Nacprofile(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/qosprofile:Qosprofile":
                return new Qosprofile(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/region:Region":
                return new Region(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/setting:Setting":
                return new Setting(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/snmp:Snmp":
                return new Snmp(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/ssidpolicy:Ssidpolicy":
                return new Ssidpolicy(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/syslogprofile:Syslogprofile":
                return new Syslogprofile(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/timers:Timers":
                return new Timers(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/utmprofile:Utmprofile":
                return new Utmprofile(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/vap:Vap":
                return new Vap(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/vapgroup:Vapgroup":
                return new Vapgroup(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/wagprofile:Wagprofile":
                return new Wagprofile(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/widsprofile:Widsprofile":
                return new Widsprofile(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/wtp:Wtp":
                return new Wtp(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/wtpgroup:Wtpgroup":
                return new Wtpgroup(name, <any>undefined, { urn })
            case "fortios:wirelesscontroller/wtpprofile:Wtpprofile":
                return new Wtpprofile(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/accesscontrollist", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/address", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/addrgrp", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/apcfgprofile", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/apstatus", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/arrpprofile", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/bleprofile", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/bonjourprofile", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/global", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/intercontroller", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/log", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/mpskprofile", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/nacprofile", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/qosprofile", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/region", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/setting", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/snmp", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/ssidpolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/syslogprofile", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/timers", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/utmprofile", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/vap", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/vapgroup", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/wagprofile", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/widsprofile", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/wtp", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/wtpgroup", _module)
pulumi.runtime.registerResourceModule("fortios", "wirelesscontroller/wtpprofile", _module)

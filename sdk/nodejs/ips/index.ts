// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CustomArgs, CustomState } from "./custom";
export type Custom = import("./custom").Custom;
export const Custom: typeof import("./custom").Custom = null as any;
utilities.lazyLoad(exports, ["Custom"], () => require("./custom"));

export { DecoderArgs, DecoderState } from "./decoder";
export type Decoder = import("./decoder").Decoder;
export const Decoder: typeof import("./decoder").Decoder = null as any;
utilities.lazyLoad(exports, ["Decoder"], () => require("./decoder"));

export { GlobalArgs, GlobalState } from "./global";
export type Global = import("./global").Global;
export const Global: typeof import("./global").Global = null as any;
utilities.lazyLoad(exports, ["Global"], () => require("./global"));

export { RuleArgs, RuleState } from "./rule";
export type Rule = import("./rule").Rule;
export const Rule: typeof import("./rule").Rule = null as any;
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));

export { RulesettingsArgs, RulesettingsState } from "./rulesettings";
export type Rulesettings = import("./rulesettings").Rulesettings;
export const Rulesettings: typeof import("./rulesettings").Rulesettings = null as any;
utilities.lazyLoad(exports, ["Rulesettings"], () => require("./rulesettings"));

export { SensorArgs, SensorState } from "./sensor";
export type Sensor = import("./sensor").Sensor;
export const Sensor: typeof import("./sensor").Sensor = null as any;
utilities.lazyLoad(exports, ["Sensor"], () => require("./sensor"));

export { SettingsArgs, SettingsState } from "./settings";
export type Settings = import("./settings").Settings;
export const Settings: typeof import("./settings").Settings = null as any;
utilities.lazyLoad(exports, ["Settings"], () => require("./settings"));

export { ViewmapArgs, ViewmapState } from "./viewmap";
export type Viewmap = import("./viewmap").Viewmap;
export const Viewmap: typeof import("./viewmap").Viewmap = null as any;
utilities.lazyLoad(exports, ["Viewmap"], () => require("./viewmap"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fortios:ips/custom:Custom":
                return new Custom(name, <any>undefined, { urn })
            case "fortios:ips/decoder:Decoder":
                return new Decoder(name, <any>undefined, { urn })
            case "fortios:ips/global:Global":
                return new Global(name, <any>undefined, { urn })
            case "fortios:ips/rule:Rule":
                return new Rule(name, <any>undefined, { urn })
            case "fortios:ips/rulesettings:Rulesettings":
                return new Rulesettings(name, <any>undefined, { urn })
            case "fortios:ips/sensor:Sensor":
                return new Sensor(name, <any>undefined, { urn })
            case "fortios:ips/settings:Settings":
                return new Settings(name, <any>undefined, { urn })
            case "fortios:ips/viewmap:Viewmap":
                return new Viewmap(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fortios", "ips/custom", _module)
pulumi.runtime.registerResourceModule("fortios", "ips/decoder", _module)
pulumi.runtime.registerResourceModule("fortios", "ips/global", _module)
pulumi.runtime.registerResourceModule("fortios", "ips/rule", _module)
pulumi.runtime.registerResourceModule("fortios", "ips/rulesettings", _module)
pulumi.runtime.registerResourceModule("fortios", "ips/sensor", _module)
pulumi.runtime.registerResourceModule("fortios", "ips/settings", _module)
pulumi.runtime.registerResourceModule("fortios", "ips/viewmap", _module)

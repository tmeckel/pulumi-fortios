// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Systemdhcp.Outputs
{

    [OutputType]
    public sealed class ServerReservedAddress
    {
        /// <summary>
        /// Options for the DHCP server to configure the client with the reserved MAC address. Valid values: `assign`, `block`, `reserved`.
        /// </summary>
        public readonly string? Action;
        /// <summary>
        /// Option 82 circuit-ID of the client that will get the reserved IP address.
        /// </summary>
        public readonly string? CircuitId;
        /// <summary>
        /// DHCP option type. Valid values: `hex`, `string`.
        /// </summary>
        public readonly string? CircuitIdType;
        /// <summary>
        /// Description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// ID.
        /// </summary>
        public readonly int? Id;
        /// <summary>
        /// IP address to be reserved for the MAC address.
        /// </summary>
        public readonly string? Ip;
        /// <summary>
        /// MAC address of the client that will get the reserved IP address.
        /// </summary>
        public readonly string? Mac;
        /// <summary>
        /// Option 82 remote-ID of the client that will get the reserved IP address.
        /// </summary>
        public readonly string? RemoteId;
        /// <summary>
        /// DHCP option type. Valid values: `hex`, `string`.
        /// </summary>
        public readonly string? RemoteIdType;
        /// <summary>
        /// DHCP reserved-address type. Valid values: `mac`, `option82`.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private ServerReservedAddress(
            string? action,

            string? circuitId,

            string? circuitIdType,

            string? description,

            int? id,

            string? ip,

            string? mac,

            string? remoteId,

            string? remoteIdType,

            string? type)
        {
            Action = action;
            CircuitId = circuitId;
            CircuitIdType = circuitIdType;
            Description = description;
            Id = id;
            Ip = ip;
            Mac = mac;
            RemoteId = remoteId;
            RemoteIdType = remoteIdType;
            Type = type;
        }
    }
}

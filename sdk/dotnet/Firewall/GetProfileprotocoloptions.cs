// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Firewall
{
    public static class GetProfileprotocoloptions
    {
        /// <summary>
        /// Use this data source to get information on an fortios firewall profileprotocoloptions
        /// </summary>
        public static Task<GetProfileprotocoloptionsResult> InvokeAsync(GetProfileprotocoloptionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProfileprotocoloptionsResult>("fortios:firewall/getProfileprotocoloptions:getProfileprotocoloptions", args ?? new GetProfileprotocoloptionsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information on an fortios firewall profileprotocoloptions
        /// </summary>
        public static Output<GetProfileprotocoloptionsResult> Invoke(GetProfileprotocoloptionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProfileprotocoloptionsResult>("fortios:firewall/getProfileprotocoloptions:getProfileprotocoloptions", args ?? new GetProfileprotocoloptionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProfileprotocoloptionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the name of the desired firewall profileprotocoloptions.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public string? Vdomparam { get; set; }

        public GetProfileprotocoloptionsArgs()
        {
        }
        public static new GetProfileprotocoloptionsArgs Empty => new GetProfileprotocoloptionsArgs();
    }

    public sealed class GetProfileprotocoloptionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the name of the desired firewall profileprotocoloptions.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public GetProfileprotocoloptionsInvokeArgs()
        {
        }
        public static new GetProfileprotocoloptionsInvokeArgs Empty => new GetProfileprotocoloptionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetProfileprotocoloptionsResult
    {
        /// <summary>
        /// Configure CIFS protocol options. The structure of `cifs` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProfileprotocoloptionsCifResult> Cifs;
        /// <summary>
        /// Optional comments.
        /// </summary>
        public readonly string Comment;
        /// <summary>
        /// Configure DNS protocol options. The structure of `dns` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProfileprotocoloptionsDnResult> Dns;
        /// <summary>
        /// Flow/proxy feature set.
        /// </summary>
        public readonly string FeatureSet;
        /// <summary>
        /// Configure FTP protocol options. The structure of `ftp` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProfileprotocoloptionsFtpResult> Ftps;
        /// <summary>
        /// Configure HTTP protocol options. The structure of `http` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProfileprotocoloptionsHttpResult> Https;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Configure IMAP protocol options. The structure of `imap` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProfileprotocoloptionsImapResult> Imaps;
        /// <summary>
        /// Configure Mail signature. The structure of `mail_signature` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProfileprotocoloptionsMailSignatureResult> MailSignatures;
        /// <summary>
        /// Configure MAPI protocol options. The structure of `mapi` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProfileprotocoloptionsMapiResult> Mapis;
        /// <summary>
        /// Name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Configure NNTP protocol options. The structure of `nntp` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProfileprotocoloptionsNntpResult> Nntps;
        /// <summary>
        /// Enable/disable logging for antivirus oversize file blocking.
        /// </summary>
        public readonly string OversizeLog;
        /// <summary>
        /// Configure POP3 protocol options. The structure of `pop3` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProfileprotocoloptionsPop3Result> Pop3s;
        /// <summary>
        /// Name of the replacement message group to be used
        /// </summary>
        public readonly string ReplacemsgGroup;
        /// <summary>
        /// Enable/disable inspection of RPC over HTTP.
        /// </summary>
        public readonly string RpcOverHttp;
        /// <summary>
        /// Configure SMTP protocol options. The structure of `smtp` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProfileprotocoloptionsSmtpResult> Smtps;
        /// <summary>
        /// Configure SFTP and SCP protocol options. The structure of `ssh` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProfileprotocoloptionsSshResult> Sshes;
        /// <summary>
        /// Enable/disable logging for HTTP/HTTPS switching protocols.
        /// </summary>
        public readonly string SwitchingProtocolsLog;
        public readonly string? Vdomparam;

        [OutputConstructor]
        private GetProfileprotocoloptionsResult(
            ImmutableArray<Outputs.GetProfileprotocoloptionsCifResult> cifs,

            string comment,

            ImmutableArray<Outputs.GetProfileprotocoloptionsDnResult> dns,

            string featureSet,

            ImmutableArray<Outputs.GetProfileprotocoloptionsFtpResult> ftps,

            ImmutableArray<Outputs.GetProfileprotocoloptionsHttpResult> https,

            string id,

            ImmutableArray<Outputs.GetProfileprotocoloptionsImapResult> imaps,

            ImmutableArray<Outputs.GetProfileprotocoloptionsMailSignatureResult> mailSignatures,

            ImmutableArray<Outputs.GetProfileprotocoloptionsMapiResult> mapis,

            string name,

            ImmutableArray<Outputs.GetProfileprotocoloptionsNntpResult> nntps,

            string oversizeLog,

            ImmutableArray<Outputs.GetProfileprotocoloptionsPop3Result> pop3s,

            string replacemsgGroup,

            string rpcOverHttp,

            ImmutableArray<Outputs.GetProfileprotocoloptionsSmtpResult> smtps,

            ImmutableArray<Outputs.GetProfileprotocoloptionsSshResult> sshes,

            string switchingProtocolsLog,

            string? vdomparam)
        {
            Cifs = cifs;
            Comment = comment;
            Dns = dns;
            FeatureSet = featureSet;
            Ftps = ftps;
            Https = https;
            Id = id;
            Imaps = imaps;
            MailSignatures = mailSignatures;
            Mapis = mapis;
            Name = name;
            Nntps = nntps;
            OversizeLog = oversizeLog;
            Pop3s = pop3s;
            ReplacemsgGroup = replacemsgGroup;
            RpcOverHttp = rpcOverHttp;
            Smtps = smtps;
            Sshes = sshes;
            SwitchingProtocolsLog = switchingProtocolsLog;
            Vdomparam = vdomparam;
        }
    }
}

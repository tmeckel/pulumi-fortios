// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Firewall.Inputs
{

    public sealed class SslsshprofileSslServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Action based on client certificate request during the FTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        /// </summary>
        [Input("ftpsClientCertRequest")]
        public Input<string>? FtpsClientCertRequest { get; set; }

        /// <summary>
        /// Action based on received client certificate during the FTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        /// </summary>
        [Input("ftpsClientCertificate")]
        public Input<string>? FtpsClientCertificate { get; set; }

        /// <summary>
        /// Action based on client certificate request during the HTTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        /// </summary>
        [Input("httpsClientCertRequest")]
        public Input<string>? HttpsClientCertRequest { get; set; }

        /// <summary>
        /// Action based on received client certificate during the HTTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        /// </summary>
        [Input("httpsClientCertificate")]
        public Input<string>? HttpsClientCertificate { get; set; }

        /// <summary>
        /// SSL server ID.
        /// </summary>
        [Input("id")]
        public Input<int>? Id { get; set; }

        /// <summary>
        /// Action based on client certificate request during the IMAPS handshake. Valid values: `bypass`, `inspect`, `block`.
        /// </summary>
        [Input("imapsClientCertRequest")]
        public Input<string>? ImapsClientCertRequest { get; set; }

        /// <summary>
        /// Action based on received client certificate during the IMAPS handshake. Valid values: `bypass`, `inspect`, `block`.
        /// </summary>
        [Input("imapsClientCertificate")]
        public Input<string>? ImapsClientCertificate { get; set; }

        /// <summary>
        /// IPv4 address of the SSL server.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// Action based on client certificate request during the POP3S handshake. Valid values: `bypass`, `inspect`, `block`.
        /// </summary>
        [Input("pop3sClientCertRequest")]
        public Input<string>? Pop3sClientCertRequest { get; set; }

        /// <summary>
        /// Action based on received client certificate during the POP3S handshake. Valid values: `bypass`, `inspect`, `block`.
        /// </summary>
        [Input("pop3sClientCertificate")]
        public Input<string>? Pop3sClientCertificate { get; set; }

        /// <summary>
        /// Action based on client certificate request during the SMTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        /// </summary>
        [Input("smtpsClientCertRequest")]
        public Input<string>? SmtpsClientCertRequest { get; set; }

        /// <summary>
        /// Action based on received client certificate during the SMTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        /// </summary>
        [Input("smtpsClientCertificate")]
        public Input<string>? SmtpsClientCertificate { get; set; }

        /// <summary>
        /// Action based on client certificate request during an SSL protocol handshake. Valid values: `bypass`, `inspect`, `block`.
        /// </summary>
        [Input("sslOtherClientCertRequest")]
        public Input<string>? SslOtherClientCertRequest { get; set; }

        /// <summary>
        /// Action based on received client certificate during an SSL protocol handshake. Valid values: `bypass`, `inspect`, `block`.
        /// </summary>
        [Input("sslOtherClientCertificate")]
        public Input<string>? SslOtherClientCertificate { get; set; }

        public SslsshprofileSslServerArgs()
        {
        }
        public static new SslsshprofileSslServerArgs Empty => new SslsshprofileSslServerArgs();
    }
}

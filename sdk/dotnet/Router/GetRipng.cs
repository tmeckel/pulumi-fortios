// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Router
{
    public static class GetRipng
    {
        /// <summary>
        /// Use this data source to get information on fortios router ripng
        /// </summary>
        public static Task<GetRipngResult> InvokeAsync(GetRipngArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRipngResult>("fortios:router/getRipng:getRipng", args ?? new GetRipngArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information on fortios router ripng
        /// </summary>
        public static Output<GetRipngResult> Invoke(GetRipngInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRipngResult>("fortios:router/getRipng:getRipng", args ?? new GetRipngInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRipngArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public string? Vdomparam { get; set; }

        public GetRipngArgs()
        {
        }
        public static new GetRipngArgs Empty => new GetRipngArgs();
    }

    public sealed class GetRipngInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public GetRipngInvokeArgs()
        {
        }
        public static new GetRipngInvokeArgs Empty => new GetRipngInvokeArgs();
    }


    [OutputType]
    public sealed class GetRipngResult
    {
        /// <summary>
        /// Aggregate address. The structure of `aggregate_address` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRipngAggregateAddressResult> AggregateAddresses;
        /// <summary>
        /// Enable/disable generation of default route.
        /// </summary>
        public readonly string DefaultInformationOriginate;
        /// <summary>
        /// Default metric.
        /// </summary>
        public readonly int DefaultMetric;
        /// <summary>
        /// Distance (1 - 255).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRipngDistanceResult> Distances;
        /// <summary>
        /// Distribute list. The structure of `distribute_list` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRipngDistributeListResult> DistributeLists;
        /// <summary>
        /// Garbage timer.
        /// </summary>
        public readonly int GarbageTimer;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Interface name.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRipngInterfaceResult> Interfaces;
        /// <summary>
        /// Maximum metric allowed to output(0 means 'not set').
        /// </summary>
        public readonly int MaxOutMetric;
        /// <summary>
        /// neighbor The structure of `neighbor` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRipngNeighborResult> Neighbors;
        /// <summary>
        /// Network. The structure of `network` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRipngNetworkResult> Networks;
        /// <summary>
        /// Offset list. The structure of `offset_list` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRipngOffsetListResult> OffsetLists;
        /// <summary>
        /// Passive interface configuration. The structure of `passive_interface` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRipngPassiveInterfaceResult> PassiveInterfaces;
        /// <summary>
        /// Redistribute configuration. The structure of `redistribute` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRipngRedistributeResult> Redistributes;
        /// <summary>
        /// Timeout timer.
        /// </summary>
        public readonly int TimeoutTimer;
        /// <summary>
        /// Update timer.
        /// </summary>
        public readonly int UpdateTimer;
        public readonly string? Vdomparam;

        [OutputConstructor]
        private GetRipngResult(
            ImmutableArray<Outputs.GetRipngAggregateAddressResult> aggregateAddresses,

            string defaultInformationOriginate,

            int defaultMetric,

            ImmutableArray<Outputs.GetRipngDistanceResult> distances,

            ImmutableArray<Outputs.GetRipngDistributeListResult> distributeLists,

            int garbageTimer,

            string id,

            ImmutableArray<Outputs.GetRipngInterfaceResult> interfaces,

            int maxOutMetric,

            ImmutableArray<Outputs.GetRipngNeighborResult> neighbors,

            ImmutableArray<Outputs.GetRipngNetworkResult> networks,

            ImmutableArray<Outputs.GetRipngOffsetListResult> offsetLists,

            ImmutableArray<Outputs.GetRipngPassiveInterfaceResult> passiveInterfaces,

            ImmutableArray<Outputs.GetRipngRedistributeResult> redistributes,

            int timeoutTimer,

            int updateTimer,

            string? vdomparam)
        {
            AggregateAddresses = aggregateAddresses;
            DefaultInformationOriginate = defaultInformationOriginate;
            DefaultMetric = defaultMetric;
            Distances = distances;
            DistributeLists = distributeLists;
            GarbageTimer = garbageTimer;
            Id = id;
            Interfaces = interfaces;
            MaxOutMetric = maxOutMetric;
            Neighbors = neighbors;
            Networks = networks;
            OffsetLists = offsetLists;
            PassiveInterfaces = passiveInterfaces;
            Redistributes = redistributes;
            TimeoutTimer = timeoutTimer;
            UpdateTimer = updateTimer;
            Vdomparam = vdomparam;
        }
    }
}

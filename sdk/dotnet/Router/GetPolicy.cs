// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Router
{
    public static class GetPolicy
    {
        /// <summary>
        /// Use this data source to get information on an fortios router policy
        /// </summary>
        public static Task<GetPolicyResult> InvokeAsync(GetPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPolicyResult>("fortios:router/getPolicy:getPolicy", args ?? new GetPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information on an fortios router policy
        /// </summary>
        public static Output<GetPolicyResult> Invoke(GetPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPolicyResult>("fortios:router/getPolicy:getPolicy", args ?? new GetPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the seq_num of the desired router policy.
        /// </summary>
        [Input("seqNum", required: true)]
        public int SeqNum { get; set; }

        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public string? Vdomparam { get; set; }

        public GetPolicyArgs()
        {
        }
        public static new GetPolicyArgs Empty => new GetPolicyArgs();
    }

    public sealed class GetPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the seq_num of the desired router policy.
        /// </summary>
        [Input("seqNum", required: true)]
        public Input<int> SeqNum { get; set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public GetPolicyInvokeArgs()
        {
        }
        public static new GetPolicyInvokeArgs Empty => new GetPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetPolicyResult
    {
        /// <summary>
        /// Action of the policy route.
        /// </summary>
        public readonly string Action;
        /// <summary>
        /// Optional comments.
        /// </summary>
        public readonly string Comments;
        /// <summary>
        /// Enable/disable negating destination address match.
        /// </summary>
        public readonly string DstNegate;
        /// <summary>
        /// Destination address name. The structure of `dstaddr` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPolicyDstaddrResult> Dstaddrs;
        /// <summary>
        /// Destination IP and mask (x.x.x.x/x). The structure of `dst` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPolicyDstResult> Dsts;
        /// <summary>
        /// End destination port number (0 - 65535).
        /// </summary>
        public readonly int EndPort;
        /// <summary>
        /// End source port number (0 - 65535).
        /// </summary>
        public readonly int EndSourcePort;
        /// <summary>
        /// IP address of the gateway.
        /// </summary>
        public readonly string Gateway;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Enable/disable negation of input device match.
        /// </summary>
        public readonly string InputDeviceNegate;
        /// <summary>
        /// Incoming interface name. The structure of `input_device` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPolicyInputDeviceResult> InputDevices;
        /// <summary>
        /// Custom Destination Internet Service name. The structure of `internet_service_custom` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPolicyInternetServiceCustomResult> InternetServiceCustoms;
        /// <summary>
        /// Destination Internet Service ID. The structure of `internet_service_id` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPolicyInternetServiceIdResult> InternetServiceIds;
        /// <summary>
        /// Outgoing interface name.
        /// </summary>
        public readonly string OutputDevice;
        /// <summary>
        /// Protocol number (0 - 255).
        /// </summary>
        public readonly int Protocol;
        /// <summary>
        /// Sequence number.
        /// </summary>
        public readonly int SeqNum;
        /// <summary>
        /// Enable/disable negating source address match.
        /// </summary>
        public readonly string SrcNegate;
        /// <summary>
        /// Source address name. The structure of `srcaddr` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPolicySrcaddrResult> Srcaddrs;
        /// <summary>
        /// Source IP and mask (x.x.x.x/x). The structure of `src` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPolicySrcResult> Srcs;
        /// <summary>
        /// Start destination port number (0 - 65535).
        /// </summary>
        public readonly int StartPort;
        /// <summary>
        /// Start source port number (0 - 65535).
        /// </summary>
        public readonly int StartSourcePort;
        /// <summary>
        /// Enable/disable this policy route.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Type of service bit pattern.
        /// </summary>
        public readonly string Tos;
        /// <summary>
        /// Type of service evaluated bits.
        /// </summary>
        public readonly string TosMask;
        public readonly string? Vdomparam;

        [OutputConstructor]
        private GetPolicyResult(
            string action,

            string comments,

            string dstNegate,

            ImmutableArray<Outputs.GetPolicyDstaddrResult> dstaddrs,

            ImmutableArray<Outputs.GetPolicyDstResult> dsts,

            int endPort,

            int endSourcePort,

            string gateway,

            string id,

            string inputDeviceNegate,

            ImmutableArray<Outputs.GetPolicyInputDeviceResult> inputDevices,

            ImmutableArray<Outputs.GetPolicyInternetServiceCustomResult> internetServiceCustoms,

            ImmutableArray<Outputs.GetPolicyInternetServiceIdResult> internetServiceIds,

            string outputDevice,

            int protocol,

            int seqNum,

            string srcNegate,

            ImmutableArray<Outputs.GetPolicySrcaddrResult> srcaddrs,

            ImmutableArray<Outputs.GetPolicySrcResult> srcs,

            int startPort,

            int startSourcePort,

            string status,

            string tos,

            string tosMask,

            string? vdomparam)
        {
            Action = action;
            Comments = comments;
            DstNegate = dstNegate;
            Dstaddrs = dstaddrs;
            Dsts = dsts;
            EndPort = endPort;
            EndSourcePort = endSourcePort;
            Gateway = gateway;
            Id = id;
            InputDeviceNegate = inputDeviceNegate;
            InputDevices = inputDevices;
            InternetServiceCustoms = internetServiceCustoms;
            InternetServiceIds = internetServiceIds;
            OutputDevice = outputDevice;
            Protocol = protocol;
            SeqNum = seqNum;
            SrcNegate = srcNegate;
            Srcaddrs = srcaddrs;
            Srcs = srcs;
            StartPort = startPort;
            StartSourcePort = startSourcePort;
            Status = status;
            Tos = tos;
            TosMask = tosMask;
            Vdomparam = vdomparam;
        }
    }
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Router.Inputs
{

    public sealed class RipInterfaceGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authentication key-chain name.
        /// </summary>
        [Input("authKeychain")]
        public Input<string>? AuthKeychain { get; set; }

        /// <summary>
        /// Authentication mode. Valid values: `none`, `text`, `md5`.
        /// </summary>
        [Input("authMode")]
        public Input<string>? AuthMode { get; set; }

        [Input("authString")]
        private Input<string>? _authString;

        /// <summary>
        /// Authentication string/password.
        /// </summary>
        public Input<string>? AuthString
        {
            get => _authString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _authString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// flags
        /// </summary>
        [Input("flags")]
        public Input<int>? Flags { get; set; }

        /// <summary>
        /// Interface name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Receive version. Valid values: `1`, `2`.
        /// </summary>
        [Input("receiveVersion")]
        public Input<string>? ReceiveVersion { get; set; }

        /// <summary>
        /// Send version. Valid values: `1`, `2`.
        /// </summary>
        [Input("sendVersion")]
        public Input<string>? SendVersion { get; set; }

        /// <summary>
        /// Enable/disable broadcast version 1 compatible packets. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("sendVersion2Broadcast")]
        public Input<string>? SendVersion2Broadcast { get; set; }

        /// <summary>
        /// Enable/disable split horizon. Valid values: `poisoned`, `regular`.
        /// </summary>
        [Input("splitHorizon")]
        public Input<string>? SplitHorizon { get; set; }

        /// <summary>
        /// Enable/disable split horizon. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("splitHorizonStatus")]
        public Input<string>? SplitHorizonStatus { get; set; }

        public RipInterfaceGetArgs()
        {
        }
        public static new RipInterfaceGetArgs Empty => new RipInterfaceGetArgs();
    }
}

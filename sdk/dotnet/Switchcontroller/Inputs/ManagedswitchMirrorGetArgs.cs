// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Switchcontroller.Inputs
{

    public sealed class ManagedswitchMirrorGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Destination port.
        /// </summary>
        [Input("dst")]
        public Input<string>? Dst { get; set; }

        /// <summary>
        /// Mirror name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("srcEgresses")]
        private InputList<Inputs.ManagedswitchMirrorSrcEgressGetArgs>? _srcEgresses;

        /// <summary>
        /// Source egress interfaces. The structure of `src_egress` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchMirrorSrcEgressGetArgs> SrcEgresses
        {
            get => _srcEgresses ?? (_srcEgresses = new InputList<Inputs.ManagedswitchMirrorSrcEgressGetArgs>());
            set => _srcEgresses = value;
        }

        [Input("srcIngresses")]
        private InputList<Inputs.ManagedswitchMirrorSrcIngressGetArgs>? _srcIngresses;

        /// <summary>
        /// Source ingress interfaces. The structure of `src_ingress` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchMirrorSrcIngressGetArgs> SrcIngresses
        {
            get => _srcIngresses ?? (_srcIngresses = new InputList<Inputs.ManagedswitchMirrorSrcIngressGetArgs>());
            set => _srcIngresses = value;
        }

        /// <summary>
        /// Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Enable/disable switching functionality when mirroring. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("switchingPacket")]
        public Input<string>? SwitchingPacket { get; set; }

        public ManagedswitchMirrorGetArgs()
        {
        }
        public static new ManagedswitchMirrorGetArgs Empty => new ManagedswitchMirrorGetArgs();
    }
}

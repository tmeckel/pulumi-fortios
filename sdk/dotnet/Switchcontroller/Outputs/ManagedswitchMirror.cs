// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Switchcontroller.Outputs
{

    [OutputType]
    public sealed class ManagedswitchMirror
    {
        /// <summary>
        /// Destination port.
        /// </summary>
        public readonly string? Dst;
        /// <summary>
        /// Mirror name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Source egress interfaces. The structure of `src_egress` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.ManagedswitchMirrorSrcEgress> SrcEgresses;
        /// <summary>
        /// Source ingress interfaces. The structure of `src_ingress` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.ManagedswitchMirrorSrcIngress> SrcIngresses;
        /// <summary>
        /// Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Enable/disable switching functionality when mirroring. Valid values: `enable`, `disable`.
        /// </summary>
        public readonly string? SwitchingPacket;

        [OutputConstructor]
        private ManagedswitchMirror(
            string? dst,

            string? name,

            ImmutableArray<Outputs.ManagedswitchMirrorSrcEgress> srcEgresses,

            ImmutableArray<Outputs.ManagedswitchMirrorSrcIngress> srcIngresses,

            string? status,

            string? switchingPacket)
        {
            Dst = dst;
            Name = name;
            SrcEgresses = srcEgresses;
            SrcIngresses = srcIngresses;
            Status = status;
            SwitchingPacket = switchingPacket;
        }
    }
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Systemlldp
{
    public static class GetNetworkpolicy
    {
        /// <summary>
        /// Use this data source to get information on an fortios systemlldp networkpolicy
        /// </summary>
        public static Task<GetNetworkpolicyResult> InvokeAsync(GetNetworkpolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkpolicyResult>("fortios:systemlldp/getNetworkpolicy:getNetworkpolicy", args ?? new GetNetworkpolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information on an fortios systemlldp networkpolicy
        /// </summary>
        public static Output<GetNetworkpolicyResult> Invoke(GetNetworkpolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkpolicyResult>("fortios:systemlldp/getNetworkpolicy:getNetworkpolicy", args ?? new GetNetworkpolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkpolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the name of the desired systemlldp networkpolicy.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public string? Vdomparam { get; set; }

        public GetNetworkpolicyArgs()
        {
        }
        public static new GetNetworkpolicyArgs Empty => new GetNetworkpolicyArgs();
    }

    public sealed class GetNetworkpolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the name of the desired systemlldp networkpolicy.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public GetNetworkpolicyInvokeArgs()
        {
        }
        public static new GetNetworkpolicyInvokeArgs Empty => new GetNetworkpolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkpolicyResult
    {
        /// <summary>
        /// Comment.
        /// </summary>
        public readonly string Comment;
        /// <summary>
        /// Guest Voice Signaling. The structure of `guest_voice_signaling` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkpolicyGuestVoiceSignalingResult> GuestVoiceSignalings;
        /// <summary>
        /// Guest. The structure of `guest` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkpolicyGuestResult> Guests;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// LLDP network policy name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Softphone. The structure of `softphone` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkpolicySoftphoneResult> Softphones;
        /// <summary>
        /// Streaming Video. The structure of `streaming_video` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkpolicyStreamingVideoResult> StreamingVideos;
        public readonly string? Vdomparam;
        /// <summary>
        /// Video Conferencing. The structure of `video_conferencing` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkpolicyVideoConferencingResult> VideoConferencings;
        /// <summary>
        /// Video Signaling. The structure of `video_signaling` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkpolicyVideoSignalingResult> VideoSignalings;
        /// <summary>
        /// Voice signaling. The structure of `voice_signaling` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkpolicyVoiceSignalingResult> VoiceSignalings;
        /// <summary>
        /// Voice. The structure of `voice` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkpolicyVoiceResult> Voices;

        [OutputConstructor]
        private GetNetworkpolicyResult(
            string comment,

            ImmutableArray<Outputs.GetNetworkpolicyGuestVoiceSignalingResult> guestVoiceSignalings,

            ImmutableArray<Outputs.GetNetworkpolicyGuestResult> guests,

            string id,

            string name,

            ImmutableArray<Outputs.GetNetworkpolicySoftphoneResult> softphones,

            ImmutableArray<Outputs.GetNetworkpolicyStreamingVideoResult> streamingVideos,

            string? vdomparam,

            ImmutableArray<Outputs.GetNetworkpolicyVideoConferencingResult> videoConferencings,

            ImmutableArray<Outputs.GetNetworkpolicyVideoSignalingResult> videoSignalings,

            ImmutableArray<Outputs.GetNetworkpolicyVoiceSignalingResult> voiceSignalings,

            ImmutableArray<Outputs.GetNetworkpolicyVoiceResult> voices)
        {
            Comment = comment;
            GuestVoiceSignalings = guestVoiceSignalings;
            Guests = guests;
            Id = id;
            Name = name;
            Softphones = softphones;
            StreamingVideos = streamingVideos;
            Vdomparam = vdomparam;
            VideoConferencings = videoConferencings;
            VideoSignalings = videoSignalings;
            VoiceSignalings = voiceSignalings;
            Voices = voices;
        }
    }
}

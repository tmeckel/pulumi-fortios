// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Sys.Inputs
{

    public sealed class StandaloneclusterClusterPeerArgs : global::Pulumi.ResourceArgs
    {
        [Input("downIntfsBeforeSessSyncs")]
        private InputList<Inputs.StandaloneclusterClusterPeerDownIntfsBeforeSessSyncArgs>? _downIntfsBeforeSessSyncs;

        /// <summary>
        /// List of interfaces to be turned down before session synchronization is complete. The structure of `down_intfs_before_sess_sync` block is documented below.
        /// </summary>
        public InputList<Inputs.StandaloneclusterClusterPeerDownIntfsBeforeSessSyncArgs> DownIntfsBeforeSessSyncs
        {
            get => _downIntfsBeforeSessSyncs ?? (_downIntfsBeforeSessSyncs = new InputList<Inputs.StandaloneclusterClusterPeerDownIntfsBeforeSessSyncArgs>());
            set => _downIntfsBeforeSessSyncs = value;
        }

        /// <summary>
        /// Heartbeat interval (1 - 20 (100*ms). Increase to reduce false positives.
        /// </summary>
        [Input("hbInterval")]
        public Input<int>? HbInterval { get; set; }

        /// <summary>
        /// Lost heartbeat threshold (1 - 60). Increase to reduce false positives.
        /// </summary>
        [Input("hbLostThreshold")]
        public Input<int>? HbLostThreshold { get; set; }

        /// <summary>
        /// Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("ipsecTunnelSync")]
        public Input<string>? IpsecTunnelSync { get; set; }

        /// <summary>
        /// IP address of the interface on the peer unit that is used for the session synchronization link.
        /// </summary>
        [Input("peerip")]
        public Input<string>? Peerip { get; set; }

        /// <summary>
        /// VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
        /// </summary>
        [Input("peervd")]
        public Input<string>? Peervd { get; set; }

        /// <summary>
        /// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("secondaryAddIpsecRoutes")]
        public Input<string>? SecondaryAddIpsecRoutes { get; set; }

        /// <summary>
        /// Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `session_sync_filter` block is documented below.
        /// </summary>
        [Input("sessionSyncFilter")]
        public Input<Inputs.StandaloneclusterClusterPeerSessionSyncFilterArgs>? SessionSyncFilter { get; set; }

        /// <summary>
        /// Sync ID.
        /// </summary>
        [Input("syncId")]
        public Input<int>? SyncId { get; set; }

        [Input("syncvds")]
        private InputList<Inputs.StandaloneclusterClusterPeerSyncvdArgs>? _syncvds;

        /// <summary>
        /// Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
        /// </summary>
        public InputList<Inputs.StandaloneclusterClusterPeerSyncvdArgs> Syncvds
        {
            get => _syncvds ?? (_syncvds = new InputList<Inputs.StandaloneclusterClusterPeerSyncvdArgs>());
            set => _syncvds = value;
        }

        public StandaloneclusterClusterPeerArgs()
        {
        }
        public static new StandaloneclusterClusterPeerArgs Empty => new StandaloneclusterClusterPeerArgs();
    }
}

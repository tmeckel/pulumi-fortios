# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'DecoderParameterArgs',
    'GlobalTlsActiveProbeArgs',
    'RuleMetadataArgs',
    'SensorEntryArgs',
    'SensorEntryCfeArgs',
    'SensorEntryExemptIpArgs',
    'SensorEntryRuleArgs',
    'SensorEntryVulnTypeArgs',
    'SensorFilterArgs',
    'SensorOverrideArgs',
    'SensorOverrideExemptIpArgs',
]

@pulumi.input_type
class DecoderParameterArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Parameter name.
        :param pulumi.Input[str] value: Parameter value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GlobalTlsActiveProbeArgs:
    def __init__(__self__, *,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] source_ip: Source IP address used for TLS active probe.
        :param pulumi.Input[str] source_ip6: Source IPv6 address used for TLS active probe.
        :param pulumi.Input[str] vdom: Virtual domain name for TLS active probe.
        """
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address used for TLS active probe.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 address used for TLS active probe.
        """
        return pulumi.get(self, "source_ip6")

    @source_ip6.setter
    def source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip6", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual domain name for TLS active probe.
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)


@pulumi.input_type
class RuleMetadataArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 metaid: Optional[pulumi.Input[int]] = None,
                 valueid: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[int] metaid: Meta ID.
        :param pulumi.Input[int] valueid: Value ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metaid is not None:
            pulumi.set(__self__, "metaid", metaid)
        if valueid is not None:
            pulumi.set(__self__, "valueid", valueid)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def metaid(self) -> Optional[pulumi.Input[int]]:
        """
        Meta ID.
        """
        return pulumi.get(self, "metaid")

    @metaid.setter
    def metaid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metaid", value)

    @property
    @pulumi.getter
    def valueid(self) -> Optional[pulumi.Input[int]]:
        """
        Value ID.
        """
        return pulumi.get(self, "valueid")

    @valueid.setter
    def valueid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "valueid", value)


@pulumi.input_type
class SensorEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 application: Optional[pulumi.Input[str]] = None,
                 cves: Optional[pulumi.Input[Sequence[pulumi.Input['SensorEntryCfeArgs']]]] = None,
                 default_action: Optional[pulumi.Input[str]] = None,
                 default_status: Optional[pulumi.Input[str]] = None,
                 exempt_ips: Optional[pulumi.Input[Sequence[pulumi.Input['SensorEntryExemptIpArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 last_modified: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_attack_context: Optional[pulumi.Input[str]] = None,
                 log_packet: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[str]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 rate_count: Optional[pulumi.Input[int]] = None,
                 rate_duration: Optional[pulumi.Input[int]] = None,
                 rate_mode: Optional[pulumi.Input[str]] = None,
                 rate_track: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['SensorEntryRuleArgs']]]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vuln_types: Optional[pulumi.Input[Sequence[pulumi.Input['SensorEntryVulnTypeArgs']]]] = None):
        """
        :param pulumi.Input[str] action: Action taken with traffic in which signatures are detected. Valid values: `pass`, `block`, `reset`, `default`.
        :param pulumi.Input[str] application: Applications to be protected. set application ? lists available applications. all includes all applications. other includes all unlisted applications.
        :param pulumi.Input[Sequence[pulumi.Input['SensorEntryCfeArgs']]] cves: List of CVE IDs of the signatures to add to the sensor The structure of `cve` block is documented below.
        :param pulumi.Input[str] default_action: Signature default action filter. Valid values: `all`, `pass`, `block`.
        :param pulumi.Input[str] default_status: Signature default status filter. Valid values: `all`, `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SensorEntryExemptIpArgs']]] exempt_ips: Traffic from selected source or destination IP addresses is exempt from this signature. The structure of `exempt_ip` block is documented below.
        :param pulumi.Input[int] id: Rule ID in IPS database (0 - 4294967295).
        :param pulumi.Input[str] last_modified: Filter by signature last modified date. Formats: before <date>, after <date>, between <start-date> <end-date>.
        :param pulumi.Input[str] location: Protect client or server traffic.
        :param pulumi.Input[str] log: Enable/disable logging of signatures included in filter. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_attack_context: Enable/disable logging of attack context: URL buffer, header buffer, body buffer, packet buffer. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_packet: Enable/disable packet logging. Enable to save the packet that triggers the filter. You can download the packets in pcap format for diagnostic use. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] os: Operating systems to be protected.  all includes all operating systems. other includes all unlisted operating systems.
        :param pulumi.Input[str] protocol: Protocols to be examined. set protocol ? lists available protocols. all includes all protocols. other includes all unlisted protocols.
        :param pulumi.Input[str] quarantine: Quarantine method. Valid values: `none`, `attacker`.
        :param pulumi.Input[str] quarantine_expiry: Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        :param pulumi.Input[str] quarantine_log: Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] rate_count: Count of the rate.
        :param pulumi.Input[int] rate_duration: Duration (sec) of the rate.
        :param pulumi.Input[str] rate_mode: Rate limit mode. Valid values: `periodical`, `continuous`.
        :param pulumi.Input[str] rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
        :param pulumi.Input[Sequence[pulumi.Input['SensorEntryRuleArgs']]] rules: Identifies the predefined or custom IPS signatures to add to the sensor. The structure of `rule` block is documented below.
        :param pulumi.Input[str] severity: Relative severity of the signature, from info to critical. Log messages generated by the signature include the severity.
        :param pulumi.Input[str] status: Status of the signatures included in filter. default enables the filter and only use filters with default status of enable. Filters with default status of disable will not be used. Valid values: `disable`, `enable`, `default`.
        :param pulumi.Input[Sequence[pulumi.Input['SensorEntryVulnTypeArgs']]] vuln_types: List of signature vulnerability types to filter by. The structure of `vuln_type` block is documented below.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if cves is not None:
            pulumi.set(__self__, "cves", cves)
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if default_status is not None:
            pulumi.set(__self__, "default_status", default_status)
        if exempt_ips is not None:
            pulumi.set(__self__, "exempt_ips", exempt_ips)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_attack_context is not None:
            pulumi.set(__self__, "log_attack_context", log_attack_context)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if rate_count is not None:
            pulumi.set(__self__, "rate_count", rate_count)
        if rate_duration is not None:
            pulumi.set(__self__, "rate_duration", rate_duration)
        if rate_mode is not None:
            pulumi.set(__self__, "rate_mode", rate_mode)
        if rate_track is not None:
            pulumi.set(__self__, "rate_track", rate_track)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vuln_types is not None:
            pulumi.set(__self__, "vuln_types", vuln_types)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action taken with traffic in which signatures are detected. Valid values: `pass`, `block`, `reset`, `default`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def application(self) -> Optional[pulumi.Input[str]]:
        """
        Applications to be protected. set application ? lists available applications. all includes all applications. other includes all unlisted applications.
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter
    def cves(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SensorEntryCfeArgs']]]]:
        """
        List of CVE IDs of the signatures to add to the sensor The structure of `cve` block is documented below.
        """
        return pulumi.get(self, "cves")

    @cves.setter
    def cves(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SensorEntryCfeArgs']]]]):
        pulumi.set(self, "cves", value)

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[pulumi.Input[str]]:
        """
        Signature default action filter. Valid values: `all`, `pass`, `block`.
        """
        return pulumi.get(self, "default_action")

    @default_action.setter
    def default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_action", value)

    @property
    @pulumi.getter(name="defaultStatus")
    def default_status(self) -> Optional[pulumi.Input[str]]:
        """
        Signature default status filter. Valid values: `all`, `enable`, `disable`.
        """
        return pulumi.get(self, "default_status")

    @default_status.setter
    def default_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_status", value)

    @property
    @pulumi.getter(name="exemptIps")
    def exempt_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SensorEntryExemptIpArgs']]]]:
        """
        Traffic from selected source or destination IP addresses is exempt from this signature. The structure of `exempt_ip` block is documented below.
        """
        return pulumi.get(self, "exempt_ips")

    @exempt_ips.setter
    def exempt_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SensorEntryExemptIpArgs']]]]):
        pulumi.set(self, "exempt_ips", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule ID in IPS database (0 - 4294967295).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[str]]:
        """
        Filter by signature last modified date. Formats: before <date>, after <date>, between <start-date> <end-date>.
        """
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Protect client or server traffic.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of signatures included in filter. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAttackContext")
    def log_attack_context(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of attack context: URL buffer, header buffer, body buffer, packet buffer. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_attack_context")

    @log_attack_context.setter
    def log_attack_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_attack_context", value)

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable packet logging. Enable to save the packet that triggers the filter. You can download the packets in pcap format for diagnostic use. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_packet")

    @log_packet.setter
    def log_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_packet", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        """
        Operating systems to be protected.  all includes all operating systems. other includes all unlisted operating systems.
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocols to be examined. set protocol ? lists available protocols. all includes all protocols. other includes all unlisted protocols.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine method. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        """
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter(name="rateCount")
    def rate_count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of the rate.
        """
        return pulumi.get(self, "rate_count")

    @rate_count.setter
    def rate_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate_count", value)

    @property
    @pulumi.getter(name="rateDuration")
    def rate_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Duration (sec) of the rate.
        """
        return pulumi.get(self, "rate_duration")

    @rate_duration.setter
    def rate_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate_duration", value)

    @property
    @pulumi.getter(name="rateMode")
    def rate_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Rate limit mode. Valid values: `periodical`, `continuous`.
        """
        return pulumi.get(self, "rate_mode")

    @rate_mode.setter
    def rate_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_mode", value)

    @property
    @pulumi.getter(name="rateTrack")
    def rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
        """
        return pulumi.get(self, "rate_track")

    @rate_track.setter
    def rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_track", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SensorEntryRuleArgs']]]]:
        """
        Identifies the predefined or custom IPS signatures to add to the sensor. The structure of `rule` block is documented below.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SensorEntryRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Relative severity of the signature, from info to critical. Log messages generated by the signature include the severity.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the signatures included in filter. default enables the filter and only use filters with default status of enable. Filters with default status of disable will not be used. Valid values: `disable`, `enable`, `default`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="vulnTypes")
    def vuln_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SensorEntryVulnTypeArgs']]]]:
        """
        List of signature vulnerability types to filter by. The structure of `vuln_type` block is documented below.
        """
        return pulumi.get(self, "vuln_types")

    @vuln_types.setter
    def vuln_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SensorEntryVulnTypeArgs']]]]):
        pulumi.set(self, "vuln_types", value)


@pulumi.input_type
class SensorEntryCfeArgs:
    def __init__(__self__, *,
                 cve_entry: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cve_entry: CVE IDs or CVE wildcards.
        """
        if cve_entry is not None:
            pulumi.set(__self__, "cve_entry", cve_entry)

    @property
    @pulumi.getter(name="cveEntry")
    def cve_entry(self) -> Optional[pulumi.Input[str]]:
        """
        CVE IDs or CVE wildcards.
        """
        return pulumi.get(self, "cve_entry")

    @cve_entry.setter
    def cve_entry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cve_entry", value)


@pulumi.input_type
class SensorEntryExemptIpArgs:
    def __init__(__self__, *,
                 dst_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 src_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dst_ip: Destination IP address and netmask.
        :param pulumi.Input[int] id: Exempt IP ID.
        :param pulumi.Input[str] src_ip: Source IP address and netmask.
        """
        if dst_ip is not None:
            pulumi.set(__self__, "dst_ip", dst_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_ip is not None:
            pulumi.set(__self__, "src_ip", src_ip)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IP address and netmask.
        """
        return pulumi.get(self, "dst_ip")

    @dst_ip.setter
    def dst_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Exempt IP ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address and netmask.
        """
        return pulumi.get(self, "src_ip")

    @src_ip.setter
    def src_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_ip", value)


@pulumi.input_type
class SensorEntryRuleArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Rule IPS.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule IPS.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SensorEntryVulnTypeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Vulnerability type ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Vulnerability type ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SensorFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 application: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_packet: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[int]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action of selected rules. Valid values: `pass`, `block`, `reset`, `default`.
        :param pulumi.Input[str] application: Vulnerable application filter.
        :param pulumi.Input[str] location: Vulnerability location filter.
        :param pulumi.Input[str] log: Enable/disable logging of selected rules. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_packet: Enable/disable packet logging of selected rules. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] name: Filter name.
        :param pulumi.Input[str] os: Vulnerable OS filter.
        :param pulumi.Input[str] protocol: Vulnerable protocol filter.
        :param pulumi.Input[str] quarantine: Quarantine IP or interface. Valid values: `none`, `attacker`.
        :param pulumi.Input[int] quarantine_expiry: Duration of quarantine in minute.
        :param pulumi.Input[str] quarantine_log: Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] severity: Vulnerability severity filter.
        :param pulumi.Input[str] status: Selected rules status. Valid values: `disable`, `enable`, `default`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action of selected rules. Valid values: `pass`, `block`, `reset`, `default`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def application(self) -> Optional[pulumi.Input[str]]:
        """
        Vulnerable application filter.
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Vulnerability location filter.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of selected rules. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable packet logging of selected rules. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_packet")

    @log_packet.setter
    def log_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_packet", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        """
        Vulnerable OS filter.
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Vulnerable protocol filter.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine IP or interface. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[int]]:
        """
        Duration of quarantine in minute.
        """
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Vulnerability severity filter.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Selected rules status. Valid values: `disable`, `enable`, `default`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SensorOverrideArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 exempt_ips: Optional[pulumi.Input[Sequence[pulumi.Input['SensorOverrideExemptIpArgs']]]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_packet: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[int]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action of override rule. Valid values: `pass`, `block`, `reset`.
        :param pulumi.Input[Sequence[pulumi.Input['SensorOverrideExemptIpArgs']]] exempt_ips: Exempted IP. The structure of `exempt_ip` block is documented below.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_packet: Enable/disable packet logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] quarantine: Quarantine IP or interface. Valid values: `none`, `attacker`.
        :param pulumi.Input[int] quarantine_expiry: Duration of quarantine in minute.
        :param pulumi.Input[str] quarantine_log: Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] rule_id: Override rule ID.
        :param pulumi.Input[str] status: Enable/disable status of override rule. Valid values: `disable`, `enable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exempt_ips is not None:
            pulumi.set(__self__, "exempt_ips", exempt_ips)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action of override rule. Valid values: `pass`, `block`, `reset`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="exemptIps")
    def exempt_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SensorOverrideExemptIpArgs']]]]:
        """
        Exempted IP. The structure of `exempt_ip` block is documented below.
        """
        return pulumi.get(self, "exempt_ips")

    @exempt_ips.setter
    def exempt_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SensorOverrideExemptIpArgs']]]]):
        pulumi.set(self, "exempt_ips", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable packet logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_packet")

    @log_packet.setter
    def log_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_packet", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine IP or interface. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[int]]:
        """
        Duration of quarantine in minute.
        """
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        """
        Override rule ID.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status of override rule. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SensorOverrideExemptIpArgs:
    def __init__(__self__, *,
                 dst_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 src_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dst_ip: Destination IP address and netmask.
        :param pulumi.Input[int] id: Exempt IP ID.
        :param pulumi.Input[str] src_ip: Source IP address and netmask.
        """
        if dst_ip is not None:
            pulumi.set(__self__, "dst_ip", dst_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_ip is not None:
            pulumi.set(__self__, "src_ip", src_ip)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IP address and netmask.
        """
        return pulumi.get(self, "dst_ip")

    @dst_ip.setter
    def dst_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Exempt IP ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address and netmask.
        """
        return pulumi.get(self, "src_ip")

    @src_ip.setter
    def src_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_ip", value)



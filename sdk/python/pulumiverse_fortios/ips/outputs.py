# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DecoderParameter',
    'GlobalTlsActiveProbe',
    'RuleMetadata',
    'SensorEntry',
    'SensorEntryCfe',
    'SensorEntryExemptIp',
    'SensorEntryRule',
    'SensorEntryVulnType',
    'SensorFilter',
    'SensorOverride',
    'SensorOverrideExemptIp',
]

@pulumi.output_type
class DecoderParameter(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Parameter name.
        :param str value: Parameter value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GlobalTlsActiveProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceSelectMethod":
            suggest = "interface_select_method"
        elif key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourceIp6":
            suggest = "source_ip6"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTlsActiveProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTlsActiveProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTlsActiveProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface: Optional[str] = None,
                 interface_select_method: Optional[str] = None,
                 source_ip: Optional[str] = None,
                 source_ip6: Optional[str] = None,
                 vdom: Optional[str] = None):
        """
        :param str interface: Specify outgoing interface to reach server.
        :param str interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param str source_ip: Source IP address used for TLS active probe.
        :param str source_ip6: Source IPv6 address used for TLS active probe.
        :param str vdom: Virtual domain name for TLS active probe.
        """
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[str]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[str]:
        """
        Source IP address used for TLS active probe.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[str]:
        """
        Source IPv6 address used for TLS active probe.
        """
        return pulumi.get(self, "source_ip6")

    @property
    @pulumi.getter
    def vdom(self) -> Optional[str]:
        """
        Virtual domain name for TLS active probe.
        """
        return pulumi.get(self, "vdom")


@pulumi.output_type
class RuleMetadata(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 metaid: Optional[int] = None,
                 valueid: Optional[int] = None):
        """
        :param int id: ID.
        :param int metaid: Meta ID.
        :param int valueid: Value ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metaid is not None:
            pulumi.set(__self__, "metaid", metaid)
        if valueid is not None:
            pulumi.set(__self__, "valueid", valueid)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metaid(self) -> Optional[int]:
        """
        Meta ID.
        """
        return pulumi.get(self, "metaid")

    @property
    @pulumi.getter
    def valueid(self) -> Optional[int]:
        """
        Value ID.
        """
        return pulumi.get(self, "valueid")


@pulumi.output_type
class SensorEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultAction":
            suggest = "default_action"
        elif key == "defaultStatus":
            suggest = "default_status"
        elif key == "exemptIps":
            suggest = "exempt_ips"
        elif key == "lastModified":
            suggest = "last_modified"
        elif key == "logAttackContext":
            suggest = "log_attack_context"
        elif key == "logPacket":
            suggest = "log_packet"
        elif key == "quarantineExpiry":
            suggest = "quarantine_expiry"
        elif key == "quarantineLog":
            suggest = "quarantine_log"
        elif key == "rateCount":
            suggest = "rate_count"
        elif key == "rateDuration":
            suggest = "rate_duration"
        elif key == "rateMode":
            suggest = "rate_mode"
        elif key == "rateTrack":
            suggest = "rate_track"
        elif key == "vulnTypes":
            suggest = "vuln_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SensorEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SensorEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SensorEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 application: Optional[str] = None,
                 cves: Optional[Sequence['outputs.SensorEntryCfe']] = None,
                 default_action: Optional[str] = None,
                 default_status: Optional[str] = None,
                 exempt_ips: Optional[Sequence['outputs.SensorEntryExemptIp']] = None,
                 id: Optional[int] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 log: Optional[str] = None,
                 log_attack_context: Optional[str] = None,
                 log_packet: Optional[str] = None,
                 os: Optional[str] = None,
                 protocol: Optional[str] = None,
                 quarantine: Optional[str] = None,
                 quarantine_expiry: Optional[str] = None,
                 quarantine_log: Optional[str] = None,
                 rate_count: Optional[int] = None,
                 rate_duration: Optional[int] = None,
                 rate_mode: Optional[str] = None,
                 rate_track: Optional[str] = None,
                 rules: Optional[Sequence['outputs.SensorEntryRule']] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None,
                 vuln_types: Optional[Sequence['outputs.SensorEntryVulnType']] = None):
        """
        :param str action: Action taken with traffic in which signatures are detected. Valid values: `pass`, `block`, `reset`, `default`.
        :param str application: Applications to be protected. set application ? lists available applications. all includes all applications. other includes all unlisted applications.
        :param Sequence['SensorEntryCfeArgs'] cves: List of CVE IDs of the signatures to add to the sensor The structure of `cve` block is documented below.
        :param str default_action: Signature default action filter. Valid values: `all`, `pass`, `block`.
        :param str default_status: Signature default status filter. Valid values: `all`, `enable`, `disable`.
        :param Sequence['SensorEntryExemptIpArgs'] exempt_ips: Traffic from selected source or destination IP addresses is exempt from this signature. The structure of `exempt_ip` block is documented below.
        :param int id: Rule ID in IPS database (0 - 4294967295).
        :param str last_modified: Filter by signature last modified date. Formats: before <date>, after <date>, between <start-date> <end-date>.
        :param str location: Protect client or server traffic.
        :param str log: Enable/disable logging of signatures included in filter. Valid values: `disable`, `enable`.
        :param str log_attack_context: Enable/disable logging of attack context: URL buffer, header buffer, body buffer, packet buffer. Valid values: `disable`, `enable`.
        :param str log_packet: Enable/disable packet logging. Enable to save the packet that triggers the filter. You can download the packets in pcap format for diagnostic use. Valid values: `disable`, `enable`.
        :param str os: Operating systems to be protected.  all includes all operating systems. other includes all unlisted operating systems.
        :param str protocol: Protocols to be examined. set protocol ? lists available protocols. all includes all protocols. other includes all unlisted protocols.
        :param str quarantine: Quarantine method. Valid values: `none`, `attacker`.
        :param str quarantine_expiry: Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        :param str quarantine_log: Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        :param int rate_count: Count of the rate.
        :param int rate_duration: Duration (sec) of the rate.
        :param str rate_mode: Rate limit mode. Valid values: `periodical`, `continuous`.
        :param str rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
        :param Sequence['SensorEntryRuleArgs'] rules: Identifies the predefined or custom IPS signatures to add to the sensor. The structure of `rule` block is documented below.
        :param str severity: Relative severity of the signature, from info to critical. Log messages generated by the signature include the severity.
        :param str status: Status of the signatures included in filter. default enables the filter and only use filters with default status of enable. Filters with default status of disable will not be used. Valid values: `disable`, `enable`, `default`.
        :param Sequence['SensorEntryVulnTypeArgs'] vuln_types: List of signature vulnerability types to filter by. The structure of `vuln_type` block is documented below.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if cves is not None:
            pulumi.set(__self__, "cves", cves)
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if default_status is not None:
            pulumi.set(__self__, "default_status", default_status)
        if exempt_ips is not None:
            pulumi.set(__self__, "exempt_ips", exempt_ips)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_attack_context is not None:
            pulumi.set(__self__, "log_attack_context", log_attack_context)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if rate_count is not None:
            pulumi.set(__self__, "rate_count", rate_count)
        if rate_duration is not None:
            pulumi.set(__self__, "rate_duration", rate_duration)
        if rate_mode is not None:
            pulumi.set(__self__, "rate_mode", rate_mode)
        if rate_track is not None:
            pulumi.set(__self__, "rate_track", rate_track)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vuln_types is not None:
            pulumi.set(__self__, "vuln_types", vuln_types)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action taken with traffic in which signatures are detected. Valid values: `pass`, `block`, `reset`, `default`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Applications to be protected. set application ? lists available applications. all includes all applications. other includes all unlisted applications.
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter
    def cves(self) -> Optional[Sequence['outputs.SensorEntryCfe']]:
        """
        List of CVE IDs of the signatures to add to the sensor The structure of `cve` block is documented below.
        """
        return pulumi.get(self, "cves")

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[str]:
        """
        Signature default action filter. Valid values: `all`, `pass`, `block`.
        """
        return pulumi.get(self, "default_action")

    @property
    @pulumi.getter(name="defaultStatus")
    def default_status(self) -> Optional[str]:
        """
        Signature default status filter. Valid values: `all`, `enable`, `disable`.
        """
        return pulumi.get(self, "default_status")

    @property
    @pulumi.getter(name="exemptIps")
    def exempt_ips(self) -> Optional[Sequence['outputs.SensorEntryExemptIp']]:
        """
        Traffic from selected source or destination IP addresses is exempt from this signature. The structure of `exempt_ip` block is documented below.
        """
        return pulumi.get(self, "exempt_ips")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Rule ID in IPS database (0 - 4294967295).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        Filter by signature last modified date. Formats: before <date>, after <date>, between <start-date> <end-date>.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        Protect client or server traffic.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging of signatures included in filter. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logAttackContext")
    def log_attack_context(self) -> Optional[str]:
        """
        Enable/disable logging of attack context: URL buffer, header buffer, body buffer, packet buffer. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_attack_context")

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[str]:
        """
        Enable/disable packet logging. Enable to save the packet that triggers the filter. You can download the packets in pcap format for diagnostic use. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_packet")

    @property
    @pulumi.getter
    def os(self) -> Optional[str]:
        """
        Operating systems to be protected.  all includes all operating systems. other includes all unlisted operating systems.
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocols to be examined. set protocol ? lists available protocols. all includes all protocols. other includes all unlisted protocols.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        """
        Quarantine method. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[str]:
        """
        Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        """
        return pulumi.get(self, "quarantine_expiry")

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[str]:
        """
        Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @property
    @pulumi.getter(name="rateCount")
    def rate_count(self) -> Optional[int]:
        """
        Count of the rate.
        """
        return pulumi.get(self, "rate_count")

    @property
    @pulumi.getter(name="rateDuration")
    def rate_duration(self) -> Optional[int]:
        """
        Duration (sec) of the rate.
        """
        return pulumi.get(self, "rate_duration")

    @property
    @pulumi.getter(name="rateMode")
    def rate_mode(self) -> Optional[str]:
        """
        Rate limit mode. Valid values: `periodical`, `continuous`.
        """
        return pulumi.get(self, "rate_mode")

    @property
    @pulumi.getter(name="rateTrack")
    def rate_track(self) -> Optional[str]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
        """
        return pulumi.get(self, "rate_track")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.SensorEntryRule']]:
        """
        Identifies the predefined or custom IPS signatures to add to the sensor. The structure of `rule` block is documented below.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Relative severity of the signature, from info to critical. Log messages generated by the signature include the severity.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status of the signatures included in filter. default enables the filter and only use filters with default status of enable. Filters with default status of disable will not be used. Valid values: `disable`, `enable`, `default`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="vulnTypes")
    def vuln_types(self) -> Optional[Sequence['outputs.SensorEntryVulnType']]:
        """
        List of signature vulnerability types to filter by. The structure of `vuln_type` block is documented below.
        """
        return pulumi.get(self, "vuln_types")


@pulumi.output_type
class SensorEntryCfe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cveEntry":
            suggest = "cve_entry"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SensorEntryCfe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SensorEntryCfe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SensorEntryCfe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cve_entry: Optional[str] = None):
        """
        :param str cve_entry: CVE IDs or CVE wildcards.
        """
        if cve_entry is not None:
            pulumi.set(__self__, "cve_entry", cve_entry)

    @property
    @pulumi.getter(name="cveEntry")
    def cve_entry(self) -> Optional[str]:
        """
        CVE IDs or CVE wildcards.
        """
        return pulumi.get(self, "cve_entry")


@pulumi.output_type
class SensorEntryExemptIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstIp":
            suggest = "dst_ip"
        elif key == "srcIp":
            suggest = "src_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SensorEntryExemptIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SensorEntryExemptIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SensorEntryExemptIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dst_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 src_ip: Optional[str] = None):
        """
        :param str dst_ip: Destination IP address and netmask.
        :param int id: Exempt IP ID.
        :param str src_ip: Source IP address and netmask.
        """
        if dst_ip is not None:
            pulumi.set(__self__, "dst_ip", dst_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_ip is not None:
            pulumi.set(__self__, "src_ip", src_ip)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[str]:
        """
        Destination IP address and netmask.
        """
        return pulumi.get(self, "dst_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Exempt IP ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[str]:
        """
        Source IP address and netmask.
        """
        return pulumi.get(self, "src_ip")


@pulumi.output_type
class SensorEntryRule(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Rule IPS.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Rule IPS.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SensorEntryVulnType(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Vulnerability type ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Vulnerability type ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SensorFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logPacket":
            suggest = "log_packet"
        elif key == "quarantineExpiry":
            suggest = "quarantine_expiry"
        elif key == "quarantineLog":
            suggest = "quarantine_log"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SensorFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SensorFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SensorFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 application: Optional[str] = None,
                 location: Optional[str] = None,
                 log: Optional[str] = None,
                 log_packet: Optional[str] = None,
                 name: Optional[str] = None,
                 os: Optional[str] = None,
                 protocol: Optional[str] = None,
                 quarantine: Optional[str] = None,
                 quarantine_expiry: Optional[int] = None,
                 quarantine_log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str action: Action of selected rules. Valid values: `pass`, `block`, `reset`, `default`.
        :param str application: Vulnerable application filter.
        :param str location: Vulnerability location filter.
        :param str log: Enable/disable logging of selected rules. Valid values: `disable`, `enable`.
        :param str log_packet: Enable/disable packet logging of selected rules. Valid values: `disable`, `enable`.
        :param str name: Filter name.
        :param str os: Vulnerable OS filter.
        :param str protocol: Vulnerable protocol filter.
        :param str quarantine: Quarantine IP or interface. Valid values: `none`, `attacker`.
        :param int quarantine_expiry: Duration of quarantine in minute.
        :param str quarantine_log: Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
        :param str severity: Vulnerability severity filter.
        :param str status: Selected rules status. Valid values: `disable`, `enable`, `default`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action of selected rules. Valid values: `pass`, `block`, `reset`, `default`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        """
        Vulnerable application filter.
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        Vulnerability location filter.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging of selected rules. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[str]:
        """
        Enable/disable packet logging of selected rules. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_packet")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def os(self) -> Optional[str]:
        """
        Vulnerable OS filter.
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Vulnerable protocol filter.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        """
        Quarantine IP or interface. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[int]:
        """
        Duration of quarantine in minute.
        """
        return pulumi.get(self, "quarantine_expiry")

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[str]:
        """
        Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Vulnerability severity filter.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Selected rules status. Valid values: `disable`, `enable`, `default`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class SensorOverride(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exemptIps":
            suggest = "exempt_ips"
        elif key == "logPacket":
            suggest = "log_packet"
        elif key == "quarantineExpiry":
            suggest = "quarantine_expiry"
        elif key == "quarantineLog":
            suggest = "quarantine_log"
        elif key == "ruleId":
            suggest = "rule_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SensorOverride. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SensorOverride.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SensorOverride.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 exempt_ips: Optional[Sequence['outputs.SensorOverrideExemptIp']] = None,
                 log: Optional[str] = None,
                 log_packet: Optional[str] = None,
                 quarantine: Optional[str] = None,
                 quarantine_expiry: Optional[int] = None,
                 quarantine_log: Optional[str] = None,
                 rule_id: Optional[int] = None,
                 status: Optional[str] = None):
        """
        :param str action: Action of override rule. Valid values: `pass`, `block`, `reset`.
        :param Sequence['SensorOverrideExemptIpArgs'] exempt_ips: Exempted IP. The structure of `exempt_ip` block is documented below.
        :param str log: Enable/disable logging. Valid values: `disable`, `enable`.
        :param str log_packet: Enable/disable packet logging. Valid values: `disable`, `enable`.
        :param str quarantine: Quarantine IP or interface. Valid values: `none`, `attacker`.
        :param int quarantine_expiry: Duration of quarantine in minute.
        :param str quarantine_log: Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
        :param int rule_id: Override rule ID.
        :param str status: Enable/disable status of override rule. Valid values: `disable`, `enable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exempt_ips is not None:
            pulumi.set(__self__, "exempt_ips", exempt_ips)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action of override rule. Valid values: `pass`, `block`, `reset`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="exemptIps")
    def exempt_ips(self) -> Optional[Sequence['outputs.SensorOverrideExemptIp']]:
        """
        Exempted IP. The structure of `exempt_ip` block is documented below.
        """
        return pulumi.get(self, "exempt_ips")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[str]:
        """
        Enable/disable packet logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_packet")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        """
        Quarantine IP or interface. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[int]:
        """
        Duration of quarantine in minute.
        """
        return pulumi.get(self, "quarantine_expiry")

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[str]:
        """
        Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[int]:
        """
        Override rule ID.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable status of override rule. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class SensorOverrideExemptIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstIp":
            suggest = "dst_ip"
        elif key == "srcIp":
            suggest = "src_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SensorOverrideExemptIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SensorOverrideExemptIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SensorOverrideExemptIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dst_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 src_ip: Optional[str] = None):
        """
        :param str dst_ip: Destination IP address and netmask.
        :param int id: Exempt IP ID.
        :param str src_ip: Source IP address and netmask.
        """
        if dst_ip is not None:
            pulumi.set(__self__, "dst_ip", dst_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_ip is not None:
            pulumi.set(__self__, "src_ip", src_ip)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[str]:
        """
        Destination IP address and netmask.
        """
        return pulumi.get(self, "dst_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Exempt IP ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[str]:
        """
        Source IP address and netmask.
        """
        return pulumi.get(self, "src_ip")



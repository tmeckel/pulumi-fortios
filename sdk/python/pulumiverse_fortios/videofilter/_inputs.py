# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ProfileFortiguardCategoryArgs',
    'ProfileFortiguardCategoryFilterArgs',
    'YoutubechannelfilterEntryArgs',
]

@pulumi.input_type
class ProfileFortiguardCategoryArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFortiguardCategoryFilterArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ProfileFortiguardCategoryFilterArgs']]] filters: Configure VideoFilter FortiGuard category. The structure of `filters` block is documented below.
        """
        if filters is not None:
            pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFortiguardCategoryFilterArgs']]]]:
        """
        Configure VideoFilter FortiGuard category. The structure of `filters` block is documented below.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFortiguardCategoryFilterArgs']]]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class ProfileFortiguardCategoryFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 category_id: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: VideoFilter action. Valid values: `allow`, `monitor`, `block`.
        :param pulumi.Input[int] category_id: Category ID.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if category_id is not None:
            pulumi.set(__self__, "category_id", category_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        VideoFilter action. Valid values: `allow`, `monitor`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> Optional[pulumi.Input[int]]:
        """
        Category ID.
        """
        return pulumi.get(self, "category_id")

    @category_id.setter
    def category_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "category_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)


@pulumi.input_type
class YoutubechannelfilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: YouTube channel filter action. Valid values: `allow`, `monitor`, `block`.
        :param pulumi.Input[str] channel_id: Channel ID.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[int] id: ID.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        YouTube channel filter action. Valid values: `allow`, `monitor`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        Channel ID.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)



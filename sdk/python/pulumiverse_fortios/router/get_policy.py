# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPolicyResult',
    'AwaitableGetPolicyResult',
    'get_policy',
    'get_policy_output',
]

@pulumi.output_type
class GetPolicyResult:
    """
    A collection of values returned by getPolicy.
    """
    def __init__(__self__, action=None, comments=None, dst_negate=None, dstaddrs=None, dsts=None, end_port=None, end_source_port=None, gateway=None, id=None, input_device_negate=None, input_devices=None, internet_service_customs=None, internet_service_ids=None, output_device=None, protocol=None, seq_num=None, src_negate=None, srcaddrs=None, srcs=None, start_port=None, start_source_port=None, status=None, tos=None, tos_mask=None, vdomparam=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if dst_negate and not isinstance(dst_negate, str):
            raise TypeError("Expected argument 'dst_negate' to be a str")
        pulumi.set(__self__, "dst_negate", dst_negate)
        if dstaddrs and not isinstance(dstaddrs, list):
            raise TypeError("Expected argument 'dstaddrs' to be a list")
        pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dsts and not isinstance(dsts, list):
            raise TypeError("Expected argument 'dsts' to be a list")
        pulumi.set(__self__, "dsts", dsts)
        if end_port and not isinstance(end_port, int):
            raise TypeError("Expected argument 'end_port' to be a int")
        pulumi.set(__self__, "end_port", end_port)
        if end_source_port and not isinstance(end_source_port, int):
            raise TypeError("Expected argument 'end_source_port' to be a int")
        pulumi.set(__self__, "end_source_port", end_source_port)
        if gateway and not isinstance(gateway, str):
            raise TypeError("Expected argument 'gateway' to be a str")
        pulumi.set(__self__, "gateway", gateway)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if input_device_negate and not isinstance(input_device_negate, str):
            raise TypeError("Expected argument 'input_device_negate' to be a str")
        pulumi.set(__self__, "input_device_negate", input_device_negate)
        if input_devices and not isinstance(input_devices, list):
            raise TypeError("Expected argument 'input_devices' to be a list")
        pulumi.set(__self__, "input_devices", input_devices)
        if internet_service_customs and not isinstance(internet_service_customs, list):
            raise TypeError("Expected argument 'internet_service_customs' to be a list")
        pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_ids and not isinstance(internet_service_ids, list):
            raise TypeError("Expected argument 'internet_service_ids' to be a list")
        pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if output_device and not isinstance(output_device, str):
            raise TypeError("Expected argument 'output_device' to be a str")
        pulumi.set(__self__, "output_device", output_device)
        if protocol and not isinstance(protocol, int):
            raise TypeError("Expected argument 'protocol' to be a int")
        pulumi.set(__self__, "protocol", protocol)
        if seq_num and not isinstance(seq_num, int):
            raise TypeError("Expected argument 'seq_num' to be a int")
        pulumi.set(__self__, "seq_num", seq_num)
        if src_negate and not isinstance(src_negate, str):
            raise TypeError("Expected argument 'src_negate' to be a str")
        pulumi.set(__self__, "src_negate", src_negate)
        if srcaddrs and not isinstance(srcaddrs, list):
            raise TypeError("Expected argument 'srcaddrs' to be a list")
        pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcs and not isinstance(srcs, list):
            raise TypeError("Expected argument 'srcs' to be a list")
        pulumi.set(__self__, "srcs", srcs)
        if start_port and not isinstance(start_port, int):
            raise TypeError("Expected argument 'start_port' to be a int")
        pulumi.set(__self__, "start_port", start_port)
        if start_source_port and not isinstance(start_source_port, int):
            raise TypeError("Expected argument 'start_source_port' to be a int")
        pulumi.set(__self__, "start_source_port", start_source_port)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tos and not isinstance(tos, str):
            raise TypeError("Expected argument 'tos' to be a str")
        pulumi.set(__self__, "tos", tos)
        if tos_mask and not isinstance(tos_mask, str):
            raise TypeError("Expected argument 'tos_mask' to be a str")
        pulumi.set(__self__, "tos_mask", tos_mask)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action of the policy route.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        Optional comments.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> str:
        """
        Enable/disable negating destination address match.
        """
        return pulumi.get(self, "dst_negate")

    @property
    @pulumi.getter
    def dstaddrs(self) -> Sequence['outputs.GetPolicyDstaddrResult']:
        """
        Destination address name. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter
    def dsts(self) -> Sequence['outputs.GetPolicyDstResult']:
        """
        Destination IP and mask (x.x.x.x/x). The structure of `dst` block is documented below.
        """
        return pulumi.get(self, "dsts")

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        """
        End destination port number (0 - 65535).
        """
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="endSourcePort")
    def end_source_port(self) -> int:
        """
        End source port number (0 - 65535).
        """
        return pulumi.get(self, "end_source_port")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        IP address of the gateway.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> str:
        """
        Enable/disable negation of input device match.
        """
        return pulumi.get(self, "input_device_negate")

    @property
    @pulumi.getter(name="inputDevices")
    def input_devices(self) -> Sequence['outputs.GetPolicyInputDeviceResult']:
        """
        Incoming interface name. The structure of `input_device` block is documented below.
        """
        return pulumi.get(self, "input_devices")

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Sequence['outputs.GetPolicyInternetServiceCustomResult']:
        """
        Custom Destination Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Sequence['outputs.GetPolicyInternetServiceIdResult']:
        """
        Destination Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @property
    @pulumi.getter(name="outputDevice")
    def output_device(self) -> str:
        """
        Outgoing interface name.
        """
        return pulumi.get(self, "output_device")

    @property
    @pulumi.getter
    def protocol(self) -> int:
        """
        Protocol number (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> int:
        """
        Sequence number.
        """
        return pulumi.get(self, "seq_num")

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> str:
        """
        Enable/disable negating source address match.
        """
        return pulumi.get(self, "src_negate")

    @property
    @pulumi.getter
    def srcaddrs(self) -> Sequence['outputs.GetPolicySrcaddrResult']:
        """
        Source address name. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def srcs(self) -> Sequence['outputs.GetPolicySrcResult']:
        """
        Source IP and mask (x.x.x.x/x). The structure of `src` block is documented below.
        """
        return pulumi.get(self, "srcs")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        """
        Start destination port number (0 - 65535).
        """
        return pulumi.get(self, "start_port")

    @property
    @pulumi.getter(name="startSourcePort")
    def start_source_port(self) -> int:
        """
        Start source port number (0 - 65535).
        """
        return pulumi.get(self, "start_source_port")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable this policy route.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tos(self) -> str:
        """
        Type of service bit pattern.
        """
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> str:
        """
        Type of service evaluated bits.
        """
        return pulumi.get(self, "tos_mask")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetPolicyResult(GetPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyResult(
            action=self.action,
            comments=self.comments,
            dst_negate=self.dst_negate,
            dstaddrs=self.dstaddrs,
            dsts=self.dsts,
            end_port=self.end_port,
            end_source_port=self.end_source_port,
            gateway=self.gateway,
            id=self.id,
            input_device_negate=self.input_device_negate,
            input_devices=self.input_devices,
            internet_service_customs=self.internet_service_customs,
            internet_service_ids=self.internet_service_ids,
            output_device=self.output_device,
            protocol=self.protocol,
            seq_num=self.seq_num,
            src_negate=self.src_negate,
            srcaddrs=self.srcaddrs,
            srcs=self.srcs,
            start_port=self.start_port,
            start_source_port=self.start_source_port,
            status=self.status,
            tos=self.tos,
            tos_mask=self.tos_mask,
            vdomparam=self.vdomparam)


def get_policy(seq_num: Optional[int] = None,
               vdomparam: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyResult:
    """
    Use this data source to get information on an fortios router policy


    :param int seq_num: Specify the seq_num of the desired router policy.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['seqNum'] = seq_num
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:router/getPolicy:getPolicy', __args__, opts=opts, typ=GetPolicyResult).value

    return AwaitableGetPolicyResult(
        action=__ret__.action,
        comments=__ret__.comments,
        dst_negate=__ret__.dst_negate,
        dstaddrs=__ret__.dstaddrs,
        dsts=__ret__.dsts,
        end_port=__ret__.end_port,
        end_source_port=__ret__.end_source_port,
        gateway=__ret__.gateway,
        id=__ret__.id,
        input_device_negate=__ret__.input_device_negate,
        input_devices=__ret__.input_devices,
        internet_service_customs=__ret__.internet_service_customs,
        internet_service_ids=__ret__.internet_service_ids,
        output_device=__ret__.output_device,
        protocol=__ret__.protocol,
        seq_num=__ret__.seq_num,
        src_negate=__ret__.src_negate,
        srcaddrs=__ret__.srcaddrs,
        srcs=__ret__.srcs,
        start_port=__ret__.start_port,
        start_source_port=__ret__.start_source_port,
        status=__ret__.status,
        tos=__ret__.tos,
        tos_mask=__ret__.tos_mask,
        vdomparam=__ret__.vdomparam)


@_utilities.lift_output_func(get_policy)
def get_policy_output(seq_num: Optional[pulumi.Input[int]] = None,
                      vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPolicyResult]:
    """
    Use this data source to get information on an fortios router policy


    :param int seq_num: Specify the seq_num of the desired router policy.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...

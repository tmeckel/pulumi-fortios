# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'Anqp3gppcellularMccMncList',
    'AnqpnairealmNaiList',
    'AnqpnairealmNaiListEapMethod',
    'AnqpnairealmNaiListEapMethodAuthParam',
    'AnqproamingconsortiumOiList',
    'AnqpvenuenameValueList',
    'AnqpvenueurlValueList',
    'H2qpadviceofchargeAocList',
    'H2qpadviceofchargeAocListPlanInfo',
    'H2qpoperatornameValueList',
    'H2qposuproviderFriendlyName',
    'H2qposuproviderServiceDescription',
    'H2qposuprovidernaiNaiList',
    'HsprofileOsuProvider',
    'IconIconList',
    'QosmapDscpExcept',
    'QosmapDscpRange',
]

@pulumi.output_type
class Anqp3gppcellularMccMncList(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 mcc: Optional[str] = None,
                 mnc: Optional[str] = None):
        """
        :param int id: ID.
        :param str mcc: Mobile country code.
        :param str mnc: Mobile network code.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mcc is not None:
            pulumi.set(__self__, "mcc", mcc)
        if mnc is not None:
            pulumi.set(__self__, "mnc", mnc)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mcc(self) -> Optional[str]:
        """
        Mobile country code.
        """
        return pulumi.get(self, "mcc")

    @property
    @pulumi.getter
    def mnc(self) -> Optional[str]:
        """
        Mobile network code.
        """
        return pulumi.get(self, "mnc")


@pulumi.output_type
class AnqpnairealmNaiList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eapMethods":
            suggest = "eap_methods"
        elif key == "naiRealm":
            suggest = "nai_realm"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnqpnairealmNaiList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnqpnairealmNaiList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnqpnairealmNaiList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 eap_methods: Optional[Sequence['outputs.AnqpnairealmNaiListEapMethod']] = None,
                 encoding: Optional[str] = None,
                 nai_realm: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['AnqpnairealmNaiListEapMethodArgs'] eap_methods: EAP Methods. The structure of `eap_method` block is documented below.
        :param str encoding: Enable/disable format in accordance with IETF RFC 4282. Valid values: `disable`, `enable`.
        :param str nai_realm: Configure NAI realms (delimited by a semi-colon character).
        :param str name: NAI realm name.
        """
        if eap_methods is not None:
            pulumi.set(__self__, "eap_methods", eap_methods)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if nai_realm is not None:
            pulumi.set(__self__, "nai_realm", nai_realm)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="eapMethods")
    def eap_methods(self) -> Optional[Sequence['outputs.AnqpnairealmNaiListEapMethod']]:
        """
        EAP Methods. The structure of `eap_method` block is documented below.
        """
        return pulumi.get(self, "eap_methods")

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        """
        Enable/disable format in accordance with IETF RFC 4282. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter(name="naiRealm")
    def nai_realm(self) -> Optional[str]:
        """
        Configure NAI realms (delimited by a semi-colon character).
        """
        return pulumi.get(self, "nai_realm")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        NAI realm name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AnqpnairealmNaiListEapMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authParams":
            suggest = "auth_params"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnqpnairealmNaiListEapMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnqpnairealmNaiListEapMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnqpnairealmNaiListEapMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_params: Optional[Sequence['outputs.AnqpnairealmNaiListEapMethodAuthParam']] = None,
                 index: Optional[int] = None,
                 method: Optional[str] = None):
        """
        :param Sequence['AnqpnairealmNaiListEapMethodAuthParamArgs'] auth_params: EAP auth param. The structure of `auth_param` block is documented below.
        :param int index: EAP method index.
        :param str method: EAP method type. Valid values: `eap-identity`, `eap-md5`, `eap-tls`, `eap-ttls`, `eap-peap`, `eap-sim`, `eap-aka`, `eap-aka-prime`.
        """
        if auth_params is not None:
            pulumi.set(__self__, "auth_params", auth_params)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if method is not None:
            pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter(name="authParams")
    def auth_params(self) -> Optional[Sequence['outputs.AnqpnairealmNaiListEapMethodAuthParam']]:
        """
        EAP auth param. The structure of `auth_param` block is documented below.
        """
        return pulumi.get(self, "auth_params")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        """
        EAP method index.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        """
        EAP method type. Valid values: `eap-identity`, `eap-md5`, `eap-tls`, `eap-ttls`, `eap-peap`, `eap-sim`, `eap-aka`, `eap-aka-prime`.
        """
        return pulumi.get(self, "method")


@pulumi.output_type
class AnqpnairealmNaiListEapMethodAuthParam(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 index: Optional[int] = None,
                 val: Optional[str] = None):
        """
        :param str id: ID of authentication parameter. Valid values: `non-eap-inner-auth`, `inner-auth-eap`, `credential`, `tunneled-credential`.
        :param int index: Param index.
        :param str val: Value of authentication parameter. Valid values: `eap-identity`, `eap-md5`, `eap-tls`, `eap-ttls`, `eap-peap`, `eap-sim`, `eap-aka`, `eap-aka-prime`, `non-eap-pap`, `non-eap-chap`, `non-eap-mschap`, `non-eap-mschapv2`, `cred-sim`, `cred-usim`, `cred-nfc`, `cred-hardware-token`, `cred-softoken`, `cred-certificate`, `cred-user-pwd`, `cred-none`, `cred-vendor-specific`, `tun-cred-sim`, `tun-cred-usim`, `tun-cred-nfc`, `tun-cred-hardware-token`, `tun-cred-softoken`, `tun-cred-certificate`, `tun-cred-user-pwd`, `tun-cred-anonymous`, `tun-cred-vendor-specific`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if val is not None:
            pulumi.set(__self__, "val", val)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of authentication parameter. Valid values: `non-eap-inner-auth`, `inner-auth-eap`, `credential`, `tunneled-credential`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        """
        Param index.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def val(self) -> Optional[str]:
        """
        Value of authentication parameter. Valid values: `eap-identity`, `eap-md5`, `eap-tls`, `eap-ttls`, `eap-peap`, `eap-sim`, `eap-aka`, `eap-aka-prime`, `non-eap-pap`, `non-eap-chap`, `non-eap-mschap`, `non-eap-mschapv2`, `cred-sim`, `cred-usim`, `cred-nfc`, `cred-hardware-token`, `cred-softoken`, `cred-certificate`, `cred-user-pwd`, `cred-none`, `cred-vendor-specific`, `tun-cred-sim`, `tun-cred-usim`, `tun-cred-nfc`, `tun-cred-hardware-token`, `tun-cred-softoken`, `tun-cred-certificate`, `tun-cred-user-pwd`, `tun-cred-anonymous`, `tun-cred-vendor-specific`.
        """
        return pulumi.get(self, "val")


@pulumi.output_type
class AnqproamingconsortiumOiList(dict):
    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 index: Optional[int] = None,
                 oi: Optional[str] = None):
        """
        :param str comment: Comment.
        :param int index: OI index.
        :param str oi: Organization identifier.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if oi is not None:
            pulumi.set(__self__, "oi", oi)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        """
        OI index.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def oi(self) -> Optional[str]:
        """
        Organization identifier.
        """
        return pulumi.get(self, "oi")


@pulumi.output_type
class AnqpvenuenameValueList(dict):
    def __init__(__self__, *,
                 index: Optional[int] = None,
                 lang: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param int index: Value index.
        :param str lang: Language code.
        :param str value: Venue name value.
        """
        if index is not None:
            pulumi.set(__self__, "index", index)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        """
        Value index.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def lang(self) -> Optional[str]:
        """
        Language code.
        """
        return pulumi.get(self, "lang")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Venue name value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AnqpvenueurlValueList(dict):
    def __init__(__self__, *,
                 index: Optional[int] = None,
                 number: Optional[int] = None,
                 value: Optional[str] = None):
        """
        :param int index: URL index.
        :param int number: Venue number.
        :param str value: Venue URL value.
        """
        if index is not None:
            pulumi.set(__self__, "index", index)
        if number is not None:
            pulumi.set(__self__, "number", number)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        """
        URL index.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def number(self) -> Optional[int]:
        """
        Venue number.
        """
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Venue URL value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class H2qpadviceofchargeAocList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "naiRealm":
            suggest = "nai_realm"
        elif key == "naiRealmEncoding":
            suggest = "nai_realm_encoding"
        elif key == "planInfos":
            suggest = "plan_infos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in H2qpadviceofchargeAocList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        H2qpadviceofchargeAocList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        H2qpadviceofchargeAocList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nai_realm: Optional[str] = None,
                 nai_realm_encoding: Optional[str] = None,
                 name: Optional[str] = None,
                 plan_infos: Optional[Sequence['outputs.H2qpadviceofchargeAocListPlanInfo']] = None,
                 type: Optional[str] = None):
        """
        :param str nai_realm: NAI realm list name.
        :param str nai_realm_encoding: NAI realm encoding.
        :param str name: Advice of charge ID.
        :param Sequence['H2qpadviceofchargeAocListPlanInfoArgs'] plan_infos: Plan info. The structure of `plan_info` block is documented below.
        :param str type: Usage charge type. Valid values: `time-based`, `volume-based`, `time-and-volume-based`, `unlimited`.
        """
        if nai_realm is not None:
            pulumi.set(__self__, "nai_realm", nai_realm)
        if nai_realm_encoding is not None:
            pulumi.set(__self__, "nai_realm_encoding", nai_realm_encoding)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plan_infos is not None:
            pulumi.set(__self__, "plan_infos", plan_infos)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="naiRealm")
    def nai_realm(self) -> Optional[str]:
        """
        NAI realm list name.
        """
        return pulumi.get(self, "nai_realm")

    @property
    @pulumi.getter(name="naiRealmEncoding")
    def nai_realm_encoding(self) -> Optional[str]:
        """
        NAI realm encoding.
        """
        return pulumi.get(self, "nai_realm_encoding")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Advice of charge ID.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="planInfos")
    def plan_infos(self) -> Optional[Sequence['outputs.H2qpadviceofchargeAocListPlanInfo']]:
        """
        Plan info. The structure of `plan_info` block is documented below.
        """
        return pulumi.get(self, "plan_infos")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Usage charge type. Valid values: `time-based`, `volume-based`, `time-and-volume-based`, `unlimited`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class H2qpadviceofchargeAocListPlanInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "infoFile":
            suggest = "info_file"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in H2qpadviceofchargeAocListPlanInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        H2qpadviceofchargeAocListPlanInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        H2qpadviceofchargeAocListPlanInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 currency: Optional[str] = None,
                 info_file: Optional[str] = None,
                 lang: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str currency: Currency code.
        :param str info_file: Info file.
        :param str lang: Languague code.
        :param str name: Plan name.
        """
        if currency is not None:
            pulumi.set(__self__, "currency", currency)
        if info_file is not None:
            pulumi.set(__self__, "info_file", info_file)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def currency(self) -> Optional[str]:
        """
        Currency code.
        """
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter(name="infoFile")
    def info_file(self) -> Optional[str]:
        """
        Info file.
        """
        return pulumi.get(self, "info_file")

    @property
    @pulumi.getter
    def lang(self) -> Optional[str]:
        """
        Languague code.
        """
        return pulumi.get(self, "lang")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Plan name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class H2qpoperatornameValueList(dict):
    def __init__(__self__, *,
                 index: Optional[int] = None,
                 lang: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param int index: Value index.
        :param str lang: Language code.
        :param str value: Friendly name value.
        """
        if index is not None:
            pulumi.set(__self__, "index", index)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        """
        Value index.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def lang(self) -> Optional[str]:
        """
        Language code.
        """
        return pulumi.get(self, "lang")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Friendly name value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class H2qposuproviderFriendlyName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "friendlyName":
            suggest = "friendly_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in H2qposuproviderFriendlyName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        H2qposuproviderFriendlyName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        H2qposuproviderFriendlyName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 friendly_name: Optional[str] = None,
                 index: Optional[int] = None,
                 lang: Optional[str] = None):
        """
        :param str friendly_name: OSU provider friendly name.
        :param int index: OSU provider friendly name index.
        :param str lang: Language code.
        """
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[str]:
        """
        OSU provider friendly name.
        """
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        """
        OSU provider friendly name index.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def lang(self) -> Optional[str]:
        """
        Language code.
        """
        return pulumi.get(self, "lang")


@pulumi.output_type
class H2qposuproviderServiceDescription(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceDescription":
            suggest = "service_description"
        elif key == "serviceId":
            suggest = "service_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in H2qposuproviderServiceDescription. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        H2qposuproviderServiceDescription.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        H2qposuproviderServiceDescription.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lang: Optional[str] = None,
                 service_description: Optional[str] = None,
                 service_id: Optional[int] = None):
        """
        :param str lang: Language code.
        :param str service_description: Service description.
        :param int service_id: OSU service ID.
        """
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if service_description is not None:
            pulumi.set(__self__, "service_description", service_description)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter
    def lang(self) -> Optional[str]:
        """
        Language code.
        """
        return pulumi.get(self, "lang")

    @property
    @pulumi.getter(name="serviceDescription")
    def service_description(self) -> Optional[str]:
        """
        Service description.
        """
        return pulumi.get(self, "service_description")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[int]:
        """
        OSU service ID.
        """
        return pulumi.get(self, "service_id")


@pulumi.output_type
class H2qposuprovidernaiNaiList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osuNai":
            suggest = "osu_nai"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in H2qposuprovidernaiNaiList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        H2qposuprovidernaiNaiList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        H2qposuprovidernaiNaiList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 osu_nai: Optional[str] = None):
        """
        :param str name: OSU NAI ID.
        :param str osu_nai: OSU NAI.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if osu_nai is not None:
            pulumi.set(__self__, "osu_nai", osu_nai)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        OSU NAI ID.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osuNai")
    def osu_nai(self) -> Optional[str]:
        """
        OSU NAI.
        """
        return pulumi.get(self, "osu_nai")


@pulumi.output_type
class HsprofileOsuProvider(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: OSU provider name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        OSU provider name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class IconIconList(dict):
    def __init__(__self__, *,
                 file: Optional[str] = None,
                 height: Optional[int] = None,
                 lang: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 width: Optional[int] = None):
        """
        :param str file: Icon file.
        :param int height: Icon height.
        :param str lang: Language code.
        :param str name: Icon name.
        :param str type: Icon type. Valid values: `bmp`, `gif`, `jpeg`, `png`, `tiff`.
        :param int width: Icon width.
        """
        if file is not None:
            pulumi.set(__self__, "file", file)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def file(self) -> Optional[str]:
        """
        Icon file.
        """
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        """
        Icon height.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def lang(self) -> Optional[str]:
        """
        Language code.
        """
        return pulumi.get(self, "lang")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Icon name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Icon type. Valid values: `bmp`, `gif`, `jpeg`, `png`, `tiff`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        """
        Icon width.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class QosmapDscpExcept(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 index: Optional[int] = None,
                 up: Optional[int] = None):
        """
        :param int dscp: DSCP value.
        :param int index: DSCP exception index.
        :param int up: User priority.
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if up is not None:
            pulumi.set(__self__, "up", up)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        """
        DSCP value.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        """
        DSCP exception index.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def up(self) -> Optional[int]:
        """
        User priority.
        """
        return pulumi.get(self, "up")


@pulumi.output_type
class QosmapDscpRange(dict):
    def __init__(__self__, *,
                 high: Optional[int] = None,
                 index: Optional[int] = None,
                 low: Optional[int] = None,
                 up: Optional[int] = None):
        """
        :param int high: DSCP high value.
        :param int index: DSCP range index.
        :param int low: DSCP low value.
        :param int up: User priority.
        """
        if high is not None:
            pulumi.set(__self__, "high", high)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if low is not None:
            pulumi.set(__self__, "low", low)
        if up is not None:
            pulumi.set(__self__, "up", up)

    @property
    @pulumi.getter
    def high(self) -> Optional[int]:
        """
        DSCP high value.
        """
        return pulumi.get(self, "high")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        """
        DSCP range index.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def low(self) -> Optional[int]:
        """
        DSCP low value.
        """
        return pulumi.get(self, "low")

    @property
    @pulumi.getter
    def up(self) -> Optional[int]:
        """
        User priority.
        """
        return pulumi.get(self, "up")



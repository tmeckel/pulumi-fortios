# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetPasswordpolicyResult',
    'AwaitableGetPasswordpolicyResult',
    'get_passwordpolicy',
    'get_passwordpolicy_output',
]

@pulumi.output_type
class GetPasswordpolicyResult:
    """
    A collection of values returned by getPasswordpolicy.
    """
    def __init__(__self__, apply_to=None, change4_characters=None, expire_day=None, expire_status=None, id=None, min_change_characters=None, min_lower_case_letter=None, min_non_alphanumeric=None, min_number=None, min_upper_case_letter=None, minimum_length=None, reuse_password=None, status=None, vdomparam=None):
        if apply_to and not isinstance(apply_to, str):
            raise TypeError("Expected argument 'apply_to' to be a str")
        pulumi.set(__self__, "apply_to", apply_to)
        if change4_characters and not isinstance(change4_characters, str):
            raise TypeError("Expected argument 'change4_characters' to be a str")
        pulumi.set(__self__, "change4_characters", change4_characters)
        if expire_day and not isinstance(expire_day, int):
            raise TypeError("Expected argument 'expire_day' to be a int")
        pulumi.set(__self__, "expire_day", expire_day)
        if expire_status and not isinstance(expire_status, str):
            raise TypeError("Expected argument 'expire_status' to be a str")
        pulumi.set(__self__, "expire_status", expire_status)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if min_change_characters and not isinstance(min_change_characters, int):
            raise TypeError("Expected argument 'min_change_characters' to be a int")
        pulumi.set(__self__, "min_change_characters", min_change_characters)
        if min_lower_case_letter and not isinstance(min_lower_case_letter, int):
            raise TypeError("Expected argument 'min_lower_case_letter' to be a int")
        pulumi.set(__self__, "min_lower_case_letter", min_lower_case_letter)
        if min_non_alphanumeric and not isinstance(min_non_alphanumeric, int):
            raise TypeError("Expected argument 'min_non_alphanumeric' to be a int")
        pulumi.set(__self__, "min_non_alphanumeric", min_non_alphanumeric)
        if min_number and not isinstance(min_number, int):
            raise TypeError("Expected argument 'min_number' to be a int")
        pulumi.set(__self__, "min_number", min_number)
        if min_upper_case_letter and not isinstance(min_upper_case_letter, int):
            raise TypeError("Expected argument 'min_upper_case_letter' to be a int")
        pulumi.set(__self__, "min_upper_case_letter", min_upper_case_letter)
        if minimum_length and not isinstance(minimum_length, int):
            raise TypeError("Expected argument 'minimum_length' to be a int")
        pulumi.set(__self__, "minimum_length", minimum_length)
        if reuse_password and not isinstance(reuse_password, str):
            raise TypeError("Expected argument 'reuse_password' to be a str")
        pulumi.set(__self__, "reuse_password", reuse_password)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="applyTo")
    def apply_to(self) -> str:
        """
        Apply password policy to administrator passwords or IPsec pre-shared keys or both. Separate entries with a space.
        """
        return pulumi.get(self, "apply_to")

    @property
    @pulumi.getter(name="change4Characters")
    def change4_characters(self) -> str:
        """
        Enable/disable changing at least 4 characters for a new password (This attribute overrides reuse-password if both are enabled).
        """
        return pulumi.get(self, "change4_characters")

    @property
    @pulumi.getter(name="expireDay")
    def expire_day(self) -> int:
        """
        Number of days after which passwords expire (1 - 999 days, default = 90).
        """
        return pulumi.get(self, "expire_day")

    @property
    @pulumi.getter(name="expireStatus")
    def expire_status(self) -> str:
        """
        Enable/disable password expiration.
        """
        return pulumi.get(self, "expire_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="minChangeCharacters")
    def min_change_characters(self) -> int:
        """
        Minimum number of unique characters in new password which do not exist in old password (This attribute overrides reuse-password if both are enabled).
        """
        return pulumi.get(self, "min_change_characters")

    @property
    @pulumi.getter(name="minLowerCaseLetter")
    def min_lower_case_letter(self) -> int:
        """
        Minimum number of lowercase characters in password (0 - 128, default = 0).
        """
        return pulumi.get(self, "min_lower_case_letter")

    @property
    @pulumi.getter(name="minNonAlphanumeric")
    def min_non_alphanumeric(self) -> int:
        """
        Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
        """
        return pulumi.get(self, "min_non_alphanumeric")

    @property
    @pulumi.getter(name="minNumber")
    def min_number(self) -> int:
        """
        Minimum number of numeric characters in password (0 - 128, default = 0).
        """
        return pulumi.get(self, "min_number")

    @property
    @pulumi.getter(name="minUpperCaseLetter")
    def min_upper_case_letter(self) -> int:
        """
        Minimum number of uppercase characters in password (0 - 128, default = 0).
        """
        return pulumi.get(self, "min_upper_case_letter")

    @property
    @pulumi.getter(name="minimumLength")
    def minimum_length(self) -> int:
        """
        Minimum password length (8 - 128, default = 8).
        """
        return pulumi.get(self, "minimum_length")

    @property
    @pulumi.getter(name="reusePassword")
    def reuse_password(self) -> str:
        """
        Enable/disable reusing of password (if both reuse-password and change-4-characters are enabled, change-4-characters overrides).
        """
        return pulumi.get(self, "reuse_password")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable setting a password policy for locally defined administrator passwords and IPsec VPN pre-shared keys.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetPasswordpolicyResult(GetPasswordpolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPasswordpolicyResult(
            apply_to=self.apply_to,
            change4_characters=self.change4_characters,
            expire_day=self.expire_day,
            expire_status=self.expire_status,
            id=self.id,
            min_change_characters=self.min_change_characters,
            min_lower_case_letter=self.min_lower_case_letter,
            min_non_alphanumeric=self.min_non_alphanumeric,
            min_number=self.min_number,
            min_upper_case_letter=self.min_upper_case_letter,
            minimum_length=self.minimum_length,
            reuse_password=self.reuse_password,
            status=self.status,
            vdomparam=self.vdomparam)


def get_passwordpolicy(vdomparam: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPasswordpolicyResult:
    """
    Use this data source to get information on fortios system passwordpolicy


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:sys/getPasswordpolicy:getPasswordpolicy', __args__, opts=opts, typ=GetPasswordpolicyResult).value

    return AwaitableGetPasswordpolicyResult(
        apply_to=__ret__.apply_to,
        change4_characters=__ret__.change4_characters,
        expire_day=__ret__.expire_day,
        expire_status=__ret__.expire_status,
        id=__ret__.id,
        min_change_characters=__ret__.min_change_characters,
        min_lower_case_letter=__ret__.min_lower_case_letter,
        min_non_alphanumeric=__ret__.min_non_alphanumeric,
        min_number=__ret__.min_number,
        min_upper_case_letter=__ret__.min_upper_case_letter,
        minimum_length=__ret__.minimum_length,
        reuse_password=__ret__.reuse_password,
        status=__ret__.status,
        vdomparam=__ret__.vdomparam)


@_utilities.lift_output_func(get_passwordpolicy)
def get_passwordpolicy_output(vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPasswordpolicyResult]:
    """
    Use this data source to get information on fortios system passwordpolicy


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...

# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetNat64Result',
    'AwaitableGetNat64Result',
    'get_nat64',
    'get_nat64_output',
]

@pulumi.output_type
class GetNat64Result:
    """
    A collection of values returned by getNat64.
    """
    def __init__(__self__, always_synthesize_aaaa_record=None, generate_ipv6_fragment_header=None, id=None, nat46_force_ipv4_packet_forwarding=None, nat64_prefix=None, secondary_prefix_status=None, secondary_prefixes=None, status=None, vdomparam=None):
        if always_synthesize_aaaa_record and not isinstance(always_synthesize_aaaa_record, str):
            raise TypeError("Expected argument 'always_synthesize_aaaa_record' to be a str")
        pulumi.set(__self__, "always_synthesize_aaaa_record", always_synthesize_aaaa_record)
        if generate_ipv6_fragment_header and not isinstance(generate_ipv6_fragment_header, str):
            raise TypeError("Expected argument 'generate_ipv6_fragment_header' to be a str")
        pulumi.set(__self__, "generate_ipv6_fragment_header", generate_ipv6_fragment_header)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if nat46_force_ipv4_packet_forwarding and not isinstance(nat46_force_ipv4_packet_forwarding, str):
            raise TypeError("Expected argument 'nat46_force_ipv4_packet_forwarding' to be a str")
        pulumi.set(__self__, "nat46_force_ipv4_packet_forwarding", nat46_force_ipv4_packet_forwarding)
        if nat64_prefix and not isinstance(nat64_prefix, str):
            raise TypeError("Expected argument 'nat64_prefix' to be a str")
        pulumi.set(__self__, "nat64_prefix", nat64_prefix)
        if secondary_prefix_status and not isinstance(secondary_prefix_status, str):
            raise TypeError("Expected argument 'secondary_prefix_status' to be a str")
        pulumi.set(__self__, "secondary_prefix_status", secondary_prefix_status)
        if secondary_prefixes and not isinstance(secondary_prefixes, list):
            raise TypeError("Expected argument 'secondary_prefixes' to be a list")
        pulumi.set(__self__, "secondary_prefixes", secondary_prefixes)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="alwaysSynthesizeAaaaRecord")
    def always_synthesize_aaaa_record(self) -> str:
        """
        Enable/disable AAAA record synthesis (default = enable).
        """
        return pulumi.get(self, "always_synthesize_aaaa_record")

    @property
    @pulumi.getter(name="generateIpv6FragmentHeader")
    def generate_ipv6_fragment_header(self) -> str:
        """
        Enable/disable IPv6 fragment header generation.
        """
        return pulumi.get(self, "generate_ipv6_fragment_header")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nat46ForceIpv4PacketForwarding")
    def nat46_force_ipv4_packet_forwarding(self) -> str:
        """
        Enable/disable mandatory IPv4 packet forwarding in nat46.
        """
        return pulumi.get(self, "nat46_force_ipv4_packet_forwarding")

    @property
    @pulumi.getter(name="nat64Prefix")
    def nat64_prefix(self) -> str:
        """
        NAT64 prefix.
        """
        return pulumi.get(self, "nat64_prefix")

    @property
    @pulumi.getter(name="secondaryPrefixStatus")
    def secondary_prefix_status(self) -> str:
        """
        Enable/disable secondary NAT64 prefix.
        """
        return pulumi.get(self, "secondary_prefix_status")

    @property
    @pulumi.getter(name="secondaryPrefixes")
    def secondary_prefixes(self) -> Sequence['outputs.GetNat64SecondaryPrefixResult']:
        """
        Secondary NAT64 prefix. The structure of `secondary_prefix` block is documented below.
        """
        return pulumi.get(self, "secondary_prefixes")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable NAT64 (default = disable).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetNat64Result(GetNat64Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNat64Result(
            always_synthesize_aaaa_record=self.always_synthesize_aaaa_record,
            generate_ipv6_fragment_header=self.generate_ipv6_fragment_header,
            id=self.id,
            nat46_force_ipv4_packet_forwarding=self.nat46_force_ipv4_packet_forwarding,
            nat64_prefix=self.nat64_prefix,
            secondary_prefix_status=self.secondary_prefix_status,
            secondary_prefixes=self.secondary_prefixes,
            status=self.status,
            vdomparam=self.vdomparam)


def get_nat64(vdomparam: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNat64Result:
    """
    Use this data source to get information on fortios system nat64


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:sys/getNat64:getNat64', __args__, opts=opts, typ=GetNat64Result).value

    return AwaitableGetNat64Result(
        always_synthesize_aaaa_record=__ret__.always_synthesize_aaaa_record,
        generate_ipv6_fragment_header=__ret__.generate_ipv6_fragment_header,
        id=__ret__.id,
        nat46_force_ipv4_packet_forwarding=__ret__.nat46_force_ipv4_packet_forwarding,
        nat64_prefix=__ret__.nat64_prefix,
        secondary_prefix_status=__ret__.secondary_prefix_status,
        secondary_prefixes=__ret__.secondary_prefixes,
        status=__ret__.status,
        vdomparam=__ret__.vdomparam)


@_utilities.lift_output_func(get_nat64)
def get_nat64_output(vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNat64Result]:
    """
    Use this data source to get information on fortios system nat64


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...

# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetEmailserverResult',
    'AwaitableGetEmailserverResult',
    'get_emailserver',
    'get_emailserver_output',
]

@pulumi.output_type
class GetEmailserverResult:
    """
    A collection of values returned by getEmailserver.
    """
    def __init__(__self__, authenticate=None, id=None, interface=None, interface_select_method=None, password=None, port=None, reply_to=None, security=None, server=None, source_ip=None, source_ip6=None, ssl_min_proto_version=None, type=None, username=None, validate_server=None, vdomparam=None):
        if authenticate and not isinstance(authenticate, str):
            raise TypeError("Expected argument 'authenticate' to be a str")
        pulumi.set(__self__, "authenticate", authenticate)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface and not isinstance(interface, str):
            raise TypeError("Expected argument 'interface' to be a str")
        pulumi.set(__self__, "interface", interface)
        if interface_select_method and not isinstance(interface_select_method, str):
            raise TypeError("Expected argument 'interface_select_method' to be a str")
        pulumi.set(__self__, "interface_select_method", interface_select_method)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if reply_to and not isinstance(reply_to, str):
            raise TypeError("Expected argument 'reply_to' to be a str")
        pulumi.set(__self__, "reply_to", reply_to)
        if security and not isinstance(security, str):
            raise TypeError("Expected argument 'security' to be a str")
        pulumi.set(__self__, "security", security)
        if server and not isinstance(server, str):
            raise TypeError("Expected argument 'server' to be a str")
        pulumi.set(__self__, "server", server)
        if source_ip and not isinstance(source_ip, str):
            raise TypeError("Expected argument 'source_ip' to be a str")
        pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 and not isinstance(source_ip6, str):
            raise TypeError("Expected argument 'source_ip6' to be a str")
        pulumi.set(__self__, "source_ip6", source_ip6)
        if ssl_min_proto_version and not isinstance(ssl_min_proto_version, str):
            raise TypeError("Expected argument 'ssl_min_proto_version' to be a str")
        pulumi.set(__self__, "ssl_min_proto_version", ssl_min_proto_version)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if validate_server and not isinstance(validate_server, str):
            raise TypeError("Expected argument 'validate_server' to be a str")
        pulumi.set(__self__, "validate_server", validate_server)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def authenticate(self) -> str:
        """
        Enable/disable authentication.
        """
        return pulumi.get(self, "authenticate")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> str:
        """
        Specify how to select outgoing interface to reach server.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        SMTP server user password for authentication.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        SMTP server port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="replyTo")
    def reply_to(self) -> str:
        """
        Reply-To email address.
        """
        return pulumi.get(self, "reply_to")

    @property
    @pulumi.getter
    def security(self) -> str:
        """
        Connection security used by the email server.
        """
        return pulumi.get(self, "security")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        SMTP server IP address or hostname.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> str:
        """
        SMTP server IPv4 source IP.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> str:
        """
        SMTP server IPv6 source IP.
        """
        return pulumi.get(self, "source_ip6")

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> str:
        """
        Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        """
        return pulumi.get(self, "ssl_min_proto_version")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Use FortiGuard Message service or custom email server.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        SMTP server user name for authentication.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="validateServer")
    def validate_server(self) -> str:
        """
        Enable/disable validation of server certificate.
        """
        return pulumi.get(self, "validate_server")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetEmailserverResult(GetEmailserverResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEmailserverResult(
            authenticate=self.authenticate,
            id=self.id,
            interface=self.interface,
            interface_select_method=self.interface_select_method,
            password=self.password,
            port=self.port,
            reply_to=self.reply_to,
            security=self.security,
            server=self.server,
            source_ip=self.source_ip,
            source_ip6=self.source_ip6,
            ssl_min_proto_version=self.ssl_min_proto_version,
            type=self.type,
            username=self.username,
            validate_server=self.validate_server,
            vdomparam=self.vdomparam)


def get_emailserver(vdomparam: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEmailserverResult:
    """
    Use this data source to get information on fortios system emailserver


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:sys/getEmailserver:getEmailserver', __args__, opts=opts, typ=GetEmailserverResult).value

    return AwaitableGetEmailserverResult(
        authenticate=__ret__.authenticate,
        id=__ret__.id,
        interface=__ret__.interface,
        interface_select_method=__ret__.interface_select_method,
        password=__ret__.password,
        port=__ret__.port,
        reply_to=__ret__.reply_to,
        security=__ret__.security,
        server=__ret__.server,
        source_ip=__ret__.source_ip,
        source_ip6=__ret__.source_ip6,
        ssl_min_proto_version=__ret__.ssl_min_proto_version,
        type=__ret__.type,
        username=__ret__.username,
        validate_server=__ret__.validate_server,
        vdomparam=__ret__.vdomparam)


@_utilities.lift_output_func(get_emailserver)
def get_emailserver_output(vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEmailserverResult]:
    """
    Use this data source to get information on fortios system emailserver


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...

# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetIpv6tunnelResult',
    'AwaitableGetIpv6tunnelResult',
    'get_ipv6tunnel',
    'get_ipv6tunnel_output',
]

@pulumi.output_type
class GetIpv6tunnelResult:
    """
    A collection of values returned by getIpv6tunnel.
    """
    def __init__(__self__, auto_asic_offload=None, destination=None, id=None, interface=None, name=None, source=None, use_sdwan=None, vdomparam=None):
        if auto_asic_offload and not isinstance(auto_asic_offload, str):
            raise TypeError("Expected argument 'auto_asic_offload' to be a str")
        pulumi.set(__self__, "auto_asic_offload", auto_asic_offload)
        if destination and not isinstance(destination, str):
            raise TypeError("Expected argument 'destination' to be a str")
        pulumi.set(__self__, "destination", destination)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface and not isinstance(interface, str):
            raise TypeError("Expected argument 'interface' to be a str")
        pulumi.set(__self__, "interface", interface)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if source and not isinstance(source, str):
            raise TypeError("Expected argument 'source' to be a str")
        pulumi.set(__self__, "source", source)
        if use_sdwan and not isinstance(use_sdwan, str):
            raise TypeError("Expected argument 'use_sdwan' to be a str")
        pulumi.set(__self__, "use_sdwan", use_sdwan)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="autoAsicOffload")
    def auto_asic_offload(self) -> str:
        """
        Enable/disable tunnel ASIC offloading.
        """
        return pulumi.get(self, "auto_asic_offload")

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        Remote IPv6 address of the tunnel.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        IPv6 tunnel name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Local IPv6 address of the tunnel.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="useSdwan")
    def use_sdwan(self) -> str:
        """
        Enable/disable use of SD-WAN to reach remote gateway.
        """
        return pulumi.get(self, "use_sdwan")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetIpv6tunnelResult(GetIpv6tunnelResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIpv6tunnelResult(
            auto_asic_offload=self.auto_asic_offload,
            destination=self.destination,
            id=self.id,
            interface=self.interface,
            name=self.name,
            source=self.source,
            use_sdwan=self.use_sdwan,
            vdomparam=self.vdomparam)


def get_ipv6tunnel(name: Optional[str] = None,
                   vdomparam: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIpv6tunnelResult:
    """
    Use this data source to get information on an fortios system ipv6tunnel


    :param str name: Specify the name of the desired system ipv6tunnel.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:sys/getIpv6tunnel:getIpv6tunnel', __args__, opts=opts, typ=GetIpv6tunnelResult).value

    return AwaitableGetIpv6tunnelResult(
        auto_asic_offload=__ret__.auto_asic_offload,
        destination=__ret__.destination,
        id=__ret__.id,
        interface=__ret__.interface,
        name=__ret__.name,
        source=__ret__.source,
        use_sdwan=__ret__.use_sdwan,
        vdomparam=__ret__.vdomparam)


@_utilities.lift_output_func(get_ipv6tunnel)
def get_ipv6tunnel_output(name: Optional[pulumi.Input[str]] = None,
                          vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIpv6tunnelResult]:
    """
    Use this data source to get information on an fortios system ipv6tunnel


    :param str name: Specify the name of the desired system ipv6tunnel.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...

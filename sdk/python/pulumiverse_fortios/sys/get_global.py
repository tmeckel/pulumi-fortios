# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetGlobalResult',
    'AwaitableGetGlobalResult',
    'get_global',
    'get_global_output',
]

@pulumi.output_type
class GetGlobalResult:
    """
    A collection of values returned by getGlobal.
    """
    def __init__(__self__, admin_concurrent=None, admin_console_timeout=None, admin_forticloud_sso_login=None, admin_host=None, admin_hsts_max_age=None, admin_https_pki_required=None, admin_https_redirect=None, admin_https_ssl_banned_ciphers=None, admin_https_ssl_ciphersuites=None, admin_https_ssl_versions=None, admin_lockout_duration=None, admin_lockout_threshold=None, admin_login_max=None, admin_maintainer=None, admin_port=None, admin_restrict_local=None, admin_scp=None, admin_server_cert=None, admin_sport=None, admin_ssh_grace_time=None, admin_ssh_password=None, admin_ssh_port=None, admin_ssh_v1=None, admin_telnet=None, admin_telnet_port=None, admintimeout=None, alias=None, allow_traffic_redirect=None, anti_replay=None, arp_max_entry=None, asymroute=None, auth_cert=None, auth_http_port=None, auth_https_port=None, auth_ike_saml_port=None, auth_keepalive=None, auth_session_limit=None, auto_auth_extension_device=None, autorun_log_fsck=None, av_affinity=None, av_failopen=None, av_failopen_session=None, batch_cmdb=None, block_session_timer=None, br_fdb_max_entry=None, cert_chain_max=None, cfg_revert_timeout=None, cfg_save=None, check_protocol_header=None, check_reset_range=None, cli_audit_log=None, cloud_communication=None, clt_cert_req=None, cmdbsvr_affinity=None, compliance_check=None, compliance_check_time=None, cpu_use_threshold=None, csr_ca_attribute=None, daily_restart=None, default_service_source_port=None, device_identification_active_scan_delay=None, device_idle_timeout=None, dh_params=None, dnsproxy_worker_count=None, dst=None, early_tcp_npu_session=None, edit_vdom_prompt=None, endpoint_control_fds_access=None, endpoint_control_portal_port=None, extender_controller_reserved_network=None, failtime=None, faz_disk_buffer_size=None, fds_statistics=None, fds_statistics_period=None, fec_port=None, fgd_alert_subscription=None, fortiextender=None, fortiextender_data_port=None, fortiextender_discovery_lockdown=None, fortiextender_provision_on_authorization=None, fortiextender_vlan_mode=None, fortiipam_integration=None, fortiservice_port=None, fortitoken_cloud=None, gui_allow_default_hostname=None, gui_app_detection_sdwan=None, gui_cdn_usage=None, gui_certificates=None, gui_custom_language=None, gui_date_format=None, gui_date_time_source=None, gui_device_latitude=None, gui_device_longitude=None, gui_display_hostname=None, gui_firmware_upgrade_setup_warning=None, gui_firmware_upgrade_warning=None, gui_forticare_registration_setup_warning=None, gui_fortigate_cloud_sandbox=None, gui_fortiguard_resource_fetch=None, gui_fortisandbox_cloud=None, gui_ipv6=None, gui_lines_per_page=None, gui_local_out=None, gui_replacement_message_groups=None, gui_rest_api_cache=None, gui_theme=None, gui_wireless_opensecurity=None, gui_workflow_management=None, ha_affinity=None, honor_df=None, hostname=None, id=None, igmp_state_limit=None, ike_embryonic_limit=None, internet_service_database=None, interval=None, ip_src_port_range=None, ips_affinity=None, ipsec_asic_offload=None, ipsec_ha_seqjump_rate=None, ipsec_hmac_offload=None, ipsec_round_robin=None, ipsec_soft_dec_async=None, ipv6_accept_dad=None, ipv6_allow_anycast_probe=None, ipv6_allow_local_in_slient_drop=None, ipv6_allow_multicast_probe=None, ipv6_allow_traffic_redirect=None, irq_time_accounting=None, language=None, ldapconntimeout=None, lldp_reception=None, lldp_transmission=None, log_ssl_connection=None, log_uuid_address=None, log_uuid_policy=None, login_timestamp=None, long_vdom_name=None, management_ip=None, management_port=None, management_port_use_admin_sport=None, management_vdom=None, max_dlpstat_memory=None, max_route_cache_size=None, mc_ttl_notchange=None, memory_use_threshold_extreme=None, memory_use_threshold_green=None, memory_use_threshold_red=None, miglog_affinity=None, miglogd_children=None, multi_factor_authentication=None, multicast_forward=None, ndp_max_entry=None, per_user_bal=None, per_user_bwl=None, pmtu_discovery=None, policy_auth_concurrent=None, post_login_banner=None, pre_login_banner=None, private_data_encryption=None, proxy_auth_lifetime=None, proxy_auth_lifetime_timeout=None, proxy_auth_timeout=None, proxy_cert_use_mgmt_vdom=None, proxy_cipher_hardware_acceleration=None, proxy_hardware_acceleration=None, proxy_kxp_hardware_acceleration=None, proxy_re_authentication_mode=None, proxy_resource_mode=None, proxy_worker_count=None, radius_port=None, reboot_upon_config_restore=None, refresh=None, remoteauthtimeout=None, reset_sessionless_tcp=None, restart_time=None, revision_backup_on_logout=None, revision_image_auto_backup=None, scanunit_count=None, security_rating_result_submission=None, security_rating_run_on_schedule=None, send_pmtu_icmp=None, snat_route_change=None, special_file23_support=None, speedtest_server=None, split_port=None, ssd_trim_date=None, ssd_trim_freq=None, ssd_trim_hour=None, ssd_trim_min=None, ssd_trim_weekday=None, ssh_cbc_cipher=None, ssh_enc_algo=None, ssh_hmac_md5=None, ssh_kex_algo=None, ssh_kex_sha1=None, ssh_mac_algo=None, ssh_mac_weak=None, ssl_min_proto_version=None, ssl_static_key_ciphers=None, sslvpn_cipher_hardware_acceleration=None, sslvpn_ems_sn_check=None, sslvpn_kxp_hardware_acceleration=None, sslvpn_max_worker_count=None, sslvpn_plugin_version_check=None, strict_dirty_session_check=None, strong_crypto=None, switch_controller=None, switch_controller_reserved_network=None, sys_perf_log_interval=None, tcp_halfclose_timer=None, tcp_halfopen_timer=None, tcp_option=None, tcp_rst_timer=None, tcp_timewait_timer=None, tftp=None, timezone=None, tp_mc_skip_policy=None, traffic_priority=None, traffic_priority_level=None, two_factor_email_expiry=None, two_factor_fac_expiry=None, two_factor_ftk_expiry=None, two_factor_ftm_expiry=None, two_factor_sms_expiry=None, udp_idle_timer=None, url_filter_affinity=None, url_filter_count=None, user_device_store_max_devices=None, user_device_store_max_unified_mem=None, user_device_store_max_users=None, user_server_cert=None, vdom_admin=None, vdom_mode=None, vdomparam=None, vip_arp_range=None, virtual_server_count=None, virtual_server_hardware_acceleration=None, virtual_switch_vlan=None, wad_affinity=None, wad_csvc_cs_count=None, wad_csvc_db_count=None, wad_memory_change_granularity=None, wad_source_affinity=None, wad_worker_count=None, wifi_ca_certificate=None, wifi_certificate=None, wimax4g_usb=None, wireless_controller=None, wireless_controller_port=None):
        if admin_concurrent and not isinstance(admin_concurrent, str):
            raise TypeError("Expected argument 'admin_concurrent' to be a str")
        pulumi.set(__self__, "admin_concurrent", admin_concurrent)
        if admin_console_timeout and not isinstance(admin_console_timeout, int):
            raise TypeError("Expected argument 'admin_console_timeout' to be a int")
        pulumi.set(__self__, "admin_console_timeout", admin_console_timeout)
        if admin_forticloud_sso_login and not isinstance(admin_forticloud_sso_login, str):
            raise TypeError("Expected argument 'admin_forticloud_sso_login' to be a str")
        pulumi.set(__self__, "admin_forticloud_sso_login", admin_forticloud_sso_login)
        if admin_host and not isinstance(admin_host, str):
            raise TypeError("Expected argument 'admin_host' to be a str")
        pulumi.set(__self__, "admin_host", admin_host)
        if admin_hsts_max_age and not isinstance(admin_hsts_max_age, int):
            raise TypeError("Expected argument 'admin_hsts_max_age' to be a int")
        pulumi.set(__self__, "admin_hsts_max_age", admin_hsts_max_age)
        if admin_https_pki_required and not isinstance(admin_https_pki_required, str):
            raise TypeError("Expected argument 'admin_https_pki_required' to be a str")
        pulumi.set(__self__, "admin_https_pki_required", admin_https_pki_required)
        if admin_https_redirect and not isinstance(admin_https_redirect, str):
            raise TypeError("Expected argument 'admin_https_redirect' to be a str")
        pulumi.set(__self__, "admin_https_redirect", admin_https_redirect)
        if admin_https_ssl_banned_ciphers and not isinstance(admin_https_ssl_banned_ciphers, str):
            raise TypeError("Expected argument 'admin_https_ssl_banned_ciphers' to be a str")
        pulumi.set(__self__, "admin_https_ssl_banned_ciphers", admin_https_ssl_banned_ciphers)
        if admin_https_ssl_ciphersuites and not isinstance(admin_https_ssl_ciphersuites, str):
            raise TypeError("Expected argument 'admin_https_ssl_ciphersuites' to be a str")
        pulumi.set(__self__, "admin_https_ssl_ciphersuites", admin_https_ssl_ciphersuites)
        if admin_https_ssl_versions and not isinstance(admin_https_ssl_versions, str):
            raise TypeError("Expected argument 'admin_https_ssl_versions' to be a str")
        pulumi.set(__self__, "admin_https_ssl_versions", admin_https_ssl_versions)
        if admin_lockout_duration and not isinstance(admin_lockout_duration, int):
            raise TypeError("Expected argument 'admin_lockout_duration' to be a int")
        pulumi.set(__self__, "admin_lockout_duration", admin_lockout_duration)
        if admin_lockout_threshold and not isinstance(admin_lockout_threshold, int):
            raise TypeError("Expected argument 'admin_lockout_threshold' to be a int")
        pulumi.set(__self__, "admin_lockout_threshold", admin_lockout_threshold)
        if admin_login_max and not isinstance(admin_login_max, int):
            raise TypeError("Expected argument 'admin_login_max' to be a int")
        pulumi.set(__self__, "admin_login_max", admin_login_max)
        if admin_maintainer and not isinstance(admin_maintainer, str):
            raise TypeError("Expected argument 'admin_maintainer' to be a str")
        pulumi.set(__self__, "admin_maintainer", admin_maintainer)
        if admin_port and not isinstance(admin_port, int):
            raise TypeError("Expected argument 'admin_port' to be a int")
        pulumi.set(__self__, "admin_port", admin_port)
        if admin_restrict_local and not isinstance(admin_restrict_local, str):
            raise TypeError("Expected argument 'admin_restrict_local' to be a str")
        pulumi.set(__self__, "admin_restrict_local", admin_restrict_local)
        if admin_scp and not isinstance(admin_scp, str):
            raise TypeError("Expected argument 'admin_scp' to be a str")
        pulumi.set(__self__, "admin_scp", admin_scp)
        if admin_server_cert and not isinstance(admin_server_cert, str):
            raise TypeError("Expected argument 'admin_server_cert' to be a str")
        pulumi.set(__self__, "admin_server_cert", admin_server_cert)
        if admin_sport and not isinstance(admin_sport, int):
            raise TypeError("Expected argument 'admin_sport' to be a int")
        pulumi.set(__self__, "admin_sport", admin_sport)
        if admin_ssh_grace_time and not isinstance(admin_ssh_grace_time, int):
            raise TypeError("Expected argument 'admin_ssh_grace_time' to be a int")
        pulumi.set(__self__, "admin_ssh_grace_time", admin_ssh_grace_time)
        if admin_ssh_password and not isinstance(admin_ssh_password, str):
            raise TypeError("Expected argument 'admin_ssh_password' to be a str")
        pulumi.set(__self__, "admin_ssh_password", admin_ssh_password)
        if admin_ssh_port and not isinstance(admin_ssh_port, int):
            raise TypeError("Expected argument 'admin_ssh_port' to be a int")
        pulumi.set(__self__, "admin_ssh_port", admin_ssh_port)
        if admin_ssh_v1 and not isinstance(admin_ssh_v1, str):
            raise TypeError("Expected argument 'admin_ssh_v1' to be a str")
        pulumi.set(__self__, "admin_ssh_v1", admin_ssh_v1)
        if admin_telnet and not isinstance(admin_telnet, str):
            raise TypeError("Expected argument 'admin_telnet' to be a str")
        pulumi.set(__self__, "admin_telnet", admin_telnet)
        if admin_telnet_port and not isinstance(admin_telnet_port, int):
            raise TypeError("Expected argument 'admin_telnet_port' to be a int")
        pulumi.set(__self__, "admin_telnet_port", admin_telnet_port)
        if admintimeout and not isinstance(admintimeout, int):
            raise TypeError("Expected argument 'admintimeout' to be a int")
        pulumi.set(__self__, "admintimeout", admintimeout)
        if alias and not isinstance(alias, str):
            raise TypeError("Expected argument 'alias' to be a str")
        pulumi.set(__self__, "alias", alias)
        if allow_traffic_redirect and not isinstance(allow_traffic_redirect, str):
            raise TypeError("Expected argument 'allow_traffic_redirect' to be a str")
        pulumi.set(__self__, "allow_traffic_redirect", allow_traffic_redirect)
        if anti_replay and not isinstance(anti_replay, str):
            raise TypeError("Expected argument 'anti_replay' to be a str")
        pulumi.set(__self__, "anti_replay", anti_replay)
        if arp_max_entry and not isinstance(arp_max_entry, int):
            raise TypeError("Expected argument 'arp_max_entry' to be a int")
        pulumi.set(__self__, "arp_max_entry", arp_max_entry)
        if asymroute and not isinstance(asymroute, str):
            raise TypeError("Expected argument 'asymroute' to be a str")
        pulumi.set(__self__, "asymroute", asymroute)
        if auth_cert and not isinstance(auth_cert, str):
            raise TypeError("Expected argument 'auth_cert' to be a str")
        pulumi.set(__self__, "auth_cert", auth_cert)
        if auth_http_port and not isinstance(auth_http_port, int):
            raise TypeError("Expected argument 'auth_http_port' to be a int")
        pulumi.set(__self__, "auth_http_port", auth_http_port)
        if auth_https_port and not isinstance(auth_https_port, int):
            raise TypeError("Expected argument 'auth_https_port' to be a int")
        pulumi.set(__self__, "auth_https_port", auth_https_port)
        if auth_ike_saml_port and not isinstance(auth_ike_saml_port, int):
            raise TypeError("Expected argument 'auth_ike_saml_port' to be a int")
        pulumi.set(__self__, "auth_ike_saml_port", auth_ike_saml_port)
        if auth_keepalive and not isinstance(auth_keepalive, str):
            raise TypeError("Expected argument 'auth_keepalive' to be a str")
        pulumi.set(__self__, "auth_keepalive", auth_keepalive)
        if auth_session_limit and not isinstance(auth_session_limit, str):
            raise TypeError("Expected argument 'auth_session_limit' to be a str")
        pulumi.set(__self__, "auth_session_limit", auth_session_limit)
        if auto_auth_extension_device and not isinstance(auto_auth_extension_device, str):
            raise TypeError("Expected argument 'auto_auth_extension_device' to be a str")
        pulumi.set(__self__, "auto_auth_extension_device", auto_auth_extension_device)
        if autorun_log_fsck and not isinstance(autorun_log_fsck, str):
            raise TypeError("Expected argument 'autorun_log_fsck' to be a str")
        pulumi.set(__self__, "autorun_log_fsck", autorun_log_fsck)
        if av_affinity and not isinstance(av_affinity, str):
            raise TypeError("Expected argument 'av_affinity' to be a str")
        pulumi.set(__self__, "av_affinity", av_affinity)
        if av_failopen and not isinstance(av_failopen, str):
            raise TypeError("Expected argument 'av_failopen' to be a str")
        pulumi.set(__self__, "av_failopen", av_failopen)
        if av_failopen_session and not isinstance(av_failopen_session, str):
            raise TypeError("Expected argument 'av_failopen_session' to be a str")
        pulumi.set(__self__, "av_failopen_session", av_failopen_session)
        if batch_cmdb and not isinstance(batch_cmdb, str):
            raise TypeError("Expected argument 'batch_cmdb' to be a str")
        pulumi.set(__self__, "batch_cmdb", batch_cmdb)
        if block_session_timer and not isinstance(block_session_timer, int):
            raise TypeError("Expected argument 'block_session_timer' to be a int")
        pulumi.set(__self__, "block_session_timer", block_session_timer)
        if br_fdb_max_entry and not isinstance(br_fdb_max_entry, int):
            raise TypeError("Expected argument 'br_fdb_max_entry' to be a int")
        pulumi.set(__self__, "br_fdb_max_entry", br_fdb_max_entry)
        if cert_chain_max and not isinstance(cert_chain_max, int):
            raise TypeError("Expected argument 'cert_chain_max' to be a int")
        pulumi.set(__self__, "cert_chain_max", cert_chain_max)
        if cfg_revert_timeout and not isinstance(cfg_revert_timeout, int):
            raise TypeError("Expected argument 'cfg_revert_timeout' to be a int")
        pulumi.set(__self__, "cfg_revert_timeout", cfg_revert_timeout)
        if cfg_save and not isinstance(cfg_save, str):
            raise TypeError("Expected argument 'cfg_save' to be a str")
        pulumi.set(__self__, "cfg_save", cfg_save)
        if check_protocol_header and not isinstance(check_protocol_header, str):
            raise TypeError("Expected argument 'check_protocol_header' to be a str")
        pulumi.set(__self__, "check_protocol_header", check_protocol_header)
        if check_reset_range and not isinstance(check_reset_range, str):
            raise TypeError("Expected argument 'check_reset_range' to be a str")
        pulumi.set(__self__, "check_reset_range", check_reset_range)
        if cli_audit_log and not isinstance(cli_audit_log, str):
            raise TypeError("Expected argument 'cli_audit_log' to be a str")
        pulumi.set(__self__, "cli_audit_log", cli_audit_log)
        if cloud_communication and not isinstance(cloud_communication, str):
            raise TypeError("Expected argument 'cloud_communication' to be a str")
        pulumi.set(__self__, "cloud_communication", cloud_communication)
        if clt_cert_req and not isinstance(clt_cert_req, str):
            raise TypeError("Expected argument 'clt_cert_req' to be a str")
        pulumi.set(__self__, "clt_cert_req", clt_cert_req)
        if cmdbsvr_affinity and not isinstance(cmdbsvr_affinity, str):
            raise TypeError("Expected argument 'cmdbsvr_affinity' to be a str")
        pulumi.set(__self__, "cmdbsvr_affinity", cmdbsvr_affinity)
        if compliance_check and not isinstance(compliance_check, str):
            raise TypeError("Expected argument 'compliance_check' to be a str")
        pulumi.set(__self__, "compliance_check", compliance_check)
        if compliance_check_time and not isinstance(compliance_check_time, str):
            raise TypeError("Expected argument 'compliance_check_time' to be a str")
        pulumi.set(__self__, "compliance_check_time", compliance_check_time)
        if cpu_use_threshold and not isinstance(cpu_use_threshold, int):
            raise TypeError("Expected argument 'cpu_use_threshold' to be a int")
        pulumi.set(__self__, "cpu_use_threshold", cpu_use_threshold)
        if csr_ca_attribute and not isinstance(csr_ca_attribute, str):
            raise TypeError("Expected argument 'csr_ca_attribute' to be a str")
        pulumi.set(__self__, "csr_ca_attribute", csr_ca_attribute)
        if daily_restart and not isinstance(daily_restart, str):
            raise TypeError("Expected argument 'daily_restart' to be a str")
        pulumi.set(__self__, "daily_restart", daily_restart)
        if default_service_source_port and not isinstance(default_service_source_port, str):
            raise TypeError("Expected argument 'default_service_source_port' to be a str")
        pulumi.set(__self__, "default_service_source_port", default_service_source_port)
        if device_identification_active_scan_delay and not isinstance(device_identification_active_scan_delay, int):
            raise TypeError("Expected argument 'device_identification_active_scan_delay' to be a int")
        pulumi.set(__self__, "device_identification_active_scan_delay", device_identification_active_scan_delay)
        if device_idle_timeout and not isinstance(device_idle_timeout, int):
            raise TypeError("Expected argument 'device_idle_timeout' to be a int")
        pulumi.set(__self__, "device_idle_timeout", device_idle_timeout)
        if dh_params and not isinstance(dh_params, str):
            raise TypeError("Expected argument 'dh_params' to be a str")
        pulumi.set(__self__, "dh_params", dh_params)
        if dnsproxy_worker_count and not isinstance(dnsproxy_worker_count, int):
            raise TypeError("Expected argument 'dnsproxy_worker_count' to be a int")
        pulumi.set(__self__, "dnsproxy_worker_count", dnsproxy_worker_count)
        if dst and not isinstance(dst, str):
            raise TypeError("Expected argument 'dst' to be a str")
        pulumi.set(__self__, "dst", dst)
        if early_tcp_npu_session and not isinstance(early_tcp_npu_session, str):
            raise TypeError("Expected argument 'early_tcp_npu_session' to be a str")
        pulumi.set(__self__, "early_tcp_npu_session", early_tcp_npu_session)
        if edit_vdom_prompt and not isinstance(edit_vdom_prompt, str):
            raise TypeError("Expected argument 'edit_vdom_prompt' to be a str")
        pulumi.set(__self__, "edit_vdom_prompt", edit_vdom_prompt)
        if endpoint_control_fds_access and not isinstance(endpoint_control_fds_access, str):
            raise TypeError("Expected argument 'endpoint_control_fds_access' to be a str")
        pulumi.set(__self__, "endpoint_control_fds_access", endpoint_control_fds_access)
        if endpoint_control_portal_port and not isinstance(endpoint_control_portal_port, int):
            raise TypeError("Expected argument 'endpoint_control_portal_port' to be a int")
        pulumi.set(__self__, "endpoint_control_portal_port", endpoint_control_portal_port)
        if extender_controller_reserved_network and not isinstance(extender_controller_reserved_network, str):
            raise TypeError("Expected argument 'extender_controller_reserved_network' to be a str")
        pulumi.set(__self__, "extender_controller_reserved_network", extender_controller_reserved_network)
        if failtime and not isinstance(failtime, int):
            raise TypeError("Expected argument 'failtime' to be a int")
        pulumi.set(__self__, "failtime", failtime)
        if faz_disk_buffer_size and not isinstance(faz_disk_buffer_size, int):
            raise TypeError("Expected argument 'faz_disk_buffer_size' to be a int")
        pulumi.set(__self__, "faz_disk_buffer_size", faz_disk_buffer_size)
        if fds_statistics and not isinstance(fds_statistics, str):
            raise TypeError("Expected argument 'fds_statistics' to be a str")
        pulumi.set(__self__, "fds_statistics", fds_statistics)
        if fds_statistics_period and not isinstance(fds_statistics_period, int):
            raise TypeError("Expected argument 'fds_statistics_period' to be a int")
        pulumi.set(__self__, "fds_statistics_period", fds_statistics_period)
        if fec_port and not isinstance(fec_port, int):
            raise TypeError("Expected argument 'fec_port' to be a int")
        pulumi.set(__self__, "fec_port", fec_port)
        if fgd_alert_subscription and not isinstance(fgd_alert_subscription, str):
            raise TypeError("Expected argument 'fgd_alert_subscription' to be a str")
        pulumi.set(__self__, "fgd_alert_subscription", fgd_alert_subscription)
        if fortiextender and not isinstance(fortiextender, str):
            raise TypeError("Expected argument 'fortiextender' to be a str")
        pulumi.set(__self__, "fortiextender", fortiextender)
        if fortiextender_data_port and not isinstance(fortiextender_data_port, int):
            raise TypeError("Expected argument 'fortiextender_data_port' to be a int")
        pulumi.set(__self__, "fortiextender_data_port", fortiextender_data_port)
        if fortiextender_discovery_lockdown and not isinstance(fortiextender_discovery_lockdown, str):
            raise TypeError("Expected argument 'fortiextender_discovery_lockdown' to be a str")
        pulumi.set(__self__, "fortiextender_discovery_lockdown", fortiextender_discovery_lockdown)
        if fortiextender_provision_on_authorization and not isinstance(fortiextender_provision_on_authorization, str):
            raise TypeError("Expected argument 'fortiextender_provision_on_authorization' to be a str")
        pulumi.set(__self__, "fortiextender_provision_on_authorization", fortiextender_provision_on_authorization)
        if fortiextender_vlan_mode and not isinstance(fortiextender_vlan_mode, str):
            raise TypeError("Expected argument 'fortiextender_vlan_mode' to be a str")
        pulumi.set(__self__, "fortiextender_vlan_mode", fortiextender_vlan_mode)
        if fortiipam_integration and not isinstance(fortiipam_integration, str):
            raise TypeError("Expected argument 'fortiipam_integration' to be a str")
        pulumi.set(__self__, "fortiipam_integration", fortiipam_integration)
        if fortiservice_port and not isinstance(fortiservice_port, int):
            raise TypeError("Expected argument 'fortiservice_port' to be a int")
        pulumi.set(__self__, "fortiservice_port", fortiservice_port)
        if fortitoken_cloud and not isinstance(fortitoken_cloud, str):
            raise TypeError("Expected argument 'fortitoken_cloud' to be a str")
        pulumi.set(__self__, "fortitoken_cloud", fortitoken_cloud)
        if gui_allow_default_hostname and not isinstance(gui_allow_default_hostname, str):
            raise TypeError("Expected argument 'gui_allow_default_hostname' to be a str")
        pulumi.set(__self__, "gui_allow_default_hostname", gui_allow_default_hostname)
        if gui_app_detection_sdwan and not isinstance(gui_app_detection_sdwan, str):
            raise TypeError("Expected argument 'gui_app_detection_sdwan' to be a str")
        pulumi.set(__self__, "gui_app_detection_sdwan", gui_app_detection_sdwan)
        if gui_cdn_usage and not isinstance(gui_cdn_usage, str):
            raise TypeError("Expected argument 'gui_cdn_usage' to be a str")
        pulumi.set(__self__, "gui_cdn_usage", gui_cdn_usage)
        if gui_certificates and not isinstance(gui_certificates, str):
            raise TypeError("Expected argument 'gui_certificates' to be a str")
        pulumi.set(__self__, "gui_certificates", gui_certificates)
        if gui_custom_language and not isinstance(gui_custom_language, str):
            raise TypeError("Expected argument 'gui_custom_language' to be a str")
        pulumi.set(__self__, "gui_custom_language", gui_custom_language)
        if gui_date_format and not isinstance(gui_date_format, str):
            raise TypeError("Expected argument 'gui_date_format' to be a str")
        pulumi.set(__self__, "gui_date_format", gui_date_format)
        if gui_date_time_source and not isinstance(gui_date_time_source, str):
            raise TypeError("Expected argument 'gui_date_time_source' to be a str")
        pulumi.set(__self__, "gui_date_time_source", gui_date_time_source)
        if gui_device_latitude and not isinstance(gui_device_latitude, str):
            raise TypeError("Expected argument 'gui_device_latitude' to be a str")
        pulumi.set(__self__, "gui_device_latitude", gui_device_latitude)
        if gui_device_longitude and not isinstance(gui_device_longitude, str):
            raise TypeError("Expected argument 'gui_device_longitude' to be a str")
        pulumi.set(__self__, "gui_device_longitude", gui_device_longitude)
        if gui_display_hostname and not isinstance(gui_display_hostname, str):
            raise TypeError("Expected argument 'gui_display_hostname' to be a str")
        pulumi.set(__self__, "gui_display_hostname", gui_display_hostname)
        if gui_firmware_upgrade_setup_warning and not isinstance(gui_firmware_upgrade_setup_warning, str):
            raise TypeError("Expected argument 'gui_firmware_upgrade_setup_warning' to be a str")
        pulumi.set(__self__, "gui_firmware_upgrade_setup_warning", gui_firmware_upgrade_setup_warning)
        if gui_firmware_upgrade_warning and not isinstance(gui_firmware_upgrade_warning, str):
            raise TypeError("Expected argument 'gui_firmware_upgrade_warning' to be a str")
        pulumi.set(__self__, "gui_firmware_upgrade_warning", gui_firmware_upgrade_warning)
        if gui_forticare_registration_setup_warning and not isinstance(gui_forticare_registration_setup_warning, str):
            raise TypeError("Expected argument 'gui_forticare_registration_setup_warning' to be a str")
        pulumi.set(__self__, "gui_forticare_registration_setup_warning", gui_forticare_registration_setup_warning)
        if gui_fortigate_cloud_sandbox and not isinstance(gui_fortigate_cloud_sandbox, str):
            raise TypeError("Expected argument 'gui_fortigate_cloud_sandbox' to be a str")
        pulumi.set(__self__, "gui_fortigate_cloud_sandbox", gui_fortigate_cloud_sandbox)
        if gui_fortiguard_resource_fetch and not isinstance(gui_fortiguard_resource_fetch, str):
            raise TypeError("Expected argument 'gui_fortiguard_resource_fetch' to be a str")
        pulumi.set(__self__, "gui_fortiguard_resource_fetch", gui_fortiguard_resource_fetch)
        if gui_fortisandbox_cloud and not isinstance(gui_fortisandbox_cloud, str):
            raise TypeError("Expected argument 'gui_fortisandbox_cloud' to be a str")
        pulumi.set(__self__, "gui_fortisandbox_cloud", gui_fortisandbox_cloud)
        if gui_ipv6 and not isinstance(gui_ipv6, str):
            raise TypeError("Expected argument 'gui_ipv6' to be a str")
        pulumi.set(__self__, "gui_ipv6", gui_ipv6)
        if gui_lines_per_page and not isinstance(gui_lines_per_page, int):
            raise TypeError("Expected argument 'gui_lines_per_page' to be a int")
        pulumi.set(__self__, "gui_lines_per_page", gui_lines_per_page)
        if gui_local_out and not isinstance(gui_local_out, str):
            raise TypeError("Expected argument 'gui_local_out' to be a str")
        pulumi.set(__self__, "gui_local_out", gui_local_out)
        if gui_replacement_message_groups and not isinstance(gui_replacement_message_groups, str):
            raise TypeError("Expected argument 'gui_replacement_message_groups' to be a str")
        pulumi.set(__self__, "gui_replacement_message_groups", gui_replacement_message_groups)
        if gui_rest_api_cache and not isinstance(gui_rest_api_cache, str):
            raise TypeError("Expected argument 'gui_rest_api_cache' to be a str")
        pulumi.set(__self__, "gui_rest_api_cache", gui_rest_api_cache)
        if gui_theme and not isinstance(gui_theme, str):
            raise TypeError("Expected argument 'gui_theme' to be a str")
        pulumi.set(__self__, "gui_theme", gui_theme)
        if gui_wireless_opensecurity and not isinstance(gui_wireless_opensecurity, str):
            raise TypeError("Expected argument 'gui_wireless_opensecurity' to be a str")
        pulumi.set(__self__, "gui_wireless_opensecurity", gui_wireless_opensecurity)
        if gui_workflow_management and not isinstance(gui_workflow_management, str):
            raise TypeError("Expected argument 'gui_workflow_management' to be a str")
        pulumi.set(__self__, "gui_workflow_management", gui_workflow_management)
        if ha_affinity and not isinstance(ha_affinity, str):
            raise TypeError("Expected argument 'ha_affinity' to be a str")
        pulumi.set(__self__, "ha_affinity", ha_affinity)
        if honor_df and not isinstance(honor_df, str):
            raise TypeError("Expected argument 'honor_df' to be a str")
        pulumi.set(__self__, "honor_df", honor_df)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if igmp_state_limit and not isinstance(igmp_state_limit, int):
            raise TypeError("Expected argument 'igmp_state_limit' to be a int")
        pulumi.set(__self__, "igmp_state_limit", igmp_state_limit)
        if ike_embryonic_limit and not isinstance(ike_embryonic_limit, int):
            raise TypeError("Expected argument 'ike_embryonic_limit' to be a int")
        pulumi.set(__self__, "ike_embryonic_limit", ike_embryonic_limit)
        if internet_service_database and not isinstance(internet_service_database, str):
            raise TypeError("Expected argument 'internet_service_database' to be a str")
        pulumi.set(__self__, "internet_service_database", internet_service_database)
        if interval and not isinstance(interval, int):
            raise TypeError("Expected argument 'interval' to be a int")
        pulumi.set(__self__, "interval", interval)
        if ip_src_port_range and not isinstance(ip_src_port_range, str):
            raise TypeError("Expected argument 'ip_src_port_range' to be a str")
        pulumi.set(__self__, "ip_src_port_range", ip_src_port_range)
        if ips_affinity and not isinstance(ips_affinity, str):
            raise TypeError("Expected argument 'ips_affinity' to be a str")
        pulumi.set(__self__, "ips_affinity", ips_affinity)
        if ipsec_asic_offload and not isinstance(ipsec_asic_offload, str):
            raise TypeError("Expected argument 'ipsec_asic_offload' to be a str")
        pulumi.set(__self__, "ipsec_asic_offload", ipsec_asic_offload)
        if ipsec_ha_seqjump_rate and not isinstance(ipsec_ha_seqjump_rate, int):
            raise TypeError("Expected argument 'ipsec_ha_seqjump_rate' to be a int")
        pulumi.set(__self__, "ipsec_ha_seqjump_rate", ipsec_ha_seqjump_rate)
        if ipsec_hmac_offload and not isinstance(ipsec_hmac_offload, str):
            raise TypeError("Expected argument 'ipsec_hmac_offload' to be a str")
        pulumi.set(__self__, "ipsec_hmac_offload", ipsec_hmac_offload)
        if ipsec_round_robin and not isinstance(ipsec_round_robin, str):
            raise TypeError("Expected argument 'ipsec_round_robin' to be a str")
        pulumi.set(__self__, "ipsec_round_robin", ipsec_round_robin)
        if ipsec_soft_dec_async and not isinstance(ipsec_soft_dec_async, str):
            raise TypeError("Expected argument 'ipsec_soft_dec_async' to be a str")
        pulumi.set(__self__, "ipsec_soft_dec_async", ipsec_soft_dec_async)
        if ipv6_accept_dad and not isinstance(ipv6_accept_dad, int):
            raise TypeError("Expected argument 'ipv6_accept_dad' to be a int")
        pulumi.set(__self__, "ipv6_accept_dad", ipv6_accept_dad)
        if ipv6_allow_anycast_probe and not isinstance(ipv6_allow_anycast_probe, str):
            raise TypeError("Expected argument 'ipv6_allow_anycast_probe' to be a str")
        pulumi.set(__self__, "ipv6_allow_anycast_probe", ipv6_allow_anycast_probe)
        if ipv6_allow_local_in_slient_drop and not isinstance(ipv6_allow_local_in_slient_drop, str):
            raise TypeError("Expected argument 'ipv6_allow_local_in_slient_drop' to be a str")
        pulumi.set(__self__, "ipv6_allow_local_in_slient_drop", ipv6_allow_local_in_slient_drop)
        if ipv6_allow_multicast_probe and not isinstance(ipv6_allow_multicast_probe, str):
            raise TypeError("Expected argument 'ipv6_allow_multicast_probe' to be a str")
        pulumi.set(__self__, "ipv6_allow_multicast_probe", ipv6_allow_multicast_probe)
        if ipv6_allow_traffic_redirect and not isinstance(ipv6_allow_traffic_redirect, str):
            raise TypeError("Expected argument 'ipv6_allow_traffic_redirect' to be a str")
        pulumi.set(__self__, "ipv6_allow_traffic_redirect", ipv6_allow_traffic_redirect)
        if irq_time_accounting and not isinstance(irq_time_accounting, str):
            raise TypeError("Expected argument 'irq_time_accounting' to be a str")
        pulumi.set(__self__, "irq_time_accounting", irq_time_accounting)
        if language and not isinstance(language, str):
            raise TypeError("Expected argument 'language' to be a str")
        pulumi.set(__self__, "language", language)
        if ldapconntimeout and not isinstance(ldapconntimeout, int):
            raise TypeError("Expected argument 'ldapconntimeout' to be a int")
        pulumi.set(__self__, "ldapconntimeout", ldapconntimeout)
        if lldp_reception and not isinstance(lldp_reception, str):
            raise TypeError("Expected argument 'lldp_reception' to be a str")
        pulumi.set(__self__, "lldp_reception", lldp_reception)
        if lldp_transmission and not isinstance(lldp_transmission, str):
            raise TypeError("Expected argument 'lldp_transmission' to be a str")
        pulumi.set(__self__, "lldp_transmission", lldp_transmission)
        if log_ssl_connection and not isinstance(log_ssl_connection, str):
            raise TypeError("Expected argument 'log_ssl_connection' to be a str")
        pulumi.set(__self__, "log_ssl_connection", log_ssl_connection)
        if log_uuid_address and not isinstance(log_uuid_address, str):
            raise TypeError("Expected argument 'log_uuid_address' to be a str")
        pulumi.set(__self__, "log_uuid_address", log_uuid_address)
        if log_uuid_policy and not isinstance(log_uuid_policy, str):
            raise TypeError("Expected argument 'log_uuid_policy' to be a str")
        pulumi.set(__self__, "log_uuid_policy", log_uuid_policy)
        if login_timestamp and not isinstance(login_timestamp, str):
            raise TypeError("Expected argument 'login_timestamp' to be a str")
        pulumi.set(__self__, "login_timestamp", login_timestamp)
        if long_vdom_name and not isinstance(long_vdom_name, str):
            raise TypeError("Expected argument 'long_vdom_name' to be a str")
        pulumi.set(__self__, "long_vdom_name", long_vdom_name)
        if management_ip and not isinstance(management_ip, str):
            raise TypeError("Expected argument 'management_ip' to be a str")
        pulumi.set(__self__, "management_ip", management_ip)
        if management_port and not isinstance(management_port, int):
            raise TypeError("Expected argument 'management_port' to be a int")
        pulumi.set(__self__, "management_port", management_port)
        if management_port_use_admin_sport and not isinstance(management_port_use_admin_sport, str):
            raise TypeError("Expected argument 'management_port_use_admin_sport' to be a str")
        pulumi.set(__self__, "management_port_use_admin_sport", management_port_use_admin_sport)
        if management_vdom and not isinstance(management_vdom, str):
            raise TypeError("Expected argument 'management_vdom' to be a str")
        pulumi.set(__self__, "management_vdom", management_vdom)
        if max_dlpstat_memory and not isinstance(max_dlpstat_memory, int):
            raise TypeError("Expected argument 'max_dlpstat_memory' to be a int")
        pulumi.set(__self__, "max_dlpstat_memory", max_dlpstat_memory)
        if max_route_cache_size and not isinstance(max_route_cache_size, int):
            raise TypeError("Expected argument 'max_route_cache_size' to be a int")
        pulumi.set(__self__, "max_route_cache_size", max_route_cache_size)
        if mc_ttl_notchange and not isinstance(mc_ttl_notchange, str):
            raise TypeError("Expected argument 'mc_ttl_notchange' to be a str")
        pulumi.set(__self__, "mc_ttl_notchange", mc_ttl_notchange)
        if memory_use_threshold_extreme and not isinstance(memory_use_threshold_extreme, int):
            raise TypeError("Expected argument 'memory_use_threshold_extreme' to be a int")
        pulumi.set(__self__, "memory_use_threshold_extreme", memory_use_threshold_extreme)
        if memory_use_threshold_green and not isinstance(memory_use_threshold_green, int):
            raise TypeError("Expected argument 'memory_use_threshold_green' to be a int")
        pulumi.set(__self__, "memory_use_threshold_green", memory_use_threshold_green)
        if memory_use_threshold_red and not isinstance(memory_use_threshold_red, int):
            raise TypeError("Expected argument 'memory_use_threshold_red' to be a int")
        pulumi.set(__self__, "memory_use_threshold_red", memory_use_threshold_red)
        if miglog_affinity and not isinstance(miglog_affinity, str):
            raise TypeError("Expected argument 'miglog_affinity' to be a str")
        pulumi.set(__self__, "miglog_affinity", miglog_affinity)
        if miglogd_children and not isinstance(miglogd_children, int):
            raise TypeError("Expected argument 'miglogd_children' to be a int")
        pulumi.set(__self__, "miglogd_children", miglogd_children)
        if multi_factor_authentication and not isinstance(multi_factor_authentication, str):
            raise TypeError("Expected argument 'multi_factor_authentication' to be a str")
        pulumi.set(__self__, "multi_factor_authentication", multi_factor_authentication)
        if multicast_forward and not isinstance(multicast_forward, str):
            raise TypeError("Expected argument 'multicast_forward' to be a str")
        pulumi.set(__self__, "multicast_forward", multicast_forward)
        if ndp_max_entry and not isinstance(ndp_max_entry, int):
            raise TypeError("Expected argument 'ndp_max_entry' to be a int")
        pulumi.set(__self__, "ndp_max_entry", ndp_max_entry)
        if per_user_bal and not isinstance(per_user_bal, str):
            raise TypeError("Expected argument 'per_user_bal' to be a str")
        pulumi.set(__self__, "per_user_bal", per_user_bal)
        if per_user_bwl and not isinstance(per_user_bwl, str):
            raise TypeError("Expected argument 'per_user_bwl' to be a str")
        pulumi.set(__self__, "per_user_bwl", per_user_bwl)
        if pmtu_discovery and not isinstance(pmtu_discovery, str):
            raise TypeError("Expected argument 'pmtu_discovery' to be a str")
        pulumi.set(__self__, "pmtu_discovery", pmtu_discovery)
        if policy_auth_concurrent and not isinstance(policy_auth_concurrent, int):
            raise TypeError("Expected argument 'policy_auth_concurrent' to be a int")
        pulumi.set(__self__, "policy_auth_concurrent", policy_auth_concurrent)
        if post_login_banner and not isinstance(post_login_banner, str):
            raise TypeError("Expected argument 'post_login_banner' to be a str")
        pulumi.set(__self__, "post_login_banner", post_login_banner)
        if pre_login_banner and not isinstance(pre_login_banner, str):
            raise TypeError("Expected argument 'pre_login_banner' to be a str")
        pulumi.set(__self__, "pre_login_banner", pre_login_banner)
        if private_data_encryption and not isinstance(private_data_encryption, str):
            raise TypeError("Expected argument 'private_data_encryption' to be a str")
        pulumi.set(__self__, "private_data_encryption", private_data_encryption)
        if proxy_auth_lifetime and not isinstance(proxy_auth_lifetime, str):
            raise TypeError("Expected argument 'proxy_auth_lifetime' to be a str")
        pulumi.set(__self__, "proxy_auth_lifetime", proxy_auth_lifetime)
        if proxy_auth_lifetime_timeout and not isinstance(proxy_auth_lifetime_timeout, int):
            raise TypeError("Expected argument 'proxy_auth_lifetime_timeout' to be a int")
        pulumi.set(__self__, "proxy_auth_lifetime_timeout", proxy_auth_lifetime_timeout)
        if proxy_auth_timeout and not isinstance(proxy_auth_timeout, int):
            raise TypeError("Expected argument 'proxy_auth_timeout' to be a int")
        pulumi.set(__self__, "proxy_auth_timeout", proxy_auth_timeout)
        if proxy_cert_use_mgmt_vdom and not isinstance(proxy_cert_use_mgmt_vdom, str):
            raise TypeError("Expected argument 'proxy_cert_use_mgmt_vdom' to be a str")
        pulumi.set(__self__, "proxy_cert_use_mgmt_vdom", proxy_cert_use_mgmt_vdom)
        if proxy_cipher_hardware_acceleration and not isinstance(proxy_cipher_hardware_acceleration, str):
            raise TypeError("Expected argument 'proxy_cipher_hardware_acceleration' to be a str")
        pulumi.set(__self__, "proxy_cipher_hardware_acceleration", proxy_cipher_hardware_acceleration)
        if proxy_hardware_acceleration and not isinstance(proxy_hardware_acceleration, str):
            raise TypeError("Expected argument 'proxy_hardware_acceleration' to be a str")
        pulumi.set(__self__, "proxy_hardware_acceleration", proxy_hardware_acceleration)
        if proxy_kxp_hardware_acceleration and not isinstance(proxy_kxp_hardware_acceleration, str):
            raise TypeError("Expected argument 'proxy_kxp_hardware_acceleration' to be a str")
        pulumi.set(__self__, "proxy_kxp_hardware_acceleration", proxy_kxp_hardware_acceleration)
        if proxy_re_authentication_mode and not isinstance(proxy_re_authentication_mode, str):
            raise TypeError("Expected argument 'proxy_re_authentication_mode' to be a str")
        pulumi.set(__self__, "proxy_re_authentication_mode", proxy_re_authentication_mode)
        if proxy_resource_mode and not isinstance(proxy_resource_mode, str):
            raise TypeError("Expected argument 'proxy_resource_mode' to be a str")
        pulumi.set(__self__, "proxy_resource_mode", proxy_resource_mode)
        if proxy_worker_count and not isinstance(proxy_worker_count, int):
            raise TypeError("Expected argument 'proxy_worker_count' to be a int")
        pulumi.set(__self__, "proxy_worker_count", proxy_worker_count)
        if radius_port and not isinstance(radius_port, int):
            raise TypeError("Expected argument 'radius_port' to be a int")
        pulumi.set(__self__, "radius_port", radius_port)
        if reboot_upon_config_restore and not isinstance(reboot_upon_config_restore, str):
            raise TypeError("Expected argument 'reboot_upon_config_restore' to be a str")
        pulumi.set(__self__, "reboot_upon_config_restore", reboot_upon_config_restore)
        if refresh and not isinstance(refresh, int):
            raise TypeError("Expected argument 'refresh' to be a int")
        pulumi.set(__self__, "refresh", refresh)
        if remoteauthtimeout and not isinstance(remoteauthtimeout, int):
            raise TypeError("Expected argument 'remoteauthtimeout' to be a int")
        pulumi.set(__self__, "remoteauthtimeout", remoteauthtimeout)
        if reset_sessionless_tcp and not isinstance(reset_sessionless_tcp, str):
            raise TypeError("Expected argument 'reset_sessionless_tcp' to be a str")
        pulumi.set(__self__, "reset_sessionless_tcp", reset_sessionless_tcp)
        if restart_time and not isinstance(restart_time, str):
            raise TypeError("Expected argument 'restart_time' to be a str")
        pulumi.set(__self__, "restart_time", restart_time)
        if revision_backup_on_logout and not isinstance(revision_backup_on_logout, str):
            raise TypeError("Expected argument 'revision_backup_on_logout' to be a str")
        pulumi.set(__self__, "revision_backup_on_logout", revision_backup_on_logout)
        if revision_image_auto_backup and not isinstance(revision_image_auto_backup, str):
            raise TypeError("Expected argument 'revision_image_auto_backup' to be a str")
        pulumi.set(__self__, "revision_image_auto_backup", revision_image_auto_backup)
        if scanunit_count and not isinstance(scanunit_count, int):
            raise TypeError("Expected argument 'scanunit_count' to be a int")
        pulumi.set(__self__, "scanunit_count", scanunit_count)
        if security_rating_result_submission and not isinstance(security_rating_result_submission, str):
            raise TypeError("Expected argument 'security_rating_result_submission' to be a str")
        pulumi.set(__self__, "security_rating_result_submission", security_rating_result_submission)
        if security_rating_run_on_schedule and not isinstance(security_rating_run_on_schedule, str):
            raise TypeError("Expected argument 'security_rating_run_on_schedule' to be a str")
        pulumi.set(__self__, "security_rating_run_on_schedule", security_rating_run_on_schedule)
        if send_pmtu_icmp and not isinstance(send_pmtu_icmp, str):
            raise TypeError("Expected argument 'send_pmtu_icmp' to be a str")
        pulumi.set(__self__, "send_pmtu_icmp", send_pmtu_icmp)
        if snat_route_change and not isinstance(snat_route_change, str):
            raise TypeError("Expected argument 'snat_route_change' to be a str")
        pulumi.set(__self__, "snat_route_change", snat_route_change)
        if special_file23_support and not isinstance(special_file23_support, str):
            raise TypeError("Expected argument 'special_file23_support' to be a str")
        pulumi.set(__self__, "special_file23_support", special_file23_support)
        if speedtest_server and not isinstance(speedtest_server, str):
            raise TypeError("Expected argument 'speedtest_server' to be a str")
        pulumi.set(__self__, "speedtest_server", speedtest_server)
        if split_port and not isinstance(split_port, str):
            raise TypeError("Expected argument 'split_port' to be a str")
        pulumi.set(__self__, "split_port", split_port)
        if ssd_trim_date and not isinstance(ssd_trim_date, int):
            raise TypeError("Expected argument 'ssd_trim_date' to be a int")
        pulumi.set(__self__, "ssd_trim_date", ssd_trim_date)
        if ssd_trim_freq and not isinstance(ssd_trim_freq, str):
            raise TypeError("Expected argument 'ssd_trim_freq' to be a str")
        pulumi.set(__self__, "ssd_trim_freq", ssd_trim_freq)
        if ssd_trim_hour and not isinstance(ssd_trim_hour, int):
            raise TypeError("Expected argument 'ssd_trim_hour' to be a int")
        pulumi.set(__self__, "ssd_trim_hour", ssd_trim_hour)
        if ssd_trim_min and not isinstance(ssd_trim_min, int):
            raise TypeError("Expected argument 'ssd_trim_min' to be a int")
        pulumi.set(__self__, "ssd_trim_min", ssd_trim_min)
        if ssd_trim_weekday and not isinstance(ssd_trim_weekday, str):
            raise TypeError("Expected argument 'ssd_trim_weekday' to be a str")
        pulumi.set(__self__, "ssd_trim_weekday", ssd_trim_weekday)
        if ssh_cbc_cipher and not isinstance(ssh_cbc_cipher, str):
            raise TypeError("Expected argument 'ssh_cbc_cipher' to be a str")
        pulumi.set(__self__, "ssh_cbc_cipher", ssh_cbc_cipher)
        if ssh_enc_algo and not isinstance(ssh_enc_algo, str):
            raise TypeError("Expected argument 'ssh_enc_algo' to be a str")
        pulumi.set(__self__, "ssh_enc_algo", ssh_enc_algo)
        if ssh_hmac_md5 and not isinstance(ssh_hmac_md5, str):
            raise TypeError("Expected argument 'ssh_hmac_md5' to be a str")
        pulumi.set(__self__, "ssh_hmac_md5", ssh_hmac_md5)
        if ssh_kex_algo and not isinstance(ssh_kex_algo, str):
            raise TypeError("Expected argument 'ssh_kex_algo' to be a str")
        pulumi.set(__self__, "ssh_kex_algo", ssh_kex_algo)
        if ssh_kex_sha1 and not isinstance(ssh_kex_sha1, str):
            raise TypeError("Expected argument 'ssh_kex_sha1' to be a str")
        pulumi.set(__self__, "ssh_kex_sha1", ssh_kex_sha1)
        if ssh_mac_algo and not isinstance(ssh_mac_algo, str):
            raise TypeError("Expected argument 'ssh_mac_algo' to be a str")
        pulumi.set(__self__, "ssh_mac_algo", ssh_mac_algo)
        if ssh_mac_weak and not isinstance(ssh_mac_weak, str):
            raise TypeError("Expected argument 'ssh_mac_weak' to be a str")
        pulumi.set(__self__, "ssh_mac_weak", ssh_mac_weak)
        if ssl_min_proto_version and not isinstance(ssl_min_proto_version, str):
            raise TypeError("Expected argument 'ssl_min_proto_version' to be a str")
        pulumi.set(__self__, "ssl_min_proto_version", ssl_min_proto_version)
        if ssl_static_key_ciphers and not isinstance(ssl_static_key_ciphers, str):
            raise TypeError("Expected argument 'ssl_static_key_ciphers' to be a str")
        pulumi.set(__self__, "ssl_static_key_ciphers", ssl_static_key_ciphers)
        if sslvpn_cipher_hardware_acceleration and not isinstance(sslvpn_cipher_hardware_acceleration, str):
            raise TypeError("Expected argument 'sslvpn_cipher_hardware_acceleration' to be a str")
        pulumi.set(__self__, "sslvpn_cipher_hardware_acceleration", sslvpn_cipher_hardware_acceleration)
        if sslvpn_ems_sn_check and not isinstance(sslvpn_ems_sn_check, str):
            raise TypeError("Expected argument 'sslvpn_ems_sn_check' to be a str")
        pulumi.set(__self__, "sslvpn_ems_sn_check", sslvpn_ems_sn_check)
        if sslvpn_kxp_hardware_acceleration and not isinstance(sslvpn_kxp_hardware_acceleration, str):
            raise TypeError("Expected argument 'sslvpn_kxp_hardware_acceleration' to be a str")
        pulumi.set(__self__, "sslvpn_kxp_hardware_acceleration", sslvpn_kxp_hardware_acceleration)
        if sslvpn_max_worker_count and not isinstance(sslvpn_max_worker_count, int):
            raise TypeError("Expected argument 'sslvpn_max_worker_count' to be a int")
        pulumi.set(__self__, "sslvpn_max_worker_count", sslvpn_max_worker_count)
        if sslvpn_plugin_version_check and not isinstance(sslvpn_plugin_version_check, str):
            raise TypeError("Expected argument 'sslvpn_plugin_version_check' to be a str")
        pulumi.set(__self__, "sslvpn_plugin_version_check", sslvpn_plugin_version_check)
        if strict_dirty_session_check and not isinstance(strict_dirty_session_check, str):
            raise TypeError("Expected argument 'strict_dirty_session_check' to be a str")
        pulumi.set(__self__, "strict_dirty_session_check", strict_dirty_session_check)
        if strong_crypto and not isinstance(strong_crypto, str):
            raise TypeError("Expected argument 'strong_crypto' to be a str")
        pulumi.set(__self__, "strong_crypto", strong_crypto)
        if switch_controller and not isinstance(switch_controller, str):
            raise TypeError("Expected argument 'switch_controller' to be a str")
        pulumi.set(__self__, "switch_controller", switch_controller)
        if switch_controller_reserved_network and not isinstance(switch_controller_reserved_network, str):
            raise TypeError("Expected argument 'switch_controller_reserved_network' to be a str")
        pulumi.set(__self__, "switch_controller_reserved_network", switch_controller_reserved_network)
        if sys_perf_log_interval and not isinstance(sys_perf_log_interval, int):
            raise TypeError("Expected argument 'sys_perf_log_interval' to be a int")
        pulumi.set(__self__, "sys_perf_log_interval", sys_perf_log_interval)
        if tcp_halfclose_timer and not isinstance(tcp_halfclose_timer, int):
            raise TypeError("Expected argument 'tcp_halfclose_timer' to be a int")
        pulumi.set(__self__, "tcp_halfclose_timer", tcp_halfclose_timer)
        if tcp_halfopen_timer and not isinstance(tcp_halfopen_timer, int):
            raise TypeError("Expected argument 'tcp_halfopen_timer' to be a int")
        pulumi.set(__self__, "tcp_halfopen_timer", tcp_halfopen_timer)
        if tcp_option and not isinstance(tcp_option, str):
            raise TypeError("Expected argument 'tcp_option' to be a str")
        pulumi.set(__self__, "tcp_option", tcp_option)
        if tcp_rst_timer and not isinstance(tcp_rst_timer, int):
            raise TypeError("Expected argument 'tcp_rst_timer' to be a int")
        pulumi.set(__self__, "tcp_rst_timer", tcp_rst_timer)
        if tcp_timewait_timer and not isinstance(tcp_timewait_timer, int):
            raise TypeError("Expected argument 'tcp_timewait_timer' to be a int")
        pulumi.set(__self__, "tcp_timewait_timer", tcp_timewait_timer)
        if tftp and not isinstance(tftp, str):
            raise TypeError("Expected argument 'tftp' to be a str")
        pulumi.set(__self__, "tftp", tftp)
        if timezone and not isinstance(timezone, str):
            raise TypeError("Expected argument 'timezone' to be a str")
        pulumi.set(__self__, "timezone", timezone)
        if tp_mc_skip_policy and not isinstance(tp_mc_skip_policy, str):
            raise TypeError("Expected argument 'tp_mc_skip_policy' to be a str")
        pulumi.set(__self__, "tp_mc_skip_policy", tp_mc_skip_policy)
        if traffic_priority and not isinstance(traffic_priority, str):
            raise TypeError("Expected argument 'traffic_priority' to be a str")
        pulumi.set(__self__, "traffic_priority", traffic_priority)
        if traffic_priority_level and not isinstance(traffic_priority_level, str):
            raise TypeError("Expected argument 'traffic_priority_level' to be a str")
        pulumi.set(__self__, "traffic_priority_level", traffic_priority_level)
        if two_factor_email_expiry and not isinstance(two_factor_email_expiry, int):
            raise TypeError("Expected argument 'two_factor_email_expiry' to be a int")
        pulumi.set(__self__, "two_factor_email_expiry", two_factor_email_expiry)
        if two_factor_fac_expiry and not isinstance(two_factor_fac_expiry, int):
            raise TypeError("Expected argument 'two_factor_fac_expiry' to be a int")
        pulumi.set(__self__, "two_factor_fac_expiry", two_factor_fac_expiry)
        if two_factor_ftk_expiry and not isinstance(two_factor_ftk_expiry, int):
            raise TypeError("Expected argument 'two_factor_ftk_expiry' to be a int")
        pulumi.set(__self__, "two_factor_ftk_expiry", two_factor_ftk_expiry)
        if two_factor_ftm_expiry and not isinstance(two_factor_ftm_expiry, int):
            raise TypeError("Expected argument 'two_factor_ftm_expiry' to be a int")
        pulumi.set(__self__, "two_factor_ftm_expiry", two_factor_ftm_expiry)
        if two_factor_sms_expiry and not isinstance(two_factor_sms_expiry, int):
            raise TypeError("Expected argument 'two_factor_sms_expiry' to be a int")
        pulumi.set(__self__, "two_factor_sms_expiry", two_factor_sms_expiry)
        if udp_idle_timer and not isinstance(udp_idle_timer, int):
            raise TypeError("Expected argument 'udp_idle_timer' to be a int")
        pulumi.set(__self__, "udp_idle_timer", udp_idle_timer)
        if url_filter_affinity and not isinstance(url_filter_affinity, str):
            raise TypeError("Expected argument 'url_filter_affinity' to be a str")
        pulumi.set(__self__, "url_filter_affinity", url_filter_affinity)
        if url_filter_count and not isinstance(url_filter_count, int):
            raise TypeError("Expected argument 'url_filter_count' to be a int")
        pulumi.set(__self__, "url_filter_count", url_filter_count)
        if user_device_store_max_devices and not isinstance(user_device_store_max_devices, int):
            raise TypeError("Expected argument 'user_device_store_max_devices' to be a int")
        pulumi.set(__self__, "user_device_store_max_devices", user_device_store_max_devices)
        if user_device_store_max_unified_mem and not isinstance(user_device_store_max_unified_mem, int):
            raise TypeError("Expected argument 'user_device_store_max_unified_mem' to be a int")
        pulumi.set(__self__, "user_device_store_max_unified_mem", user_device_store_max_unified_mem)
        if user_device_store_max_users and not isinstance(user_device_store_max_users, int):
            raise TypeError("Expected argument 'user_device_store_max_users' to be a int")
        pulumi.set(__self__, "user_device_store_max_users", user_device_store_max_users)
        if user_server_cert and not isinstance(user_server_cert, str):
            raise TypeError("Expected argument 'user_server_cert' to be a str")
        pulumi.set(__self__, "user_server_cert", user_server_cert)
        if vdom_admin and not isinstance(vdom_admin, str):
            raise TypeError("Expected argument 'vdom_admin' to be a str")
        pulumi.set(__self__, "vdom_admin", vdom_admin)
        if vdom_mode and not isinstance(vdom_mode, str):
            raise TypeError("Expected argument 'vdom_mode' to be a str")
        pulumi.set(__self__, "vdom_mode", vdom_mode)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if vip_arp_range and not isinstance(vip_arp_range, str):
            raise TypeError("Expected argument 'vip_arp_range' to be a str")
        pulumi.set(__self__, "vip_arp_range", vip_arp_range)
        if virtual_server_count and not isinstance(virtual_server_count, int):
            raise TypeError("Expected argument 'virtual_server_count' to be a int")
        pulumi.set(__self__, "virtual_server_count", virtual_server_count)
        if virtual_server_hardware_acceleration and not isinstance(virtual_server_hardware_acceleration, str):
            raise TypeError("Expected argument 'virtual_server_hardware_acceleration' to be a str")
        pulumi.set(__self__, "virtual_server_hardware_acceleration", virtual_server_hardware_acceleration)
        if virtual_switch_vlan and not isinstance(virtual_switch_vlan, str):
            raise TypeError("Expected argument 'virtual_switch_vlan' to be a str")
        pulumi.set(__self__, "virtual_switch_vlan", virtual_switch_vlan)
        if wad_affinity and not isinstance(wad_affinity, str):
            raise TypeError("Expected argument 'wad_affinity' to be a str")
        pulumi.set(__self__, "wad_affinity", wad_affinity)
        if wad_csvc_cs_count and not isinstance(wad_csvc_cs_count, int):
            raise TypeError("Expected argument 'wad_csvc_cs_count' to be a int")
        pulumi.set(__self__, "wad_csvc_cs_count", wad_csvc_cs_count)
        if wad_csvc_db_count and not isinstance(wad_csvc_db_count, int):
            raise TypeError("Expected argument 'wad_csvc_db_count' to be a int")
        pulumi.set(__self__, "wad_csvc_db_count", wad_csvc_db_count)
        if wad_memory_change_granularity and not isinstance(wad_memory_change_granularity, int):
            raise TypeError("Expected argument 'wad_memory_change_granularity' to be a int")
        pulumi.set(__self__, "wad_memory_change_granularity", wad_memory_change_granularity)
        if wad_source_affinity and not isinstance(wad_source_affinity, str):
            raise TypeError("Expected argument 'wad_source_affinity' to be a str")
        pulumi.set(__self__, "wad_source_affinity", wad_source_affinity)
        if wad_worker_count and not isinstance(wad_worker_count, int):
            raise TypeError("Expected argument 'wad_worker_count' to be a int")
        pulumi.set(__self__, "wad_worker_count", wad_worker_count)
        if wifi_ca_certificate and not isinstance(wifi_ca_certificate, str):
            raise TypeError("Expected argument 'wifi_ca_certificate' to be a str")
        pulumi.set(__self__, "wifi_ca_certificate", wifi_ca_certificate)
        if wifi_certificate and not isinstance(wifi_certificate, str):
            raise TypeError("Expected argument 'wifi_certificate' to be a str")
        pulumi.set(__self__, "wifi_certificate", wifi_certificate)
        if wimax4g_usb and not isinstance(wimax4g_usb, str):
            raise TypeError("Expected argument 'wimax4g_usb' to be a str")
        pulumi.set(__self__, "wimax4g_usb", wimax4g_usb)
        if wireless_controller and not isinstance(wireless_controller, str):
            raise TypeError("Expected argument 'wireless_controller' to be a str")
        pulumi.set(__self__, "wireless_controller", wireless_controller)
        if wireless_controller_port and not isinstance(wireless_controller_port, int):
            raise TypeError("Expected argument 'wireless_controller_port' to be a int")
        pulumi.set(__self__, "wireless_controller_port", wireless_controller_port)

    @property
    @pulumi.getter(name="adminConcurrent")
    def admin_concurrent(self) -> str:
        """
        Enable/disable concurrent administrator logins. (Use policy-auth-concurrent for firewall authenticated users.)
        """
        return pulumi.get(self, "admin_concurrent")

    @property
    @pulumi.getter(name="adminConsoleTimeout")
    def admin_console_timeout(self) -> int:
        """
        Console login timeout that overrides the admintimeout value. (15 - 300 seconds) (15 seconds to 5 minutes). 0 the default, disables this timeout.
        """
        return pulumi.get(self, "admin_console_timeout")

    @property
    @pulumi.getter(name="adminForticloudSsoLogin")
    def admin_forticloud_sso_login(self) -> str:
        """
        Enable/disable FortiCloud admin login via SSO.
        """
        return pulumi.get(self, "admin_forticloud_sso_login")

    @property
    @pulumi.getter(name="adminHost")
    def admin_host(self) -> str:
        """
        Administrative host for HTTP and HTTPS. When set, will be used in lieu of the client's Host header for any redirection.
        """
        return pulumi.get(self, "admin_host")

    @property
    @pulumi.getter(name="adminHstsMaxAge")
    def admin_hsts_max_age(self) -> int:
        """
        HTTPS Strict-Transport-Security header max-age in seconds. A value of 0 will reset any HSTS records in the browser.When admin-https-redirect is disabled the header max-age will be 0.
        """
        return pulumi.get(self, "admin_hsts_max_age")

    @property
    @pulumi.getter(name="adminHttpsPkiRequired")
    def admin_https_pki_required(self) -> str:
        """
        Enable/disable admin login method. Enable to force administrators to provide a valid certificate to log in if PKI is enabled. Disable to allow administrators to log in with a certificate or password.
        """
        return pulumi.get(self, "admin_https_pki_required")

    @property
    @pulumi.getter(name="adminHttpsRedirect")
    def admin_https_redirect(self) -> str:
        """
        Enable/disable redirection of HTTP administration access to HTTPS.
        """
        return pulumi.get(self, "admin_https_redirect")

    @property
    @pulumi.getter(name="adminHttpsSslBannedCiphers")
    def admin_https_ssl_banned_ciphers(self) -> str:
        """
        Select one or more cipher technologies that cannot be used in GUI HTTPS negotiations. Only applies to TLS 1.2 and below.
        """
        return pulumi.get(self, "admin_https_ssl_banned_ciphers")

    @property
    @pulumi.getter(name="adminHttpsSslCiphersuites")
    def admin_https_ssl_ciphersuites(self) -> str:
        """
        Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, remove TLS1.3 from admin-https-ssl-versions.
        """
        return pulumi.get(self, "admin_https_ssl_ciphersuites")

    @property
    @pulumi.getter(name="adminHttpsSslVersions")
    def admin_https_ssl_versions(self) -> str:
        """
        Allowed TLS versions for web administration.
        """
        return pulumi.get(self, "admin_https_ssl_versions")

    @property
    @pulumi.getter(name="adminLockoutDuration")
    def admin_lockout_duration(self) -> int:
        """
        Amount of time in seconds that an administrator account is locked out after reaching the admin-lockout-threshold for repeated failed login attempts.
        """
        return pulumi.get(self, "admin_lockout_duration")

    @property
    @pulumi.getter(name="adminLockoutThreshold")
    def admin_lockout_threshold(self) -> int:
        """
        Number of failed login attempts before an administrator account is locked out for the admin-lockout-duration.
        """
        return pulumi.get(self, "admin_lockout_threshold")

    @property
    @pulumi.getter(name="adminLoginMax")
    def admin_login_max(self) -> int:
        """
        Maximum number of administrators who can be logged in at the same time (1 - 100, default = 100)
        """
        return pulumi.get(self, "admin_login_max")

    @property
    @pulumi.getter(name="adminMaintainer")
    def admin_maintainer(self) -> str:
        """
        Enable/disable maintainer administrator login. When enabled, the maintainer account can be used to log in from the console after a hard reboot. The password is "bcpb" followed by the FortiGate unit serial number. You have limited time to complete this login.
        """
        return pulumi.get(self, "admin_maintainer")

    @property
    @pulumi.getter(name="adminPort")
    def admin_port(self) -> int:
        """
        Administrative access port for HTTP. (1 - 65535, default = 80).
        """
        return pulumi.get(self, "admin_port")

    @property
    @pulumi.getter(name="adminRestrictLocal")
    def admin_restrict_local(self) -> str:
        """
        Enable/disable local admin authentication restriction when remote authenticator is up and running. (default = disable)
        """
        return pulumi.get(self, "admin_restrict_local")

    @property
    @pulumi.getter(name="adminScp")
    def admin_scp(self) -> str:
        """
        Enable/disable using SCP to download the system configuration. You can use SCP as an alternative method for backing up the configuration.
        """
        return pulumi.get(self, "admin_scp")

    @property
    @pulumi.getter(name="adminServerCert")
    def admin_server_cert(self) -> str:
        """
        Server certificate that the FortiGate uses for HTTPS administrative connections.
        """
        return pulumi.get(self, "admin_server_cert")

    @property
    @pulumi.getter(name="adminSport")
    def admin_sport(self) -> int:
        """
        Administrative access port for HTTPS. (1 - 65535, default = 443).
        """
        return pulumi.get(self, "admin_sport")

    @property
    @pulumi.getter(name="adminSshGraceTime")
    def admin_ssh_grace_time(self) -> int:
        """
        Maximum time in seconds permitted between making an SSH connection to the FortiGate unit and authenticating (10 - 3600 sec (1 hour), default 120).
        """
        return pulumi.get(self, "admin_ssh_grace_time")

    @property
    @pulumi.getter(name="adminSshPassword")
    def admin_ssh_password(self) -> str:
        """
        Enable/disable password authentication for SSH admin access.
        """
        return pulumi.get(self, "admin_ssh_password")

    @property
    @pulumi.getter(name="adminSshPort")
    def admin_ssh_port(self) -> int:
        """
        Administrative access port for SSH. (1 - 65535, default = 22).
        """
        return pulumi.get(self, "admin_ssh_port")

    @property
    @pulumi.getter(name="adminSshV1")
    def admin_ssh_v1(self) -> str:
        """
        Enable/disable SSH v1 compatibility.
        """
        return pulumi.get(self, "admin_ssh_v1")

    @property
    @pulumi.getter(name="adminTelnet")
    def admin_telnet(self) -> str:
        """
        Enable/disable TELNET service.
        """
        return pulumi.get(self, "admin_telnet")

    @property
    @pulumi.getter(name="adminTelnetPort")
    def admin_telnet_port(self) -> int:
        """
        Administrative access port for TELNET. (1 - 65535, default = 23).
        """
        return pulumi.get(self, "admin_telnet_port")

    @property
    @pulumi.getter
    def admintimeout(self) -> int:
        """
        Number of minutes before an idle administrator session times out (5 - 480 minutes (8 hours), default = 5). A shorter idle timeout is more secure.
        """
        return pulumi.get(self, "admintimeout")

    @property
    @pulumi.getter
    def alias(self) -> str:
        """
        Alias for your FortiGate unit.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="allowTrafficRedirect")
    def allow_traffic_redirect(self) -> str:
        """
        Disable to allow traffic to be routed back on a different interface.
        """
        return pulumi.get(self, "allow_traffic_redirect")

    @property
    @pulumi.getter(name="antiReplay")
    def anti_replay(self) -> str:
        """
        Level of checking for packet replay and TCP sequence checking.
        """
        return pulumi.get(self, "anti_replay")

    @property
    @pulumi.getter(name="arpMaxEntry")
    def arp_max_entry(self) -> int:
        """
        Maximum number of dynamically learned MAC addresses that can be added to the ARP table (131072 - 2147483647, default = 131072).
        """
        return pulumi.get(self, "arp_max_entry")

    @property
    @pulumi.getter
    def asymroute(self) -> str:
        """
        Enable/disable asymmetric route.
        """
        return pulumi.get(self, "asymroute")

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> str:
        """
        Server certificate that the FortiGate uses for HTTPS firewall authentication connections.
        """
        return pulumi.get(self, "auth_cert")

    @property
    @pulumi.getter(name="authHttpPort")
    def auth_http_port(self) -> int:
        """
        User authentication HTTP port. (1 - 65535, default = 80).
        """
        return pulumi.get(self, "auth_http_port")

    @property
    @pulumi.getter(name="authHttpsPort")
    def auth_https_port(self) -> int:
        """
        User authentication HTTPS port. (1 - 65535, default = 443).
        """
        return pulumi.get(self, "auth_https_port")

    @property
    @pulumi.getter(name="authIkeSamlPort")
    def auth_ike_saml_port(self) -> int:
        """
        User IKE SAML authentication port (0 - 65535, default = 1001).
        """
        return pulumi.get(self, "auth_ike_saml_port")

    @property
    @pulumi.getter(name="authKeepalive")
    def auth_keepalive(self) -> str:
        """
        Enable to prevent user authentication sessions from timing out when idle.
        """
        return pulumi.get(self, "auth_keepalive")

    @property
    @pulumi.getter(name="authSessionLimit")
    def auth_session_limit(self) -> str:
        """
        Action to take when the number of allowed user authenticated sessions is reached.
        """
        return pulumi.get(self, "auth_session_limit")

    @property
    @pulumi.getter(name="autoAuthExtensionDevice")
    def auto_auth_extension_device(self) -> str:
        """
        Enable/disable automatic authorization of dedicated Fortinet extension devices.
        """
        return pulumi.get(self, "auto_auth_extension_device")

    @property
    @pulumi.getter(name="autorunLogFsck")
    def autorun_log_fsck(self) -> str:
        """
        Enable/disable automatic log partition check after ungraceful shutdown.
        """
        return pulumi.get(self, "autorun_log_fsck")

    @property
    @pulumi.getter(name="avAffinity")
    def av_affinity(self) -> str:
        """
        Affinity setting for AV scanning (hexadecimal value up to 256 bits in the format of xxxxxxxxxxxxxxxx).
        """
        return pulumi.get(self, "av_affinity")

    @property
    @pulumi.getter(name="avFailopen")
    def av_failopen(self) -> str:
        """
        Set the action to take if the FortiGate is running low on memory or the proxy connection limit has been reached.
        """
        return pulumi.get(self, "av_failopen")

    @property
    @pulumi.getter(name="avFailopenSession")
    def av_failopen_session(self) -> str:
        """
        When enabled and a proxy for a protocol runs out of room in its session table, that protocol goes into failopen mode and enacts the action specified by av-failopen.
        """
        return pulumi.get(self, "av_failopen_session")

    @property
    @pulumi.getter(name="batchCmdb")
    def batch_cmdb(self) -> str:
        """
        Enable/disable batch mode, allowing you to enter a series of CLI commands that will execute as a group once they are loaded.
        """
        return pulumi.get(self, "batch_cmdb")

    @property
    @pulumi.getter(name="blockSessionTimer")
    def block_session_timer(self) -> int:
        """
        Duration in seconds for blocked sessions (1 - 300 sec  (5 minutes), default = 30).
        """
        return pulumi.get(self, "block_session_timer")

    @property
    @pulumi.getter(name="brFdbMaxEntry")
    def br_fdb_max_entry(self) -> int:
        """
        Maximum number of bridge forwarding database (FDB) entries.
        """
        return pulumi.get(self, "br_fdb_max_entry")

    @property
    @pulumi.getter(name="certChainMax")
    def cert_chain_max(self) -> int:
        """
        Maximum number of certificates that can be traversed in a certificate chain.
        """
        return pulumi.get(self, "cert_chain_max")

    @property
    @pulumi.getter(name="cfgRevertTimeout")
    def cfg_revert_timeout(self) -> int:
        """
        Time-out for reverting to the last saved configuration.
        """
        return pulumi.get(self, "cfg_revert_timeout")

    @property
    @pulumi.getter(name="cfgSave")
    def cfg_save(self) -> str:
        """
        Configuration file save mode for CLI changes.
        """
        return pulumi.get(self, "cfg_save")

    @property
    @pulumi.getter(name="checkProtocolHeader")
    def check_protocol_header(self) -> str:
        """
        Level of checking performed on protocol headers. Strict checking is more thorough but may affect performance. Loose checking is ok in most cases.
        """
        return pulumi.get(self, "check_protocol_header")

    @property
    @pulumi.getter(name="checkResetRange")
    def check_reset_range(self) -> str:
        """
        Configure ICMP error message verification. You can either apply strict RST range checking or disable it.
        """
        return pulumi.get(self, "check_reset_range")

    @property
    @pulumi.getter(name="cliAuditLog")
    def cli_audit_log(self) -> str:
        """
        Enable/disable CLI audit log.
        """
        return pulumi.get(self, "cli_audit_log")

    @property
    @pulumi.getter(name="cloudCommunication")
    def cloud_communication(self) -> str:
        """
        Enable/disable all cloud communication.
        """
        return pulumi.get(self, "cloud_communication")

    @property
    @pulumi.getter(name="cltCertReq")
    def clt_cert_req(self) -> str:
        """
        Enable/disable requiring administrators to have a client certificate to log into the GUI using HTTPS.
        """
        return pulumi.get(self, "clt_cert_req")

    @property
    @pulumi.getter(name="cmdbsvrAffinity")
    def cmdbsvr_affinity(self) -> str:
        """
        Affinity setting for cmdbsvr (hexadecimal value up to 256 bits in the format of xxxxxxxxxxxxxxxx).
        """
        return pulumi.get(self, "cmdbsvr_affinity")

    @property
    @pulumi.getter(name="complianceCheck")
    def compliance_check(self) -> str:
        """
        Enable/disable global PCI DSS compliance check.
        """
        return pulumi.get(self, "compliance_check")

    @property
    @pulumi.getter(name="complianceCheckTime")
    def compliance_check_time(self) -> str:
        """
        Time of day to run scheduled PCI DSS compliance checks.
        """
        return pulumi.get(self, "compliance_check_time")

    @property
    @pulumi.getter(name="cpuUseThreshold")
    def cpu_use_threshold(self) -> int:
        """
        Threshold at which CPU usage is reported. (% of total CPU, default = 90).
        """
        return pulumi.get(self, "cpu_use_threshold")

    @property
    @pulumi.getter(name="csrCaAttribute")
    def csr_ca_attribute(self) -> str:
        """
        Enable/disable the CA attribute in certificates. Some CA servers reject CSRs that have the CA attribute.
        """
        return pulumi.get(self, "csr_ca_attribute")

    @property
    @pulumi.getter(name="dailyRestart")
    def daily_restart(self) -> str:
        """
        Enable/disable daily restart of FortiGate unit. Use the restart-time option to set the time of day for the restart.
        """
        return pulumi.get(self, "daily_restart")

    @property
    @pulumi.getter(name="defaultServiceSourcePort")
    def default_service_source_port(self) -> str:
        """
        Default service source port range. (default=1-65535)
        """
        return pulumi.get(self, "default_service_source_port")

    @property
    @pulumi.getter(name="deviceIdentificationActiveScanDelay")
    def device_identification_active_scan_delay(self) -> int:
        """
        Number of seconds to passively scan a device before performing an active scan. (20 - 3600 sec, (20 sec to 1 hour), default = 90).
        """
        return pulumi.get(self, "device_identification_active_scan_delay")

    @property
    @pulumi.getter(name="deviceIdleTimeout")
    def device_idle_timeout(self) -> int:
        """
        Time in seconds that a device must be idle to automatically log the device user out. (30 - 31536000 sec (30 sec to 1 year), default = 300).
        """
        return pulumi.get(self, "device_idle_timeout")

    @property
    @pulumi.getter(name="dhParams")
    def dh_params(self) -> str:
        """
        Number of bits to use in the Diffie-Hellman exchange for HTTPS/SSH protocols.
        """
        return pulumi.get(self, "dh_params")

    @property
    @pulumi.getter(name="dnsproxyWorkerCount")
    def dnsproxy_worker_count(self) -> int:
        """
        DNS proxy worker count.
        """
        return pulumi.get(self, "dnsproxy_worker_count")

    @property
    @pulumi.getter
    def dst(self) -> str:
        """
        Enable/disable daylight saving time.
        """
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter(name="earlyTcpNpuSession")
    def early_tcp_npu_session(self) -> str:
        """
        Enable/disable early TCP NPU session.
        """
        return pulumi.get(self, "early_tcp_npu_session")

    @property
    @pulumi.getter(name="editVdomPrompt")
    def edit_vdom_prompt(self) -> str:
        """
        Enable/disable edit new VDOM prompt.
        """
        return pulumi.get(self, "edit_vdom_prompt")

    @property
    @pulumi.getter(name="endpointControlFdsAccess")
    def endpoint_control_fds_access(self) -> str:
        """
        Enable/disable access to the FortiGuard network for non-compliant endpoints.
        """
        return pulumi.get(self, "endpoint_control_fds_access")

    @property
    @pulumi.getter(name="endpointControlPortalPort")
    def endpoint_control_portal_port(self) -> int:
        """
        Endpoint control portal port (1 - 65535).
        """
        return pulumi.get(self, "endpoint_control_portal_port")

    @property
    @pulumi.getter(name="extenderControllerReservedNetwork")
    def extender_controller_reserved_network(self) -> str:
        """
        Configure reserved network subnet for managed LAN extension FortiExtenders. This is available when the extender daemon is running.
        """
        return pulumi.get(self, "extender_controller_reserved_network")

    @property
    @pulumi.getter
    def failtime(self) -> int:
        """
        Fail-time for server lost.
        """
        return pulumi.get(self, "failtime")

    @property
    @pulumi.getter(name="fazDiskBufferSize")
    def faz_disk_buffer_size(self) -> int:
        """
        Maximum disk buffer size to temporarily store logs destined for FortiAnalyzer. To be used in the event that FortiAnalyzer is unavailalble.
        """
        return pulumi.get(self, "faz_disk_buffer_size")

    @property
    @pulumi.getter(name="fdsStatistics")
    def fds_statistics(self) -> str:
        """
        Enable/disable sending IPS, Application Control, and AntiVirus data to FortiGuard. This data is used to improve FortiGuard services and is not shared with external parties and is protected by Fortinet's privacy policy.
        """
        return pulumi.get(self, "fds_statistics")

    @property
    @pulumi.getter(name="fdsStatisticsPeriod")
    def fds_statistics_period(self) -> int:
        """
        FortiGuard statistics collection period in minutes. (1 - 1440 min (1 min to 24 hours), default = 60).
        """
        return pulumi.get(self, "fds_statistics_period")

    @property
    @pulumi.getter(name="fecPort")
    def fec_port(self) -> int:
        """
        Local UDP port for Forward Error Correction (49152 - 65535).
        """
        return pulumi.get(self, "fec_port")

    @property
    @pulumi.getter(name="fgdAlertSubscription")
    def fgd_alert_subscription(self) -> str:
        """
        Type of alert to retrieve from FortiGuard.
        """
        return pulumi.get(self, "fgd_alert_subscription")

    @property
    @pulumi.getter
    def fortiextender(self) -> str:
        """
        Enable/disable FortiExtender.
        """
        return pulumi.get(self, "fortiextender")

    @property
    @pulumi.getter(name="fortiextenderDataPort")
    def fortiextender_data_port(self) -> int:
        """
        FortiExtender data port (1024 - 49150, default = 25246).
        """
        return pulumi.get(self, "fortiextender_data_port")

    @property
    @pulumi.getter(name="fortiextenderDiscoveryLockdown")
    def fortiextender_discovery_lockdown(self) -> str:
        """
        Enable/disable FortiExtender CAPWAP lockdown.
        """
        return pulumi.get(self, "fortiextender_discovery_lockdown")

    @property
    @pulumi.getter(name="fortiextenderProvisionOnAuthorization")
    def fortiextender_provision_on_authorization(self) -> str:
        """
        Enable/disable automatic provisioning of latest FortiExtender firmware on authorization.
        """
        return pulumi.get(self, "fortiextender_provision_on_authorization")

    @property
    @pulumi.getter(name="fortiextenderVlanMode")
    def fortiextender_vlan_mode(self) -> str:
        """
        Enable/disable FortiExtender VLAN mode.
        """
        return pulumi.get(self, "fortiextender_vlan_mode")

    @property
    @pulumi.getter(name="fortiipamIntegration")
    def fortiipam_integration(self) -> str:
        """
        Enable/disable integration with the FortiIPAM cloud service.
        """
        return pulumi.get(self, "fortiipam_integration")

    @property
    @pulumi.getter(name="fortiservicePort")
    def fortiservice_port(self) -> int:
        """
        FortiService port (1 - 65535, default = 8013). Used by FortiClient endpoint compliance. Older versions of FortiClient used a different port.
        """
        return pulumi.get(self, "fortiservice_port")

    @property
    @pulumi.getter(name="fortitokenCloud")
    def fortitoken_cloud(self) -> str:
        """
        Enable/disable FortiToken Cloud service.
        """
        return pulumi.get(self, "fortitoken_cloud")

    @property
    @pulumi.getter(name="guiAllowDefaultHostname")
    def gui_allow_default_hostname(self) -> str:
        """
        Enable/disable the GUI warning about using a default hostname
        """
        return pulumi.get(self, "gui_allow_default_hostname")

    @property
    @pulumi.getter(name="guiAppDetectionSdwan")
    def gui_app_detection_sdwan(self) -> str:
        """
        Enable/disable Allow app-detection based SD-WAN.
        """
        return pulumi.get(self, "gui_app_detection_sdwan")

    @property
    @pulumi.getter(name="guiCdnUsage")
    def gui_cdn_usage(self) -> str:
        """
        Enable/disable Load GUI static files from a CDN.
        """
        return pulumi.get(self, "gui_cdn_usage")

    @property
    @pulumi.getter(name="guiCertificates")
    def gui_certificates(self) -> str:
        """
        Enable/disable the System > Certificate GUI page, allowing you to add and configure certificates from the GUI.
        """
        return pulumi.get(self, "gui_certificates")

    @property
    @pulumi.getter(name="guiCustomLanguage")
    def gui_custom_language(self) -> str:
        """
        Enable/disable custom languages in GUI.
        """
        return pulumi.get(self, "gui_custom_language")

    @property
    @pulumi.getter(name="guiDateFormat")
    def gui_date_format(self) -> str:
        """
        Default date format used throughout GUI.
        """
        return pulumi.get(self, "gui_date_format")

    @property
    @pulumi.getter(name="guiDateTimeSource")
    def gui_date_time_source(self) -> str:
        """
        Source from which the FortiGate GUI uses to display date and time entries.
        """
        return pulumi.get(self, "gui_date_time_source")

    @property
    @pulumi.getter(name="guiDeviceLatitude")
    def gui_device_latitude(self) -> str:
        """
        Add the latitude of the location of this FortiGate to position it on the Threat Map.
        """
        return pulumi.get(self, "gui_device_latitude")

    @property
    @pulumi.getter(name="guiDeviceLongitude")
    def gui_device_longitude(self) -> str:
        """
        Add the longitude of the location of this FortiGate to position it on the Threat Map.
        """
        return pulumi.get(self, "gui_device_longitude")

    @property
    @pulumi.getter(name="guiDisplayHostname")
    def gui_display_hostname(self) -> str:
        """
        Enable/disable displaying the FortiGate's hostname on the GUI login page.
        """
        return pulumi.get(self, "gui_display_hostname")

    @property
    @pulumi.getter(name="guiFirmwareUpgradeSetupWarning")
    def gui_firmware_upgrade_setup_warning(self) -> str:
        """
        Enable/disable the firmware upgrade warning on GUI setup wizard.
        """
        return pulumi.get(self, "gui_firmware_upgrade_setup_warning")

    @property
    @pulumi.getter(name="guiFirmwareUpgradeWarning")
    def gui_firmware_upgrade_warning(self) -> str:
        """
        Enable/disable the firmware upgrade warning on the GUI.
        """
        return pulumi.get(self, "gui_firmware_upgrade_warning")

    @property
    @pulumi.getter(name="guiForticareRegistrationSetupWarning")
    def gui_forticare_registration_setup_warning(self) -> str:
        """
        Enable/disable the FortiCare registration setup warning on the GUI.
        """
        return pulumi.get(self, "gui_forticare_registration_setup_warning")

    @property
    @pulumi.getter(name="guiFortigateCloudSandbox")
    def gui_fortigate_cloud_sandbox(self) -> str:
        """
        Enable/disable displaying FortiGate Cloud Sandbox on the GUI.
        """
        return pulumi.get(self, "gui_fortigate_cloud_sandbox")

    @property
    @pulumi.getter(name="guiFortiguardResourceFetch")
    def gui_fortiguard_resource_fetch(self) -> str:
        """
        Enable/disable retrieving static GUI resources from FortiGuard. Disabling it will improve GUI load time for air-gapped environments.
        """
        return pulumi.get(self, "gui_fortiguard_resource_fetch")

    @property
    @pulumi.getter(name="guiFortisandboxCloud")
    def gui_fortisandbox_cloud(self) -> str:
        """
        Enable/disable displaying FortiSandbox Cloud on the GUI.
        """
        return pulumi.get(self, "gui_fortisandbox_cloud")

    @property
    @pulumi.getter(name="guiIpv6")
    def gui_ipv6(self) -> str:
        """
        Enable/disable IPv6 settings on the GUI.
        """
        return pulumi.get(self, "gui_ipv6")

    @property
    @pulumi.getter(name="guiLinesPerPage")
    def gui_lines_per_page(self) -> int:
        """
        Number of lines to display per page for web administration.
        """
        return pulumi.get(self, "gui_lines_per_page")

    @property
    @pulumi.getter(name="guiLocalOut")
    def gui_local_out(self) -> str:
        """
        Enable/disable Local-out traffic on the GUI.
        """
        return pulumi.get(self, "gui_local_out")

    @property
    @pulumi.getter(name="guiReplacementMessageGroups")
    def gui_replacement_message_groups(self) -> str:
        """
        Enable/disable replacement message groups on the GUI.
        """
        return pulumi.get(self, "gui_replacement_message_groups")

    @property
    @pulumi.getter(name="guiRestApiCache")
    def gui_rest_api_cache(self) -> str:
        """
        Enable/disable REST API result caching on FortiGate.
        """
        return pulumi.get(self, "gui_rest_api_cache")

    @property
    @pulumi.getter(name="guiTheme")
    def gui_theme(self) -> str:
        """
        Color scheme for the administration GUI.
        """
        return pulumi.get(self, "gui_theme")

    @property
    @pulumi.getter(name="guiWirelessOpensecurity")
    def gui_wireless_opensecurity(self) -> str:
        """
        Enable/disable wireless open security option on the GUI.
        """
        return pulumi.get(self, "gui_wireless_opensecurity")

    @property
    @pulumi.getter(name="guiWorkflowManagement")
    def gui_workflow_management(self) -> str:
        """
        Enable/disable Workflow management features on the GUI.
        """
        return pulumi.get(self, "gui_workflow_management")

    @property
    @pulumi.getter(name="haAffinity")
    def ha_affinity(self) -> str:
        """
        Affinity setting for HA daemons (hexadecimal value up to 256 bits in the format of xxxxxxxxxxxxxxxx).
        """
        return pulumi.get(self, "ha_affinity")

    @property
    @pulumi.getter(name="honorDf")
    def honor_df(self) -> str:
        """
        Enable/disable honoring of Don't-Fragment (DF) flag.
        """
        return pulumi.get(self, "honor_df")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        FortiGate unit's hostname. Most models will truncate names longer than 24 characters. Some models support hostnames up to 35 characters.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="igmpStateLimit")
    def igmp_state_limit(self) -> int:
        """
        Maximum number of IGMP memberships (96 - 64000, default = 3200).
        """
        return pulumi.get(self, "igmp_state_limit")

    @property
    @pulumi.getter(name="ikeEmbryonicLimit")
    def ike_embryonic_limit(self) -> int:
        """
        Maximum number of IPsec tunnels to negotiate simultaneously.
        """
        return pulumi.get(self, "ike_embryonic_limit")

    @property
    @pulumi.getter(name="internetServiceDatabase")
    def internet_service_database(self) -> str:
        """
        Configure which Internet Service database size to download from FortiGuard and use.
        """
        return pulumi.get(self, "internet_service_database")

    @property
    @pulumi.getter
    def interval(self) -> int:
        """
        Dead gateway detection interval.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="ipSrcPortRange")
    def ip_src_port_range(self) -> str:
        """
        IP source port range used for traffic originating from the FortiGate unit.
        """
        return pulumi.get(self, "ip_src_port_range")

    @property
    @pulumi.getter(name="ipsAffinity")
    def ips_affinity(self) -> str:
        """
        Affinity setting for IPS (hexadecimal value up to 256 bits in the format of xxxxxxxxxxxxxxxx; allowed CPUs must be less than total number of IPS engine daemons).
        """
        return pulumi.get(self, "ips_affinity")

    @property
    @pulumi.getter(name="ipsecAsicOffload")
    def ipsec_asic_offload(self) -> str:
        """
        Enable/disable ASIC offloading (hardware acceleration) for IPsec VPN traffic. Hardware acceleration can offload IPsec VPN sessions and accelerate encryption and decryption.
        """
        return pulumi.get(self, "ipsec_asic_offload")

    @property
    @pulumi.getter(name="ipsecHaSeqjumpRate")
    def ipsec_ha_seqjump_rate(self) -> int:
        """
        ESP jump ahead rate (1G - 10G pps equivalent).
        """
        return pulumi.get(self, "ipsec_ha_seqjump_rate")

    @property
    @pulumi.getter(name="ipsecHmacOffload")
    def ipsec_hmac_offload(self) -> str:
        """
        Enable/disable offloading (hardware acceleration) of HMAC processing for IPsec VPN.
        """
        return pulumi.get(self, "ipsec_hmac_offload")

    @property
    @pulumi.getter(name="ipsecRoundRobin")
    def ipsec_round_robin(self) -> str:
        """
        Enable/disable round-robin redistribution to multiple CPUs for IPsec VPN traffic.
        """
        return pulumi.get(self, "ipsec_round_robin")

    @property
    @pulumi.getter(name="ipsecSoftDecAsync")
    def ipsec_soft_dec_async(self) -> str:
        """
        Enable/disable software decryption asynchronization (using multiple CPUs to do decryption) for IPsec VPN traffic.
        """
        return pulumi.get(self, "ipsec_soft_dec_async")

    @property
    @pulumi.getter(name="ipv6AcceptDad")
    def ipv6_accept_dad(self) -> int:
        """
        Enable/disable acceptance of IPv6 Duplicate Address Detection (DAD).
        """
        return pulumi.get(self, "ipv6_accept_dad")

    @property
    @pulumi.getter(name="ipv6AllowAnycastProbe")
    def ipv6_allow_anycast_probe(self) -> str:
        """
        Enable/disable IPv6 address probe through Anycast.
        """
        return pulumi.get(self, "ipv6_allow_anycast_probe")

    @property
    @pulumi.getter(name="ipv6AllowLocalInSlientDrop")
    def ipv6_allow_local_in_slient_drop(self) -> str:
        """
        Enable/disable silent drop of IPv6 local-in traffic.
        """
        return pulumi.get(self, "ipv6_allow_local_in_slient_drop")

    @property
    @pulumi.getter(name="ipv6AllowMulticastProbe")
    def ipv6_allow_multicast_probe(self) -> str:
        """
        Enable/disable IPv6 address probe through Multicast.
        """
        return pulumi.get(self, "ipv6_allow_multicast_probe")

    @property
    @pulumi.getter(name="ipv6AllowTrafficRedirect")
    def ipv6_allow_traffic_redirect(self) -> str:
        """
        Disable to prevent IPv6 traffic with same local ingress and egress interface from being forwarded without policy check.
        """
        return pulumi.get(self, "ipv6_allow_traffic_redirect")

    @property
    @pulumi.getter(name="irqTimeAccounting")
    def irq_time_accounting(self) -> str:
        """
        Configure CPU IRQ time accounting mode.
        """
        return pulumi.get(self, "irq_time_accounting")

    @property
    @pulumi.getter
    def language(self) -> str:
        """
        GUI display language.
        """
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def ldapconntimeout(self) -> int:
        """
        Global timeout for connections with remote LDAP servers in milliseconds (1 - 300000, default 500).
        """
        return pulumi.get(self, "ldapconntimeout")

    @property
    @pulumi.getter(name="lldpReception")
    def lldp_reception(self) -> str:
        """
        Enable/disable Link Layer Discovery Protocol (LLDP) reception.
        """
        return pulumi.get(self, "lldp_reception")

    @property
    @pulumi.getter(name="lldpTransmission")
    def lldp_transmission(self) -> str:
        """
        Enable/disable Link Layer Discovery Protocol (LLDP) transmission.
        """
        return pulumi.get(self, "lldp_transmission")

    @property
    @pulumi.getter(name="logSslConnection")
    def log_ssl_connection(self) -> str:
        """
        Enable/disable logging of SSL connection events.
        """
        return pulumi.get(self, "log_ssl_connection")

    @property
    @pulumi.getter(name="logUuidAddress")
    def log_uuid_address(self) -> str:
        """
        Enable/disable insertion of address UUIDs to traffic logs.
        """
        return pulumi.get(self, "log_uuid_address")

    @property
    @pulumi.getter(name="logUuidPolicy")
    def log_uuid_policy(self) -> str:
        """
        Enable/disable insertion of policy UUIDs to traffic logs.
        """
        return pulumi.get(self, "log_uuid_policy")

    @property
    @pulumi.getter(name="loginTimestamp")
    def login_timestamp(self) -> str:
        """
        Enable/disable login time recording.
        """
        return pulumi.get(self, "login_timestamp")

    @property
    @pulumi.getter(name="longVdomName")
    def long_vdom_name(self) -> str:
        """
        Enable/disable long VDOM name support.
        """
        return pulumi.get(self, "long_vdom_name")

    @property
    @pulumi.getter(name="managementIp")
    def management_ip(self) -> str:
        """
        Management IP address of this FortiGate. Used to log into this FortiGate from another FortiGate in the Security Fabric.
        """
        return pulumi.get(self, "management_ip")

    @property
    @pulumi.getter(name="managementPort")
    def management_port(self) -> int:
        """
        Overriding port for management connection (Overrides admin port).
        """
        return pulumi.get(self, "management_port")

    @property
    @pulumi.getter(name="managementPortUseAdminSport")
    def management_port_use_admin_sport(self) -> str:
        """
        Enable/disable use of the admin-sport setting for the management port. If disabled, FortiGate will allow user to specify management-port.
        """
        return pulumi.get(self, "management_port_use_admin_sport")

    @property
    @pulumi.getter(name="managementVdom")
    def management_vdom(self) -> str:
        """
        Management virtual domain name.
        """
        return pulumi.get(self, "management_vdom")

    @property
    @pulumi.getter(name="maxDlpstatMemory")
    def max_dlpstat_memory(self) -> int:
        """
        Maximum DLP stat memory (0 - 4294967295).
        """
        return pulumi.get(self, "max_dlpstat_memory")

    @property
    @pulumi.getter(name="maxRouteCacheSize")
    def max_route_cache_size(self) -> int:
        """
        Maximum number of IP route cache entries (0 - 2147483647).
        """
        return pulumi.get(self, "max_route_cache_size")

    @property
    @pulumi.getter(name="mcTtlNotchange")
    def mc_ttl_notchange(self) -> str:
        """
        Enable/disable no modification of multicast TTL.
        """
        return pulumi.get(self, "mc_ttl_notchange")

    @property
    @pulumi.getter(name="memoryUseThresholdExtreme")
    def memory_use_threshold_extreme(self) -> int:
        """
        Threshold at which memory usage is considered extreme (new sessions are dropped) (% of total RAM, default = 95).
        """
        return pulumi.get(self, "memory_use_threshold_extreme")

    @property
    @pulumi.getter(name="memoryUseThresholdGreen")
    def memory_use_threshold_green(self) -> int:
        """
        Threshold at which memory usage forces the FortiGate to exit conserve mode (% of total RAM, default = 82).
        """
        return pulumi.get(self, "memory_use_threshold_green")

    @property
    @pulumi.getter(name="memoryUseThresholdRed")
    def memory_use_threshold_red(self) -> int:
        """
        Threshold at which memory usage forces the FortiGate to enter conserve mode (% of total RAM, default = 88).
        """
        return pulumi.get(self, "memory_use_threshold_red")

    @property
    @pulumi.getter(name="miglogAffinity")
    def miglog_affinity(self) -> str:
        """
        Affinity setting for logging (64-bit hexadecimal value in the format of xxxxxxxxxxxxxxxx).
        """
        return pulumi.get(self, "miglog_affinity")

    @property
    @pulumi.getter(name="miglogdChildren")
    def miglogd_children(self) -> int:
        """
        Number of logging (miglogd) processes to be allowed to run. Higher number can reduce performance; lower number can slow log processing time. No logs will be dropped or lost if the number is changed.
        """
        return pulumi.get(self, "miglogd_children")

    @property
    @pulumi.getter(name="multiFactorAuthentication")
    def multi_factor_authentication(self) -> str:
        """
        Enforce all login methods to require an additional authentication factor (default = optional).
        """
        return pulumi.get(self, "multi_factor_authentication")

    @property
    @pulumi.getter(name="multicastForward")
    def multicast_forward(self) -> str:
        """
        Enable/disable multicast forwarding.
        """
        return pulumi.get(self, "multicast_forward")

    @property
    @pulumi.getter(name="ndpMaxEntry")
    def ndp_max_entry(self) -> int:
        """
        Maximum number of NDP table entries (set to 65,536 or higher; if set to 0, kernel holds 65,536 entries).
        """
        return pulumi.get(self, "ndp_max_entry")

    @property
    @pulumi.getter(name="perUserBal")
    def per_user_bal(self) -> str:
        """
        Enable/disable per-user block/allow list filter.
        """
        return pulumi.get(self, "per_user_bal")

    @property
    @pulumi.getter(name="perUserBwl")
    def per_user_bwl(self) -> str:
        """
        Enable/disable per-user black/white list filter.
        """
        return pulumi.get(self, "per_user_bwl")

    @property
    @pulumi.getter(name="pmtuDiscovery")
    def pmtu_discovery(self) -> str:
        """
        Enable/disable path MTU discovery.
        """
        return pulumi.get(self, "pmtu_discovery")

    @property
    @pulumi.getter(name="policyAuthConcurrent")
    def policy_auth_concurrent(self) -> int:
        """
        Number of concurrent firewall use logins from the same user (1 - 100, default = 0 means no limit).
        """
        return pulumi.get(self, "policy_auth_concurrent")

    @property
    @pulumi.getter(name="postLoginBanner")
    def post_login_banner(self) -> str:
        """
        Enable/disable displaying the administrator access disclaimer message after an administrator successfully logs in.
        """
        return pulumi.get(self, "post_login_banner")

    @property
    @pulumi.getter(name="preLoginBanner")
    def pre_login_banner(self) -> str:
        """
        Enable/disable displaying the administrator access disclaimer message on the login page before an administrator logs in.
        """
        return pulumi.get(self, "pre_login_banner")

    @property
    @pulumi.getter(name="privateDataEncryption")
    def private_data_encryption(self) -> str:
        """
        Enable/disable private data encryption using an AES 128-bit key.
        """
        return pulumi.get(self, "private_data_encryption")

    @property
    @pulumi.getter(name="proxyAuthLifetime")
    def proxy_auth_lifetime(self) -> str:
        """
        Enable/disable authenticated users lifetime control.  This is a cap on the total time a proxy user can be authenticated for after which re-authentication will take place.
        """
        return pulumi.get(self, "proxy_auth_lifetime")

    @property
    @pulumi.getter(name="proxyAuthLifetimeTimeout")
    def proxy_auth_lifetime_timeout(self) -> int:
        """
        Lifetime timeout in minutes for authenticated users (5  - 65535 min, default=480 (8 hours)).
        """
        return pulumi.get(self, "proxy_auth_lifetime_timeout")

    @property
    @pulumi.getter(name="proxyAuthTimeout")
    def proxy_auth_timeout(self) -> int:
        """
        Authentication timeout in minutes for authenticated users (1 - 300 min, default = 10).
        """
        return pulumi.get(self, "proxy_auth_timeout")

    @property
    @pulumi.getter(name="proxyCertUseMgmtVdom")
    def proxy_cert_use_mgmt_vdom(self) -> str:
        """
        Enable/disable using management VDOM to send requests.
        """
        return pulumi.get(self, "proxy_cert_use_mgmt_vdom")

    @property
    @pulumi.getter(name="proxyCipherHardwareAcceleration")
    def proxy_cipher_hardware_acceleration(self) -> str:
        """
        Enable/disable using content processor (CP8 or CP9) hardware acceleration to encrypt and decrypt IPsec and SSL traffic.
        """
        return pulumi.get(self, "proxy_cipher_hardware_acceleration")

    @property
    @pulumi.getter(name="proxyHardwareAcceleration")
    def proxy_hardware_acceleration(self) -> str:
        """
        Enable/disable email proxy hardware acceleration.
        """
        return pulumi.get(self, "proxy_hardware_acceleration")

    @property
    @pulumi.getter(name="proxyKxpHardwareAcceleration")
    def proxy_kxp_hardware_acceleration(self) -> str:
        """
        Enable/disable using the content processor to accelerate KXP traffic.
        """
        return pulumi.get(self, "proxy_kxp_hardware_acceleration")

    @property
    @pulumi.getter(name="proxyReAuthenticationMode")
    def proxy_re_authentication_mode(self) -> str:
        """
        Control if users must re-authenticate after a session is closed, traffic has been idle, or from the point at which the user was first created.
        """
        return pulumi.get(self, "proxy_re_authentication_mode")

    @property
    @pulumi.getter(name="proxyResourceMode")
    def proxy_resource_mode(self) -> str:
        """
        Enable/disable use of the maximum memory usage on the FortiGate unit's proxy processing of resources, such as block lists, allow lists, and external resources.
        """
        return pulumi.get(self, "proxy_resource_mode")

    @property
    @pulumi.getter(name="proxyWorkerCount")
    def proxy_worker_count(self) -> int:
        """
        Proxy worker count.
        """
        return pulumi.get(self, "proxy_worker_count")

    @property
    @pulumi.getter(name="radiusPort")
    def radius_port(self) -> int:
        """
        RADIUS service port number.
        """
        return pulumi.get(self, "radius_port")

    @property
    @pulumi.getter(name="rebootUponConfigRestore")
    def reboot_upon_config_restore(self) -> str:
        """
        Enable/disable reboot of system upon restoring configuration.
        """
        return pulumi.get(self, "reboot_upon_config_restore")

    @property
    @pulumi.getter
    def refresh(self) -> int:
        """
        Statistics refresh interval in GUI.
        """
        return pulumi.get(self, "refresh")

    @property
    @pulumi.getter
    def remoteauthtimeout(self) -> int:
        """
        Number of seconds that the FortiGate waits for responses from remote RADIUS, LDAP, or TACACS+ authentication servers. (0-300 sec, default = 5, 0 means no timeout).
        """
        return pulumi.get(self, "remoteauthtimeout")

    @property
    @pulumi.getter(name="resetSessionlessTcp")
    def reset_sessionless_tcp(self) -> str:
        """
        Action to perform if the FortiGate receives a TCP packet but cannot find a corresponding session in its session table. NAT/Route mode only.
        """
        return pulumi.get(self, "reset_sessionless_tcp")

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> str:
        """
        Daily restart time (hh:mm).
        """
        return pulumi.get(self, "restart_time")

    @property
    @pulumi.getter(name="revisionBackupOnLogout")
    def revision_backup_on_logout(self) -> str:
        """
        Enable/disable back-up of the latest configuration revision when an administrator logs out of the CLI or GUI.
        """
        return pulumi.get(self, "revision_backup_on_logout")

    @property
    @pulumi.getter(name="revisionImageAutoBackup")
    def revision_image_auto_backup(self) -> str:
        """
        Enable/disable back-up of the latest configuration revision after the firmware is upgraded.
        """
        return pulumi.get(self, "revision_image_auto_backup")

    @property
    @pulumi.getter(name="scanunitCount")
    def scanunit_count(self) -> int:
        """
        Number of scanunits. The range and the default depend on the number of CPUs. Only available on FortiGate units with multiple CPUs.
        """
        return pulumi.get(self, "scanunit_count")

    @property
    @pulumi.getter(name="securityRatingResultSubmission")
    def security_rating_result_submission(self) -> str:
        """
        Enable/disable the submission of Security Rating results to FortiGuard.
        """
        return pulumi.get(self, "security_rating_result_submission")

    @property
    @pulumi.getter(name="securityRatingRunOnSchedule")
    def security_rating_run_on_schedule(self) -> str:
        """
        Enable/disable scheduled runs of Security Rating.
        """
        return pulumi.get(self, "security_rating_run_on_schedule")

    @property
    @pulumi.getter(name="sendPmtuIcmp")
    def send_pmtu_icmp(self) -> str:
        """
        Enable/disable sending of path maximum transmission unit (PMTU) - ICMP destination unreachable packet and to support PMTUD protocol on your network to reduce fragmentation of packets.
        """
        return pulumi.get(self, "send_pmtu_icmp")

    @property
    @pulumi.getter(name="snatRouteChange")
    def snat_route_change(self) -> str:
        """
        Enable/disable the ability to change the static NAT route.
        """
        return pulumi.get(self, "snat_route_change")

    @property
    @pulumi.getter(name="specialFile23Support")
    def special_file23_support(self) -> str:
        """
        Enable/disable IPS detection of HIBUN format files when using Data Leak Protection.
        """
        return pulumi.get(self, "special_file23_support")

    @property
    @pulumi.getter(name="speedtestServer")
    def speedtest_server(self) -> str:
        """
        Enable/disable speed test server.
        """
        return pulumi.get(self, "speedtest_server")

    @property
    @pulumi.getter(name="splitPort")
    def split_port(self) -> str:
        """
        Split port(s) to multiple 10Gbps ports.
        """
        return pulumi.get(self, "split_port")

    @property
    @pulumi.getter(name="ssdTrimDate")
    def ssd_trim_date(self) -> int:
        """
        Date within a month to run ssd trim.
        """
        return pulumi.get(self, "ssd_trim_date")

    @property
    @pulumi.getter(name="ssdTrimFreq")
    def ssd_trim_freq(self) -> str:
        """
        How often to run SSD Trim (default = weekly). SSD Trim prevents SSD drive data loss by finding and isolating errors.
        """
        return pulumi.get(self, "ssd_trim_freq")

    @property
    @pulumi.getter(name="ssdTrimHour")
    def ssd_trim_hour(self) -> int:
        """
        Hour of the day on which to run SSD Trim (0 - 23, default = 1).
        """
        return pulumi.get(self, "ssd_trim_hour")

    @property
    @pulumi.getter(name="ssdTrimMin")
    def ssd_trim_min(self) -> int:
        """
        Minute of the hour on which to run SSD Trim (0 - 59, 60 for random).
        """
        return pulumi.get(self, "ssd_trim_min")

    @property
    @pulumi.getter(name="ssdTrimWeekday")
    def ssd_trim_weekday(self) -> str:
        """
        Day of week to run SSD Trim.
        """
        return pulumi.get(self, "ssd_trim_weekday")

    @property
    @pulumi.getter(name="sshCbcCipher")
    def ssh_cbc_cipher(self) -> str:
        """
        Enable/disable CBC cipher for SSH access.
        """
        return pulumi.get(self, "ssh_cbc_cipher")

    @property
    @pulumi.getter(name="sshEncAlgo")
    def ssh_enc_algo(self) -> str:
        """
        Select one or more SSH ciphers.
        """
        return pulumi.get(self, "ssh_enc_algo")

    @property
    @pulumi.getter(name="sshHmacMd5")
    def ssh_hmac_md5(self) -> str:
        """
        Enable/disable HMAC-MD5 for SSH access.
        """
        return pulumi.get(self, "ssh_hmac_md5")

    @property
    @pulumi.getter(name="sshKexAlgo")
    def ssh_kex_algo(self) -> str:
        """
        Select one or more SSH kex algorithms.
        """
        return pulumi.get(self, "ssh_kex_algo")

    @property
    @pulumi.getter(name="sshKexSha1")
    def ssh_kex_sha1(self) -> str:
        """
        Enable/disable SHA1 key exchange for SSH access.
        """
        return pulumi.get(self, "ssh_kex_sha1")

    @property
    @pulumi.getter(name="sshMacAlgo")
    def ssh_mac_algo(self) -> str:
        """
        Select one or more SSH MAC algorithms.
        """
        return pulumi.get(self, "ssh_mac_algo")

    @property
    @pulumi.getter(name="sshMacWeak")
    def ssh_mac_weak(self) -> str:
        """
        Enable/disable HMAC-SHA1 and UMAC-64-ETM for SSH access.
        """
        return pulumi.get(self, "ssh_mac_weak")

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> str:
        """
        Minimum supported protocol version for SSL/TLS connections (default = TLSv1.2).
        """
        return pulumi.get(self, "ssl_min_proto_version")

    @property
    @pulumi.getter(name="sslStaticKeyCiphers")
    def ssl_static_key_ciphers(self) -> str:
        """
        Enable/disable static key ciphers in SSL/TLS connections (e.g. AES128-SHA, AES256-SHA, AES128-SHA256, AES256-SHA256).
        """
        return pulumi.get(self, "ssl_static_key_ciphers")

    @property
    @pulumi.getter(name="sslvpnCipherHardwareAcceleration")
    def sslvpn_cipher_hardware_acceleration(self) -> str:
        """
        Enable/disable SSL VPN hardware acceleration.
        """
        return pulumi.get(self, "sslvpn_cipher_hardware_acceleration")

    @property
    @pulumi.getter(name="sslvpnEmsSnCheck")
    def sslvpn_ems_sn_check(self) -> str:
        """
        Enable/disable verification of EMS serial number in SSL-VPN connection.
        """
        return pulumi.get(self, "sslvpn_ems_sn_check")

    @property
    @pulumi.getter(name="sslvpnKxpHardwareAcceleration")
    def sslvpn_kxp_hardware_acceleration(self) -> str:
        """
        Enable/disable SSL VPN KXP hardware acceleration.
        """
        return pulumi.get(self, "sslvpn_kxp_hardware_acceleration")

    @property
    @pulumi.getter(name="sslvpnMaxWorkerCount")
    def sslvpn_max_worker_count(self) -> int:
        """
        Maximum number of SSL VPN processes. Upper limit for this value is the number of CPUs and depends on the model.
        """
        return pulumi.get(self, "sslvpn_max_worker_count")

    @property
    @pulumi.getter(name="sslvpnPluginVersionCheck")
    def sslvpn_plugin_version_check(self) -> str:
        """
        Enable/disable checking browser's plugin version by SSL VPN.
        """
        return pulumi.get(self, "sslvpn_plugin_version_check")

    @property
    @pulumi.getter(name="strictDirtySessionCheck")
    def strict_dirty_session_check(self) -> str:
        """
        Enable to check the session against the original policy when revalidating. This can prevent dropping of redirected sessions when web-filtering and authentication are enabled together. If this option is enabled, the FortiGate unit deletes a session if a routing or policy change causes the session to no longer match the policy that originally allowed the session.
        """
        return pulumi.get(self, "strict_dirty_session_check")

    @property
    @pulumi.getter(name="strongCrypto")
    def strong_crypto(self) -> str:
        """
        Enable to use strong encryption and only allow strong ciphers (AES, 3DES) and digest (SHA1) for HTTPS/SSH/TLS/SSL functions.
        """
        return pulumi.get(self, "strong_crypto")

    @property
    @pulumi.getter(name="switchController")
    def switch_controller(self) -> str:
        """
        Enable/disable switch controller feature. Switch controller allows you to manage FortiSwitch from the FortiGate itself.
        """
        return pulumi.get(self, "switch_controller")

    @property
    @pulumi.getter(name="switchControllerReservedNetwork")
    def switch_controller_reserved_network(self) -> str:
        """
        Enable reserved network subnet for controlled switches. This is available when the switch controller is enabled.
        """
        return pulumi.get(self, "switch_controller_reserved_network")

    @property
    @pulumi.getter(name="sysPerfLogInterval")
    def sys_perf_log_interval(self) -> int:
        """
        Time in minutes between updates of performance statistics logging. (1 - 15 min, default = 5, 0 = disabled).
        """
        return pulumi.get(self, "sys_perf_log_interval")

    @property
    @pulumi.getter(name="tcpHalfcloseTimer")
    def tcp_halfclose_timer(self) -> int:
        """
        Number of seconds the FortiGate unit should wait to close a session after one peer has sent a FIN packet but the other has not responded (1 - 86400 sec (1 day), default = 120).
        """
        return pulumi.get(self, "tcp_halfclose_timer")

    @property
    @pulumi.getter(name="tcpHalfopenTimer")
    def tcp_halfopen_timer(self) -> int:
        """
        Number of seconds the FortiGate unit should wait to close a session after one peer has sent an open session packet but the other has not responded (1 - 86400 sec (1 day), default = 10).
        """
        return pulumi.get(self, "tcp_halfopen_timer")

    @property
    @pulumi.getter(name="tcpOption")
    def tcp_option(self) -> str:
        """
        Enable SACK, timestamp and MSS TCP options.
        """
        return pulumi.get(self, "tcp_option")

    @property
    @pulumi.getter(name="tcpRstTimer")
    def tcp_rst_timer(self) -> int:
        """
        Length of the TCP CLOSE state in seconds (5 - 300 sec, default = 5).
        """
        return pulumi.get(self, "tcp_rst_timer")

    @property
    @pulumi.getter(name="tcpTimewaitTimer")
    def tcp_timewait_timer(self) -> int:
        """
        Length of the TCP TIME-WAIT state in seconds.
        """
        return pulumi.get(self, "tcp_timewait_timer")

    @property
    @pulumi.getter
    def tftp(self) -> str:
        """
        Enable/disable TFTP.
        """
        return pulumi.get(self, "tftp")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        Number corresponding to your time zone from 00 to 86. Enter set timezone ? to view the list of time zones and the numbers that represent them.
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="tpMcSkipPolicy")
    def tp_mc_skip_policy(self) -> str:
        """
        Enable/disable skip policy check and allow multicast through.
        """
        return pulumi.get(self, "tp_mc_skip_policy")

    @property
    @pulumi.getter(name="trafficPriority")
    def traffic_priority(self) -> str:
        """
        Choose Type of Service (ToS) or Differentiated Services Code Point (DSCP) for traffic prioritization in traffic shaping.
        """
        return pulumi.get(self, "traffic_priority")

    @property
    @pulumi.getter(name="trafficPriorityLevel")
    def traffic_priority_level(self) -> str:
        """
        Default system-wide level of priority for traffic prioritization.
        """
        return pulumi.get(self, "traffic_priority_level")

    @property
    @pulumi.getter(name="twoFactorEmailExpiry")
    def two_factor_email_expiry(self) -> int:
        """
        Email-based two-factor authentication session timeout (30 - 300 seconds (5 minutes), default = 60).
        """
        return pulumi.get(self, "two_factor_email_expiry")

    @property
    @pulumi.getter(name="twoFactorFacExpiry")
    def two_factor_fac_expiry(self) -> int:
        """
        FortiAuthenticator token authentication session timeout (10 - 3600 seconds (1 hour), default = 60).
        """
        return pulumi.get(self, "two_factor_fac_expiry")

    @property
    @pulumi.getter(name="twoFactorFtkExpiry")
    def two_factor_ftk_expiry(self) -> int:
        """
        FortiToken authentication session timeout (60 - 600 sec (10 minutes), default = 60).
        """
        return pulumi.get(self, "two_factor_ftk_expiry")

    @property
    @pulumi.getter(name="twoFactorFtmExpiry")
    def two_factor_ftm_expiry(self) -> int:
        """
        FortiToken Mobile session timeout (1 - 168 hours (7 days), default = 72).
        """
        return pulumi.get(self, "two_factor_ftm_expiry")

    @property
    @pulumi.getter(name="twoFactorSmsExpiry")
    def two_factor_sms_expiry(self) -> int:
        """
        SMS-based two-factor authentication session timeout (30 - 300 sec, default = 60).
        """
        return pulumi.get(self, "two_factor_sms_expiry")

    @property
    @pulumi.getter(name="udpIdleTimer")
    def udp_idle_timer(self) -> int:
        """
        UDP connection session timeout. This command can be useful in managing CPU and memory resources (1 - 86400 seconds (1 day), default = 60).
        """
        return pulumi.get(self, "udp_idle_timer")

    @property
    @pulumi.getter(name="urlFilterAffinity")
    def url_filter_affinity(self) -> str:
        """
        URL filter CPU affinity.
        """
        return pulumi.get(self, "url_filter_affinity")

    @property
    @pulumi.getter(name="urlFilterCount")
    def url_filter_count(self) -> int:
        """
        URL filter daemon count.
        """
        return pulumi.get(self, "url_filter_count")

    @property
    @pulumi.getter(name="userDeviceStoreMaxDevices")
    def user_device_store_max_devices(self) -> int:
        """
        Maximum number of devices allowed in user device store.
        """
        return pulumi.get(self, "user_device_store_max_devices")

    @property
    @pulumi.getter(name="userDeviceStoreMaxUnifiedMem")
    def user_device_store_max_unified_mem(self) -> int:
        """
        Maximum unified memory allowed in user device store.
        """
        return pulumi.get(self, "user_device_store_max_unified_mem")

    @property
    @pulumi.getter(name="userDeviceStoreMaxUsers")
    def user_device_store_max_users(self) -> int:
        """
        Maximum number of users allowed in user device store.
        """
        return pulumi.get(self, "user_device_store_max_users")

    @property
    @pulumi.getter(name="userServerCert")
    def user_server_cert(self) -> str:
        """
        Certificate to use for https user authentication.
        """
        return pulumi.get(self, "user_server_cert")

    @property
    @pulumi.getter(name="vdomAdmin")
    def vdom_admin(self) -> str:
        """
        Enable/disable support for multiple virtual domains (VDOMs).
        """
        return pulumi.get(self, "vdom_admin")

    @property
    @pulumi.getter(name="vdomMode")
    def vdom_mode(self) -> str:
        """
        Enable/disable support for split/multiple virtual domains (VDOMs).
        """
        return pulumi.get(self, "vdom_mode")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="vipArpRange")
    def vip_arp_range(self) -> str:
        """
        Controls the number of ARPs that the FortiGate sends for a Virtual IP (VIP) address range.
        """
        return pulumi.get(self, "vip_arp_range")

    @property
    @pulumi.getter(name="virtualServerCount")
    def virtual_server_count(self) -> int:
        """
        Maximum number of virtual server processes to create. The maximum is the number of CPU cores. This is not available on single-core CPUs.
        """
        return pulumi.get(self, "virtual_server_count")

    @property
    @pulumi.getter(name="virtualServerHardwareAcceleration")
    def virtual_server_hardware_acceleration(self) -> str:
        """
        Enable/disable virtual server hardware acceleration.
        """
        return pulumi.get(self, "virtual_server_hardware_acceleration")

    @property
    @pulumi.getter(name="virtualSwitchVlan")
    def virtual_switch_vlan(self) -> str:
        """
        Enable/disable virtual switch VLAN.
        """
        return pulumi.get(self, "virtual_switch_vlan")

    @property
    @pulumi.getter(name="wadAffinity")
    def wad_affinity(self) -> str:
        """
        Affinity setting for wad (hexadecimal value up to 256 bits in the format of xxxxxxxxxxxxxxxx).
        """
        return pulumi.get(self, "wad_affinity")

    @property
    @pulumi.getter(name="wadCsvcCsCount")
    def wad_csvc_cs_count(self) -> int:
        """
        Number of concurrent WAD-cache-service object-cache processes.
        """
        return pulumi.get(self, "wad_csvc_cs_count")

    @property
    @pulumi.getter(name="wadCsvcDbCount")
    def wad_csvc_db_count(self) -> int:
        """
        Number of concurrent WAD-cache-service byte-cache processes.
        """
        return pulumi.get(self, "wad_csvc_db_count")

    @property
    @pulumi.getter(name="wadMemoryChangeGranularity")
    def wad_memory_change_granularity(self) -> int:
        """
        Minimum percentage change in system memory usage detected by the wad daemon prior to adjusting TCP window size for any active connection.
        """
        return pulumi.get(self, "wad_memory_change_granularity")

    @property
    @pulumi.getter(name="wadSourceAffinity")
    def wad_source_affinity(self) -> str:
        """
        Enable/disable dispatching traffic to WAD workers based on source affinity.
        """
        return pulumi.get(self, "wad_source_affinity")

    @property
    @pulumi.getter(name="wadWorkerCount")
    def wad_worker_count(self) -> int:
        """
        Number of explicit proxy WAN optimization daemon (WAD) processes. By default WAN optimization, explicit proxy, and web caching is handled by all of the CPU cores in a FortiGate unit.
        """
        return pulumi.get(self, "wad_worker_count")

    @property
    @pulumi.getter(name="wifiCaCertificate")
    def wifi_ca_certificate(self) -> str:
        """
        CA certificate that verifies the WiFi certificate.
        """
        return pulumi.get(self, "wifi_ca_certificate")

    @property
    @pulumi.getter(name="wifiCertificate")
    def wifi_certificate(self) -> str:
        """
        Certificate to use for WiFi authentication.
        """
        return pulumi.get(self, "wifi_certificate")

    @property
    @pulumi.getter(name="wimax4gUsb")
    def wimax4g_usb(self) -> str:
        """
        Enable/disable comparability with WiMAX 4G USB devices.
        """
        return pulumi.get(self, "wimax4g_usb")

    @property
    @pulumi.getter(name="wirelessController")
    def wireless_controller(self) -> str:
        """
        Enable/disable the wireless controller feature to use the FortiGate unit to manage FortiAPs.
        """
        return pulumi.get(self, "wireless_controller")

    @property
    @pulumi.getter(name="wirelessControllerPort")
    def wireless_controller_port(self) -> int:
        """
        Port used for the control channel in wireless controller mode (wireless-mode is ac). The data channel port is the control channel port number plus one (1024 - 49150, default = 5246).
        """
        return pulumi.get(self, "wireless_controller_port")


class AwaitableGetGlobalResult(GetGlobalResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGlobalResult(
            admin_concurrent=self.admin_concurrent,
            admin_console_timeout=self.admin_console_timeout,
            admin_forticloud_sso_login=self.admin_forticloud_sso_login,
            admin_host=self.admin_host,
            admin_hsts_max_age=self.admin_hsts_max_age,
            admin_https_pki_required=self.admin_https_pki_required,
            admin_https_redirect=self.admin_https_redirect,
            admin_https_ssl_banned_ciphers=self.admin_https_ssl_banned_ciphers,
            admin_https_ssl_ciphersuites=self.admin_https_ssl_ciphersuites,
            admin_https_ssl_versions=self.admin_https_ssl_versions,
            admin_lockout_duration=self.admin_lockout_duration,
            admin_lockout_threshold=self.admin_lockout_threshold,
            admin_login_max=self.admin_login_max,
            admin_maintainer=self.admin_maintainer,
            admin_port=self.admin_port,
            admin_restrict_local=self.admin_restrict_local,
            admin_scp=self.admin_scp,
            admin_server_cert=self.admin_server_cert,
            admin_sport=self.admin_sport,
            admin_ssh_grace_time=self.admin_ssh_grace_time,
            admin_ssh_password=self.admin_ssh_password,
            admin_ssh_port=self.admin_ssh_port,
            admin_ssh_v1=self.admin_ssh_v1,
            admin_telnet=self.admin_telnet,
            admin_telnet_port=self.admin_telnet_port,
            admintimeout=self.admintimeout,
            alias=self.alias,
            allow_traffic_redirect=self.allow_traffic_redirect,
            anti_replay=self.anti_replay,
            arp_max_entry=self.arp_max_entry,
            asymroute=self.asymroute,
            auth_cert=self.auth_cert,
            auth_http_port=self.auth_http_port,
            auth_https_port=self.auth_https_port,
            auth_ike_saml_port=self.auth_ike_saml_port,
            auth_keepalive=self.auth_keepalive,
            auth_session_limit=self.auth_session_limit,
            auto_auth_extension_device=self.auto_auth_extension_device,
            autorun_log_fsck=self.autorun_log_fsck,
            av_affinity=self.av_affinity,
            av_failopen=self.av_failopen,
            av_failopen_session=self.av_failopen_session,
            batch_cmdb=self.batch_cmdb,
            block_session_timer=self.block_session_timer,
            br_fdb_max_entry=self.br_fdb_max_entry,
            cert_chain_max=self.cert_chain_max,
            cfg_revert_timeout=self.cfg_revert_timeout,
            cfg_save=self.cfg_save,
            check_protocol_header=self.check_protocol_header,
            check_reset_range=self.check_reset_range,
            cli_audit_log=self.cli_audit_log,
            cloud_communication=self.cloud_communication,
            clt_cert_req=self.clt_cert_req,
            cmdbsvr_affinity=self.cmdbsvr_affinity,
            compliance_check=self.compliance_check,
            compliance_check_time=self.compliance_check_time,
            cpu_use_threshold=self.cpu_use_threshold,
            csr_ca_attribute=self.csr_ca_attribute,
            daily_restart=self.daily_restart,
            default_service_source_port=self.default_service_source_port,
            device_identification_active_scan_delay=self.device_identification_active_scan_delay,
            device_idle_timeout=self.device_idle_timeout,
            dh_params=self.dh_params,
            dnsproxy_worker_count=self.dnsproxy_worker_count,
            dst=self.dst,
            early_tcp_npu_session=self.early_tcp_npu_session,
            edit_vdom_prompt=self.edit_vdom_prompt,
            endpoint_control_fds_access=self.endpoint_control_fds_access,
            endpoint_control_portal_port=self.endpoint_control_portal_port,
            extender_controller_reserved_network=self.extender_controller_reserved_network,
            failtime=self.failtime,
            faz_disk_buffer_size=self.faz_disk_buffer_size,
            fds_statistics=self.fds_statistics,
            fds_statistics_period=self.fds_statistics_period,
            fec_port=self.fec_port,
            fgd_alert_subscription=self.fgd_alert_subscription,
            fortiextender=self.fortiextender,
            fortiextender_data_port=self.fortiextender_data_port,
            fortiextender_discovery_lockdown=self.fortiextender_discovery_lockdown,
            fortiextender_provision_on_authorization=self.fortiextender_provision_on_authorization,
            fortiextender_vlan_mode=self.fortiextender_vlan_mode,
            fortiipam_integration=self.fortiipam_integration,
            fortiservice_port=self.fortiservice_port,
            fortitoken_cloud=self.fortitoken_cloud,
            gui_allow_default_hostname=self.gui_allow_default_hostname,
            gui_app_detection_sdwan=self.gui_app_detection_sdwan,
            gui_cdn_usage=self.gui_cdn_usage,
            gui_certificates=self.gui_certificates,
            gui_custom_language=self.gui_custom_language,
            gui_date_format=self.gui_date_format,
            gui_date_time_source=self.gui_date_time_source,
            gui_device_latitude=self.gui_device_latitude,
            gui_device_longitude=self.gui_device_longitude,
            gui_display_hostname=self.gui_display_hostname,
            gui_firmware_upgrade_setup_warning=self.gui_firmware_upgrade_setup_warning,
            gui_firmware_upgrade_warning=self.gui_firmware_upgrade_warning,
            gui_forticare_registration_setup_warning=self.gui_forticare_registration_setup_warning,
            gui_fortigate_cloud_sandbox=self.gui_fortigate_cloud_sandbox,
            gui_fortiguard_resource_fetch=self.gui_fortiguard_resource_fetch,
            gui_fortisandbox_cloud=self.gui_fortisandbox_cloud,
            gui_ipv6=self.gui_ipv6,
            gui_lines_per_page=self.gui_lines_per_page,
            gui_local_out=self.gui_local_out,
            gui_replacement_message_groups=self.gui_replacement_message_groups,
            gui_rest_api_cache=self.gui_rest_api_cache,
            gui_theme=self.gui_theme,
            gui_wireless_opensecurity=self.gui_wireless_opensecurity,
            gui_workflow_management=self.gui_workflow_management,
            ha_affinity=self.ha_affinity,
            honor_df=self.honor_df,
            hostname=self.hostname,
            id=self.id,
            igmp_state_limit=self.igmp_state_limit,
            ike_embryonic_limit=self.ike_embryonic_limit,
            internet_service_database=self.internet_service_database,
            interval=self.interval,
            ip_src_port_range=self.ip_src_port_range,
            ips_affinity=self.ips_affinity,
            ipsec_asic_offload=self.ipsec_asic_offload,
            ipsec_ha_seqjump_rate=self.ipsec_ha_seqjump_rate,
            ipsec_hmac_offload=self.ipsec_hmac_offload,
            ipsec_round_robin=self.ipsec_round_robin,
            ipsec_soft_dec_async=self.ipsec_soft_dec_async,
            ipv6_accept_dad=self.ipv6_accept_dad,
            ipv6_allow_anycast_probe=self.ipv6_allow_anycast_probe,
            ipv6_allow_local_in_slient_drop=self.ipv6_allow_local_in_slient_drop,
            ipv6_allow_multicast_probe=self.ipv6_allow_multicast_probe,
            ipv6_allow_traffic_redirect=self.ipv6_allow_traffic_redirect,
            irq_time_accounting=self.irq_time_accounting,
            language=self.language,
            ldapconntimeout=self.ldapconntimeout,
            lldp_reception=self.lldp_reception,
            lldp_transmission=self.lldp_transmission,
            log_ssl_connection=self.log_ssl_connection,
            log_uuid_address=self.log_uuid_address,
            log_uuid_policy=self.log_uuid_policy,
            login_timestamp=self.login_timestamp,
            long_vdom_name=self.long_vdom_name,
            management_ip=self.management_ip,
            management_port=self.management_port,
            management_port_use_admin_sport=self.management_port_use_admin_sport,
            management_vdom=self.management_vdom,
            max_dlpstat_memory=self.max_dlpstat_memory,
            max_route_cache_size=self.max_route_cache_size,
            mc_ttl_notchange=self.mc_ttl_notchange,
            memory_use_threshold_extreme=self.memory_use_threshold_extreme,
            memory_use_threshold_green=self.memory_use_threshold_green,
            memory_use_threshold_red=self.memory_use_threshold_red,
            miglog_affinity=self.miglog_affinity,
            miglogd_children=self.miglogd_children,
            multi_factor_authentication=self.multi_factor_authentication,
            multicast_forward=self.multicast_forward,
            ndp_max_entry=self.ndp_max_entry,
            per_user_bal=self.per_user_bal,
            per_user_bwl=self.per_user_bwl,
            pmtu_discovery=self.pmtu_discovery,
            policy_auth_concurrent=self.policy_auth_concurrent,
            post_login_banner=self.post_login_banner,
            pre_login_banner=self.pre_login_banner,
            private_data_encryption=self.private_data_encryption,
            proxy_auth_lifetime=self.proxy_auth_lifetime,
            proxy_auth_lifetime_timeout=self.proxy_auth_lifetime_timeout,
            proxy_auth_timeout=self.proxy_auth_timeout,
            proxy_cert_use_mgmt_vdom=self.proxy_cert_use_mgmt_vdom,
            proxy_cipher_hardware_acceleration=self.proxy_cipher_hardware_acceleration,
            proxy_hardware_acceleration=self.proxy_hardware_acceleration,
            proxy_kxp_hardware_acceleration=self.proxy_kxp_hardware_acceleration,
            proxy_re_authentication_mode=self.proxy_re_authentication_mode,
            proxy_resource_mode=self.proxy_resource_mode,
            proxy_worker_count=self.proxy_worker_count,
            radius_port=self.radius_port,
            reboot_upon_config_restore=self.reboot_upon_config_restore,
            refresh=self.refresh,
            remoteauthtimeout=self.remoteauthtimeout,
            reset_sessionless_tcp=self.reset_sessionless_tcp,
            restart_time=self.restart_time,
            revision_backup_on_logout=self.revision_backup_on_logout,
            revision_image_auto_backup=self.revision_image_auto_backup,
            scanunit_count=self.scanunit_count,
            security_rating_result_submission=self.security_rating_result_submission,
            security_rating_run_on_schedule=self.security_rating_run_on_schedule,
            send_pmtu_icmp=self.send_pmtu_icmp,
            snat_route_change=self.snat_route_change,
            special_file23_support=self.special_file23_support,
            speedtest_server=self.speedtest_server,
            split_port=self.split_port,
            ssd_trim_date=self.ssd_trim_date,
            ssd_trim_freq=self.ssd_trim_freq,
            ssd_trim_hour=self.ssd_trim_hour,
            ssd_trim_min=self.ssd_trim_min,
            ssd_trim_weekday=self.ssd_trim_weekday,
            ssh_cbc_cipher=self.ssh_cbc_cipher,
            ssh_enc_algo=self.ssh_enc_algo,
            ssh_hmac_md5=self.ssh_hmac_md5,
            ssh_kex_algo=self.ssh_kex_algo,
            ssh_kex_sha1=self.ssh_kex_sha1,
            ssh_mac_algo=self.ssh_mac_algo,
            ssh_mac_weak=self.ssh_mac_weak,
            ssl_min_proto_version=self.ssl_min_proto_version,
            ssl_static_key_ciphers=self.ssl_static_key_ciphers,
            sslvpn_cipher_hardware_acceleration=self.sslvpn_cipher_hardware_acceleration,
            sslvpn_ems_sn_check=self.sslvpn_ems_sn_check,
            sslvpn_kxp_hardware_acceleration=self.sslvpn_kxp_hardware_acceleration,
            sslvpn_max_worker_count=self.sslvpn_max_worker_count,
            sslvpn_plugin_version_check=self.sslvpn_plugin_version_check,
            strict_dirty_session_check=self.strict_dirty_session_check,
            strong_crypto=self.strong_crypto,
            switch_controller=self.switch_controller,
            switch_controller_reserved_network=self.switch_controller_reserved_network,
            sys_perf_log_interval=self.sys_perf_log_interval,
            tcp_halfclose_timer=self.tcp_halfclose_timer,
            tcp_halfopen_timer=self.tcp_halfopen_timer,
            tcp_option=self.tcp_option,
            tcp_rst_timer=self.tcp_rst_timer,
            tcp_timewait_timer=self.tcp_timewait_timer,
            tftp=self.tftp,
            timezone=self.timezone,
            tp_mc_skip_policy=self.tp_mc_skip_policy,
            traffic_priority=self.traffic_priority,
            traffic_priority_level=self.traffic_priority_level,
            two_factor_email_expiry=self.two_factor_email_expiry,
            two_factor_fac_expiry=self.two_factor_fac_expiry,
            two_factor_ftk_expiry=self.two_factor_ftk_expiry,
            two_factor_ftm_expiry=self.two_factor_ftm_expiry,
            two_factor_sms_expiry=self.two_factor_sms_expiry,
            udp_idle_timer=self.udp_idle_timer,
            url_filter_affinity=self.url_filter_affinity,
            url_filter_count=self.url_filter_count,
            user_device_store_max_devices=self.user_device_store_max_devices,
            user_device_store_max_unified_mem=self.user_device_store_max_unified_mem,
            user_device_store_max_users=self.user_device_store_max_users,
            user_server_cert=self.user_server_cert,
            vdom_admin=self.vdom_admin,
            vdom_mode=self.vdom_mode,
            vdomparam=self.vdomparam,
            vip_arp_range=self.vip_arp_range,
            virtual_server_count=self.virtual_server_count,
            virtual_server_hardware_acceleration=self.virtual_server_hardware_acceleration,
            virtual_switch_vlan=self.virtual_switch_vlan,
            wad_affinity=self.wad_affinity,
            wad_csvc_cs_count=self.wad_csvc_cs_count,
            wad_csvc_db_count=self.wad_csvc_db_count,
            wad_memory_change_granularity=self.wad_memory_change_granularity,
            wad_source_affinity=self.wad_source_affinity,
            wad_worker_count=self.wad_worker_count,
            wifi_ca_certificate=self.wifi_ca_certificate,
            wifi_certificate=self.wifi_certificate,
            wimax4g_usb=self.wimax4g_usb,
            wireless_controller=self.wireless_controller,
            wireless_controller_port=self.wireless_controller_port)


def get_global(vdomparam: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGlobalResult:
    """
    Use this data source to get information on fortios system global

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fortios as fortios

    sample1 = fortios.sys.get_global()
    pulumi.export("output1", sample1.hostname)
    ```


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:sys/getGlobal:getGlobal', __args__, opts=opts, typ=GetGlobalResult).value

    return AwaitableGetGlobalResult(
        admin_concurrent=__ret__.admin_concurrent,
        admin_console_timeout=__ret__.admin_console_timeout,
        admin_forticloud_sso_login=__ret__.admin_forticloud_sso_login,
        admin_host=__ret__.admin_host,
        admin_hsts_max_age=__ret__.admin_hsts_max_age,
        admin_https_pki_required=__ret__.admin_https_pki_required,
        admin_https_redirect=__ret__.admin_https_redirect,
        admin_https_ssl_banned_ciphers=__ret__.admin_https_ssl_banned_ciphers,
        admin_https_ssl_ciphersuites=__ret__.admin_https_ssl_ciphersuites,
        admin_https_ssl_versions=__ret__.admin_https_ssl_versions,
        admin_lockout_duration=__ret__.admin_lockout_duration,
        admin_lockout_threshold=__ret__.admin_lockout_threshold,
        admin_login_max=__ret__.admin_login_max,
        admin_maintainer=__ret__.admin_maintainer,
        admin_port=__ret__.admin_port,
        admin_restrict_local=__ret__.admin_restrict_local,
        admin_scp=__ret__.admin_scp,
        admin_server_cert=__ret__.admin_server_cert,
        admin_sport=__ret__.admin_sport,
        admin_ssh_grace_time=__ret__.admin_ssh_grace_time,
        admin_ssh_password=__ret__.admin_ssh_password,
        admin_ssh_port=__ret__.admin_ssh_port,
        admin_ssh_v1=__ret__.admin_ssh_v1,
        admin_telnet=__ret__.admin_telnet,
        admin_telnet_port=__ret__.admin_telnet_port,
        admintimeout=__ret__.admintimeout,
        alias=__ret__.alias,
        allow_traffic_redirect=__ret__.allow_traffic_redirect,
        anti_replay=__ret__.anti_replay,
        arp_max_entry=__ret__.arp_max_entry,
        asymroute=__ret__.asymroute,
        auth_cert=__ret__.auth_cert,
        auth_http_port=__ret__.auth_http_port,
        auth_https_port=__ret__.auth_https_port,
        auth_ike_saml_port=__ret__.auth_ike_saml_port,
        auth_keepalive=__ret__.auth_keepalive,
        auth_session_limit=__ret__.auth_session_limit,
        auto_auth_extension_device=__ret__.auto_auth_extension_device,
        autorun_log_fsck=__ret__.autorun_log_fsck,
        av_affinity=__ret__.av_affinity,
        av_failopen=__ret__.av_failopen,
        av_failopen_session=__ret__.av_failopen_session,
        batch_cmdb=__ret__.batch_cmdb,
        block_session_timer=__ret__.block_session_timer,
        br_fdb_max_entry=__ret__.br_fdb_max_entry,
        cert_chain_max=__ret__.cert_chain_max,
        cfg_revert_timeout=__ret__.cfg_revert_timeout,
        cfg_save=__ret__.cfg_save,
        check_protocol_header=__ret__.check_protocol_header,
        check_reset_range=__ret__.check_reset_range,
        cli_audit_log=__ret__.cli_audit_log,
        cloud_communication=__ret__.cloud_communication,
        clt_cert_req=__ret__.clt_cert_req,
        cmdbsvr_affinity=__ret__.cmdbsvr_affinity,
        compliance_check=__ret__.compliance_check,
        compliance_check_time=__ret__.compliance_check_time,
        cpu_use_threshold=__ret__.cpu_use_threshold,
        csr_ca_attribute=__ret__.csr_ca_attribute,
        daily_restart=__ret__.daily_restart,
        default_service_source_port=__ret__.default_service_source_port,
        device_identification_active_scan_delay=__ret__.device_identification_active_scan_delay,
        device_idle_timeout=__ret__.device_idle_timeout,
        dh_params=__ret__.dh_params,
        dnsproxy_worker_count=__ret__.dnsproxy_worker_count,
        dst=__ret__.dst,
        early_tcp_npu_session=__ret__.early_tcp_npu_session,
        edit_vdom_prompt=__ret__.edit_vdom_prompt,
        endpoint_control_fds_access=__ret__.endpoint_control_fds_access,
        endpoint_control_portal_port=__ret__.endpoint_control_portal_port,
        extender_controller_reserved_network=__ret__.extender_controller_reserved_network,
        failtime=__ret__.failtime,
        faz_disk_buffer_size=__ret__.faz_disk_buffer_size,
        fds_statistics=__ret__.fds_statistics,
        fds_statistics_period=__ret__.fds_statistics_period,
        fec_port=__ret__.fec_port,
        fgd_alert_subscription=__ret__.fgd_alert_subscription,
        fortiextender=__ret__.fortiextender,
        fortiextender_data_port=__ret__.fortiextender_data_port,
        fortiextender_discovery_lockdown=__ret__.fortiextender_discovery_lockdown,
        fortiextender_provision_on_authorization=__ret__.fortiextender_provision_on_authorization,
        fortiextender_vlan_mode=__ret__.fortiextender_vlan_mode,
        fortiipam_integration=__ret__.fortiipam_integration,
        fortiservice_port=__ret__.fortiservice_port,
        fortitoken_cloud=__ret__.fortitoken_cloud,
        gui_allow_default_hostname=__ret__.gui_allow_default_hostname,
        gui_app_detection_sdwan=__ret__.gui_app_detection_sdwan,
        gui_cdn_usage=__ret__.gui_cdn_usage,
        gui_certificates=__ret__.gui_certificates,
        gui_custom_language=__ret__.gui_custom_language,
        gui_date_format=__ret__.gui_date_format,
        gui_date_time_source=__ret__.gui_date_time_source,
        gui_device_latitude=__ret__.gui_device_latitude,
        gui_device_longitude=__ret__.gui_device_longitude,
        gui_display_hostname=__ret__.gui_display_hostname,
        gui_firmware_upgrade_setup_warning=__ret__.gui_firmware_upgrade_setup_warning,
        gui_firmware_upgrade_warning=__ret__.gui_firmware_upgrade_warning,
        gui_forticare_registration_setup_warning=__ret__.gui_forticare_registration_setup_warning,
        gui_fortigate_cloud_sandbox=__ret__.gui_fortigate_cloud_sandbox,
        gui_fortiguard_resource_fetch=__ret__.gui_fortiguard_resource_fetch,
        gui_fortisandbox_cloud=__ret__.gui_fortisandbox_cloud,
        gui_ipv6=__ret__.gui_ipv6,
        gui_lines_per_page=__ret__.gui_lines_per_page,
        gui_local_out=__ret__.gui_local_out,
        gui_replacement_message_groups=__ret__.gui_replacement_message_groups,
        gui_rest_api_cache=__ret__.gui_rest_api_cache,
        gui_theme=__ret__.gui_theme,
        gui_wireless_opensecurity=__ret__.gui_wireless_opensecurity,
        gui_workflow_management=__ret__.gui_workflow_management,
        ha_affinity=__ret__.ha_affinity,
        honor_df=__ret__.honor_df,
        hostname=__ret__.hostname,
        id=__ret__.id,
        igmp_state_limit=__ret__.igmp_state_limit,
        ike_embryonic_limit=__ret__.ike_embryonic_limit,
        internet_service_database=__ret__.internet_service_database,
        interval=__ret__.interval,
        ip_src_port_range=__ret__.ip_src_port_range,
        ips_affinity=__ret__.ips_affinity,
        ipsec_asic_offload=__ret__.ipsec_asic_offload,
        ipsec_ha_seqjump_rate=__ret__.ipsec_ha_seqjump_rate,
        ipsec_hmac_offload=__ret__.ipsec_hmac_offload,
        ipsec_round_robin=__ret__.ipsec_round_robin,
        ipsec_soft_dec_async=__ret__.ipsec_soft_dec_async,
        ipv6_accept_dad=__ret__.ipv6_accept_dad,
        ipv6_allow_anycast_probe=__ret__.ipv6_allow_anycast_probe,
        ipv6_allow_local_in_slient_drop=__ret__.ipv6_allow_local_in_slient_drop,
        ipv6_allow_multicast_probe=__ret__.ipv6_allow_multicast_probe,
        ipv6_allow_traffic_redirect=__ret__.ipv6_allow_traffic_redirect,
        irq_time_accounting=__ret__.irq_time_accounting,
        language=__ret__.language,
        ldapconntimeout=__ret__.ldapconntimeout,
        lldp_reception=__ret__.lldp_reception,
        lldp_transmission=__ret__.lldp_transmission,
        log_ssl_connection=__ret__.log_ssl_connection,
        log_uuid_address=__ret__.log_uuid_address,
        log_uuid_policy=__ret__.log_uuid_policy,
        login_timestamp=__ret__.login_timestamp,
        long_vdom_name=__ret__.long_vdom_name,
        management_ip=__ret__.management_ip,
        management_port=__ret__.management_port,
        management_port_use_admin_sport=__ret__.management_port_use_admin_sport,
        management_vdom=__ret__.management_vdom,
        max_dlpstat_memory=__ret__.max_dlpstat_memory,
        max_route_cache_size=__ret__.max_route_cache_size,
        mc_ttl_notchange=__ret__.mc_ttl_notchange,
        memory_use_threshold_extreme=__ret__.memory_use_threshold_extreme,
        memory_use_threshold_green=__ret__.memory_use_threshold_green,
        memory_use_threshold_red=__ret__.memory_use_threshold_red,
        miglog_affinity=__ret__.miglog_affinity,
        miglogd_children=__ret__.miglogd_children,
        multi_factor_authentication=__ret__.multi_factor_authentication,
        multicast_forward=__ret__.multicast_forward,
        ndp_max_entry=__ret__.ndp_max_entry,
        per_user_bal=__ret__.per_user_bal,
        per_user_bwl=__ret__.per_user_bwl,
        pmtu_discovery=__ret__.pmtu_discovery,
        policy_auth_concurrent=__ret__.policy_auth_concurrent,
        post_login_banner=__ret__.post_login_banner,
        pre_login_banner=__ret__.pre_login_banner,
        private_data_encryption=__ret__.private_data_encryption,
        proxy_auth_lifetime=__ret__.proxy_auth_lifetime,
        proxy_auth_lifetime_timeout=__ret__.proxy_auth_lifetime_timeout,
        proxy_auth_timeout=__ret__.proxy_auth_timeout,
        proxy_cert_use_mgmt_vdom=__ret__.proxy_cert_use_mgmt_vdom,
        proxy_cipher_hardware_acceleration=__ret__.proxy_cipher_hardware_acceleration,
        proxy_hardware_acceleration=__ret__.proxy_hardware_acceleration,
        proxy_kxp_hardware_acceleration=__ret__.proxy_kxp_hardware_acceleration,
        proxy_re_authentication_mode=__ret__.proxy_re_authentication_mode,
        proxy_resource_mode=__ret__.proxy_resource_mode,
        proxy_worker_count=__ret__.proxy_worker_count,
        radius_port=__ret__.radius_port,
        reboot_upon_config_restore=__ret__.reboot_upon_config_restore,
        refresh=__ret__.refresh,
        remoteauthtimeout=__ret__.remoteauthtimeout,
        reset_sessionless_tcp=__ret__.reset_sessionless_tcp,
        restart_time=__ret__.restart_time,
        revision_backup_on_logout=__ret__.revision_backup_on_logout,
        revision_image_auto_backup=__ret__.revision_image_auto_backup,
        scanunit_count=__ret__.scanunit_count,
        security_rating_result_submission=__ret__.security_rating_result_submission,
        security_rating_run_on_schedule=__ret__.security_rating_run_on_schedule,
        send_pmtu_icmp=__ret__.send_pmtu_icmp,
        snat_route_change=__ret__.snat_route_change,
        special_file23_support=__ret__.special_file23_support,
        speedtest_server=__ret__.speedtest_server,
        split_port=__ret__.split_port,
        ssd_trim_date=__ret__.ssd_trim_date,
        ssd_trim_freq=__ret__.ssd_trim_freq,
        ssd_trim_hour=__ret__.ssd_trim_hour,
        ssd_trim_min=__ret__.ssd_trim_min,
        ssd_trim_weekday=__ret__.ssd_trim_weekday,
        ssh_cbc_cipher=__ret__.ssh_cbc_cipher,
        ssh_enc_algo=__ret__.ssh_enc_algo,
        ssh_hmac_md5=__ret__.ssh_hmac_md5,
        ssh_kex_algo=__ret__.ssh_kex_algo,
        ssh_kex_sha1=__ret__.ssh_kex_sha1,
        ssh_mac_algo=__ret__.ssh_mac_algo,
        ssh_mac_weak=__ret__.ssh_mac_weak,
        ssl_min_proto_version=__ret__.ssl_min_proto_version,
        ssl_static_key_ciphers=__ret__.ssl_static_key_ciphers,
        sslvpn_cipher_hardware_acceleration=__ret__.sslvpn_cipher_hardware_acceleration,
        sslvpn_ems_sn_check=__ret__.sslvpn_ems_sn_check,
        sslvpn_kxp_hardware_acceleration=__ret__.sslvpn_kxp_hardware_acceleration,
        sslvpn_max_worker_count=__ret__.sslvpn_max_worker_count,
        sslvpn_plugin_version_check=__ret__.sslvpn_plugin_version_check,
        strict_dirty_session_check=__ret__.strict_dirty_session_check,
        strong_crypto=__ret__.strong_crypto,
        switch_controller=__ret__.switch_controller,
        switch_controller_reserved_network=__ret__.switch_controller_reserved_network,
        sys_perf_log_interval=__ret__.sys_perf_log_interval,
        tcp_halfclose_timer=__ret__.tcp_halfclose_timer,
        tcp_halfopen_timer=__ret__.tcp_halfopen_timer,
        tcp_option=__ret__.tcp_option,
        tcp_rst_timer=__ret__.tcp_rst_timer,
        tcp_timewait_timer=__ret__.tcp_timewait_timer,
        tftp=__ret__.tftp,
        timezone=__ret__.timezone,
        tp_mc_skip_policy=__ret__.tp_mc_skip_policy,
        traffic_priority=__ret__.traffic_priority,
        traffic_priority_level=__ret__.traffic_priority_level,
        two_factor_email_expiry=__ret__.two_factor_email_expiry,
        two_factor_fac_expiry=__ret__.two_factor_fac_expiry,
        two_factor_ftk_expiry=__ret__.two_factor_ftk_expiry,
        two_factor_ftm_expiry=__ret__.two_factor_ftm_expiry,
        two_factor_sms_expiry=__ret__.two_factor_sms_expiry,
        udp_idle_timer=__ret__.udp_idle_timer,
        url_filter_affinity=__ret__.url_filter_affinity,
        url_filter_count=__ret__.url_filter_count,
        user_device_store_max_devices=__ret__.user_device_store_max_devices,
        user_device_store_max_unified_mem=__ret__.user_device_store_max_unified_mem,
        user_device_store_max_users=__ret__.user_device_store_max_users,
        user_server_cert=__ret__.user_server_cert,
        vdom_admin=__ret__.vdom_admin,
        vdom_mode=__ret__.vdom_mode,
        vdomparam=__ret__.vdomparam,
        vip_arp_range=__ret__.vip_arp_range,
        virtual_server_count=__ret__.virtual_server_count,
        virtual_server_hardware_acceleration=__ret__.virtual_server_hardware_acceleration,
        virtual_switch_vlan=__ret__.virtual_switch_vlan,
        wad_affinity=__ret__.wad_affinity,
        wad_csvc_cs_count=__ret__.wad_csvc_cs_count,
        wad_csvc_db_count=__ret__.wad_csvc_db_count,
        wad_memory_change_granularity=__ret__.wad_memory_change_granularity,
        wad_source_affinity=__ret__.wad_source_affinity,
        wad_worker_count=__ret__.wad_worker_count,
        wifi_ca_certificate=__ret__.wifi_ca_certificate,
        wifi_certificate=__ret__.wifi_certificate,
        wimax4g_usb=__ret__.wimax4g_usb,
        wireless_controller=__ret__.wireless_controller,
        wireless_controller_port=__ret__.wireless_controller_port)


@_utilities.lift_output_func(get_global)
def get_global_output(vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGlobalResult]:
    """
    Use this data source to get information on fortios system global

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fortios as fortios

    sample1 = fortios.sys.get_global()
    pulumi.export("output1", sample1.hostname)
    ```


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...

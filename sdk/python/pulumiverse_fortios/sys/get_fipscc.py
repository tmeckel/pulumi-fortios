# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetFipsccResult',
    'AwaitableGetFipsccResult',
    'get_fipscc',
    'get_fipscc_output',
]

@pulumi.output_type
class GetFipsccResult:
    """
    A collection of values returned by getFipscc.
    """
    def __init__(__self__, entropy_token=None, id=None, key_generation_self_test=None, self_test_period=None, status=None, vdomparam=None):
        if entropy_token and not isinstance(entropy_token, str):
            raise TypeError("Expected argument 'entropy_token' to be a str")
        pulumi.set(__self__, "entropy_token", entropy_token)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_generation_self_test and not isinstance(key_generation_self_test, str):
            raise TypeError("Expected argument 'key_generation_self_test' to be a str")
        pulumi.set(__self__, "key_generation_self_test", key_generation_self_test)
        if self_test_period and not isinstance(self_test_period, int):
            raise TypeError("Expected argument 'self_test_period' to be a int")
        pulumi.set(__self__, "self_test_period", self_test_period)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="entropyToken")
    def entropy_token(self) -> str:
        """
        Enable/disable/dynamic entropy token.
        """
        return pulumi.get(self, "entropy_token")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyGenerationSelfTest")
    def key_generation_self_test(self) -> str:
        """
        Enable/disable self tests after key generation.
        """
        return pulumi.get(self, "key_generation_self_test")

    @property
    @pulumi.getter(name="selfTestPeriod")
    def self_test_period(self) -> int:
        """
        Self test period.
        """
        return pulumi.get(self, "self_test_period")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable FIPS-CC mode.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetFipsccResult(GetFipsccResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFipsccResult(
            entropy_token=self.entropy_token,
            id=self.id,
            key_generation_self_test=self.key_generation_self_test,
            self_test_period=self.self_test_period,
            status=self.status,
            vdomparam=self.vdomparam)


def get_fipscc(vdomparam: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFipsccResult:
    """
    Use this data source to get information on fortios system fipscc


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:sys/getFipscc:getFipscc', __args__, opts=opts, typ=GetFipsccResult).value

    return AwaitableGetFipsccResult(
        entropy_token=__ret__.entropy_token,
        id=__ret__.id,
        key_generation_self_test=__ret__.key_generation_self_test,
        self_test_period=__ret__.self_test_period,
        status=__ret__.status,
        vdomparam=__ret__.vdomparam)


@_utilities.lift_output_func(get_fipscc)
def get_fipscc_output(vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFipsccResult]:
    """
    Use this data source to get information on fortios system fipscc


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...

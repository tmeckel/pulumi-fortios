# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetResourcelimitsResult',
    'AwaitableGetResourcelimitsResult',
    'get_resourcelimits',
    'get_resourcelimits_output',
]

@pulumi.output_type
class GetResourcelimitsResult:
    """
    A collection of values returned by getResourcelimits.
    """
    def __init__(__self__, custom_service=None, dialup_tunnel=None, firewall_address=None, firewall_addrgrp=None, firewall_policy=None, id=None, ipsec_phase1=None, ipsec_phase1_interface=None, ipsec_phase2=None, ipsec_phase2_interface=None, log_disk_quota=None, onetime_schedule=None, proxy=None, recurring_schedule=None, service_group=None, session=None, sslvpn=None, user=None, user_group=None, vdomparam=None):
        if custom_service and not isinstance(custom_service, int):
            raise TypeError("Expected argument 'custom_service' to be a int")
        pulumi.set(__self__, "custom_service", custom_service)
        if dialup_tunnel and not isinstance(dialup_tunnel, int):
            raise TypeError("Expected argument 'dialup_tunnel' to be a int")
        pulumi.set(__self__, "dialup_tunnel", dialup_tunnel)
        if firewall_address and not isinstance(firewall_address, int):
            raise TypeError("Expected argument 'firewall_address' to be a int")
        pulumi.set(__self__, "firewall_address", firewall_address)
        if firewall_addrgrp and not isinstance(firewall_addrgrp, int):
            raise TypeError("Expected argument 'firewall_addrgrp' to be a int")
        pulumi.set(__self__, "firewall_addrgrp", firewall_addrgrp)
        if firewall_policy and not isinstance(firewall_policy, int):
            raise TypeError("Expected argument 'firewall_policy' to be a int")
        pulumi.set(__self__, "firewall_policy", firewall_policy)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipsec_phase1 and not isinstance(ipsec_phase1, int):
            raise TypeError("Expected argument 'ipsec_phase1' to be a int")
        pulumi.set(__self__, "ipsec_phase1", ipsec_phase1)
        if ipsec_phase1_interface and not isinstance(ipsec_phase1_interface, int):
            raise TypeError("Expected argument 'ipsec_phase1_interface' to be a int")
        pulumi.set(__self__, "ipsec_phase1_interface", ipsec_phase1_interface)
        if ipsec_phase2 and not isinstance(ipsec_phase2, int):
            raise TypeError("Expected argument 'ipsec_phase2' to be a int")
        pulumi.set(__self__, "ipsec_phase2", ipsec_phase2)
        if ipsec_phase2_interface and not isinstance(ipsec_phase2_interface, int):
            raise TypeError("Expected argument 'ipsec_phase2_interface' to be a int")
        pulumi.set(__self__, "ipsec_phase2_interface", ipsec_phase2_interface)
        if log_disk_quota and not isinstance(log_disk_quota, int):
            raise TypeError("Expected argument 'log_disk_quota' to be a int")
        pulumi.set(__self__, "log_disk_quota", log_disk_quota)
        if onetime_schedule and not isinstance(onetime_schedule, int):
            raise TypeError("Expected argument 'onetime_schedule' to be a int")
        pulumi.set(__self__, "onetime_schedule", onetime_schedule)
        if proxy and not isinstance(proxy, int):
            raise TypeError("Expected argument 'proxy' to be a int")
        pulumi.set(__self__, "proxy", proxy)
        if recurring_schedule and not isinstance(recurring_schedule, int):
            raise TypeError("Expected argument 'recurring_schedule' to be a int")
        pulumi.set(__self__, "recurring_schedule", recurring_schedule)
        if service_group and not isinstance(service_group, int):
            raise TypeError("Expected argument 'service_group' to be a int")
        pulumi.set(__self__, "service_group", service_group)
        if session and not isinstance(session, int):
            raise TypeError("Expected argument 'session' to be a int")
        pulumi.set(__self__, "session", session)
        if sslvpn and not isinstance(sslvpn, int):
            raise TypeError("Expected argument 'sslvpn' to be a int")
        pulumi.set(__self__, "sslvpn", sslvpn)
        if user and not isinstance(user, int):
            raise TypeError("Expected argument 'user' to be a int")
        pulumi.set(__self__, "user", user)
        if user_group and not isinstance(user_group, int):
            raise TypeError("Expected argument 'user_group' to be a int")
        pulumi.set(__self__, "user_group", user_group)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="customService")
    def custom_service(self) -> int:
        """
        Maximum number of firewall custom services.
        """
        return pulumi.get(self, "custom_service")

    @property
    @pulumi.getter(name="dialupTunnel")
    def dialup_tunnel(self) -> int:
        """
        Maximum number of dial-up tunnels.
        """
        return pulumi.get(self, "dialup_tunnel")

    @property
    @pulumi.getter(name="firewallAddress")
    def firewall_address(self) -> int:
        """
        Maximum number of firewall addresses (IPv4, IPv6, multicast).
        """
        return pulumi.get(self, "firewall_address")

    @property
    @pulumi.getter(name="firewallAddrgrp")
    def firewall_addrgrp(self) -> int:
        """
        Maximum number of firewall address groups (IPv4, IPv6).
        """
        return pulumi.get(self, "firewall_addrgrp")

    @property
    @pulumi.getter(name="firewallPolicy")
    def firewall_policy(self) -> int:
        """
        Maximum number of firewall policies (IPv4, IPv6, policy46, policy64, DoS-policy4, DoS-policy6, multicast).
        """
        return pulumi.get(self, "firewall_policy")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipsecPhase1")
    def ipsec_phase1(self) -> int:
        """
        Maximum number of VPN IPsec phase1 tunnels.
        """
        return pulumi.get(self, "ipsec_phase1")

    @property
    @pulumi.getter(name="ipsecPhase1Interface")
    def ipsec_phase1_interface(self) -> int:
        """
        Maximum number of VPN IPsec phase1 interface tunnels.
        """
        return pulumi.get(self, "ipsec_phase1_interface")

    @property
    @pulumi.getter(name="ipsecPhase2")
    def ipsec_phase2(self) -> int:
        """
        Maximum number of VPN IPsec phase2 tunnels.
        """
        return pulumi.get(self, "ipsec_phase2")

    @property
    @pulumi.getter(name="ipsecPhase2Interface")
    def ipsec_phase2_interface(self) -> int:
        """
        Maximum number of VPN IPsec phase2 interface tunnels.
        """
        return pulumi.get(self, "ipsec_phase2_interface")

    @property
    @pulumi.getter(name="logDiskQuota")
    def log_disk_quota(self) -> int:
        """
        Log disk quota in MB.
        """
        return pulumi.get(self, "log_disk_quota")

    @property
    @pulumi.getter(name="onetimeSchedule")
    def onetime_schedule(self) -> int:
        """
        Maximum number of firewall one-time schedules.
        """
        return pulumi.get(self, "onetime_schedule")

    @property
    @pulumi.getter
    def proxy(self) -> int:
        """
        Maximum number of concurrent proxy users.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter(name="recurringSchedule")
    def recurring_schedule(self) -> int:
        """
        Maximum number of firewall recurring schedules.
        """
        return pulumi.get(self, "recurring_schedule")

    @property
    @pulumi.getter(name="serviceGroup")
    def service_group(self) -> int:
        """
        Maximum number of firewall service groups.
        """
        return pulumi.get(self, "service_group")

    @property
    @pulumi.getter
    def session(self) -> int:
        """
        Maximum number of sessions.
        """
        return pulumi.get(self, "session")

    @property
    @pulumi.getter
    def sslvpn(self) -> int:
        """
        Maximum number of SSL-VPN.
        """
        return pulumi.get(self, "sslvpn")

    @property
    @pulumi.getter
    def user(self) -> int:
        """
        Maximum number of local users.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> int:
        """
        Maximum number of user groups.
        """
        return pulumi.get(self, "user_group")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetResourcelimitsResult(GetResourcelimitsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourcelimitsResult(
            custom_service=self.custom_service,
            dialup_tunnel=self.dialup_tunnel,
            firewall_address=self.firewall_address,
            firewall_addrgrp=self.firewall_addrgrp,
            firewall_policy=self.firewall_policy,
            id=self.id,
            ipsec_phase1=self.ipsec_phase1,
            ipsec_phase1_interface=self.ipsec_phase1_interface,
            ipsec_phase2=self.ipsec_phase2,
            ipsec_phase2_interface=self.ipsec_phase2_interface,
            log_disk_quota=self.log_disk_quota,
            onetime_schedule=self.onetime_schedule,
            proxy=self.proxy,
            recurring_schedule=self.recurring_schedule,
            service_group=self.service_group,
            session=self.session,
            sslvpn=self.sslvpn,
            user=self.user,
            user_group=self.user_group,
            vdomparam=self.vdomparam)


def get_resourcelimits(vdomparam: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourcelimitsResult:
    """
    Use this data source to get information on fortios system resourcelimits


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:sys/getResourcelimits:getResourcelimits', __args__, opts=opts, typ=GetResourcelimitsResult).value

    return AwaitableGetResourcelimitsResult(
        custom_service=__ret__.custom_service,
        dialup_tunnel=__ret__.dialup_tunnel,
        firewall_address=__ret__.firewall_address,
        firewall_addrgrp=__ret__.firewall_addrgrp,
        firewall_policy=__ret__.firewall_policy,
        id=__ret__.id,
        ipsec_phase1=__ret__.ipsec_phase1,
        ipsec_phase1_interface=__ret__.ipsec_phase1_interface,
        ipsec_phase2=__ret__.ipsec_phase2,
        ipsec_phase2_interface=__ret__.ipsec_phase2_interface,
        log_disk_quota=__ret__.log_disk_quota,
        onetime_schedule=__ret__.onetime_schedule,
        proxy=__ret__.proxy,
        recurring_schedule=__ret__.recurring_schedule,
        service_group=__ret__.service_group,
        session=__ret__.session,
        sslvpn=__ret__.sslvpn,
        user=__ret__.user,
        user_group=__ret__.user_group,
        vdomparam=__ret__.vdomparam)


@_utilities.lift_output_func(get_resourcelimits)
def get_resourcelimits_output(vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetResourcelimitsResult]:
    """
    Use this data source to get information on fortios system resourcelimits


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...

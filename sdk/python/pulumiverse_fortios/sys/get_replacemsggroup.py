# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetReplacemsggroupResult',
    'AwaitableGetReplacemsggroupResult',
    'get_replacemsggroup',
    'get_replacemsggroup_output',
]

@pulumi.output_type
class GetReplacemsggroupResult:
    """
    A collection of values returned by getReplacemsggroup.
    """
    def __init__(__self__, admins=None, alertmails=None, auths=None, automations=None, comment=None, custom_messages=None, device_detection_portals=None, ecs=None, fortiguard_wfs=None, ftps=None, group_type=None, https=None, icaps=None, id=None, mails=None, nac_quars=None, name=None, nntps=None, spams=None, sslvpns=None, traffic_quotas=None, utms=None, vdomparam=None, webproxies=None):
        if admins and not isinstance(admins, list):
            raise TypeError("Expected argument 'admins' to be a list")
        pulumi.set(__self__, "admins", admins)
        if alertmails and not isinstance(alertmails, list):
            raise TypeError("Expected argument 'alertmails' to be a list")
        pulumi.set(__self__, "alertmails", alertmails)
        if auths and not isinstance(auths, list):
            raise TypeError("Expected argument 'auths' to be a list")
        pulumi.set(__self__, "auths", auths)
        if automations and not isinstance(automations, list):
            raise TypeError("Expected argument 'automations' to be a list")
        pulumi.set(__self__, "automations", automations)
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if custom_messages and not isinstance(custom_messages, list):
            raise TypeError("Expected argument 'custom_messages' to be a list")
        pulumi.set(__self__, "custom_messages", custom_messages)
        if device_detection_portals and not isinstance(device_detection_portals, list):
            raise TypeError("Expected argument 'device_detection_portals' to be a list")
        pulumi.set(__self__, "device_detection_portals", device_detection_portals)
        if ecs and not isinstance(ecs, list):
            raise TypeError("Expected argument 'ecs' to be a list")
        pulumi.set(__self__, "ecs", ecs)
        if fortiguard_wfs and not isinstance(fortiguard_wfs, list):
            raise TypeError("Expected argument 'fortiguard_wfs' to be a list")
        pulumi.set(__self__, "fortiguard_wfs", fortiguard_wfs)
        if ftps and not isinstance(ftps, list):
            raise TypeError("Expected argument 'ftps' to be a list")
        pulumi.set(__self__, "ftps", ftps)
        if group_type and not isinstance(group_type, str):
            raise TypeError("Expected argument 'group_type' to be a str")
        pulumi.set(__self__, "group_type", group_type)
        if https and not isinstance(https, list):
            raise TypeError("Expected argument 'https' to be a list")
        pulumi.set(__self__, "https", https)
        if icaps and not isinstance(icaps, list):
            raise TypeError("Expected argument 'icaps' to be a list")
        pulumi.set(__self__, "icaps", icaps)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mails and not isinstance(mails, list):
            raise TypeError("Expected argument 'mails' to be a list")
        pulumi.set(__self__, "mails", mails)
        if nac_quars and not isinstance(nac_quars, list):
            raise TypeError("Expected argument 'nac_quars' to be a list")
        pulumi.set(__self__, "nac_quars", nac_quars)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nntps and not isinstance(nntps, list):
            raise TypeError("Expected argument 'nntps' to be a list")
        pulumi.set(__self__, "nntps", nntps)
        if spams and not isinstance(spams, list):
            raise TypeError("Expected argument 'spams' to be a list")
        pulumi.set(__self__, "spams", spams)
        if sslvpns and not isinstance(sslvpns, list):
            raise TypeError("Expected argument 'sslvpns' to be a list")
        pulumi.set(__self__, "sslvpns", sslvpns)
        if traffic_quotas and not isinstance(traffic_quotas, list):
            raise TypeError("Expected argument 'traffic_quotas' to be a list")
        pulumi.set(__self__, "traffic_quotas", traffic_quotas)
        if utms and not isinstance(utms, list):
            raise TypeError("Expected argument 'utms' to be a list")
        pulumi.set(__self__, "utms", utms)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if webproxies and not isinstance(webproxies, list):
            raise TypeError("Expected argument 'webproxies' to be a list")
        pulumi.set(__self__, "webproxies", webproxies)

    @property
    @pulumi.getter
    def admins(self) -> Sequence['outputs.GetReplacemsggroupAdminResult']:
        """
        Replacement message table entries. The structure of `admin` block is documented below.
        """
        return pulumi.get(self, "admins")

    @property
    @pulumi.getter
    def alertmails(self) -> Sequence['outputs.GetReplacemsggroupAlertmailResult']:
        """
        Replacement message table entries. The structure of `alertmail` block is documented below.
        """
        return pulumi.get(self, "alertmails")

    @property
    @pulumi.getter
    def auths(self) -> Sequence['outputs.GetReplacemsggroupAuthResult']:
        """
        Replacement message table entries. The structure of `auth` block is documented below.
        """
        return pulumi.get(self, "auths")

    @property
    @pulumi.getter
    def automations(self) -> Sequence['outputs.GetReplacemsggroupAutomationResult']:
        """
        Replacement message table entries. The structure of `automation` block is documented below.
        """
        return pulumi.get(self, "automations")

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="customMessages")
    def custom_messages(self) -> Sequence['outputs.GetReplacemsggroupCustomMessageResult']:
        """
        Replacement message table entries. The structure of `custom_message` block is documented below.
        """
        return pulumi.get(self, "custom_messages")

    @property
    @pulumi.getter(name="deviceDetectionPortals")
    def device_detection_portals(self) -> Sequence['outputs.GetReplacemsggroupDeviceDetectionPortalResult']:
        """
        Replacement message table entries. The structure of `device_detection_portal` block is documented below.
        """
        return pulumi.get(self, "device_detection_portals")

    @property
    @pulumi.getter
    def ecs(self) -> Sequence['outputs.GetReplacemsggroupEcResult']:
        """
        Replacement message table entries. The structure of `ec` block is documented below.
        """
        return pulumi.get(self, "ecs")

    @property
    @pulumi.getter(name="fortiguardWfs")
    def fortiguard_wfs(self) -> Sequence['outputs.GetReplacemsggroupFortiguardWfResult']:
        """
        Replacement message table entries. The structure of `fortiguard_wf` block is documented below.
        """
        return pulumi.get(self, "fortiguard_wfs")

    @property
    @pulumi.getter
    def ftps(self) -> Sequence['outputs.GetReplacemsggroupFtpResult']:
        """
        Replacement message table entries. The structure of `ftp` block is documented below.
        """
        return pulumi.get(self, "ftps")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> str:
        """
        Group type.
        """
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter
    def https(self) -> Sequence['outputs.GetReplacemsggroupHttpResult']:
        """
        Replacement message table entries. The structure of `http` block is documented below.
        """
        return pulumi.get(self, "https")

    @property
    @pulumi.getter
    def icaps(self) -> Sequence['outputs.GetReplacemsggroupIcapResult']:
        """
        Replacement message table entries. The structure of `icap` block is documented below.
        """
        return pulumi.get(self, "icaps")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mails(self) -> Sequence['outputs.GetReplacemsggroupMailResult']:
        """
        Replacement message table entries. The structure of `mail` block is documented below.
        """
        return pulumi.get(self, "mails")

    @property
    @pulumi.getter(name="nacQuars")
    def nac_quars(self) -> Sequence['outputs.GetReplacemsggroupNacQuarResult']:
        """
        Replacement message table entries. The structure of `nac_quar` block is documented below.
        """
        return pulumi.get(self, "nac_quars")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nntps(self) -> Sequence['outputs.GetReplacemsggroupNntpResult']:
        """
        Replacement message table entries. The structure of `nntp` block is documented below.
        """
        return pulumi.get(self, "nntps")

    @property
    @pulumi.getter
    def spams(self) -> Sequence['outputs.GetReplacemsggroupSpamResult']:
        """
        Replacement message table entries. The structure of `spam` block is documented below.
        """
        return pulumi.get(self, "spams")

    @property
    @pulumi.getter
    def sslvpns(self) -> Sequence['outputs.GetReplacemsggroupSslvpnResult']:
        """
        Replacement message table entries. The structure of `sslvpn` block is documented below.
        """
        return pulumi.get(self, "sslvpns")

    @property
    @pulumi.getter(name="trafficQuotas")
    def traffic_quotas(self) -> Sequence['outputs.GetReplacemsggroupTrafficQuotaResult']:
        """
        Replacement message table entries. The structure of `traffic_quota` block is documented below.
        """
        return pulumi.get(self, "traffic_quotas")

    @property
    @pulumi.getter
    def utms(self) -> Sequence['outputs.GetReplacemsggroupUtmResult']:
        """
        Replacement message table entries. The structure of `utm` block is documented below.
        """
        return pulumi.get(self, "utms")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def webproxies(self) -> Sequence['outputs.GetReplacemsggroupWebproxyResult']:
        """
        Replacement message table entries. The structure of `webproxy` block is documented below.
        """
        return pulumi.get(self, "webproxies")


class AwaitableGetReplacemsggroupResult(GetReplacemsggroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetReplacemsggroupResult(
            admins=self.admins,
            alertmails=self.alertmails,
            auths=self.auths,
            automations=self.automations,
            comment=self.comment,
            custom_messages=self.custom_messages,
            device_detection_portals=self.device_detection_portals,
            ecs=self.ecs,
            fortiguard_wfs=self.fortiguard_wfs,
            ftps=self.ftps,
            group_type=self.group_type,
            https=self.https,
            icaps=self.icaps,
            id=self.id,
            mails=self.mails,
            nac_quars=self.nac_quars,
            name=self.name,
            nntps=self.nntps,
            spams=self.spams,
            sslvpns=self.sslvpns,
            traffic_quotas=self.traffic_quotas,
            utms=self.utms,
            vdomparam=self.vdomparam,
            webproxies=self.webproxies)


def get_replacemsggroup(name: Optional[str] = None,
                        vdomparam: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetReplacemsggroupResult:
    """
    Use this data source to get information on an fortios system replacemsggroup


    :param str name: Specify the name of the desired system replacemsggroup.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:sys/getReplacemsggroup:getReplacemsggroup', __args__, opts=opts, typ=GetReplacemsggroupResult).value

    return AwaitableGetReplacemsggroupResult(
        admins=__ret__.admins,
        alertmails=__ret__.alertmails,
        auths=__ret__.auths,
        automations=__ret__.automations,
        comment=__ret__.comment,
        custom_messages=__ret__.custom_messages,
        device_detection_portals=__ret__.device_detection_portals,
        ecs=__ret__.ecs,
        fortiguard_wfs=__ret__.fortiguard_wfs,
        ftps=__ret__.ftps,
        group_type=__ret__.group_type,
        https=__ret__.https,
        icaps=__ret__.icaps,
        id=__ret__.id,
        mails=__ret__.mails,
        nac_quars=__ret__.nac_quars,
        name=__ret__.name,
        nntps=__ret__.nntps,
        spams=__ret__.spams,
        sslvpns=__ret__.sslvpns,
        traffic_quotas=__ret__.traffic_quotas,
        utms=__ret__.utms,
        vdomparam=__ret__.vdomparam,
        webproxies=__ret__.webproxies)


@_utilities.lift_output_func(get_replacemsggroup)
def get_replacemsggroup_output(name: Optional[pulumi.Input[str]] = None,
                               vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetReplacemsggroupResult]:
    """
    Use this data source to get information on an fortios system replacemsggroup


    :param str name: Specify the name of the desired system replacemsggroup.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...

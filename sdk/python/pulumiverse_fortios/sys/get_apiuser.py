# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetApiuserResult',
    'AwaitableGetApiuserResult',
    'get_apiuser',
    'get_apiuser_output',
]

@pulumi.output_type
class GetApiuserResult:
    """
    A collection of values returned by getApiuser.
    """
    def __init__(__self__, accprofile=None, api_key=None, comments=None, cors_allow_origin=None, id=None, name=None, peer_auth=None, peer_group=None, schedule=None, trusthosts=None, vdomparam=None, vdoms=None):
        if accprofile and not isinstance(accprofile, str):
            raise TypeError("Expected argument 'accprofile' to be a str")
        pulumi.set(__self__, "accprofile", accprofile)
        if api_key and not isinstance(api_key, str):
            raise TypeError("Expected argument 'api_key' to be a str")
        pulumi.set(__self__, "api_key", api_key)
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if cors_allow_origin and not isinstance(cors_allow_origin, str):
            raise TypeError("Expected argument 'cors_allow_origin' to be a str")
        pulumi.set(__self__, "cors_allow_origin", cors_allow_origin)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if peer_auth and not isinstance(peer_auth, str):
            raise TypeError("Expected argument 'peer_auth' to be a str")
        pulumi.set(__self__, "peer_auth", peer_auth)
        if peer_group and not isinstance(peer_group, str):
            raise TypeError("Expected argument 'peer_group' to be a str")
        pulumi.set(__self__, "peer_group", peer_group)
        if schedule and not isinstance(schedule, str):
            raise TypeError("Expected argument 'schedule' to be a str")
        pulumi.set(__self__, "schedule", schedule)
        if trusthosts and not isinstance(trusthosts, list):
            raise TypeError("Expected argument 'trusthosts' to be a list")
        pulumi.set(__self__, "trusthosts", trusthosts)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if vdoms and not isinstance(vdoms, list):
            raise TypeError("Expected argument 'vdoms' to be a list")
        pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def accprofile(self) -> str:
        """
        Admin user access profile.
        """
        return pulumi.get(self, "accprofile")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        Admin user password.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="corsAllowOrigin")
    def cors_allow_origin(self) -> str:
        """
        Value for Access-Control-Allow-Origin on API responses. Avoid using '*' if possible.
        """
        return pulumi.get(self, "cors_allow_origin")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="peerAuth")
    def peer_auth(self) -> str:
        """
        Enable/disable peer authentication.
        """
        return pulumi.get(self, "peer_auth")

    @property
    @pulumi.getter(name="peerGroup")
    def peer_group(self) -> str:
        """
        Peer group name.
        """
        return pulumi.get(self, "peer_group")

    @property
    @pulumi.getter
    def schedule(self) -> str:
        """
        Schedule name.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def trusthosts(self) -> Sequence['outputs.GetApiuserTrusthostResult']:
        """
        Trusthost. The structure of `trusthost` block is documented below.
        """
        return pulumi.get(self, "trusthosts")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vdoms(self) -> Sequence['outputs.GetApiuserVdomResult']:
        """
        Virtual domains. The structure of `vdom` block is documented below.
        """
        return pulumi.get(self, "vdoms")


class AwaitableGetApiuserResult(GetApiuserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiuserResult(
            accprofile=self.accprofile,
            api_key=self.api_key,
            comments=self.comments,
            cors_allow_origin=self.cors_allow_origin,
            id=self.id,
            name=self.name,
            peer_auth=self.peer_auth,
            peer_group=self.peer_group,
            schedule=self.schedule,
            trusthosts=self.trusthosts,
            vdomparam=self.vdomparam,
            vdoms=self.vdoms)


def get_apiuser(name: Optional[str] = None,
                vdomparam: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiuserResult:
    """
    Use this data source to get information on an fortios system apiuser


    :param str name: Specify the name of the desired system apiuser.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:sys/getApiuser:getApiuser', __args__, opts=opts, typ=GetApiuserResult).value

    return AwaitableGetApiuserResult(
        accprofile=__ret__.accprofile,
        api_key=__ret__.api_key,
        comments=__ret__.comments,
        cors_allow_origin=__ret__.cors_allow_origin,
        id=__ret__.id,
        name=__ret__.name,
        peer_auth=__ret__.peer_auth,
        peer_group=__ret__.peer_group,
        schedule=__ret__.schedule,
        trusthosts=__ret__.trusthosts,
        vdomparam=__ret__.vdomparam,
        vdoms=__ret__.vdoms)


@_utilities.lift_output_func(get_apiuser)
def get_apiuser_output(name: Optional[pulumi.Input[str]] = None,
                       vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApiuserResult]:
    """
    Use this data source to get information on an fortios system apiuser


    :param str name: Specify the name of the desired system apiuser.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...

# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PasswordpolicyArgs', 'Passwordpolicy']

@pulumi.input_type
class PasswordpolicyArgs:
    def __init__(__self__, *,
                 expire_days: Optional[pulumi.Input[int]] = None,
                 expired_password_renewal: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 warn_days: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Passwordpolicy resource.
        :param pulumi.Input[int] expire_days: Time in days before the user's password expires.
        :param pulumi.Input[str] expired_password_renewal: Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Password policy name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] warn_days: Time in days before a password expiration warning message is displayed to the user upon login.
        """
        if expire_days is not None:
            pulumi.set(__self__, "expire_days", expire_days)
        if expired_password_renewal is not None:
            pulumi.set(__self__, "expired_password_renewal", expired_password_renewal)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if warn_days is not None:
            pulumi.set(__self__, "warn_days", warn_days)

    @property
    @pulumi.getter(name="expireDays")
    def expire_days(self) -> Optional[pulumi.Input[int]]:
        """
        Time in days before the user's password expires.
        """
        return pulumi.get(self, "expire_days")

    @expire_days.setter
    def expire_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expire_days", value)

    @property
    @pulumi.getter(name="expiredPasswordRenewal")
    def expired_password_renewal(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "expired_password_renewal")

    @expired_password_renewal.setter
    def expired_password_renewal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_password_renewal", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Password policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="warnDays")
    def warn_days(self) -> Optional[pulumi.Input[int]]:
        """
        Time in days before a password expiration warning message is displayed to the user upon login.
        """
        return pulumi.get(self, "warn_days")

    @warn_days.setter
    def warn_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "warn_days", value)


@pulumi.input_type
class _PasswordpolicyState:
    def __init__(__self__, *,
                 expire_days: Optional[pulumi.Input[int]] = None,
                 expired_password_renewal: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 warn_days: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Passwordpolicy resources.
        :param pulumi.Input[int] expire_days: Time in days before the user's password expires.
        :param pulumi.Input[str] expired_password_renewal: Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Password policy name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] warn_days: Time in days before a password expiration warning message is displayed to the user upon login.
        """
        if expire_days is not None:
            pulumi.set(__self__, "expire_days", expire_days)
        if expired_password_renewal is not None:
            pulumi.set(__self__, "expired_password_renewal", expired_password_renewal)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if warn_days is not None:
            pulumi.set(__self__, "warn_days", warn_days)

    @property
    @pulumi.getter(name="expireDays")
    def expire_days(self) -> Optional[pulumi.Input[int]]:
        """
        Time in days before the user's password expires.
        """
        return pulumi.get(self, "expire_days")

    @expire_days.setter
    def expire_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expire_days", value)

    @property
    @pulumi.getter(name="expiredPasswordRenewal")
    def expired_password_renewal(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "expired_password_renewal")

    @expired_password_renewal.setter
    def expired_password_renewal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_password_renewal", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Password policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="warnDays")
    def warn_days(self) -> Optional[pulumi.Input[int]]:
        """
        Time in days before a password expiration warning message is displayed to the user upon login.
        """
        return pulumi.get(self, "warn_days")

    @warn_days.setter
    def warn_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "warn_days", value)


class Passwordpolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 expire_days: Optional[pulumi.Input[int]] = None,
                 expired_password_renewal: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 warn_days: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Configure user password policy.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.user.Passwordpolicy("trname",
            expire_days=22,
            warn_days=13)
        ```

        ## Import

        User PasswordPolicy can be imported using any of these accepted formats

        ```sh
         $ pulumi import fortios:user/passwordpolicy:Passwordpolicy labelname {{name}}
        ```

         If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
         $ pulumi import fortios:user/passwordpolicy:Passwordpolicy labelname {{name}}
        ```

         $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] expire_days: Time in days before the user's password expires.
        :param pulumi.Input[str] expired_password_renewal: Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Password policy name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] warn_days: Time in days before a password expiration warning message is displayed to the user upon login.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PasswordpolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure user password policy.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.user.Passwordpolicy("trname",
            expire_days=22,
            warn_days=13)
        ```

        ## Import

        User PasswordPolicy can be imported using any of these accepted formats

        ```sh
         $ pulumi import fortios:user/passwordpolicy:Passwordpolicy labelname {{name}}
        ```

         If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
         $ pulumi import fortios:user/passwordpolicy:Passwordpolicy labelname {{name}}
        ```

         $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param PasswordpolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PasswordpolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 expire_days: Optional[pulumi.Input[int]] = None,
                 expired_password_renewal: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 warn_days: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PasswordpolicyArgs.__new__(PasswordpolicyArgs)

            __props__.__dict__["expire_days"] = expire_days
            __props__.__dict__["expired_password_renewal"] = expired_password_renewal
            __props__.__dict__["name"] = name
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["warn_days"] = warn_days
        super(Passwordpolicy, __self__).__init__(
            'fortios:user/passwordpolicy:Passwordpolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            expire_days: Optional[pulumi.Input[int]] = None,
            expired_password_renewal: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            warn_days: Optional[pulumi.Input[int]] = None) -> 'Passwordpolicy':
        """
        Get an existing Passwordpolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] expire_days: Time in days before the user's password expires.
        :param pulumi.Input[str] expired_password_renewal: Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Password policy name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] warn_days: Time in days before a password expiration warning message is displayed to the user upon login.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PasswordpolicyState.__new__(_PasswordpolicyState)

        __props__.__dict__["expire_days"] = expire_days
        __props__.__dict__["expired_password_renewal"] = expired_password_renewal
        __props__.__dict__["name"] = name
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["warn_days"] = warn_days
        return Passwordpolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="expireDays")
    def expire_days(self) -> pulumi.Output[int]:
        """
        Time in days before the user's password expires.
        """
        return pulumi.get(self, "expire_days")

    @property
    @pulumi.getter(name="expiredPasswordRenewal")
    def expired_password_renewal(self) -> pulumi.Output[str]:
        """
        Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "expired_password_renewal")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Password policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="warnDays")
    def warn_days(self) -> pulumi.Output[int]:
        """
        Time in days before a password expiration warning message is displayed to the user upon login.
        """
        return pulumi.get(self, "warn_days")


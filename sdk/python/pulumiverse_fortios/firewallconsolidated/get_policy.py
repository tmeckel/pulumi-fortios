# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPolicyResult',
    'AwaitableGetPolicyResult',
    'get_policy',
    'get_policy_output',
]

@pulumi.output_type
class GetPolicyResult:
    """
    A collection of values returned by getPolicy.
    """
    def __init__(__self__, action=None, app_categories=None, app_groups=None, application_list=None, applications=None, auto_asic_offload=None, av_profile=None, captive_portal_exempt=None, cifs_profile=None, comments=None, diffserv_forward=None, diffserv_reverse=None, diffservcode_forward=None, diffservcode_rev=None, dlp_sensor=None, dnsfilter_profile=None, dstaddr4s=None, dstaddr6s=None, dstaddr_negate=None, dstintfs=None, emailfilter_profile=None, fixedport=None, fsso_groups=None, groups=None, http_policy_redirect=None, icap_profile=None, id=None, inbound=None, inspection_mode=None, internet_service=None, internet_service_custom_groups=None, internet_service_customs=None, internet_service_groups=None, internet_service_ids=None, internet_service_names=None, internet_service_negate=None, internet_service_src=None, internet_service_src_custom_groups=None, internet_service_src_customs=None, internet_service_src_groups=None, internet_service_src_ids=None, internet_service_src_names=None, internet_service_src_negate=None, ippool=None, ips_sensor=None, logtraffic=None, logtraffic_start=None, name=None, nat=None, outbound=None, per_ip_shaper=None, policyid=None, poolname4s=None, poolname6s=None, profile_group=None, profile_protocol_options=None, profile_type=None, schedule=None, service_negate=None, services=None, session_ttl=None, spamfilter_profile=None, srcaddr4s=None, srcaddr6s=None, srcaddr_negate=None, srcintfs=None, ssh_filter_profile=None, ssh_policy_redirect=None, ssl_ssh_profile=None, status=None, tcp_mss_receiver=None, tcp_mss_sender=None, traffic_shaper=None, traffic_shaper_reverse=None, url_categories=None, users=None, utm_status=None, uuid=None, vdomparam=None, voip_profile=None, vpntunnel=None, waf_profile=None, wanopt=None, wanopt_detection=None, wanopt_passive_opt=None, wanopt_peer=None, wanopt_profile=None, webcache=None, webcache_https=None, webfilter_profile=None, webproxy_forward_server=None, webproxy_profile=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if app_categories and not isinstance(app_categories, list):
            raise TypeError("Expected argument 'app_categories' to be a list")
        pulumi.set(__self__, "app_categories", app_categories)
        if app_groups and not isinstance(app_groups, list):
            raise TypeError("Expected argument 'app_groups' to be a list")
        pulumi.set(__self__, "app_groups", app_groups)
        if application_list and not isinstance(application_list, str):
            raise TypeError("Expected argument 'application_list' to be a str")
        pulumi.set(__self__, "application_list", application_list)
        if applications and not isinstance(applications, list):
            raise TypeError("Expected argument 'applications' to be a list")
        pulumi.set(__self__, "applications", applications)
        if auto_asic_offload and not isinstance(auto_asic_offload, str):
            raise TypeError("Expected argument 'auto_asic_offload' to be a str")
        pulumi.set(__self__, "auto_asic_offload", auto_asic_offload)
        if av_profile and not isinstance(av_profile, str):
            raise TypeError("Expected argument 'av_profile' to be a str")
        pulumi.set(__self__, "av_profile", av_profile)
        if captive_portal_exempt and not isinstance(captive_portal_exempt, str):
            raise TypeError("Expected argument 'captive_portal_exempt' to be a str")
        pulumi.set(__self__, "captive_portal_exempt", captive_portal_exempt)
        if cifs_profile and not isinstance(cifs_profile, str):
            raise TypeError("Expected argument 'cifs_profile' to be a str")
        pulumi.set(__self__, "cifs_profile", cifs_profile)
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if diffserv_forward and not isinstance(diffserv_forward, str):
            raise TypeError("Expected argument 'diffserv_forward' to be a str")
        pulumi.set(__self__, "diffserv_forward", diffserv_forward)
        if diffserv_reverse and not isinstance(diffserv_reverse, str):
            raise TypeError("Expected argument 'diffserv_reverse' to be a str")
        pulumi.set(__self__, "diffserv_reverse", diffserv_reverse)
        if diffservcode_forward and not isinstance(diffservcode_forward, str):
            raise TypeError("Expected argument 'diffservcode_forward' to be a str")
        pulumi.set(__self__, "diffservcode_forward", diffservcode_forward)
        if diffservcode_rev and not isinstance(diffservcode_rev, str):
            raise TypeError("Expected argument 'diffservcode_rev' to be a str")
        pulumi.set(__self__, "diffservcode_rev", diffservcode_rev)
        if dlp_sensor and not isinstance(dlp_sensor, str):
            raise TypeError("Expected argument 'dlp_sensor' to be a str")
        pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dnsfilter_profile and not isinstance(dnsfilter_profile, str):
            raise TypeError("Expected argument 'dnsfilter_profile' to be a str")
        pulumi.set(__self__, "dnsfilter_profile", dnsfilter_profile)
        if dstaddr4s and not isinstance(dstaddr4s, list):
            raise TypeError("Expected argument 'dstaddr4s' to be a list")
        pulumi.set(__self__, "dstaddr4s", dstaddr4s)
        if dstaddr6s and not isinstance(dstaddr6s, list):
            raise TypeError("Expected argument 'dstaddr6s' to be a list")
        pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddr_negate and not isinstance(dstaddr_negate, str):
            raise TypeError("Expected argument 'dstaddr_negate' to be a str")
        pulumi.set(__self__, "dstaddr_negate", dstaddr_negate)
        if dstintfs and not isinstance(dstintfs, list):
            raise TypeError("Expected argument 'dstintfs' to be a list")
        pulumi.set(__self__, "dstintfs", dstintfs)
        if emailfilter_profile and not isinstance(emailfilter_profile, str):
            raise TypeError("Expected argument 'emailfilter_profile' to be a str")
        pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if fixedport and not isinstance(fixedport, str):
            raise TypeError("Expected argument 'fixedport' to be a str")
        pulumi.set(__self__, "fixedport", fixedport)
        if fsso_groups and not isinstance(fsso_groups, list):
            raise TypeError("Expected argument 'fsso_groups' to be a list")
        pulumi.set(__self__, "fsso_groups", fsso_groups)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if http_policy_redirect and not isinstance(http_policy_redirect, str):
            raise TypeError("Expected argument 'http_policy_redirect' to be a str")
        pulumi.set(__self__, "http_policy_redirect", http_policy_redirect)
        if icap_profile and not isinstance(icap_profile, str):
            raise TypeError("Expected argument 'icap_profile' to be a str")
        pulumi.set(__self__, "icap_profile", icap_profile)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inbound and not isinstance(inbound, str):
            raise TypeError("Expected argument 'inbound' to be a str")
        pulumi.set(__self__, "inbound", inbound)
        if inspection_mode and not isinstance(inspection_mode, str):
            raise TypeError("Expected argument 'inspection_mode' to be a str")
        pulumi.set(__self__, "inspection_mode", inspection_mode)
        if internet_service and not isinstance(internet_service, str):
            raise TypeError("Expected argument 'internet_service' to be a str")
        pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_custom_groups and not isinstance(internet_service_custom_groups, list):
            raise TypeError("Expected argument 'internet_service_custom_groups' to be a list")
        pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs and not isinstance(internet_service_customs, list):
            raise TypeError("Expected argument 'internet_service_customs' to be a list")
        pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups and not isinstance(internet_service_groups, list):
            raise TypeError("Expected argument 'internet_service_groups' to be a list")
        pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids and not isinstance(internet_service_ids, list):
            raise TypeError("Expected argument 'internet_service_ids' to be a list")
        pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names and not isinstance(internet_service_names, list):
            raise TypeError("Expected argument 'internet_service_names' to be a list")
        pulumi.set(__self__, "internet_service_names", internet_service_names)
        if internet_service_negate and not isinstance(internet_service_negate, str):
            raise TypeError("Expected argument 'internet_service_negate' to be a str")
        pulumi.set(__self__, "internet_service_negate", internet_service_negate)
        if internet_service_src and not isinstance(internet_service_src, str):
            raise TypeError("Expected argument 'internet_service_src' to be a str")
        pulumi.set(__self__, "internet_service_src", internet_service_src)
        if internet_service_src_custom_groups and not isinstance(internet_service_src_custom_groups, list):
            raise TypeError("Expected argument 'internet_service_src_custom_groups' to be a list")
        pulumi.set(__self__, "internet_service_src_custom_groups", internet_service_src_custom_groups)
        if internet_service_src_customs and not isinstance(internet_service_src_customs, list):
            raise TypeError("Expected argument 'internet_service_src_customs' to be a list")
        pulumi.set(__self__, "internet_service_src_customs", internet_service_src_customs)
        if internet_service_src_groups and not isinstance(internet_service_src_groups, list):
            raise TypeError("Expected argument 'internet_service_src_groups' to be a list")
        pulumi.set(__self__, "internet_service_src_groups", internet_service_src_groups)
        if internet_service_src_ids and not isinstance(internet_service_src_ids, list):
            raise TypeError("Expected argument 'internet_service_src_ids' to be a list")
        pulumi.set(__self__, "internet_service_src_ids", internet_service_src_ids)
        if internet_service_src_names and not isinstance(internet_service_src_names, list):
            raise TypeError("Expected argument 'internet_service_src_names' to be a list")
        pulumi.set(__self__, "internet_service_src_names", internet_service_src_names)
        if internet_service_src_negate and not isinstance(internet_service_src_negate, str):
            raise TypeError("Expected argument 'internet_service_src_negate' to be a str")
        pulumi.set(__self__, "internet_service_src_negate", internet_service_src_negate)
        if ippool and not isinstance(ippool, str):
            raise TypeError("Expected argument 'ippool' to be a str")
        pulumi.set(__self__, "ippool", ippool)
        if ips_sensor and not isinstance(ips_sensor, str):
            raise TypeError("Expected argument 'ips_sensor' to be a str")
        pulumi.set(__self__, "ips_sensor", ips_sensor)
        if logtraffic and not isinstance(logtraffic, str):
            raise TypeError("Expected argument 'logtraffic' to be a str")
        pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start and not isinstance(logtraffic_start, str):
            raise TypeError("Expected argument 'logtraffic_start' to be a str")
        pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nat and not isinstance(nat, str):
            raise TypeError("Expected argument 'nat' to be a str")
        pulumi.set(__self__, "nat", nat)
        if outbound and not isinstance(outbound, str):
            raise TypeError("Expected argument 'outbound' to be a str")
        pulumi.set(__self__, "outbound", outbound)
        if per_ip_shaper and not isinstance(per_ip_shaper, str):
            raise TypeError("Expected argument 'per_ip_shaper' to be a str")
        pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if policyid and not isinstance(policyid, int):
            raise TypeError("Expected argument 'policyid' to be a int")
        pulumi.set(__self__, "policyid", policyid)
        if poolname4s and not isinstance(poolname4s, list):
            raise TypeError("Expected argument 'poolname4s' to be a list")
        pulumi.set(__self__, "poolname4s", poolname4s)
        if poolname6s and not isinstance(poolname6s, list):
            raise TypeError("Expected argument 'poolname6s' to be a list")
        pulumi.set(__self__, "poolname6s", poolname6s)
        if profile_group and not isinstance(profile_group, str):
            raise TypeError("Expected argument 'profile_group' to be a str")
        pulumi.set(__self__, "profile_group", profile_group)
        if profile_protocol_options and not isinstance(profile_protocol_options, str):
            raise TypeError("Expected argument 'profile_protocol_options' to be a str")
        pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if profile_type and not isinstance(profile_type, str):
            raise TypeError("Expected argument 'profile_type' to be a str")
        pulumi.set(__self__, "profile_type", profile_type)
        if schedule and not isinstance(schedule, str):
            raise TypeError("Expected argument 'schedule' to be a str")
        pulumi.set(__self__, "schedule", schedule)
        if service_negate and not isinstance(service_negate, str):
            raise TypeError("Expected argument 'service_negate' to be a str")
        pulumi.set(__self__, "service_negate", service_negate)
        if services and not isinstance(services, list):
            raise TypeError("Expected argument 'services' to be a list")
        pulumi.set(__self__, "services", services)
        if session_ttl and not isinstance(session_ttl, int):
            raise TypeError("Expected argument 'session_ttl' to be a int")
        pulumi.set(__self__, "session_ttl", session_ttl)
        if spamfilter_profile and not isinstance(spamfilter_profile, str):
            raise TypeError("Expected argument 'spamfilter_profile' to be a str")
        pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if srcaddr4s and not isinstance(srcaddr4s, list):
            raise TypeError("Expected argument 'srcaddr4s' to be a list")
        pulumi.set(__self__, "srcaddr4s", srcaddr4s)
        if srcaddr6s and not isinstance(srcaddr6s, list):
            raise TypeError("Expected argument 'srcaddr6s' to be a list")
        pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddr_negate and not isinstance(srcaddr_negate, str):
            raise TypeError("Expected argument 'srcaddr_negate' to be a str")
        pulumi.set(__self__, "srcaddr_negate", srcaddr_negate)
        if srcintfs and not isinstance(srcintfs, list):
            raise TypeError("Expected argument 'srcintfs' to be a list")
        pulumi.set(__self__, "srcintfs", srcintfs)
        if ssh_filter_profile and not isinstance(ssh_filter_profile, str):
            raise TypeError("Expected argument 'ssh_filter_profile' to be a str")
        pulumi.set(__self__, "ssh_filter_profile", ssh_filter_profile)
        if ssh_policy_redirect and not isinstance(ssh_policy_redirect, str):
            raise TypeError("Expected argument 'ssh_policy_redirect' to be a str")
        pulumi.set(__self__, "ssh_policy_redirect", ssh_policy_redirect)
        if ssl_ssh_profile and not isinstance(ssl_ssh_profile, str):
            raise TypeError("Expected argument 'ssl_ssh_profile' to be a str")
        pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tcp_mss_receiver and not isinstance(tcp_mss_receiver, int):
            raise TypeError("Expected argument 'tcp_mss_receiver' to be a int")
        pulumi.set(__self__, "tcp_mss_receiver", tcp_mss_receiver)
        if tcp_mss_sender and not isinstance(tcp_mss_sender, int):
            raise TypeError("Expected argument 'tcp_mss_sender' to be a int")
        pulumi.set(__self__, "tcp_mss_sender", tcp_mss_sender)
        if traffic_shaper and not isinstance(traffic_shaper, str):
            raise TypeError("Expected argument 'traffic_shaper' to be a str")
        pulumi.set(__self__, "traffic_shaper", traffic_shaper)
        if traffic_shaper_reverse and not isinstance(traffic_shaper_reverse, str):
            raise TypeError("Expected argument 'traffic_shaper_reverse' to be a str")
        pulumi.set(__self__, "traffic_shaper_reverse", traffic_shaper_reverse)
        if url_categories and not isinstance(url_categories, list):
            raise TypeError("Expected argument 'url_categories' to be a list")
        pulumi.set(__self__, "url_categories", url_categories)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)
        if utm_status and not isinstance(utm_status, str):
            raise TypeError("Expected argument 'utm_status' to be a str")
        pulumi.set(__self__, "utm_status", utm_status)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if voip_profile and not isinstance(voip_profile, str):
            raise TypeError("Expected argument 'voip_profile' to be a str")
        pulumi.set(__self__, "voip_profile", voip_profile)
        if vpntunnel and not isinstance(vpntunnel, str):
            raise TypeError("Expected argument 'vpntunnel' to be a str")
        pulumi.set(__self__, "vpntunnel", vpntunnel)
        if waf_profile and not isinstance(waf_profile, str):
            raise TypeError("Expected argument 'waf_profile' to be a str")
        pulumi.set(__self__, "waf_profile", waf_profile)
        if wanopt and not isinstance(wanopt, str):
            raise TypeError("Expected argument 'wanopt' to be a str")
        pulumi.set(__self__, "wanopt", wanopt)
        if wanopt_detection and not isinstance(wanopt_detection, str):
            raise TypeError("Expected argument 'wanopt_detection' to be a str")
        pulumi.set(__self__, "wanopt_detection", wanopt_detection)
        if wanopt_passive_opt and not isinstance(wanopt_passive_opt, str):
            raise TypeError("Expected argument 'wanopt_passive_opt' to be a str")
        pulumi.set(__self__, "wanopt_passive_opt", wanopt_passive_opt)
        if wanopt_peer and not isinstance(wanopt_peer, str):
            raise TypeError("Expected argument 'wanopt_peer' to be a str")
        pulumi.set(__self__, "wanopt_peer", wanopt_peer)
        if wanopt_profile and not isinstance(wanopt_profile, str):
            raise TypeError("Expected argument 'wanopt_profile' to be a str")
        pulumi.set(__self__, "wanopt_profile", wanopt_profile)
        if webcache and not isinstance(webcache, str):
            raise TypeError("Expected argument 'webcache' to be a str")
        pulumi.set(__self__, "webcache", webcache)
        if webcache_https and not isinstance(webcache_https, str):
            raise TypeError("Expected argument 'webcache_https' to be a str")
        pulumi.set(__self__, "webcache_https", webcache_https)
        if webfilter_profile and not isinstance(webfilter_profile, str):
            raise TypeError("Expected argument 'webfilter_profile' to be a str")
        pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webproxy_forward_server and not isinstance(webproxy_forward_server, str):
            raise TypeError("Expected argument 'webproxy_forward_server' to be a str")
        pulumi.set(__self__, "webproxy_forward_server", webproxy_forward_server)
        if webproxy_profile and not isinstance(webproxy_profile, str):
            raise TypeError("Expected argument 'webproxy_profile' to be a str")
        pulumi.set(__self__, "webproxy_profile", webproxy_profile)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Policy action (allow/deny/ipsec).
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Sequence['outputs.GetPolicyAppCategoryResult']:
        """
        Application category ID list. The structure of `app_category` block is documented below.
        """
        return pulumi.get(self, "app_categories")

    @property
    @pulumi.getter(name="appGroups")
    def app_groups(self) -> Sequence['outputs.GetPolicyAppGroupResult']:
        """
        Application group names. The structure of `app_group` block is documented below.
        """
        return pulumi.get(self, "app_groups")

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> str:
        """
        Name of an existing Application list.
        """
        return pulumi.get(self, "application_list")

    @property
    @pulumi.getter
    def applications(self) -> Sequence['outputs.GetPolicyApplicationResult']:
        """
        Application ID list. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="autoAsicOffload")
    def auto_asic_offload(self) -> str:
        """
        Enable/disable policy traffic ASIC offloading.
        """
        return pulumi.get(self, "auto_asic_offload")

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> str:
        """
        Name of an existing Antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @property
    @pulumi.getter(name="captivePortalExempt")
    def captive_portal_exempt(self) -> str:
        """
        Enable exemption of some users from the captive portal.
        """
        return pulumi.get(self, "captive_portal_exempt")

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> str:
        """
        Name of an existing CIFS profile.
        """
        return pulumi.get(self, "cifs_profile")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> str:
        """
        Enable to change packet's DiffServ values to the specified diffservcode-forward value.
        """
        return pulumi.get(self, "diffserv_forward")

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> str:
        """
        Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.
        """
        return pulumi.get(self, "diffserv_reverse")

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> str:
        """
        Change packet's DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_forward")

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> str:
        """
        Change packet's reverse (reply) DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_rev")

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> str:
        """
        Name of an existing DLP sensor.
        """
        return pulumi.get(self, "dlp_sensor")

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> str:
        """
        Name of an existing DNS filter profile.
        """
        return pulumi.get(self, "dnsfilter_profile")

    @property
    @pulumi.getter
    def dstaddr4s(self) -> Sequence['outputs.GetPolicyDstaddr4Result']:
        """
        Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
        """
        return pulumi.get(self, "dstaddr4s")

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Sequence['outputs.GetPolicyDstaddr6Result']:
        """
        Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> str:
        """
        When enabled dstaddr specifies what the destination address must NOT be.
        """
        return pulumi.get(self, "dstaddr_negate")

    @property
    @pulumi.getter
    def dstintfs(self) -> Sequence['outputs.GetPolicyDstintfResult']:
        """
        Outgoing (egress) interface. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> str:
        """
        Name of an existing email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @property
    @pulumi.getter
    def fixedport(self) -> str:
        """
        Enable to prevent source NAT from changing a session's source port.
        """
        return pulumi.get(self, "fixedport")

    @property
    @pulumi.getter(name="fssoGroups")
    def fsso_groups(self) -> Sequence['outputs.GetPolicyFssoGroupResult']:
        """
        Names of FSSO groups. The structure of `fsso_groups` block is documented below.
        """
        return pulumi.get(self, "fsso_groups")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetPolicyGroupResult']:
        """
        Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="httpPolicyRedirect")
    def http_policy_redirect(self) -> str:
        """
        Redirect HTTP(S) traffic to matching transparent web proxy policy.
        """
        return pulumi.get(self, "http_policy_redirect")

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> str:
        """
        Name of an existing ICAP profile.
        """
        return pulumi.get(self, "icap_profile")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def inbound(self) -> str:
        """
        Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN.
        """
        return pulumi.get(self, "inbound")

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> str:
        """
        Policy inspection mode (Flow/proxy). Default is Flow mode.
        """
        return pulumi.get(self, "inspection_mode")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> str:
        """
        Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
        """
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Sequence['outputs.GetPolicyInternetServiceCustomGroupResult']:
        """
        Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Sequence['outputs.GetPolicyInternetServiceCustomResult']:
        """
        Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Sequence['outputs.GetPolicyInternetServiceGroupResult']:
        """
        Internet Service group name. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Sequence['outputs.GetPolicyInternetServiceIdResult']:
        """
        Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Sequence['outputs.GetPolicyInternetServiceNameResult']:
        """
        Internet Service name. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @property
    @pulumi.getter(name="internetServiceNegate")
    def internet_service_negate(self) -> str:
        """
        When enabled internet-service specifies what the service must NOT be.
        """
        return pulumi.get(self, "internet_service_negate")

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> str:
        """
        Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.
        """
        return pulumi.get(self, "internet_service_src")

    @property
    @pulumi.getter(name="internetServiceSrcCustomGroups")
    def internet_service_src_custom_groups(self) -> Sequence['outputs.GetPolicyInternetServiceSrcCustomGroupResult']:
        """
        Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_custom_groups")

    @property
    @pulumi.getter(name="internetServiceSrcCustoms")
    def internet_service_src_customs(self) -> Sequence['outputs.GetPolicyInternetServiceSrcCustomResult']:
        """
        Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_customs")

    @property
    @pulumi.getter(name="internetServiceSrcGroups")
    def internet_service_src_groups(self) -> Sequence['outputs.GetPolicyInternetServiceSrcGroupResult']:
        """
        Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_groups")

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> Sequence['outputs.GetPolicyInternetServiceSrcIdResult']:
        """
        Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_ids")

    @property
    @pulumi.getter(name="internetServiceSrcNames")
    def internet_service_src_names(self) -> Sequence['outputs.GetPolicyInternetServiceSrcNameResult']:
        """
        Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_names")

    @property
    @pulumi.getter(name="internetServiceSrcNegate")
    def internet_service_src_negate(self) -> str:
        """
        When enabled internet-service-src specifies what the service must NOT be.
        """
        return pulumi.get(self, "internet_service_src_negate")

    @property
    @pulumi.getter
    def ippool(self) -> str:
        """
        Enable to use IP Pools for source NAT.
        """
        return pulumi.get(self, "ippool")

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> str:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensor")

    @property
    @pulumi.getter
    def logtraffic(self) -> str:
        """
        Enable or disable logging. Log all sessions or security profile sessions.
        """
        return pulumi.get(self, "logtraffic")

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> str:
        """
        Record logs when a session starts.
        """
        return pulumi.get(self, "logtraffic_start")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nat(self) -> str:
        """
        Enable/disable source NAT.
        """
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter
    def outbound(self) -> str:
        """
        Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN.
        """
        return pulumi.get(self, "outbound")

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> str:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shaper")

    @property
    @pulumi.getter
    def policyid(self) -> int:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @property
    @pulumi.getter
    def poolname4s(self) -> Sequence['outputs.GetPolicyPoolname4Result']:
        """
        IPv4 pool names. The structure of `poolname4` block is documented below.
        """
        return pulumi.get(self, "poolname4s")

    @property
    @pulumi.getter
    def poolname6s(self) -> Sequence['outputs.GetPolicyPoolname6Result']:
        """
        IPv6 pool names. The structure of `poolname6` block is documented below.
        """
        return pulumi.get(self, "poolname6s")

    @property
    @pulumi.getter(name="profileGroup")
    def profile_group(self) -> str:
        """
        Name of profile group.
        """
        return pulumi.get(self, "profile_group")

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> str:
        """
        Name of an existing Protocol options profile.
        """
        return pulumi.get(self, "profile_protocol_options")

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> str:
        """
        Determine whether the firewall policy allows security profile groups or single profiles only.
        """
        return pulumi.get(self, "profile_type")

    @property
    @pulumi.getter
    def schedule(self) -> str:
        """
        Schedule name.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> str:
        """
        When enabled service specifies what the service must NOT be.
        """
        return pulumi.get(self, "service_negate")

    @property
    @pulumi.getter
    def services(self) -> Sequence['outputs.GetPolicyServiceResult']:
        """
        Service and service group names. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> int:
        """
        TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        """
        return pulumi.get(self, "session_ttl")

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> str:
        """
        Name of an existing Spam filter profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @property
    @pulumi.getter
    def srcaddr4s(self) -> Sequence['outputs.GetPolicySrcaddr4Result']:
        """
        Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
        """
        return pulumi.get(self, "srcaddr4s")

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Sequence['outputs.GetPolicySrcaddr6Result']:
        """
        Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> str:
        """
        When enabled srcaddr specifies what the source address must NOT be.
        """
        return pulumi.get(self, "srcaddr_negate")

    @property
    @pulumi.getter
    def srcintfs(self) -> Sequence['outputs.GetPolicySrcintfResult']:
        """
        Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> str:
        """
        Name of an existing SSH filter profile.
        """
        return pulumi.get(self, "ssh_filter_profile")

    @property
    @pulumi.getter(name="sshPolicyRedirect")
    def ssh_policy_redirect(self) -> str:
        """
        Redirect SSH traffic to matching transparent proxy policy.
        """
        return pulumi.get(self, "ssh_policy_redirect")

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> str:
        """
        Name of an existing SSL SSH profile.
        """
        return pulumi.get(self, "ssl_ssh_profile")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable or disable this policy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tcpMssReceiver")
    def tcp_mss_receiver(self) -> int:
        """
        Receiver TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_receiver")

    @property
    @pulumi.getter(name="tcpMssSender")
    def tcp_mss_sender(self) -> int:
        """
        Sender TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_sender")

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> str:
        """
        Traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper")

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> str:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper_reverse")

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Sequence['outputs.GetPolicyUrlCategoryResult']:
        """
        URL category ID list. The structure of `url_category` block is documented below.
        """
        return pulumi.get(self, "url_categories")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetPolicyUserResult']:
        """
        Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> str:
        """
        Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
        """
        return pulumi.get(self, "utm_status")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> str:
        """
        Name of an existing VoIP profile.
        """
        return pulumi.get(self, "voip_profile")

    @property
    @pulumi.getter
    def vpntunnel(self) -> str:
        """
        Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
        """
        return pulumi.get(self, "vpntunnel")

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> str:
        """
        Name of an existing Web application firewall profile.
        """
        return pulumi.get(self, "waf_profile")

    @property
    @pulumi.getter
    def wanopt(self) -> str:
        """
        Enable/disable WAN optimization.
        """
        return pulumi.get(self, "wanopt")

    @property
    @pulumi.getter(name="wanoptDetection")
    def wanopt_detection(self) -> str:
        """
        WAN optimization auto-detection mode.
        """
        return pulumi.get(self, "wanopt_detection")

    @property
    @pulumi.getter(name="wanoptPassiveOpt")
    def wanopt_passive_opt(self) -> str:
        """
        WAN optimization passive mode options. This option decides what IP address will be used to connect to server.
        """
        return pulumi.get(self, "wanopt_passive_opt")

    @property
    @pulumi.getter(name="wanoptPeer")
    def wanopt_peer(self) -> str:
        """
        WAN optimization peer.
        """
        return pulumi.get(self, "wanopt_peer")

    @property
    @pulumi.getter(name="wanoptProfile")
    def wanopt_profile(self) -> str:
        """
        WAN optimization profile.
        """
        return pulumi.get(self, "wanopt_profile")

    @property
    @pulumi.getter
    def webcache(self) -> str:
        """
        Enable/disable web cache.
        """
        return pulumi.get(self, "webcache")

    @property
    @pulumi.getter(name="webcacheHttps")
    def webcache_https(self) -> str:
        """
        Enable/disable web cache for HTTPS.
        """
        return pulumi.get(self, "webcache_https")

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> str:
        """
        Name of an existing Web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @property
    @pulumi.getter(name="webproxyForwardServer")
    def webproxy_forward_server(self) -> str:
        """
        Webproxy forward server name.
        """
        return pulumi.get(self, "webproxy_forward_server")

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> str:
        """
        Webproxy profile name.
        """
        return pulumi.get(self, "webproxy_profile")


class AwaitableGetPolicyResult(GetPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyResult(
            action=self.action,
            app_categories=self.app_categories,
            app_groups=self.app_groups,
            application_list=self.application_list,
            applications=self.applications,
            auto_asic_offload=self.auto_asic_offload,
            av_profile=self.av_profile,
            captive_portal_exempt=self.captive_portal_exempt,
            cifs_profile=self.cifs_profile,
            comments=self.comments,
            diffserv_forward=self.diffserv_forward,
            diffserv_reverse=self.diffserv_reverse,
            diffservcode_forward=self.diffservcode_forward,
            diffservcode_rev=self.diffservcode_rev,
            dlp_sensor=self.dlp_sensor,
            dnsfilter_profile=self.dnsfilter_profile,
            dstaddr4s=self.dstaddr4s,
            dstaddr6s=self.dstaddr6s,
            dstaddr_negate=self.dstaddr_negate,
            dstintfs=self.dstintfs,
            emailfilter_profile=self.emailfilter_profile,
            fixedport=self.fixedport,
            fsso_groups=self.fsso_groups,
            groups=self.groups,
            http_policy_redirect=self.http_policy_redirect,
            icap_profile=self.icap_profile,
            id=self.id,
            inbound=self.inbound,
            inspection_mode=self.inspection_mode,
            internet_service=self.internet_service,
            internet_service_custom_groups=self.internet_service_custom_groups,
            internet_service_customs=self.internet_service_customs,
            internet_service_groups=self.internet_service_groups,
            internet_service_ids=self.internet_service_ids,
            internet_service_names=self.internet_service_names,
            internet_service_negate=self.internet_service_negate,
            internet_service_src=self.internet_service_src,
            internet_service_src_custom_groups=self.internet_service_src_custom_groups,
            internet_service_src_customs=self.internet_service_src_customs,
            internet_service_src_groups=self.internet_service_src_groups,
            internet_service_src_ids=self.internet_service_src_ids,
            internet_service_src_names=self.internet_service_src_names,
            internet_service_src_negate=self.internet_service_src_negate,
            ippool=self.ippool,
            ips_sensor=self.ips_sensor,
            logtraffic=self.logtraffic,
            logtraffic_start=self.logtraffic_start,
            name=self.name,
            nat=self.nat,
            outbound=self.outbound,
            per_ip_shaper=self.per_ip_shaper,
            policyid=self.policyid,
            poolname4s=self.poolname4s,
            poolname6s=self.poolname6s,
            profile_group=self.profile_group,
            profile_protocol_options=self.profile_protocol_options,
            profile_type=self.profile_type,
            schedule=self.schedule,
            service_negate=self.service_negate,
            services=self.services,
            session_ttl=self.session_ttl,
            spamfilter_profile=self.spamfilter_profile,
            srcaddr4s=self.srcaddr4s,
            srcaddr6s=self.srcaddr6s,
            srcaddr_negate=self.srcaddr_negate,
            srcintfs=self.srcintfs,
            ssh_filter_profile=self.ssh_filter_profile,
            ssh_policy_redirect=self.ssh_policy_redirect,
            ssl_ssh_profile=self.ssl_ssh_profile,
            status=self.status,
            tcp_mss_receiver=self.tcp_mss_receiver,
            tcp_mss_sender=self.tcp_mss_sender,
            traffic_shaper=self.traffic_shaper,
            traffic_shaper_reverse=self.traffic_shaper_reverse,
            url_categories=self.url_categories,
            users=self.users,
            utm_status=self.utm_status,
            uuid=self.uuid,
            vdomparam=self.vdomparam,
            voip_profile=self.voip_profile,
            vpntunnel=self.vpntunnel,
            waf_profile=self.waf_profile,
            wanopt=self.wanopt,
            wanopt_detection=self.wanopt_detection,
            wanopt_passive_opt=self.wanopt_passive_opt,
            wanopt_peer=self.wanopt_peer,
            wanopt_profile=self.wanopt_profile,
            webcache=self.webcache,
            webcache_https=self.webcache_https,
            webfilter_profile=self.webfilter_profile,
            webproxy_forward_server=self.webproxy_forward_server,
            webproxy_profile=self.webproxy_profile)


def get_policy(policyid: Optional[int] = None,
               vdomparam: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyResult:
    """
    Use this data source to get information on an fortios firewallconsolidated policy


    :param int policyid: Specify the policyid of the desired firewallconsolidated policy.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['policyid'] = policyid
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:firewallconsolidated/getPolicy:getPolicy', __args__, opts=opts, typ=GetPolicyResult).value

    return AwaitableGetPolicyResult(
        action=__ret__.action,
        app_categories=__ret__.app_categories,
        app_groups=__ret__.app_groups,
        application_list=__ret__.application_list,
        applications=__ret__.applications,
        auto_asic_offload=__ret__.auto_asic_offload,
        av_profile=__ret__.av_profile,
        captive_portal_exempt=__ret__.captive_portal_exempt,
        cifs_profile=__ret__.cifs_profile,
        comments=__ret__.comments,
        diffserv_forward=__ret__.diffserv_forward,
        diffserv_reverse=__ret__.diffserv_reverse,
        diffservcode_forward=__ret__.diffservcode_forward,
        diffservcode_rev=__ret__.diffservcode_rev,
        dlp_sensor=__ret__.dlp_sensor,
        dnsfilter_profile=__ret__.dnsfilter_profile,
        dstaddr4s=__ret__.dstaddr4s,
        dstaddr6s=__ret__.dstaddr6s,
        dstaddr_negate=__ret__.dstaddr_negate,
        dstintfs=__ret__.dstintfs,
        emailfilter_profile=__ret__.emailfilter_profile,
        fixedport=__ret__.fixedport,
        fsso_groups=__ret__.fsso_groups,
        groups=__ret__.groups,
        http_policy_redirect=__ret__.http_policy_redirect,
        icap_profile=__ret__.icap_profile,
        id=__ret__.id,
        inbound=__ret__.inbound,
        inspection_mode=__ret__.inspection_mode,
        internet_service=__ret__.internet_service,
        internet_service_custom_groups=__ret__.internet_service_custom_groups,
        internet_service_customs=__ret__.internet_service_customs,
        internet_service_groups=__ret__.internet_service_groups,
        internet_service_ids=__ret__.internet_service_ids,
        internet_service_names=__ret__.internet_service_names,
        internet_service_negate=__ret__.internet_service_negate,
        internet_service_src=__ret__.internet_service_src,
        internet_service_src_custom_groups=__ret__.internet_service_src_custom_groups,
        internet_service_src_customs=__ret__.internet_service_src_customs,
        internet_service_src_groups=__ret__.internet_service_src_groups,
        internet_service_src_ids=__ret__.internet_service_src_ids,
        internet_service_src_names=__ret__.internet_service_src_names,
        internet_service_src_negate=__ret__.internet_service_src_negate,
        ippool=__ret__.ippool,
        ips_sensor=__ret__.ips_sensor,
        logtraffic=__ret__.logtraffic,
        logtraffic_start=__ret__.logtraffic_start,
        name=__ret__.name,
        nat=__ret__.nat,
        outbound=__ret__.outbound,
        per_ip_shaper=__ret__.per_ip_shaper,
        policyid=__ret__.policyid,
        poolname4s=__ret__.poolname4s,
        poolname6s=__ret__.poolname6s,
        profile_group=__ret__.profile_group,
        profile_protocol_options=__ret__.profile_protocol_options,
        profile_type=__ret__.profile_type,
        schedule=__ret__.schedule,
        service_negate=__ret__.service_negate,
        services=__ret__.services,
        session_ttl=__ret__.session_ttl,
        spamfilter_profile=__ret__.spamfilter_profile,
        srcaddr4s=__ret__.srcaddr4s,
        srcaddr6s=__ret__.srcaddr6s,
        srcaddr_negate=__ret__.srcaddr_negate,
        srcintfs=__ret__.srcintfs,
        ssh_filter_profile=__ret__.ssh_filter_profile,
        ssh_policy_redirect=__ret__.ssh_policy_redirect,
        ssl_ssh_profile=__ret__.ssl_ssh_profile,
        status=__ret__.status,
        tcp_mss_receiver=__ret__.tcp_mss_receiver,
        tcp_mss_sender=__ret__.tcp_mss_sender,
        traffic_shaper=__ret__.traffic_shaper,
        traffic_shaper_reverse=__ret__.traffic_shaper_reverse,
        url_categories=__ret__.url_categories,
        users=__ret__.users,
        utm_status=__ret__.utm_status,
        uuid=__ret__.uuid,
        vdomparam=__ret__.vdomparam,
        voip_profile=__ret__.voip_profile,
        vpntunnel=__ret__.vpntunnel,
        waf_profile=__ret__.waf_profile,
        wanopt=__ret__.wanopt,
        wanopt_detection=__ret__.wanopt_detection,
        wanopt_passive_opt=__ret__.wanopt_passive_opt,
        wanopt_peer=__ret__.wanopt_peer,
        wanopt_profile=__ret__.wanopt_profile,
        webcache=__ret__.webcache,
        webcache_https=__ret__.webcache_https,
        webfilter_profile=__ret__.webfilter_profile,
        webproxy_forward_server=__ret__.webproxy_forward_server,
        webproxy_profile=__ret__.webproxy_profile)


@_utilities.lift_output_func(get_policy)
def get_policy_output(policyid: Optional[pulumi.Input[int]] = None,
                      vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPolicyResult]:
    """
    Use this data source to get information on an fortios firewallconsolidated policy


    :param int policyid: Specify the policyid of the desired firewallconsolidated policy.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...

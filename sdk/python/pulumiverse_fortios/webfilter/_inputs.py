# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ContentEntryArgs',
    'ContentheaderEntryArgs',
    'ProfileAntiphishArgs',
    'ProfileAntiphishCustomPatternArgs',
    'ProfileAntiphishInspectionEntryArgs',
    'ProfileFileFilterArgs',
    'ProfileFileFilterEntryArgs',
    'ProfileFileFilterEntryFileTypeArgs',
    'ProfileFtgdWfArgs',
    'ProfileFtgdWfFilterArgs',
    'ProfileFtgdWfFilterAuthUsrGrpArgs',
    'ProfileFtgdWfQuotaArgs',
    'ProfileOverrideArgs',
    'ProfileOverrideOvrdUserGroupArgs',
    'ProfileOverrideProfileArgs',
    'ProfileWebArgs',
    'ProfileWebKeywordMatchArgs',
    'ProfileWispServerArgs',
    'ProfileYoutubeChannelFilterArgs',
    'UrlfilterEntryArgs',
]

@pulumi.input_type
class ContentEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 lang: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 score: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Block or exempt word when a match is found. Valid values: `block`, `exempt`.
        :param pulumi.Input[str] lang: Language of banned word. Valid values: `western`, `simch`, `trach`, `japanese`, `korean`, `french`, `thai`, `spanish`, `cyrillic`.
        :param pulumi.Input[str] name: Banned word.
        :param pulumi.Input[str] pattern_type: Banned word pattern type: wildcard pattern or Perl regular expression. Valid values: `wildcard`, `regexp`.
        :param pulumi.Input[int] score: Score, to be applied every time the word appears on a web page (0 - 4294967295, default = 10).
        :param pulumi.Input[str] status: Enable/disable banned word. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Block or exempt word when a match is found. Valid values: `block`, `exempt`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        """
        Language of banned word. Valid values: `western`, `simch`, `trach`, `japanese`, `korean`, `french`, `thai`, `spanish`, `cyrillic`.
        """
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Banned word.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        """
        Banned word pattern type: wildcard pattern or Perl regular expression. Valid values: `wildcard`, `regexp`.
        """
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[int]]:
        """
        Score, to be applied every time the word appears on a web page (0 - 4294967295, default = 10).
        """
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "score", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable banned word. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ContentheaderEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to take for this content type. Valid values: `block`, `allow`, `exempt`.
        :param pulumi.Input[str] category: Categories that this content type applies to.
        :param pulumi.Input[str] pattern: Content type (regular expression).
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take for this content type. Valid values: `block`, `allow`, `exempt`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Categories that this content type applies to.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Content type (regular expression).
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class ProfileAntiphishArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 check_basic_auth: Optional[pulumi.Input[str]] = None,
                 check_uri: Optional[pulumi.Input[str]] = None,
                 check_username_only: Optional[pulumi.Input[str]] = None,
                 custom_patterns: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileAntiphishCustomPatternArgs']]]] = None,
                 default_action: Optional[pulumi.Input[str]] = None,
                 domain_controller: Optional[pulumi.Input[str]] = None,
                 inspection_entries: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileAntiphishInspectionEntryArgs']]]] = None,
                 ldap: Optional[pulumi.Input[str]] = None,
                 max_body_len: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] authentication: Authentication methods. Valid values: `domain-controller`, `ldap`.
        :param pulumi.Input[str] check_basic_auth: Enable/disable checking of HTTP Basic Auth field for known credentials. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] check_uri: Enable/disable checking of GET URI parameters for known credentials. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] check_username_only: Enable/disable acting only on valid username credentials. Action will be taken for valid usernames regardless of password validity. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileAntiphishCustomPatternArgs']]] custom_patterns: Custom username and password regex patterns. The structure of `custom_patterns` block is documented below.
        :param pulumi.Input[str] default_action: Action to be taken when there is no matching rule. Valid values: `exempt`, `log`, `block`.
        :param pulumi.Input[str] domain_controller: Domain for which to verify received credentials against.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileAntiphishInspectionEntryArgs']]] inspection_entries: AntiPhishing entries. The structure of `inspection_entries` block is documented below.
        :param pulumi.Input[str] ldap: LDAP server for which to verify received credentials against.
        :param pulumi.Input[int] max_body_len: Maximum size of a POST body to check for credentials.
        :param pulumi.Input[str] status: Toggle AntiPhishing functionality. Valid values: `enable`, `disable`.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if check_basic_auth is not None:
            pulumi.set(__self__, "check_basic_auth", check_basic_auth)
        if check_uri is not None:
            pulumi.set(__self__, "check_uri", check_uri)
        if check_username_only is not None:
            pulumi.set(__self__, "check_username_only", check_username_only)
        if custom_patterns is not None:
            pulumi.set(__self__, "custom_patterns", custom_patterns)
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if domain_controller is not None:
            pulumi.set(__self__, "domain_controller", domain_controller)
        if inspection_entries is not None:
            pulumi.set(__self__, "inspection_entries", inspection_entries)
        if ldap is not None:
            pulumi.set(__self__, "ldap", ldap)
        if max_body_len is not None:
            pulumi.set(__self__, "max_body_len", max_body_len)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication methods. Valid values: `domain-controller`, `ldap`.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="checkBasicAuth")
    def check_basic_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable checking of HTTP Basic Auth field for known credentials. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "check_basic_auth")

    @check_basic_auth.setter
    def check_basic_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_basic_auth", value)

    @property
    @pulumi.getter(name="checkUri")
    def check_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable checking of GET URI parameters for known credentials. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "check_uri")

    @check_uri.setter
    def check_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_uri", value)

    @property
    @pulumi.getter(name="checkUsernameOnly")
    def check_username_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable acting only on valid username credentials. Action will be taken for valid usernames regardless of password validity. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "check_username_only")

    @check_username_only.setter
    def check_username_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_username_only", value)

    @property
    @pulumi.getter(name="customPatterns")
    def custom_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileAntiphishCustomPatternArgs']]]]:
        """
        Custom username and password regex patterns. The structure of `custom_patterns` block is documented below.
        """
        return pulumi.get(self, "custom_patterns")

    @custom_patterns.setter
    def custom_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileAntiphishCustomPatternArgs']]]]):
        pulumi.set(self, "custom_patterns", value)

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken when there is no matching rule. Valid values: `exempt`, `log`, `block`.
        """
        return pulumi.get(self, "default_action")

    @default_action.setter
    def default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_action", value)

    @property
    @pulumi.getter(name="domainController")
    def domain_controller(self) -> Optional[pulumi.Input[str]]:
        """
        Domain for which to verify received credentials against.
        """
        return pulumi.get(self, "domain_controller")

    @domain_controller.setter
    def domain_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_controller", value)

    @property
    @pulumi.getter(name="inspectionEntries")
    def inspection_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileAntiphishInspectionEntryArgs']]]]:
        """
        AntiPhishing entries. The structure of `inspection_entries` block is documented below.
        """
        return pulumi.get(self, "inspection_entries")

    @inspection_entries.setter
    def inspection_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileAntiphishInspectionEntryArgs']]]]):
        pulumi.set(self, "inspection_entries", value)

    @property
    @pulumi.getter
    def ldap(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP server for which to verify received credentials against.
        """
        return pulumi.get(self, "ldap")

    @ldap.setter
    def ldap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap", value)

    @property
    @pulumi.getter(name="maxBodyLen")
    def max_body_len(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of a POST body to check for credentials.
        """
        return pulumi.get(self, "max_body_len")

    @max_body_len.setter
    def max_body_len(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_body_len", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Toggle AntiPhishing functionality. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileAntiphishCustomPatternArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] category: Category that the pattern matches. Valid values: `username`, `password`.
        :param pulumi.Input[str] pattern: Target pattern.
        :param pulumi.Input[str] type: Pattern will be treated either as a regex pattern or literal string. Valid values: `regex`, `literal`.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Category that the pattern matches. Valid values: `username`, `password`.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Target pattern.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern will be treated either as a regex pattern or literal string. Valid values: `regex`, `literal`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ProfileAntiphishInspectionEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 fortiguard_category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to be taken upon an AntiPhishing match. Valid values: `exempt`, `log`, `block`.
        :param pulumi.Input[str] fortiguard_category: FortiGuard category to match.
        :param pulumi.Input[str] name: Inspection target name.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if fortiguard_category is not None:
            pulumi.set(__self__, "fortiguard_category", fortiguard_category)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken upon an AntiPhishing match. Valid values: `exempt`, `log`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="fortiguardCategory")
    def fortiguard_category(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard category to match.
        """
        return pulumi.get(self, "fortiguard_category")

    @fortiguard_category.setter
    def fortiguard_category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiguard_category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Inspection target name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProfileFileFilterArgs:
    def __init__(__self__, *,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryArgs']]]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 scan_archive_contents: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryArgs']]] entries: File filter entries. The structure of `entries` block is documented below.
        :param pulumi.Input[str] log: Enable/disable file filter logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_archive_contents: Enable/disable file filter archive contents scan. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable file filter. Valid values: `enable`, `disable`.
        """
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if scan_archive_contents is not None:
            pulumi.set(__self__, "scan_archive_contents", scan_archive_contents)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryArgs']]]]:
        """
        File filter entries. The structure of `entries` block is documented below.
        """
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="scanArchiveContents")
    def scan_archive_contents(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter archive contents scan. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_archive_contents")

    @scan_archive_contents.setter
    def scan_archive_contents(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_archive_contents", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileFileFilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryFileTypeArgs']]]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 password_protected: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action taken for matched file. Valid values: `log`, `block`.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] direction: Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryFileTypeArgs']]] file_types: Select file type. The structure of `file_type` block is documented below.
        :param pulumi.Input[str] filter: Add a file filter.
        :param pulumi.Input[str] password_protected: Match password-protected files. Valid values: `yes`, `any`.
        :param pulumi.Input[str] protocol: Protocols to apply with. Valid values: `http`, `ftp`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if password_protected is not None:
            pulumi.set(__self__, "password_protected", password_protected)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action taken for matched file. Valid values: `log`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryFileTypeArgs']]]]:
        """
        Select file type. The structure of `file_type` block is documented below.
        """
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryFileTypeArgs']]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Add a file filter.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="passwordProtected")
    def password_protected(self) -> Optional[pulumi.Input[str]]:
        """
        Match password-protected files. Valid values: `yes`, `any`.
        """
        return pulumi.get(self, "password_protected")

    @password_protected.setter
    def password_protected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_protected", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocols to apply with. Valid values: `http`, `ftp`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class ProfileFileFilterEntryFileTypeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: File type name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File type name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProfileFtgdWfArgs:
    def __init__(__self__, *,
                 exempt_quota: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFtgdWfFilterArgs']]]] = None,
                 max_quota_timeout: Optional[pulumi.Input[int]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 ovrd: Optional[pulumi.Input[str]] = None,
                 quotas: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFtgdWfQuotaArgs']]]] = None,
                 rate_crl_urls: Optional[pulumi.Input[str]] = None,
                 rate_css_urls: Optional[pulumi.Input[str]] = None,
                 rate_image_urls: Optional[pulumi.Input[str]] = None,
                 rate_javascript_urls: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] exempt_quota: Do not stop quota for these categories.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileFtgdWfFilterArgs']]] filters: FortiGuard filters. The structure of `filters` block is documented below.
        :param pulumi.Input[int] max_quota_timeout: Maximum FortiGuard quota used by single page view in seconds (excludes streams).
        :param pulumi.Input[str] options: Options for FortiGuard Web Filter. Valid values: `error-allow`, `rate-server-ip`, `connect-request-bypass`, `ftgd-disable`.
        :param pulumi.Input[str] ovrd: Allow web filter profile overrides.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileFtgdWfQuotaArgs']]] quotas: FortiGuard traffic quota settings. The structure of `quota` block is documented below.
        :param pulumi.Input[str] rate_crl_urls: Enable/disable rating CRL by URL. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] rate_css_urls: Enable/disable rating CSS by URL. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] rate_image_urls: Enable/disable rating images by URL. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] rate_javascript_urls: Enable/disable rating JavaScript by URL. Valid values: `disable`, `enable`.
        """
        if exempt_quota is not None:
            pulumi.set(__self__, "exempt_quota", exempt_quota)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if max_quota_timeout is not None:
            pulumi.set(__self__, "max_quota_timeout", max_quota_timeout)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if ovrd is not None:
            pulumi.set(__self__, "ovrd", ovrd)
        if quotas is not None:
            pulumi.set(__self__, "quotas", quotas)
        if rate_crl_urls is not None:
            pulumi.set(__self__, "rate_crl_urls", rate_crl_urls)
        if rate_css_urls is not None:
            pulumi.set(__self__, "rate_css_urls", rate_css_urls)
        if rate_image_urls is not None:
            pulumi.set(__self__, "rate_image_urls", rate_image_urls)
        if rate_javascript_urls is not None:
            pulumi.set(__self__, "rate_javascript_urls", rate_javascript_urls)

    @property
    @pulumi.getter(name="exemptQuota")
    def exempt_quota(self) -> Optional[pulumi.Input[str]]:
        """
        Do not stop quota for these categories.
        """
        return pulumi.get(self, "exempt_quota")

    @exempt_quota.setter
    def exempt_quota(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exempt_quota", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFtgdWfFilterArgs']]]]:
        """
        FortiGuard filters. The structure of `filters` block is documented below.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFtgdWfFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="maxQuotaTimeout")
    def max_quota_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum FortiGuard quota used by single page view in seconds (excludes streams).
        """
        return pulumi.get(self, "max_quota_timeout")

    @max_quota_timeout.setter
    def max_quota_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_quota_timeout", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Options for FortiGuard Web Filter. Valid values: `error-allow`, `rate-server-ip`, `connect-request-bypass`, `ftgd-disable`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def ovrd(self) -> Optional[pulumi.Input[str]]:
        """
        Allow web filter profile overrides.
        """
        return pulumi.get(self, "ovrd")

    @ovrd.setter
    def ovrd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd", value)

    @property
    @pulumi.getter
    def quotas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFtgdWfQuotaArgs']]]]:
        """
        FortiGuard traffic quota settings. The structure of `quota` block is documented below.
        """
        return pulumi.get(self, "quotas")

    @quotas.setter
    def quotas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFtgdWfQuotaArgs']]]]):
        pulumi.set(self, "quotas", value)

    @property
    @pulumi.getter(name="rateCrlUrls")
    def rate_crl_urls(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable rating CRL by URL. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "rate_crl_urls")

    @rate_crl_urls.setter
    def rate_crl_urls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_crl_urls", value)

    @property
    @pulumi.getter(name="rateCssUrls")
    def rate_css_urls(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable rating CSS by URL. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "rate_css_urls")

    @rate_css_urls.setter
    def rate_css_urls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_css_urls", value)

    @property
    @pulumi.getter(name="rateImageUrls")
    def rate_image_urls(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable rating images by URL. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "rate_image_urls")

    @rate_image_urls.setter
    def rate_image_urls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_image_urls", value)

    @property
    @pulumi.getter(name="rateJavascriptUrls")
    def rate_javascript_urls(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable rating JavaScript by URL. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "rate_javascript_urls")

    @rate_javascript_urls.setter
    def rate_javascript_urls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_javascript_urls", value)


@pulumi.input_type
class ProfileFtgdWfFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 auth_usr_grps: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFtgdWfFilterAuthUsrGrpArgs']]]] = None,
                 category: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 override_replacemsg: Optional[pulumi.Input[str]] = None,
                 warn_duration: Optional[pulumi.Input[str]] = None,
                 warning_duration_type: Optional[pulumi.Input[str]] = None,
                 warning_prompt: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to take for matches. Valid values: `block`, `authenticate`, `monitor`, `warning`.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileFtgdWfFilterAuthUsrGrpArgs']]] auth_usr_grps: Groups with permission to authenticate. The structure of `auth_usr_grp` block is documented below.
        :param pulumi.Input[int] category: Categories and groups the filter examines.
        :param pulumi.Input[int] id: ID number.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_replacemsg: Override replacement message.
        :param pulumi.Input[str] warn_duration: Duration of warnings.
        :param pulumi.Input[str] warning_duration_type: Re-display warning after closing browser or after a timeout. Valid values: `session`, `timeout`.
        :param pulumi.Input[str] warning_prompt: Warning prompts in each category or each domain. Valid values: `per-domain`, `per-category`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if auth_usr_grps is not None:
            pulumi.set(__self__, "auth_usr_grps", auth_usr_grps)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if override_replacemsg is not None:
            pulumi.set(__self__, "override_replacemsg", override_replacemsg)
        if warn_duration is not None:
            pulumi.set(__self__, "warn_duration", warn_duration)
        if warning_duration_type is not None:
            pulumi.set(__self__, "warning_duration_type", warning_duration_type)
        if warning_prompt is not None:
            pulumi.set(__self__, "warning_prompt", warning_prompt)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take for matches. Valid values: `block`, `authenticate`, `monitor`, `warning`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="authUsrGrps")
    def auth_usr_grps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFtgdWfFilterAuthUsrGrpArgs']]]]:
        """
        Groups with permission to authenticate. The structure of `auth_usr_grp` block is documented below.
        """
        return pulumi.get(self, "auth_usr_grps")

    @auth_usr_grps.setter
    def auth_usr_grps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFtgdWfFilterAuthUsrGrpArgs']]]]):
        pulumi.set(self, "auth_usr_grps", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[int]]:
        """
        Categories and groups the filter examines.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID number.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="overrideReplacemsg")
    def override_replacemsg(self) -> Optional[pulumi.Input[str]]:
        """
        Override replacement message.
        """
        return pulumi.get(self, "override_replacemsg")

    @override_replacemsg.setter
    def override_replacemsg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_replacemsg", value)

    @property
    @pulumi.getter(name="warnDuration")
    def warn_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of warnings.
        """
        return pulumi.get(self, "warn_duration")

    @warn_duration.setter
    def warn_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warn_duration", value)

    @property
    @pulumi.getter(name="warningDurationType")
    def warning_duration_type(self) -> Optional[pulumi.Input[str]]:
        """
        Re-display warning after closing browser or after a timeout. Valid values: `session`, `timeout`.
        """
        return pulumi.get(self, "warning_duration_type")

    @warning_duration_type.setter
    def warning_duration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_duration_type", value)

    @property
    @pulumi.getter(name="warningPrompt")
    def warning_prompt(self) -> Optional[pulumi.Input[str]]:
        """
        Warning prompts in each category or each domain. Valid values: `per-domain`, `per-category`.
        """
        return pulumi.get(self, "warning_prompt")

    @warning_prompt.setter
    def warning_prompt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_prompt", value)


@pulumi.input_type
class ProfileFtgdWfFilterAuthUsrGrpArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: User group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProfileFtgdWfQuotaArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 duration: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 override_replacemsg: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: FortiGuard categories to apply quota to (category action must be set to monitor).
        :param pulumi.Input[str] duration: Duration of quota.
        :param pulumi.Input[int] id: ID number.
        :param pulumi.Input[str] override_replacemsg: Override replacement message.
        :param pulumi.Input[str] type: Quota type. Valid values: `time`, `traffic`.
        :param pulumi.Input[str] unit: Traffic quota unit of measurement. Valid values: `B`, `KB`, `MB`, `GB`.
        :param pulumi.Input[int] value: Traffic quota value.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if override_replacemsg is not None:
            pulumi.set(__self__, "override_replacemsg", override_replacemsg)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard categories to apply quota to (category action must be set to monitor).
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of quota.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID number.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="overrideReplacemsg")
    def override_replacemsg(self) -> Optional[pulumi.Input[str]]:
        """
        Override replacement message.
        """
        return pulumi.get(self, "override_replacemsg")

    @override_replacemsg.setter
    def override_replacemsg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_replacemsg", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Quota type. Valid values: `time`, `traffic`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic quota unit of measurement. Valid values: `B`, `KB`, `MB`, `GB`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        """
        Traffic quota value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProfileOverrideArgs:
    def __init__(__self__, *,
                 ovrd_cookie: Optional[pulumi.Input[str]] = None,
                 ovrd_dur: Optional[pulumi.Input[str]] = None,
                 ovrd_dur_mode: Optional[pulumi.Input[str]] = None,
                 ovrd_scope: Optional[pulumi.Input[str]] = None,
                 ovrd_user_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileOverrideOvrdUserGroupArgs']]]] = None,
                 profile_attribute: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileOverrideProfileArgs']]]] = None):
        """
        :param pulumi.Input[str] ovrd_cookie: Allow/deny browser-based (cookie) overrides. Valid values: `allow`, `deny`.
        :param pulumi.Input[str] ovrd_dur: Override duration.
        :param pulumi.Input[str] ovrd_dur_mode: Override duration mode. Valid values: `constant`, `ask`.
        :param pulumi.Input[str] ovrd_scope: Override scope. Valid values: `user`, `user-group`, `ip`, `browser`, `ask`.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileOverrideOvrdUserGroupArgs']]] ovrd_user_groups: User groups with permission to use the override. The structure of `ovrd_user_group` block is documented below.
        :param pulumi.Input[str] profile_attribute: Profile attribute to retrieve from the RADIUS server. Valid values: `User-Name`, `NAS-IP-Address`, `Framed-IP-Address`, `Framed-IP-Netmask`, `Filter-Id`, `Login-IP-Host`, `Reply-Message`, `Callback-Number`, `Callback-Id`, `Framed-Route`, `Framed-IPX-Network`, `Class`, `Called-Station-Id`, `Calling-Station-Id`, `NAS-Identifier`, `Proxy-State`, `Login-LAT-Service`, `Login-LAT-Node`, `Login-LAT-Group`, `Framed-AppleTalk-Zone`, `Acct-Session-Id`, `Acct-Multi-Session-Id`.
        :param pulumi.Input[str] profile_type: Override profile type. Valid values: `list`, `radius`.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileOverrideProfileArgs']]] profiles: Web filter profile with permission to create overrides. The structure of `profile` block is documented below.
        """
        if ovrd_cookie is not None:
            pulumi.set(__self__, "ovrd_cookie", ovrd_cookie)
        if ovrd_dur is not None:
            pulumi.set(__self__, "ovrd_dur", ovrd_dur)
        if ovrd_dur_mode is not None:
            pulumi.set(__self__, "ovrd_dur_mode", ovrd_dur_mode)
        if ovrd_scope is not None:
            pulumi.set(__self__, "ovrd_scope", ovrd_scope)
        if ovrd_user_groups is not None:
            pulumi.set(__self__, "ovrd_user_groups", ovrd_user_groups)
        if profile_attribute is not None:
            pulumi.set(__self__, "profile_attribute", profile_attribute)
        if profile_type is not None:
            pulumi.set(__self__, "profile_type", profile_type)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)

    @property
    @pulumi.getter(name="ovrdCookie")
    def ovrd_cookie(self) -> Optional[pulumi.Input[str]]:
        """
        Allow/deny browser-based (cookie) overrides. Valid values: `allow`, `deny`.
        """
        return pulumi.get(self, "ovrd_cookie")

    @ovrd_cookie.setter
    def ovrd_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd_cookie", value)

    @property
    @pulumi.getter(name="ovrdDur")
    def ovrd_dur(self) -> Optional[pulumi.Input[str]]:
        """
        Override duration.
        """
        return pulumi.get(self, "ovrd_dur")

    @ovrd_dur.setter
    def ovrd_dur(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd_dur", value)

    @property
    @pulumi.getter(name="ovrdDurMode")
    def ovrd_dur_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Override duration mode. Valid values: `constant`, `ask`.
        """
        return pulumi.get(self, "ovrd_dur_mode")

    @ovrd_dur_mode.setter
    def ovrd_dur_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd_dur_mode", value)

    @property
    @pulumi.getter(name="ovrdScope")
    def ovrd_scope(self) -> Optional[pulumi.Input[str]]:
        """
        Override scope. Valid values: `user`, `user-group`, `ip`, `browser`, `ask`.
        """
        return pulumi.get(self, "ovrd_scope")

    @ovrd_scope.setter
    def ovrd_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd_scope", value)

    @property
    @pulumi.getter(name="ovrdUserGroups")
    def ovrd_user_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileOverrideOvrdUserGroupArgs']]]]:
        """
        User groups with permission to use the override. The structure of `ovrd_user_group` block is documented below.
        """
        return pulumi.get(self, "ovrd_user_groups")

    @ovrd_user_groups.setter
    def ovrd_user_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileOverrideOvrdUserGroupArgs']]]]):
        pulumi.set(self, "ovrd_user_groups", value)

    @property
    @pulumi.getter(name="profileAttribute")
    def profile_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Profile attribute to retrieve from the RADIUS server. Valid values: `User-Name`, `NAS-IP-Address`, `Framed-IP-Address`, `Framed-IP-Netmask`, `Filter-Id`, `Login-IP-Host`, `Reply-Message`, `Callback-Number`, `Callback-Id`, `Framed-Route`, `Framed-IPX-Network`, `Class`, `Called-Station-Id`, `Calling-Station-Id`, `NAS-Identifier`, `Proxy-State`, `Login-LAT-Service`, `Login-LAT-Node`, `Login-LAT-Group`, `Framed-AppleTalk-Zone`, `Acct-Session-Id`, `Acct-Multi-Session-Id`.
        """
        return pulumi.get(self, "profile_attribute")

    @profile_attribute.setter
    def profile_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_attribute", value)

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[pulumi.Input[str]]:
        """
        Override profile type. Valid values: `list`, `radius`.
        """
        return pulumi.get(self, "profile_type")

    @profile_type.setter
    def profile_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_type", value)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileOverrideProfileArgs']]]]:
        """
        Web filter profile with permission to create overrides. The structure of `profile` block is documented below.
        """
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileOverrideProfileArgs']]]]):
        pulumi.set(self, "profiles", value)


@pulumi.input_type
class ProfileOverrideOvrdUserGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: User group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProfileOverrideProfileArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Web profile.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Web profile.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProfileWebArgs:
    def __init__(__self__, *,
                 allowlist: Optional[pulumi.Input[str]] = None,
                 blacklist: Optional[pulumi.Input[str]] = None,
                 blocklist: Optional[pulumi.Input[str]] = None,
                 bword_table: Optional[pulumi.Input[int]] = None,
                 bword_threshold: Optional[pulumi.Input[int]] = None,
                 content_header_list: Optional[pulumi.Input[int]] = None,
                 keyword_matches: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileWebKeywordMatchArgs']]]] = None,
                 log_search: Optional[pulumi.Input[str]] = None,
                 safe_search: Optional[pulumi.Input[str]] = None,
                 urlfilter_table: Optional[pulumi.Input[int]] = None,
                 vimeo_restrict: Optional[pulumi.Input[str]] = None,
                 whitelist: Optional[pulumi.Input[str]] = None,
                 youtube_restrict: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] allowlist: FortiGuard allowlist settings. Valid values: `exempt-av`, `exempt-webcontent`, `exempt-activex-java-cookie`, `exempt-dlp`, `exempt-rangeblock`, `extended-log-others`.
        :param pulumi.Input[str] blacklist: Enable/disable automatic addition of URLs detected by FortiSandbox to blacklist. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] blocklist: Enable/disable automatic addition of URLs detected by FortiSandbox to blocklist. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bword_table: Banned word table ID.
        :param pulumi.Input[int] bword_threshold: Banned word score threshold.
        :param pulumi.Input[int] content_header_list: Content header list.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileWebKeywordMatchArgs']]] keyword_matches: Search keywords to log when match is found. The structure of `keyword_match` block is documented below.
        :param pulumi.Input[str] log_search: Enable/disable logging all search phrases. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] safe_search: Safe search type. Valid values: `url`, `header`.
        :param pulumi.Input[int] urlfilter_table: URL filter table ID.
        :param pulumi.Input[str] vimeo_restrict: Set Vimeo-restrict ("7" = don't show mature content, "134" = don't show unrated and mature content). A value of cookie "content_rating".
        :param pulumi.Input[str] whitelist: FortiGuard whitelist settings. Valid values: `exempt-av`, `exempt-webcontent`, `exempt-activex-java-cookie`, `exempt-dlp`, `exempt-rangeblock`, `extended-log-others`.
        :param pulumi.Input[str] youtube_restrict: YouTube EDU filter level. Valid values: `none`, `strict`, `moderate`.
        """
        if allowlist is not None:
            pulumi.set(__self__, "allowlist", allowlist)
        if blacklist is not None:
            pulumi.set(__self__, "blacklist", blacklist)
        if blocklist is not None:
            pulumi.set(__self__, "blocklist", blocklist)
        if bword_table is not None:
            pulumi.set(__self__, "bword_table", bword_table)
        if bword_threshold is not None:
            pulumi.set(__self__, "bword_threshold", bword_threshold)
        if content_header_list is not None:
            pulumi.set(__self__, "content_header_list", content_header_list)
        if keyword_matches is not None:
            pulumi.set(__self__, "keyword_matches", keyword_matches)
        if log_search is not None:
            pulumi.set(__self__, "log_search", log_search)
        if safe_search is not None:
            pulumi.set(__self__, "safe_search", safe_search)
        if urlfilter_table is not None:
            pulumi.set(__self__, "urlfilter_table", urlfilter_table)
        if vimeo_restrict is not None:
            pulumi.set(__self__, "vimeo_restrict", vimeo_restrict)
        if whitelist is not None:
            pulumi.set(__self__, "whitelist", whitelist)
        if youtube_restrict is not None:
            pulumi.set(__self__, "youtube_restrict", youtube_restrict)

    @property
    @pulumi.getter
    def allowlist(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard allowlist settings. Valid values: `exempt-av`, `exempt-webcontent`, `exempt-activex-java-cookie`, `exempt-dlp`, `exempt-rangeblock`, `extended-log-others`.
        """
        return pulumi.get(self, "allowlist")

    @allowlist.setter
    def allowlist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowlist", value)

    @property
    @pulumi.getter
    def blacklist(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic addition of URLs detected by FortiSandbox to blacklist. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "blacklist")

    @blacklist.setter
    def blacklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blacklist", value)

    @property
    @pulumi.getter
    def blocklist(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic addition of URLs detected by FortiSandbox to blocklist. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "blocklist")

    @blocklist.setter
    def blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blocklist", value)

    @property
    @pulumi.getter(name="bwordTable")
    def bword_table(self) -> Optional[pulumi.Input[int]]:
        """
        Banned word table ID.
        """
        return pulumi.get(self, "bword_table")

    @bword_table.setter
    def bword_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bword_table", value)

    @property
    @pulumi.getter(name="bwordThreshold")
    def bword_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Banned word score threshold.
        """
        return pulumi.get(self, "bword_threshold")

    @bword_threshold.setter
    def bword_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bword_threshold", value)

    @property
    @pulumi.getter(name="contentHeaderList")
    def content_header_list(self) -> Optional[pulumi.Input[int]]:
        """
        Content header list.
        """
        return pulumi.get(self, "content_header_list")

    @content_header_list.setter
    def content_header_list(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "content_header_list", value)

    @property
    @pulumi.getter(name="keywordMatches")
    def keyword_matches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileWebKeywordMatchArgs']]]]:
        """
        Search keywords to log when match is found. The structure of `keyword_match` block is documented below.
        """
        return pulumi.get(self, "keyword_matches")

    @keyword_matches.setter
    def keyword_matches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileWebKeywordMatchArgs']]]]):
        pulumi.set(self, "keyword_matches", value)

    @property
    @pulumi.getter(name="logSearch")
    def log_search(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging all search phrases. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_search")

    @log_search.setter
    def log_search(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_search", value)

    @property
    @pulumi.getter(name="safeSearch")
    def safe_search(self) -> Optional[pulumi.Input[str]]:
        """
        Safe search type. Valid values: `url`, `header`.
        """
        return pulumi.get(self, "safe_search")

    @safe_search.setter
    def safe_search(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "safe_search", value)

    @property
    @pulumi.getter(name="urlfilterTable")
    def urlfilter_table(self) -> Optional[pulumi.Input[int]]:
        """
        URL filter table ID.
        """
        return pulumi.get(self, "urlfilter_table")

    @urlfilter_table.setter
    def urlfilter_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "urlfilter_table", value)

    @property
    @pulumi.getter(name="vimeoRestrict")
    def vimeo_restrict(self) -> Optional[pulumi.Input[str]]:
        """
        Set Vimeo-restrict ("7" = don't show mature content, "134" = don't show unrated and mature content). A value of cookie "content_rating".
        """
        return pulumi.get(self, "vimeo_restrict")

    @vimeo_restrict.setter
    def vimeo_restrict(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vimeo_restrict", value)

    @property
    @pulumi.getter
    def whitelist(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard whitelist settings. Valid values: `exempt-av`, `exempt-webcontent`, `exempt-activex-java-cookie`, `exempt-dlp`, `exempt-rangeblock`, `extended-log-others`.
        """
        return pulumi.get(self, "whitelist")

    @whitelist.setter
    def whitelist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "whitelist", value)

    @property
    @pulumi.getter(name="youtubeRestrict")
    def youtube_restrict(self) -> Optional[pulumi.Input[str]]:
        """
        YouTube EDU filter level. Valid values: `none`, `strict`, `moderate`.
        """
        return pulumi.get(self, "youtube_restrict")

    @youtube_restrict.setter
    def youtube_restrict(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "youtube_restrict", value)


@pulumi.input_type
class ProfileWebKeywordMatchArgs:
    def __init__(__self__, *,
                 pattern: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] pattern: Pattern/keyword to search for.
        """
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern/keyword to search for.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class ProfileWispServerArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Server name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Server name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProfileYoutubeChannelFilterArgs:
    def __init__(__self__, *,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] channel_id: YouTube channel ID to be filtered.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[int] id: ID.
        """
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        YouTube channel ID to be filtered.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class UrlfilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 antiphish_action: Optional[pulumi.Input[str]] = None,
                 dns_address_family: Optional[pulumi.Input[str]] = None,
                 exempt: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 referrer_host: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 web_proxy_profile: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to take for URL filter matches. Valid values: `exempt`, `block`, `allow`, `monitor`.
        :param pulumi.Input[str] antiphish_action: Action to take for AntiPhishing matches. Valid values: `block`, `log`.
        :param pulumi.Input[str] dns_address_family: Resolve IPv4 address, IPv6 address, or both from DNS server. Valid values: `ipv4`, `ipv6`, `both`.
        :param pulumi.Input[str] exempt: If action is set to exempt, select the security profile operations that exempt URLs skip. Separate multiple options with a space.
        :param pulumi.Input[int] id: Id.
        :param pulumi.Input[str] referrer_host: Referrer host name.
        :param pulumi.Input[str] status: Enable/disable this URL filter. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: Filter type (simple, regex, or wildcard). Valid values: `simple`, `regex`, `wildcard`.
        :param pulumi.Input[str] url: URL to be filtered.
        :param pulumi.Input[str] web_proxy_profile: Web proxy profile.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if antiphish_action is not None:
            pulumi.set(__self__, "antiphish_action", antiphish_action)
        if dns_address_family is not None:
            pulumi.set(__self__, "dns_address_family", dns_address_family)
        if exempt is not None:
            pulumi.set(__self__, "exempt", exempt)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if referrer_host is not None:
            pulumi.set(__self__, "referrer_host", referrer_host)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if web_proxy_profile is not None:
            pulumi.set(__self__, "web_proxy_profile", web_proxy_profile)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take for URL filter matches. Valid values: `exempt`, `block`, `allow`, `monitor`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="antiphishAction")
    def antiphish_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take for AntiPhishing matches. Valid values: `block`, `log`.
        """
        return pulumi.get(self, "antiphish_action")

    @antiphish_action.setter
    def antiphish_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antiphish_action", value)

    @property
    @pulumi.getter(name="dnsAddressFamily")
    def dns_address_family(self) -> Optional[pulumi.Input[str]]:
        """
        Resolve IPv4 address, IPv6 address, or both from DNS server. Valid values: `ipv4`, `ipv6`, `both`.
        """
        return pulumi.get(self, "dns_address_family")

    @dns_address_family.setter
    def dns_address_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_address_family", value)

    @property
    @pulumi.getter
    def exempt(self) -> Optional[pulumi.Input[str]]:
        """
        If action is set to exempt, select the security profile operations that exempt URLs skip. Separate multiple options with a space.
        """
        return pulumi.get(self, "exempt")

    @exempt.setter
    def exempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exempt", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="referrerHost")
    def referrer_host(self) -> Optional[pulumi.Input[str]]:
        """
        Referrer host name.
        """
        return pulumi.get(self, "referrer_host")

    @referrer_host.setter
    def referrer_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "referrer_host", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this URL filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Filter type (simple, regex, or wildcard). Valid values: `simple`, `regex`, `wildcard`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to be filtered.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="webProxyProfile")
    def web_proxy_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Web proxy profile.
        """
        return pulumi.get(self, "web_proxy_profile")

    @web_proxy_profile.setter
    def web_proxy_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_proxy_profile", value)



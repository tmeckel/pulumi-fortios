# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ProfileDeviceGroup',
    'ProfileForticlientAndroidSettings',
    'ProfileForticlientAndroidSettingsForticlientVpnSetting',
    'ProfileForticlientIosSettings',
    'ProfileForticlientIosSettingsClientVpnSetting',
    'ProfileForticlientWinmacSettings',
    'ProfileForticlientWinmacSettingsForticlientEmsEntry',
    'ProfileForticlientWinmacSettingsForticlientOperatingSystem',
    'ProfileForticlientWinmacSettingsForticlientOwnFile',
    'ProfileForticlientWinmacSettingsForticlientRegistryEntry',
    'ProfileForticlientWinmacSettingsForticlientRunningApp',
    'ProfileOnNetAddr',
    'ProfileSrcAddr',
    'ProfileUser',
    'ProfileUserGroup',
]

@pulumi.output_type
class ProfileDeviceGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Device group object from available options.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Device group object from available options.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProfileForticlientAndroidSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disableWfWhenProtected":
            suggest = "disable_wf_when_protected"
        elif key == "forticlientAdvancedVpn":
            suggest = "forticlient_advanced_vpn"
        elif key == "forticlientAdvancedVpnBuffer":
            suggest = "forticlient_advanced_vpn_buffer"
        elif key == "forticlientVpnProvisioning":
            suggest = "forticlient_vpn_provisioning"
        elif key == "forticlientVpnSettings":
            suggest = "forticlient_vpn_settings"
        elif key == "forticlientWf":
            suggest = "forticlient_wf"
        elif key == "forticlientWfProfile":
            suggest = "forticlient_wf_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileForticlientAndroidSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileForticlientAndroidSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileForticlientAndroidSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable_wf_when_protected: Optional[str] = None,
                 forticlient_advanced_vpn: Optional[str] = None,
                 forticlient_advanced_vpn_buffer: Optional[str] = None,
                 forticlient_vpn_provisioning: Optional[str] = None,
                 forticlient_vpn_settings: Optional[Sequence['outputs.ProfileForticlientAndroidSettingsForticlientVpnSetting']] = None,
                 forticlient_wf: Optional[str] = None,
                 forticlient_wf_profile: Optional[str] = None):
        """
        :param str disable_wf_when_protected: Enable/disable FortiClient web category filtering when protected by FortiGate. Valid values: `enable`, `disable`.
        :param str forticlient_advanced_vpn: Enable/disable advanced FortiClient VPN configuration. Valid values: `enable`, `disable`.
        :param str forticlient_advanced_vpn_buffer: Advanced FortiClient VPN configuration.
        :param str forticlient_vpn_provisioning: Enable/disable FortiClient VPN provisioning. Valid values: `enable`, `disable`.
        :param Sequence['ProfileForticlientAndroidSettingsForticlientVpnSettingArgs'] forticlient_vpn_settings: FortiClient VPN settings. The structure of `forticlient_vpn_settings` block is documented below.
        :param str forticlient_wf: Enable/disable FortiClient web filtering. Valid values: `enable`, `disable`.
        :param str forticlient_wf_profile: The FortiClient web filter profile to apply.
        """
        if disable_wf_when_protected is not None:
            pulumi.set(__self__, "disable_wf_when_protected", disable_wf_when_protected)
        if forticlient_advanced_vpn is not None:
            pulumi.set(__self__, "forticlient_advanced_vpn", forticlient_advanced_vpn)
        if forticlient_advanced_vpn_buffer is not None:
            pulumi.set(__self__, "forticlient_advanced_vpn_buffer", forticlient_advanced_vpn_buffer)
        if forticlient_vpn_provisioning is not None:
            pulumi.set(__self__, "forticlient_vpn_provisioning", forticlient_vpn_provisioning)
        if forticlient_vpn_settings is not None:
            pulumi.set(__self__, "forticlient_vpn_settings", forticlient_vpn_settings)
        if forticlient_wf is not None:
            pulumi.set(__self__, "forticlient_wf", forticlient_wf)
        if forticlient_wf_profile is not None:
            pulumi.set(__self__, "forticlient_wf_profile", forticlient_wf_profile)

    @property
    @pulumi.getter(name="disableWfWhenProtected")
    def disable_wf_when_protected(self) -> Optional[str]:
        """
        Enable/disable FortiClient web category filtering when protected by FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "disable_wf_when_protected")

    @property
    @pulumi.getter(name="forticlientAdvancedVpn")
    def forticlient_advanced_vpn(self) -> Optional[str]:
        """
        Enable/disable advanced FortiClient VPN configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_advanced_vpn")

    @property
    @pulumi.getter(name="forticlientAdvancedVpnBuffer")
    def forticlient_advanced_vpn_buffer(self) -> Optional[str]:
        """
        Advanced FortiClient VPN configuration.
        """
        return pulumi.get(self, "forticlient_advanced_vpn_buffer")

    @property
    @pulumi.getter(name="forticlientVpnProvisioning")
    def forticlient_vpn_provisioning(self) -> Optional[str]:
        """
        Enable/disable FortiClient VPN provisioning. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_vpn_provisioning")

    @property
    @pulumi.getter(name="forticlientVpnSettings")
    def forticlient_vpn_settings(self) -> Optional[Sequence['outputs.ProfileForticlientAndroidSettingsForticlientVpnSetting']]:
        """
        FortiClient VPN settings. The structure of `forticlient_vpn_settings` block is documented below.
        """
        return pulumi.get(self, "forticlient_vpn_settings")

    @property
    @pulumi.getter(name="forticlientWf")
    def forticlient_wf(self) -> Optional[str]:
        """
        Enable/disable FortiClient web filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_wf")

    @property
    @pulumi.getter(name="forticlientWfProfile")
    def forticlient_wf_profile(self) -> Optional[str]:
        """
        The FortiClient web filter profile to apply.
        """
        return pulumi.get(self, "forticlient_wf_profile")


@pulumi.output_type
class ProfileForticlientAndroidSettingsForticlientVpnSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMethod":
            suggest = "auth_method"
        elif key == "presharedKey":
            suggest = "preshared_key"
        elif key == "remoteGw":
            suggest = "remote_gw"
        elif key == "sslvpnAccessPort":
            suggest = "sslvpn_access_port"
        elif key == "sslvpnRequireCertificate":
            suggest = "sslvpn_require_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileForticlientAndroidSettingsForticlientVpnSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileForticlientAndroidSettingsForticlientVpnSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileForticlientAndroidSettingsForticlientVpnSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_method: Optional[str] = None,
                 name: Optional[str] = None,
                 preshared_key: Optional[str] = None,
                 remote_gw: Optional[str] = None,
                 sslvpn_access_port: Optional[int] = None,
                 sslvpn_require_certificate: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str auth_method: Authentication method. Valid values: `psk`, `certificate`.
        :param str name: VPN name.
        :param str preshared_key: Pre-shared secret for PSK authentication.
        :param str remote_gw: IP address or FQDN of the remote VPN gateway.
        :param int sslvpn_access_port: SSL VPN access port (1 - 65535).
        :param str sslvpn_require_certificate: Enable/disable requiring SSL VPN client certificate. Valid values: `enable`, `disable`.
        :param str type: VPN type (IPsec or SSL VPN). Valid values: `ipsec`, `ssl`.
        """
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preshared_key is not None:
            pulumi.set(__self__, "preshared_key", preshared_key)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if sslvpn_access_port is not None:
            pulumi.set(__self__, "sslvpn_access_port", sslvpn_access_port)
        if sslvpn_require_certificate is not None:
            pulumi.set(__self__, "sslvpn_require_certificate", sslvpn_require_certificate)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        """
        Authentication method. Valid values: `psk`, `certificate`.
        """
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        VPN name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> Optional[str]:
        """
        Pre-shared secret for PSK authentication.
        """
        return pulumi.get(self, "preshared_key")

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[str]:
        """
        IP address or FQDN of the remote VPN gateway.
        """
        return pulumi.get(self, "remote_gw")

    @property
    @pulumi.getter(name="sslvpnAccessPort")
    def sslvpn_access_port(self) -> Optional[int]:
        """
        SSL VPN access port (1 - 65535).
        """
        return pulumi.get(self, "sslvpn_access_port")

    @property
    @pulumi.getter(name="sslvpnRequireCertificate")
    def sslvpn_require_certificate(self) -> Optional[str]:
        """
        Enable/disable requiring SSL VPN client certificate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sslvpn_require_certificate")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        VPN type (IPsec or SSL VPN). Valid values: `ipsec`, `ssl`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ProfileForticlientIosSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientVpnProvisioning":
            suggest = "client_vpn_provisioning"
        elif key == "clientVpnSettings":
            suggest = "client_vpn_settings"
        elif key == "configurationContent":
            suggest = "configuration_content"
        elif key == "configurationName":
            suggest = "configuration_name"
        elif key == "disableWfWhenProtected":
            suggest = "disable_wf_when_protected"
        elif key == "distributeConfigurationProfile":
            suggest = "distribute_configuration_profile"
        elif key == "forticlientWf":
            suggest = "forticlient_wf"
        elif key == "forticlientWfProfile":
            suggest = "forticlient_wf_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileForticlientIosSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileForticlientIosSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileForticlientIosSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_vpn_provisioning: Optional[str] = None,
                 client_vpn_settings: Optional[Sequence['outputs.ProfileForticlientIosSettingsClientVpnSetting']] = None,
                 configuration_content: Optional[str] = None,
                 configuration_name: Optional[str] = None,
                 disable_wf_when_protected: Optional[str] = None,
                 distribute_configuration_profile: Optional[str] = None,
                 forticlient_wf: Optional[str] = None,
                 forticlient_wf_profile: Optional[str] = None):
        """
        :param str client_vpn_provisioning: FortiClient VPN provisioning. Valid values: `enable`, `disable`.
        :param Sequence['ProfileForticlientIosSettingsClientVpnSettingArgs'] client_vpn_settings: FortiClient VPN settings. The structure of `client_vpn_settings` block is documented below.
        :param str configuration_content: Content of configuration profile.
        :param str configuration_name: Name of configuration profile.
        :param str disable_wf_when_protected: Enable/disable FortiClient web category filtering when protected by FortiGate. Valid values: `enable`, `disable`.
        :param str distribute_configuration_profile: Enable/disable configuration profile (.mobileconfig file) distribution. Valid values: `enable`, `disable`.
        :param str forticlient_wf: Enable/disable FortiClient web filtering. Valid values: `enable`, `disable`.
        :param str forticlient_wf_profile: The FortiClient web filter profile to apply.
        """
        if client_vpn_provisioning is not None:
            pulumi.set(__self__, "client_vpn_provisioning", client_vpn_provisioning)
        if client_vpn_settings is not None:
            pulumi.set(__self__, "client_vpn_settings", client_vpn_settings)
        if configuration_content is not None:
            pulumi.set(__self__, "configuration_content", configuration_content)
        if configuration_name is not None:
            pulumi.set(__self__, "configuration_name", configuration_name)
        if disable_wf_when_protected is not None:
            pulumi.set(__self__, "disable_wf_when_protected", disable_wf_when_protected)
        if distribute_configuration_profile is not None:
            pulumi.set(__self__, "distribute_configuration_profile", distribute_configuration_profile)
        if forticlient_wf is not None:
            pulumi.set(__self__, "forticlient_wf", forticlient_wf)
        if forticlient_wf_profile is not None:
            pulumi.set(__self__, "forticlient_wf_profile", forticlient_wf_profile)

    @property
    @pulumi.getter(name="clientVpnProvisioning")
    def client_vpn_provisioning(self) -> Optional[str]:
        """
        FortiClient VPN provisioning. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "client_vpn_provisioning")

    @property
    @pulumi.getter(name="clientVpnSettings")
    def client_vpn_settings(self) -> Optional[Sequence['outputs.ProfileForticlientIosSettingsClientVpnSetting']]:
        """
        FortiClient VPN settings. The structure of `client_vpn_settings` block is documented below.
        """
        return pulumi.get(self, "client_vpn_settings")

    @property
    @pulumi.getter(name="configurationContent")
    def configuration_content(self) -> Optional[str]:
        """
        Content of configuration profile.
        """
        return pulumi.get(self, "configuration_content")

    @property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> Optional[str]:
        """
        Name of configuration profile.
        """
        return pulumi.get(self, "configuration_name")

    @property
    @pulumi.getter(name="disableWfWhenProtected")
    def disable_wf_when_protected(self) -> Optional[str]:
        """
        Enable/disable FortiClient web category filtering when protected by FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "disable_wf_when_protected")

    @property
    @pulumi.getter(name="distributeConfigurationProfile")
    def distribute_configuration_profile(self) -> Optional[str]:
        """
        Enable/disable configuration profile (.mobileconfig file) distribution. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "distribute_configuration_profile")

    @property
    @pulumi.getter(name="forticlientWf")
    def forticlient_wf(self) -> Optional[str]:
        """
        Enable/disable FortiClient web filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_wf")

    @property
    @pulumi.getter(name="forticlientWfProfile")
    def forticlient_wf_profile(self) -> Optional[str]:
        """
        The FortiClient web filter profile to apply.
        """
        return pulumi.get(self, "forticlient_wf_profile")


@pulumi.output_type
class ProfileForticlientIosSettingsClientVpnSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMethod":
            suggest = "auth_method"
        elif key == "presharedKey":
            suggest = "preshared_key"
        elif key == "remoteGw":
            suggest = "remote_gw"
        elif key == "sslvpnAccessPort":
            suggest = "sslvpn_access_port"
        elif key == "sslvpnRequireCertificate":
            suggest = "sslvpn_require_certificate"
        elif key == "vpnConfigurationContent":
            suggest = "vpn_configuration_content"
        elif key == "vpnConfigurationName":
            suggest = "vpn_configuration_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileForticlientIosSettingsClientVpnSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileForticlientIosSettingsClientVpnSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileForticlientIosSettingsClientVpnSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_method: Optional[str] = None,
                 name: Optional[str] = None,
                 preshared_key: Optional[str] = None,
                 remote_gw: Optional[str] = None,
                 sslvpn_access_port: Optional[int] = None,
                 sslvpn_require_certificate: Optional[str] = None,
                 type: Optional[str] = None,
                 vpn_configuration_content: Optional[str] = None,
                 vpn_configuration_name: Optional[str] = None):
        """
        :param str auth_method: Authentication method. Valid values: `psk`, `certificate`.
        :param str name: VPN name.
        :param str preshared_key: Pre-shared secret for PSK authentication.
        :param str remote_gw: IP address or FQDN of the remote VPN gateway.
        :param int sslvpn_access_port: SSL VPN access port (1 - 65535).
        :param str sslvpn_require_certificate: Enable/disable requiring SSL VPN client certificate. Valid values: `enable`, `disable`.
        :param str type: VPN type (IPsec or SSL VPN). Valid values: `ipsec`, `ssl`.
        :param str vpn_configuration_content: Content of VPN configuration.
        :param str vpn_configuration_name: Name of VPN configuration.
        """
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preshared_key is not None:
            pulumi.set(__self__, "preshared_key", preshared_key)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if sslvpn_access_port is not None:
            pulumi.set(__self__, "sslvpn_access_port", sslvpn_access_port)
        if sslvpn_require_certificate is not None:
            pulumi.set(__self__, "sslvpn_require_certificate", sslvpn_require_certificate)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpn_configuration_content is not None:
            pulumi.set(__self__, "vpn_configuration_content", vpn_configuration_content)
        if vpn_configuration_name is not None:
            pulumi.set(__self__, "vpn_configuration_name", vpn_configuration_name)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        """
        Authentication method. Valid values: `psk`, `certificate`.
        """
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        VPN name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> Optional[str]:
        """
        Pre-shared secret for PSK authentication.
        """
        return pulumi.get(self, "preshared_key")

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[str]:
        """
        IP address or FQDN of the remote VPN gateway.
        """
        return pulumi.get(self, "remote_gw")

    @property
    @pulumi.getter(name="sslvpnAccessPort")
    def sslvpn_access_port(self) -> Optional[int]:
        """
        SSL VPN access port (1 - 65535).
        """
        return pulumi.get(self, "sslvpn_access_port")

    @property
    @pulumi.getter(name="sslvpnRequireCertificate")
    def sslvpn_require_certificate(self) -> Optional[str]:
        """
        Enable/disable requiring SSL VPN client certificate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sslvpn_require_certificate")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        VPN type (IPsec or SSL VPN). Valid values: `ipsec`, `ssl`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpnConfigurationContent")
    def vpn_configuration_content(self) -> Optional[str]:
        """
        Content of VPN configuration.
        """
        return pulumi.get(self, "vpn_configuration_content")

    @property
    @pulumi.getter(name="vpnConfigurationName")
    def vpn_configuration_name(self) -> Optional[str]:
        """
        Name of VPN configuration.
        """
        return pulumi.get(self, "vpn_configuration_name")


@pulumi.output_type
class ProfileForticlientWinmacSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "avRealtimeProtection":
            suggest = "av_realtime_protection"
        elif key == "avSignatureUpToDate":
            suggest = "av_signature_up_to_date"
        elif key == "forticlientApplicationFirewall":
            suggest = "forticlient_application_firewall"
        elif key == "forticlientApplicationFirewallList":
            suggest = "forticlient_application_firewall_list"
        elif key == "forticlientAv":
            suggest = "forticlient_av"
        elif key == "forticlientEmsCompliance":
            suggest = "forticlient_ems_compliance"
        elif key == "forticlientEmsComplianceAction":
            suggest = "forticlient_ems_compliance_action"
        elif key == "forticlientEmsEntries":
            suggest = "forticlient_ems_entries"
        elif key == "forticlientLinuxVer":
            suggest = "forticlient_linux_ver"
        elif key == "forticlientLogUpload":
            suggest = "forticlient_log_upload"
        elif key == "forticlientLogUploadLevel":
            suggest = "forticlient_log_upload_level"
        elif key == "forticlientLogUploadServer":
            suggest = "forticlient_log_upload_server"
        elif key == "forticlientMacVer":
            suggest = "forticlient_mac_ver"
        elif key == "forticlientMinimumSoftwareVersion":
            suggest = "forticlient_minimum_software_version"
        elif key == "forticlientOperatingSystems":
            suggest = "forticlient_operating_systems"
        elif key == "forticlientOwnFiles":
            suggest = "forticlient_own_files"
        elif key == "forticlientRegistrationComplianceAction":
            suggest = "forticlient_registration_compliance_action"
        elif key == "forticlientRegistryEntries":
            suggest = "forticlient_registry_entries"
        elif key == "forticlientRunningApps":
            suggest = "forticlient_running_apps"
        elif key == "forticlientSecurityPosture":
            suggest = "forticlient_security_posture"
        elif key == "forticlientSecurityPostureComplianceAction":
            suggest = "forticlient_security_posture_compliance_action"
        elif key == "forticlientSystemCompliance":
            suggest = "forticlient_system_compliance"
        elif key == "forticlientSystemComplianceAction":
            suggest = "forticlient_system_compliance_action"
        elif key == "forticlientVulnScan":
            suggest = "forticlient_vuln_scan"
        elif key == "forticlientVulnScanComplianceAction":
            suggest = "forticlient_vuln_scan_compliance_action"
        elif key == "forticlientVulnScanEnforce":
            suggest = "forticlient_vuln_scan_enforce"
        elif key == "forticlientVulnScanEnforceGrace":
            suggest = "forticlient_vuln_scan_enforce_grace"
        elif key == "forticlientVulnScanExempt":
            suggest = "forticlient_vuln_scan_exempt"
        elif key == "forticlientWf":
            suggest = "forticlient_wf"
        elif key == "forticlientWfProfile":
            suggest = "forticlient_wf_profile"
        elif key == "forticlientWinVer":
            suggest = "forticlient_win_ver"
        elif key == "osAvSoftwareInstalled":
            suggest = "os_av_software_installed"
        elif key == "sandboxAddress":
            suggest = "sandbox_address"
        elif key == "sandboxAnalysis":
            suggest = "sandbox_analysis"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileForticlientWinmacSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileForticlientWinmacSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileForticlientWinmacSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 av_realtime_protection: Optional[str] = None,
                 av_signature_up_to_date: Optional[str] = None,
                 forticlient_application_firewall: Optional[str] = None,
                 forticlient_application_firewall_list: Optional[str] = None,
                 forticlient_av: Optional[str] = None,
                 forticlient_ems_compliance: Optional[str] = None,
                 forticlient_ems_compliance_action: Optional[str] = None,
                 forticlient_ems_entries: Optional[Sequence['outputs.ProfileForticlientWinmacSettingsForticlientEmsEntry']] = None,
                 forticlient_linux_ver: Optional[str] = None,
                 forticlient_log_upload: Optional[str] = None,
                 forticlient_log_upload_level: Optional[str] = None,
                 forticlient_log_upload_server: Optional[str] = None,
                 forticlient_mac_ver: Optional[str] = None,
                 forticlient_minimum_software_version: Optional[str] = None,
                 forticlient_operating_systems: Optional[Sequence['outputs.ProfileForticlientWinmacSettingsForticlientOperatingSystem']] = None,
                 forticlient_own_files: Optional[Sequence['outputs.ProfileForticlientWinmacSettingsForticlientOwnFile']] = None,
                 forticlient_registration_compliance_action: Optional[str] = None,
                 forticlient_registry_entries: Optional[Sequence['outputs.ProfileForticlientWinmacSettingsForticlientRegistryEntry']] = None,
                 forticlient_running_apps: Optional[Sequence['outputs.ProfileForticlientWinmacSettingsForticlientRunningApp']] = None,
                 forticlient_security_posture: Optional[str] = None,
                 forticlient_security_posture_compliance_action: Optional[str] = None,
                 forticlient_system_compliance: Optional[str] = None,
                 forticlient_system_compliance_action: Optional[str] = None,
                 forticlient_vuln_scan: Optional[str] = None,
                 forticlient_vuln_scan_compliance_action: Optional[str] = None,
                 forticlient_vuln_scan_enforce: Optional[str] = None,
                 forticlient_vuln_scan_enforce_grace: Optional[int] = None,
                 forticlient_vuln_scan_exempt: Optional[str] = None,
                 forticlient_wf: Optional[str] = None,
                 forticlient_wf_profile: Optional[str] = None,
                 forticlient_win_ver: Optional[str] = None,
                 os_av_software_installed: Optional[str] = None,
                 sandbox_address: Optional[str] = None,
                 sandbox_analysis: Optional[str] = None):
        """
        :param str av_realtime_protection: Enable/disable FortiClient AntiVirus real-time protection. Valid values: `enable`, `disable`.
        :param str av_signature_up_to_date: Enable/disable FortiClient AV signature updates. Valid values: `enable`, `disable`.
        :param str forticlient_application_firewall: Enable/disable the FortiClient application firewall. Valid values: `enable`, `disable`.
        :param str forticlient_application_firewall_list: FortiClient application firewall rule list.
        :param str forticlient_av: Enable/disable FortiClient AntiVirus scanning. Valid values: `enable`, `disable`.
        :param str forticlient_ems_compliance: Enable/disable FortiClient Enterprise Management Server (EMS) compliance. Valid values: `enable`, `disable`.
        :param str forticlient_ems_compliance_action: FortiClient EMS compliance action. Valid values: `block`, `warning`.
        :param Sequence['ProfileForticlientWinmacSettingsForticlientEmsEntryArgs'] forticlient_ems_entries: FortiClient EMS entries. The structure of `forticlient_ems_entries` block is documented below.
        :param str forticlient_linux_ver: Minimum FortiClient Linux version.
        :param str forticlient_log_upload: Enable/disable uploading FortiClient logs. Valid values: `enable`, `disable`.
        :param str forticlient_log_upload_level: Select the FortiClient logs to upload. Valid values: `traffic`, `vulnerability`, `event`.
        :param str forticlient_log_upload_server: IP address or FQDN of the server to which to upload FortiClient logs.
        :param str forticlient_mac_ver: Minimum FortiClient Mac OS version.
        :param str forticlient_minimum_software_version: Enable/disable requiring clients to run FortiClient with a minimum software version number. Valid values: `enable`, `disable`.
        :param Sequence['ProfileForticlientWinmacSettingsForticlientOperatingSystemArgs'] forticlient_operating_systems: FortiClient operating system. The structure of `forticlient_operating_system` block is documented below.
        :param Sequence['ProfileForticlientWinmacSettingsForticlientOwnFileArgs'] forticlient_own_files: Checking the path and filename of the FortiClient application. The structure of `forticlient_own_file` block is documented below.
        :param str forticlient_registration_compliance_action: FortiClient registration compliance action. Valid values: `block`, `warning`.
        :param Sequence['ProfileForticlientWinmacSettingsForticlientRegistryEntryArgs'] forticlient_registry_entries: FortiClient registry entry. The structure of `forticlient_registry_entry` block is documented below.
        :param Sequence['ProfileForticlientWinmacSettingsForticlientRunningAppArgs'] forticlient_running_apps: Use FortiClient to verify if the listed applications are running on the client. The structure of `forticlient_running_app` block is documented below.
        :param str forticlient_security_posture: Enable/disable FortiClient security posture check options. Valid values: `enable`, `disable`.
        :param str forticlient_security_posture_compliance_action: FortiClient security posture compliance action. Valid values: `block`, `warning`.
        :param str forticlient_system_compliance: Enable/disable enforcement of FortiClient system compliance. Valid values: `enable`, `disable`.
        :param str forticlient_system_compliance_action: Block or warn clients not compliant with FortiClient requirements. Valid values: `block`, `warning`.
        :param str forticlient_vuln_scan: Enable/disable FortiClient vulnerability scanning. Valid values: `enable`, `disable`.
        :param str forticlient_vuln_scan_compliance_action: FortiClient vulnerability compliance action. Valid values: `block`, `warning`.
        :param str forticlient_vuln_scan_enforce: Configure the level of the vulnerability found that causes a FortiClient vulnerability compliance action. Valid values: `critical`, `high`, `medium`, `low`, `info`.
        :param int forticlient_vuln_scan_enforce_grace: FortiClient vulnerability scan enforcement grace period (0 - 30 days, default = 1).
        :param str forticlient_vuln_scan_exempt: Enable/disable compliance exemption for vulnerabilities that cannot be patched automatically. Valid values: `enable`, `disable`.
        :param str forticlient_wf: Enable/disable FortiClient web filtering. Valid values: `enable`, `disable`.
        :param str forticlient_wf_profile: The FortiClient web filter profile to apply.
        :param str forticlient_win_ver: Minimum FortiClient Windows version.
        :param str os_av_software_installed: Enable/disable checking for OS recognized AntiVirus software. Valid values: `enable`, `disable`.
        :param str sandbox_address: FortiSandbox address.
        :param str sandbox_analysis: Enable/disable sending files to FortiSandbox for analysis. Valid values: `enable`, `disable`.
        """
        if av_realtime_protection is not None:
            pulumi.set(__self__, "av_realtime_protection", av_realtime_protection)
        if av_signature_up_to_date is not None:
            pulumi.set(__self__, "av_signature_up_to_date", av_signature_up_to_date)
        if forticlient_application_firewall is not None:
            pulumi.set(__self__, "forticlient_application_firewall", forticlient_application_firewall)
        if forticlient_application_firewall_list is not None:
            pulumi.set(__self__, "forticlient_application_firewall_list", forticlient_application_firewall_list)
        if forticlient_av is not None:
            pulumi.set(__self__, "forticlient_av", forticlient_av)
        if forticlient_ems_compliance is not None:
            pulumi.set(__self__, "forticlient_ems_compliance", forticlient_ems_compliance)
        if forticlient_ems_compliance_action is not None:
            pulumi.set(__self__, "forticlient_ems_compliance_action", forticlient_ems_compliance_action)
        if forticlient_ems_entries is not None:
            pulumi.set(__self__, "forticlient_ems_entries", forticlient_ems_entries)
        if forticlient_linux_ver is not None:
            pulumi.set(__self__, "forticlient_linux_ver", forticlient_linux_ver)
        if forticlient_log_upload is not None:
            pulumi.set(__self__, "forticlient_log_upload", forticlient_log_upload)
        if forticlient_log_upload_level is not None:
            pulumi.set(__self__, "forticlient_log_upload_level", forticlient_log_upload_level)
        if forticlient_log_upload_server is not None:
            pulumi.set(__self__, "forticlient_log_upload_server", forticlient_log_upload_server)
        if forticlient_mac_ver is not None:
            pulumi.set(__self__, "forticlient_mac_ver", forticlient_mac_ver)
        if forticlient_minimum_software_version is not None:
            pulumi.set(__self__, "forticlient_minimum_software_version", forticlient_minimum_software_version)
        if forticlient_operating_systems is not None:
            pulumi.set(__self__, "forticlient_operating_systems", forticlient_operating_systems)
        if forticlient_own_files is not None:
            pulumi.set(__self__, "forticlient_own_files", forticlient_own_files)
        if forticlient_registration_compliance_action is not None:
            pulumi.set(__self__, "forticlient_registration_compliance_action", forticlient_registration_compliance_action)
        if forticlient_registry_entries is not None:
            pulumi.set(__self__, "forticlient_registry_entries", forticlient_registry_entries)
        if forticlient_running_apps is not None:
            pulumi.set(__self__, "forticlient_running_apps", forticlient_running_apps)
        if forticlient_security_posture is not None:
            pulumi.set(__self__, "forticlient_security_posture", forticlient_security_posture)
        if forticlient_security_posture_compliance_action is not None:
            pulumi.set(__self__, "forticlient_security_posture_compliance_action", forticlient_security_posture_compliance_action)
        if forticlient_system_compliance is not None:
            pulumi.set(__self__, "forticlient_system_compliance", forticlient_system_compliance)
        if forticlient_system_compliance_action is not None:
            pulumi.set(__self__, "forticlient_system_compliance_action", forticlient_system_compliance_action)
        if forticlient_vuln_scan is not None:
            pulumi.set(__self__, "forticlient_vuln_scan", forticlient_vuln_scan)
        if forticlient_vuln_scan_compliance_action is not None:
            pulumi.set(__self__, "forticlient_vuln_scan_compliance_action", forticlient_vuln_scan_compliance_action)
        if forticlient_vuln_scan_enforce is not None:
            pulumi.set(__self__, "forticlient_vuln_scan_enforce", forticlient_vuln_scan_enforce)
        if forticlient_vuln_scan_enforce_grace is not None:
            pulumi.set(__self__, "forticlient_vuln_scan_enforce_grace", forticlient_vuln_scan_enforce_grace)
        if forticlient_vuln_scan_exempt is not None:
            pulumi.set(__self__, "forticlient_vuln_scan_exempt", forticlient_vuln_scan_exempt)
        if forticlient_wf is not None:
            pulumi.set(__self__, "forticlient_wf", forticlient_wf)
        if forticlient_wf_profile is not None:
            pulumi.set(__self__, "forticlient_wf_profile", forticlient_wf_profile)
        if forticlient_win_ver is not None:
            pulumi.set(__self__, "forticlient_win_ver", forticlient_win_ver)
        if os_av_software_installed is not None:
            pulumi.set(__self__, "os_av_software_installed", os_av_software_installed)
        if sandbox_address is not None:
            pulumi.set(__self__, "sandbox_address", sandbox_address)
        if sandbox_analysis is not None:
            pulumi.set(__self__, "sandbox_analysis", sandbox_analysis)

    @property
    @pulumi.getter(name="avRealtimeProtection")
    def av_realtime_protection(self) -> Optional[str]:
        """
        Enable/disable FortiClient AntiVirus real-time protection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "av_realtime_protection")

    @property
    @pulumi.getter(name="avSignatureUpToDate")
    def av_signature_up_to_date(self) -> Optional[str]:
        """
        Enable/disable FortiClient AV signature updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "av_signature_up_to_date")

    @property
    @pulumi.getter(name="forticlientApplicationFirewall")
    def forticlient_application_firewall(self) -> Optional[str]:
        """
        Enable/disable the FortiClient application firewall. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_application_firewall")

    @property
    @pulumi.getter(name="forticlientApplicationFirewallList")
    def forticlient_application_firewall_list(self) -> Optional[str]:
        """
        FortiClient application firewall rule list.
        """
        return pulumi.get(self, "forticlient_application_firewall_list")

    @property
    @pulumi.getter(name="forticlientAv")
    def forticlient_av(self) -> Optional[str]:
        """
        Enable/disable FortiClient AntiVirus scanning. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_av")

    @property
    @pulumi.getter(name="forticlientEmsCompliance")
    def forticlient_ems_compliance(self) -> Optional[str]:
        """
        Enable/disable FortiClient Enterprise Management Server (EMS) compliance. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_ems_compliance")

    @property
    @pulumi.getter(name="forticlientEmsComplianceAction")
    def forticlient_ems_compliance_action(self) -> Optional[str]:
        """
        FortiClient EMS compliance action. Valid values: `block`, `warning`.
        """
        return pulumi.get(self, "forticlient_ems_compliance_action")

    @property
    @pulumi.getter(name="forticlientEmsEntries")
    def forticlient_ems_entries(self) -> Optional[Sequence['outputs.ProfileForticlientWinmacSettingsForticlientEmsEntry']]:
        """
        FortiClient EMS entries. The structure of `forticlient_ems_entries` block is documented below.
        """
        return pulumi.get(self, "forticlient_ems_entries")

    @property
    @pulumi.getter(name="forticlientLinuxVer")
    def forticlient_linux_ver(self) -> Optional[str]:
        """
        Minimum FortiClient Linux version.
        """
        return pulumi.get(self, "forticlient_linux_ver")

    @property
    @pulumi.getter(name="forticlientLogUpload")
    def forticlient_log_upload(self) -> Optional[str]:
        """
        Enable/disable uploading FortiClient logs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_log_upload")

    @property
    @pulumi.getter(name="forticlientLogUploadLevel")
    def forticlient_log_upload_level(self) -> Optional[str]:
        """
        Select the FortiClient logs to upload. Valid values: `traffic`, `vulnerability`, `event`.
        """
        return pulumi.get(self, "forticlient_log_upload_level")

    @property
    @pulumi.getter(name="forticlientLogUploadServer")
    def forticlient_log_upload_server(self) -> Optional[str]:
        """
        IP address or FQDN of the server to which to upload FortiClient logs.
        """
        return pulumi.get(self, "forticlient_log_upload_server")

    @property
    @pulumi.getter(name="forticlientMacVer")
    def forticlient_mac_ver(self) -> Optional[str]:
        """
        Minimum FortiClient Mac OS version.
        """
        return pulumi.get(self, "forticlient_mac_ver")

    @property
    @pulumi.getter(name="forticlientMinimumSoftwareVersion")
    def forticlient_minimum_software_version(self) -> Optional[str]:
        """
        Enable/disable requiring clients to run FortiClient with a minimum software version number. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_minimum_software_version")

    @property
    @pulumi.getter(name="forticlientOperatingSystems")
    def forticlient_operating_systems(self) -> Optional[Sequence['outputs.ProfileForticlientWinmacSettingsForticlientOperatingSystem']]:
        """
        FortiClient operating system. The structure of `forticlient_operating_system` block is documented below.
        """
        return pulumi.get(self, "forticlient_operating_systems")

    @property
    @pulumi.getter(name="forticlientOwnFiles")
    def forticlient_own_files(self) -> Optional[Sequence['outputs.ProfileForticlientWinmacSettingsForticlientOwnFile']]:
        """
        Checking the path and filename of the FortiClient application. The structure of `forticlient_own_file` block is documented below.
        """
        return pulumi.get(self, "forticlient_own_files")

    @property
    @pulumi.getter(name="forticlientRegistrationComplianceAction")
    def forticlient_registration_compliance_action(self) -> Optional[str]:
        """
        FortiClient registration compliance action. Valid values: `block`, `warning`.
        """
        return pulumi.get(self, "forticlient_registration_compliance_action")

    @property
    @pulumi.getter(name="forticlientRegistryEntries")
    def forticlient_registry_entries(self) -> Optional[Sequence['outputs.ProfileForticlientWinmacSettingsForticlientRegistryEntry']]:
        """
        FortiClient registry entry. The structure of `forticlient_registry_entry` block is documented below.
        """
        return pulumi.get(self, "forticlient_registry_entries")

    @property
    @pulumi.getter(name="forticlientRunningApps")
    def forticlient_running_apps(self) -> Optional[Sequence['outputs.ProfileForticlientWinmacSettingsForticlientRunningApp']]:
        """
        Use FortiClient to verify if the listed applications are running on the client. The structure of `forticlient_running_app` block is documented below.
        """
        return pulumi.get(self, "forticlient_running_apps")

    @property
    @pulumi.getter(name="forticlientSecurityPosture")
    def forticlient_security_posture(self) -> Optional[str]:
        """
        Enable/disable FortiClient security posture check options. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_security_posture")

    @property
    @pulumi.getter(name="forticlientSecurityPostureComplianceAction")
    def forticlient_security_posture_compliance_action(self) -> Optional[str]:
        """
        FortiClient security posture compliance action. Valid values: `block`, `warning`.
        """
        return pulumi.get(self, "forticlient_security_posture_compliance_action")

    @property
    @pulumi.getter(name="forticlientSystemCompliance")
    def forticlient_system_compliance(self) -> Optional[str]:
        """
        Enable/disable enforcement of FortiClient system compliance. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_system_compliance")

    @property
    @pulumi.getter(name="forticlientSystemComplianceAction")
    def forticlient_system_compliance_action(self) -> Optional[str]:
        """
        Block or warn clients not compliant with FortiClient requirements. Valid values: `block`, `warning`.
        """
        return pulumi.get(self, "forticlient_system_compliance_action")

    @property
    @pulumi.getter(name="forticlientVulnScan")
    def forticlient_vuln_scan(self) -> Optional[str]:
        """
        Enable/disable FortiClient vulnerability scanning. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_vuln_scan")

    @property
    @pulumi.getter(name="forticlientVulnScanComplianceAction")
    def forticlient_vuln_scan_compliance_action(self) -> Optional[str]:
        """
        FortiClient vulnerability compliance action. Valid values: `block`, `warning`.
        """
        return pulumi.get(self, "forticlient_vuln_scan_compliance_action")

    @property
    @pulumi.getter(name="forticlientVulnScanEnforce")
    def forticlient_vuln_scan_enforce(self) -> Optional[str]:
        """
        Configure the level of the vulnerability found that causes a FortiClient vulnerability compliance action. Valid values: `critical`, `high`, `medium`, `low`, `info`.
        """
        return pulumi.get(self, "forticlient_vuln_scan_enforce")

    @property
    @pulumi.getter(name="forticlientVulnScanEnforceGrace")
    def forticlient_vuln_scan_enforce_grace(self) -> Optional[int]:
        """
        FortiClient vulnerability scan enforcement grace period (0 - 30 days, default = 1).
        """
        return pulumi.get(self, "forticlient_vuln_scan_enforce_grace")

    @property
    @pulumi.getter(name="forticlientVulnScanExempt")
    def forticlient_vuln_scan_exempt(self) -> Optional[str]:
        """
        Enable/disable compliance exemption for vulnerabilities that cannot be patched automatically. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_vuln_scan_exempt")

    @property
    @pulumi.getter(name="forticlientWf")
    def forticlient_wf(self) -> Optional[str]:
        """
        Enable/disable FortiClient web filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_wf")

    @property
    @pulumi.getter(name="forticlientWfProfile")
    def forticlient_wf_profile(self) -> Optional[str]:
        """
        The FortiClient web filter profile to apply.
        """
        return pulumi.get(self, "forticlient_wf_profile")

    @property
    @pulumi.getter(name="forticlientWinVer")
    def forticlient_win_ver(self) -> Optional[str]:
        """
        Minimum FortiClient Windows version.
        """
        return pulumi.get(self, "forticlient_win_ver")

    @property
    @pulumi.getter(name="osAvSoftwareInstalled")
    def os_av_software_installed(self) -> Optional[str]:
        """
        Enable/disable checking for OS recognized AntiVirus software. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "os_av_software_installed")

    @property
    @pulumi.getter(name="sandboxAddress")
    def sandbox_address(self) -> Optional[str]:
        """
        FortiSandbox address.
        """
        return pulumi.get(self, "sandbox_address")

    @property
    @pulumi.getter(name="sandboxAnalysis")
    def sandbox_analysis(self) -> Optional[str]:
        """
        Enable/disable sending files to FortiSandbox for analysis. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sandbox_analysis")


@pulumi.output_type
class ProfileForticlientWinmacSettingsForticlientEmsEntry(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: FortiClient EMS name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        FortiClient EMS name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProfileForticlientWinmacSettingsForticlientOperatingSystem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osName":
            suggest = "os_name"
        elif key == "osType":
            suggest = "os_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileForticlientWinmacSettingsForticlientOperatingSystem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileForticlientWinmacSettingsForticlientOperatingSystem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileForticlientWinmacSettingsForticlientOperatingSystem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 os_name: Optional[str] = None,
                 os_type: Optional[str] = None):
        """
        :param int id: Operating system entry ID.
        :param str os_name: Customize operating system name or Mac OS format:x.x.x
        :param str os_type: Operating system type. Valid values: `custom`, `mac-os`, `win-7`, `win-80`, `win-81`, `win-10`, `win-2000`, `win-home-svr`, `win-svr-10`, `win-svr-2003`, `win-svr-2003-r2`, `win-svr-2008`, `win-svr-2008-r2`, `win-svr-2012`, `win-svr-2012-r2`, `win-sto-svr-2003`, `win-vista`, `win-xp`, `ubuntu-linux`, `centos-linux`, `redhat-linux`, `fedora-linux`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if os_name is not None:
            pulumi.set(__self__, "os_name", os_name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Operating system entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> Optional[str]:
        """
        Customize operating system name or Mac OS format:x.x.x
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[str]:
        """
        Operating system type. Valid values: `custom`, `mac-os`, `win-7`, `win-80`, `win-81`, `win-10`, `win-2000`, `win-home-svr`, `win-svr-10`, `win-svr-2003`, `win-svr-2003-r2`, `win-svr-2008`, `win-svr-2008-r2`, `win-svr-2012`, `win-svr-2012-r2`, `win-sto-svr-2003`, `win-vista`, `win-xp`, `ubuntu-linux`, `centos-linux`, `redhat-linux`, `fedora-linux`.
        """
        return pulumi.get(self, "os_type")


@pulumi.output_type
class ProfileForticlientWinmacSettingsForticlientOwnFile(dict):
    def __init__(__self__, *,
                 file: Optional[str] = None,
                 id: Optional[int] = None):
        """
        :param str file: File path and name.
        :param int id: File ID.
        """
        if file is not None:
            pulumi.set(__self__, "file", file)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def file(self) -> Optional[str]:
        """
        File path and name.
        """
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        File ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ProfileForticlientWinmacSettingsForticlientRegistryEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "registryEntry":
            suggest = "registry_entry"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileForticlientWinmacSettingsForticlientRegistryEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileForticlientWinmacSettingsForticlientRegistryEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileForticlientWinmacSettingsForticlientRegistryEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 registry_entry: Optional[str] = None):
        """
        :param int id: Registry entry ID.
        :param str registry_entry: Registry entry.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if registry_entry is not None:
            pulumi.set(__self__, "registry_entry", registry_entry)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Registry entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="registryEntry")
    def registry_entry(self) -> Optional[str]:
        """
        Registry entry.
        """
        return pulumi.get(self, "registry_entry")


@pulumi.output_type
class ProfileForticlientWinmacSettingsForticlientRunningApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appName":
            suggest = "app_name"
        elif key == "appSha256Signature":
            suggest = "app_sha256_signature"
        elif key == "appSha256Signature2":
            suggest = "app_sha256_signature2"
        elif key == "appSha256Signature3":
            suggest = "app_sha256_signature3"
        elif key == "appSha256Signature4":
            suggest = "app_sha256_signature4"
        elif key == "applicationCheckRule":
            suggest = "application_check_rule"
        elif key == "processName":
            suggest = "process_name"
        elif key == "processName2":
            suggest = "process_name2"
        elif key == "processName3":
            suggest = "process_name3"
        elif key == "processName4":
            suggest = "process_name4"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileForticlientWinmacSettingsForticlientRunningApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileForticlientWinmacSettingsForticlientRunningApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileForticlientWinmacSettingsForticlientRunningApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_name: Optional[str] = None,
                 app_sha256_signature: Optional[str] = None,
                 app_sha256_signature2: Optional[str] = None,
                 app_sha256_signature3: Optional[str] = None,
                 app_sha256_signature4: Optional[str] = None,
                 application_check_rule: Optional[str] = None,
                 id: Optional[int] = None,
                 process_name: Optional[str] = None,
                 process_name2: Optional[str] = None,
                 process_name3: Optional[str] = None,
                 process_name4: Optional[str] = None):
        """
        :param str app_name: Application name.
        :param str app_sha256_signature: App's SHA256 signature.
        :param str app_sha256_signature2: App's SHA256 Signature.
        :param str app_sha256_signature3: App's SHA256 Signature.
        :param str app_sha256_signature4: App's SHA256 Signature.
        :param str application_check_rule: Application check rule. Valid values: `present`, `absent`.
        :param int id: Application ID.
        :param str process_name: Process name.
        :param str process_name2: Process name.
        :param str process_name3: Process name.
        :param str process_name4: Process name.
        """
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if app_sha256_signature is not None:
            pulumi.set(__self__, "app_sha256_signature", app_sha256_signature)
        if app_sha256_signature2 is not None:
            pulumi.set(__self__, "app_sha256_signature2", app_sha256_signature2)
        if app_sha256_signature3 is not None:
            pulumi.set(__self__, "app_sha256_signature3", app_sha256_signature3)
        if app_sha256_signature4 is not None:
            pulumi.set(__self__, "app_sha256_signature4", app_sha256_signature4)
        if application_check_rule is not None:
            pulumi.set(__self__, "application_check_rule", application_check_rule)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if process_name is not None:
            pulumi.set(__self__, "process_name", process_name)
        if process_name2 is not None:
            pulumi.set(__self__, "process_name2", process_name2)
        if process_name3 is not None:
            pulumi.set(__self__, "process_name3", process_name3)
        if process_name4 is not None:
            pulumi.set(__self__, "process_name4", process_name4)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        """
        Application name.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter(name="appSha256Signature")
    def app_sha256_signature(self) -> Optional[str]:
        """
        App's SHA256 signature.
        """
        return pulumi.get(self, "app_sha256_signature")

    @property
    @pulumi.getter(name="appSha256Signature2")
    def app_sha256_signature2(self) -> Optional[str]:
        """
        App's SHA256 Signature.
        """
        return pulumi.get(self, "app_sha256_signature2")

    @property
    @pulumi.getter(name="appSha256Signature3")
    def app_sha256_signature3(self) -> Optional[str]:
        """
        App's SHA256 Signature.
        """
        return pulumi.get(self, "app_sha256_signature3")

    @property
    @pulumi.getter(name="appSha256Signature4")
    def app_sha256_signature4(self) -> Optional[str]:
        """
        App's SHA256 Signature.
        """
        return pulumi.get(self, "app_sha256_signature4")

    @property
    @pulumi.getter(name="applicationCheckRule")
    def application_check_rule(self) -> Optional[str]:
        """
        Application check rule. Valid values: `present`, `absent`.
        """
        return pulumi.get(self, "application_check_rule")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Application ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="processName")
    def process_name(self) -> Optional[str]:
        """
        Process name.
        """
        return pulumi.get(self, "process_name")

    @property
    @pulumi.getter(name="processName2")
    def process_name2(self) -> Optional[str]:
        """
        Process name.
        """
        return pulumi.get(self, "process_name2")

    @property
    @pulumi.getter(name="processName3")
    def process_name3(self) -> Optional[str]:
        """
        Process name.
        """
        return pulumi.get(self, "process_name3")

    @property
    @pulumi.getter(name="processName4")
    def process_name4(self) -> Optional[str]:
        """
        Process name.
        """
        return pulumi.get(self, "process_name4")


@pulumi.output_type
class ProfileOnNetAddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address object from available options.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address object from available options.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProfileSrcAddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address object from available options.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address object from available options.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProfileUser(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: User name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        User name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProfileUserGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: User group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        User group name.
        """
        return pulumi.get(self, "name")



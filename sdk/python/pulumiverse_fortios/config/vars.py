# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

import types

__config__ = pulumi.Config('fortios')


class _ExportableConfig(types.ModuleType):
    @property
    def cabundlecontent(self) -> Optional[str]:
        """
        CA Bundle file content
        """
        return __config__.get('cabundlecontent')

    @property
    def cabundlefile(self) -> Optional[str]:
        """
        CA Bundle file
        """
        return __config__.get('cabundlefile')

    @property
    def cacert(self) -> Optional[str]:
        """
        CA certtificate(Optional)
        """
        return __config__.get('cacert')

    @property
    def clientcert(self) -> Optional[str]:
        """
        User certificate
        """
        return __config__.get('clientcert')

    @property
    def clientkey(self) -> Optional[str]:
        """
        User private key
        """
        return __config__.get('clientkey')

    @property
    def fmg_cabundlefile(self) -> Optional[str]:
        """
        CA Bundle file
        """
        return __config__.get('fmgCabundlefile')

    @property
    def fmg_hostname(self) -> Optional[str]:
        """
        Hostname/IP address of the FortiManager to connect to
        """
        return __config__.get('fmgHostname')

    @property
    def fmg_insecure(self) -> Optional[bool]:
        return __config__.get_bool('fmgInsecure')

    @property
    def fmg_passwd(self) -> Optional[str]:
        return __config__.get('fmgPasswd')

    @property
    def fmg_username(self) -> Optional[str]:
        return __config__.get('fmgUsername')

    @property
    def hostname(self) -> Optional[str]:
        """
        The hostname/IP address of the FortiOS to be connected
        """
        return __config__.get('hostname')

    @property
    def http_proxy(self) -> Optional[str]:
        """
        HTTP proxy address
        """
        return __config__.get('httpProxy')

    @property
    def insecure(self) -> Optional[bool]:
        return __config__.get_bool('insecure')

    @property
    def peerauth(self) -> Optional[str]:
        """
        Enable/disable peer authentication, can be 'enable' or 'disable'
        """
        return __config__.get('peerauth')

    @property
    def token(self) -> Optional[str]:
        return __config__.get('token')

    @property
    def vdom(self) -> Optional[str]:
        return __config__.get('vdom')


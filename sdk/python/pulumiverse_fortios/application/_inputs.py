# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GroupApplicationArgs',
    'GroupCategoryArgs',
    'GroupRiskArgs',
    'ListDefaultNetworkServiceArgs',
    'ListEntryArgs',
    'ListEntryApplicationArgs',
    'ListEntryCategoryArgs',
    'ListEntryExclusionArgs',
    'ListEntryParameterArgs',
    'ListEntryParameterMemberArgs',
    'ListEntryRiskArgs',
    'ListEntrySubCategoryArgs',
    'NameMetadataArgs',
    'NameParameterArgs',
]

@pulumi.input_type
class GroupApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Application IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Application IDs.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GroupCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Category IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Category IDs.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GroupRiskArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] level: Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
        """
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[int]]:
        """
        Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "level", value)


@pulumi.input_type
class ListDefaultNetworkServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 services: Optional[pulumi.Input[str]] = None,
                 violation_action: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[int] port: Port number.
        :param pulumi.Input[str] services: Network protocols. Valid values: `http`, `ssh`, `telnet`, `ftp`, `dns`, `smtp`, `pop3`, `imap`, `snmp`, `nntp`, `https`.
        :param pulumi.Input[str] violation_action: Action for protocols not white listed under selected port. Valid values: `pass`, `monitor`, `block`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if violation_action is not None:
            pulumi.set(__self__, "violation_action", violation_action)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[str]]:
        """
        Network protocols. Valid values: `http`, `ssh`, `telnet`, `ftp`, `dns`, `smtp`, `pop3`, `imap`, `snmp`, `nntp`, `https`.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="violationAction")
    def violation_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for protocols not white listed under selected port. Valid values: `pass`, `monitor`, `block`.
        """
        return pulumi.get(self, "violation_action")

    @violation_action.setter
    def violation_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "violation_action", value)


@pulumi.input_type
class ListEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryApplicationArgs']]]] = None,
                 behavior: Optional[pulumi.Input[str]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryCategoryArgs']]]] = None,
                 exclusions: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryExclusionArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_packet: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryParameterArgs']]]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 popularity: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[str]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 rate_count: Optional[pulumi.Input[int]] = None,
                 rate_duration: Optional[pulumi.Input[int]] = None,
                 rate_mode: Optional[pulumi.Input[str]] = None,
                 rate_track: Optional[pulumi.Input[str]] = None,
                 risks: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryRiskArgs']]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 shaper: Optional[pulumi.Input[str]] = None,
                 shaper_reverse: Optional[pulumi.Input[str]] = None,
                 sub_categories: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntrySubCategoryArgs']]]] = None,
                 technology: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Pass or block traffic, or reset connection for traffic from this application. Valid values: `pass`, `block`, `reset`.
        :param pulumi.Input[Sequence[pulumi.Input['ListEntryApplicationArgs']]] applications: ID of allowed applications. The structure of `application` block is documented below.
        :param pulumi.Input[str] behavior: Application behavior filter.
        :param pulumi.Input[Sequence[pulumi.Input['ListEntryCategoryArgs']]] categories: Category ID list. The structure of `category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ListEntryExclusionArgs']]] exclusions: ID of excluded applications. The structure of `exclusion` block is documented below.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] log: Enable/disable logging for this application list. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_packet: Enable/disable packet logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ListEntryParameterArgs']]] parameters: Application parameters. The structure of `parameters` block is documented below.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper.
        :param pulumi.Input[str] popularity: Application popularity filter (1 - 5, from least to most popular). Valid values: `1`, `2`, `3`, `4`, `5`.
        :param pulumi.Input[str] protocols: Application protocol filter.
        :param pulumi.Input[str] quarantine: Quarantine method. Valid values: `none`, `attacker`.
        :param pulumi.Input[str] quarantine_expiry: Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        :param pulumi.Input[str] quarantine_log: Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] rate_count: Count of the rate.
        :param pulumi.Input[int] rate_duration: Duration (sec) of the rate.
        :param pulumi.Input[str] rate_mode: Rate limit mode. Valid values: `periodical`, `continuous`.
        :param pulumi.Input[str] rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
        :param pulumi.Input[Sequence[pulumi.Input['ListEntryRiskArgs']]] risks: Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical). The structure of `risk` block is documented below.
        :param pulumi.Input[int] session_ttl: Session TTL (0 = default).
        :param pulumi.Input[str] shaper: Traffic shaper.
        :param pulumi.Input[str] shaper_reverse: Reverse traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input['ListEntrySubCategoryArgs']]] sub_categories: Application Sub-category ID list. The structure of `sub_category` block is documented below.
        :param pulumi.Input[str] technology: Application technology filter.
        :param pulumi.Input[str] vendor: Application vendor filter.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if per_ip_shaper is not None:
            pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if popularity is not None:
            pulumi.set(__self__, "popularity", popularity)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if rate_count is not None:
            pulumi.set(__self__, "rate_count", rate_count)
        if rate_duration is not None:
            pulumi.set(__self__, "rate_duration", rate_duration)
        if rate_mode is not None:
            pulumi.set(__self__, "rate_mode", rate_mode)
        if rate_track is not None:
            pulumi.set(__self__, "rate_track", rate_track)
        if risks is not None:
            pulumi.set(__self__, "risks", risks)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if shaper is not None:
            pulumi.set(__self__, "shaper", shaper)
        if shaper_reverse is not None:
            pulumi.set(__self__, "shaper_reverse", shaper_reverse)
        if sub_categories is not None:
            pulumi.set(__self__, "sub_categories", sub_categories)
        if technology is not None:
            pulumi.set(__self__, "technology", technology)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Pass or block traffic, or reset connection for traffic from this application. Valid values: `pass`, `block`, `reset`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryApplicationArgs']]]]:
        """
        ID of allowed applications. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[pulumi.Input[str]]:
        """
        Application behavior filter.
        """
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryCategoryArgs']]]]:
        """
        Category ID list. The structure of `category` block is documented below.
        """
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryCategoryArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryExclusionArgs']]]]:
        """
        ID of excluded applications. The structure of `exclusion` block is documented below.
        """
        return pulumi.get(self, "exclusions")

    @exclusions.setter
    def exclusions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryExclusionArgs']]]]):
        pulumi.set(self, "exclusions", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging for this application list. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable packet logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_packet")

    @log_packet.setter
    def log_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_packet", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryParameterArgs']]]]:
        """
        Application parameters. The structure of `parameters` block is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shaper")

    @per_ip_shaper.setter
    def per_ip_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_ip_shaper", value)

    @property
    @pulumi.getter
    def popularity(self) -> Optional[pulumi.Input[str]]:
        """
        Application popularity filter (1 - 5, from least to most popular). Valid values: `1`, `2`, `3`, `4`, `5`.
        """
        return pulumi.get(self, "popularity")

    @popularity.setter
    def popularity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "popularity", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[str]]:
        """
        Application protocol filter.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine method. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        """
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter(name="rateCount")
    def rate_count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of the rate.
        """
        return pulumi.get(self, "rate_count")

    @rate_count.setter
    def rate_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate_count", value)

    @property
    @pulumi.getter(name="rateDuration")
    def rate_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Duration (sec) of the rate.
        """
        return pulumi.get(self, "rate_duration")

    @rate_duration.setter
    def rate_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate_duration", value)

    @property
    @pulumi.getter(name="rateMode")
    def rate_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Rate limit mode. Valid values: `periodical`, `continuous`.
        """
        return pulumi.get(self, "rate_mode")

    @rate_mode.setter
    def rate_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_mode", value)

    @property
    @pulumi.getter(name="rateTrack")
    def rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
        """
        return pulumi.get(self, "rate_track")

    @rate_track.setter
    def rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_track", value)

    @property
    @pulumi.getter
    def risks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryRiskArgs']]]]:
        """
        Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical). The structure of `risk` block is documented below.
        """
        return pulumi.get(self, "risks")

    @risks.setter
    def risks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryRiskArgs']]]]):
        pulumi.set(self, "risks", value)

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Session TTL (0 = default).
        """
        return pulumi.get(self, "session_ttl")

    @session_ttl.setter
    def session_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_ttl", value)

    @property
    @pulumi.getter
    def shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic shaper.
        """
        return pulumi.get(self, "shaper")

    @shaper.setter
    def shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shaper", value)

    @property
    @pulumi.getter(name="shaperReverse")
    def shaper_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "shaper_reverse")

    @shaper_reverse.setter
    def shaper_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shaper_reverse", value)

    @property
    @pulumi.getter(name="subCategories")
    def sub_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ListEntrySubCategoryArgs']]]]:
        """
        Application Sub-category ID list. The structure of `sub_category` block is documented below.
        """
        return pulumi.get(self, "sub_categories")

    @sub_categories.setter
    def sub_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntrySubCategoryArgs']]]]):
        pulumi.set(self, "sub_categories", value)

    @property
    @pulumi.getter
    def technology(self) -> Optional[pulumi.Input[str]]:
        """
        Application technology filter.
        """
        return pulumi.get(self, "technology")

    @technology.setter
    def technology(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "technology", value)

    @property
    @pulumi.getter
    def vendor(self) -> Optional[pulumi.Input[str]]:
        """
        Application vendor filter.
        """
        return pulumi.get(self, "vendor")

    @vendor.setter
    def vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor", value)


@pulumi.input_type
class ListEntryApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Application IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Application IDs.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ListEntryCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Application category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Application category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ListEntryExclusionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Excluded application IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Excluded application IDs.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ListEntryParameterArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryParameterMemberArgs']]]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Parameter ID.
        :param pulumi.Input[Sequence[pulumi.Input['ListEntryParameterMemberArgs']]] members: Parameter tuple members. The structure of `members` block is documented below.
        :param pulumi.Input[str] value: Parameter value.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Parameter ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryParameterMemberArgs']]]]:
        """
        Parameter tuple members. The structure of `members` block is documented below.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryParameterMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ListEntryParameterMemberArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Parameter.
        :param pulumi.Input[str] name: Parameter name.
        :param pulumi.Input[str] value: Parameter value.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Parameter.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ListEntryRiskArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] level: Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
        """
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[int]]:
        """
        Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "level", value)


@pulumi.input_type
class ListEntrySubCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Application sub-category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Application sub-category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class NameMetadataArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 metaid: Optional[pulumi.Input[int]] = None,
                 valueid: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[int] metaid: Meta ID.
        :param pulumi.Input[int] valueid: Value ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metaid is not None:
            pulumi.set(__self__, "metaid", metaid)
        if valueid is not None:
            pulumi.set(__self__, "valueid", valueid)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def metaid(self) -> Optional[pulumi.Input[int]]:
        """
        Meta ID.
        """
        return pulumi.get(self, "metaid")

    @metaid.setter
    def metaid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metaid", value)

    @property
    @pulumi.getter
    def valueid(self) -> Optional[pulumi.Input[int]]:
        """
        Value ID.
        """
        return pulumi.get(self, "valueid")

    @valueid.setter
    def valueid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "valueid", value)


@pulumi.input_type
class NameParameterArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Parameter name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)



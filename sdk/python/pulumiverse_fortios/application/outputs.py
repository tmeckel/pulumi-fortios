# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GroupApplication',
    'GroupCategory',
    'GroupRisk',
    'ListDefaultNetworkService',
    'ListEntry',
    'ListEntryApplication',
    'ListEntryCategory',
    'ListEntryExclusion',
    'ListEntryParameter',
    'ListEntryParameterMember',
    'ListEntryRisk',
    'ListEntrySubCategory',
    'NameMetadata',
    'NameParameter',
]

@pulumi.output_type
class GroupApplication(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Application IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Application IDs.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GroupCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Category IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Category IDs.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GroupRisk(dict):
    def __init__(__self__, *,
                 level: Optional[int] = None):
        """
        :param int level: Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
        """
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def level(self) -> Optional[int]:
        """
        Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
        """
        return pulumi.get(self, "level")


@pulumi.output_type
class ListDefaultNetworkService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "violationAction":
            suggest = "violation_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListDefaultNetworkService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListDefaultNetworkService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListDefaultNetworkService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 port: Optional[int] = None,
                 services: Optional[str] = None,
                 violation_action: Optional[str] = None):
        """
        :param int id: Entry ID.
        :param int port: Port number.
        :param str services: Network protocols. Valid values: `http`, `ssh`, `telnet`, `ftp`, `dns`, `smtp`, `pop3`, `imap`, `snmp`, `nntp`, `https`.
        :param str violation_action: Action for protocols not white listed under selected port. Valid values: `pass`, `monitor`, `block`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if violation_action is not None:
            pulumi.set(__self__, "violation_action", violation_action)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port number.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def services(self) -> Optional[str]:
        """
        Network protocols. Valid values: `http`, `ssh`, `telnet`, `ftp`, `dns`, `smtp`, `pop3`, `imap`, `snmp`, `nntp`, `https`.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="violationAction")
    def violation_action(self) -> Optional[str]:
        """
        Action for protocols not white listed under selected port. Valid values: `pass`, `monitor`, `block`.
        """
        return pulumi.get(self, "violation_action")


@pulumi.output_type
class ListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logPacket":
            suggest = "log_packet"
        elif key == "perIpShaper":
            suggest = "per_ip_shaper"
        elif key == "quarantineExpiry":
            suggest = "quarantine_expiry"
        elif key == "quarantineLog":
            suggest = "quarantine_log"
        elif key == "rateCount":
            suggest = "rate_count"
        elif key == "rateDuration":
            suggest = "rate_duration"
        elif key == "rateMode":
            suggest = "rate_mode"
        elif key == "rateTrack":
            suggest = "rate_track"
        elif key == "sessionTtl":
            suggest = "session_ttl"
        elif key == "shaperReverse":
            suggest = "shaper_reverse"
        elif key == "subCategories":
            suggest = "sub_categories"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 applications: Optional[Sequence['outputs.ListEntryApplication']] = None,
                 behavior: Optional[str] = None,
                 categories: Optional[Sequence['outputs.ListEntryCategory']] = None,
                 exclusions: Optional[Sequence['outputs.ListEntryExclusion']] = None,
                 id: Optional[int] = None,
                 log: Optional[str] = None,
                 log_packet: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ListEntryParameter']] = None,
                 per_ip_shaper: Optional[str] = None,
                 popularity: Optional[str] = None,
                 protocols: Optional[str] = None,
                 quarantine: Optional[str] = None,
                 quarantine_expiry: Optional[str] = None,
                 quarantine_log: Optional[str] = None,
                 rate_count: Optional[int] = None,
                 rate_duration: Optional[int] = None,
                 rate_mode: Optional[str] = None,
                 rate_track: Optional[str] = None,
                 risks: Optional[Sequence['outputs.ListEntryRisk']] = None,
                 session_ttl: Optional[int] = None,
                 shaper: Optional[str] = None,
                 shaper_reverse: Optional[str] = None,
                 sub_categories: Optional[Sequence['outputs.ListEntrySubCategory']] = None,
                 technology: Optional[str] = None,
                 vendor: Optional[str] = None):
        """
        :param str action: Pass or block traffic, or reset connection for traffic from this application. Valid values: `pass`, `block`, `reset`.
        :param Sequence['ListEntryApplicationArgs'] applications: ID of allowed applications. The structure of `application` block is documented below.
        :param str behavior: Application behavior filter.
        :param Sequence['ListEntryCategoryArgs'] categories: Category ID list. The structure of `category` block is documented below.
        :param Sequence['ListEntryExclusionArgs'] exclusions: ID of excluded applications. The structure of `exclusion` block is documented below.
        :param int id: Entry ID.
        :param str log: Enable/disable logging for this application list. Valid values: `disable`, `enable`.
        :param str log_packet: Enable/disable packet logging. Valid values: `disable`, `enable`.
        :param Sequence['ListEntryParameterArgs'] parameters: Application parameters. The structure of `parameters` block is documented below.
        :param str per_ip_shaper: Per-IP traffic shaper.
        :param str popularity: Application popularity filter (1 - 5, from least to most popular). Valid values: `1`, `2`, `3`, `4`, `5`.
        :param str protocols: Application protocol filter.
        :param str quarantine: Quarantine method. Valid values: `none`, `attacker`.
        :param str quarantine_expiry: Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        :param str quarantine_log: Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        :param int rate_count: Count of the rate.
        :param int rate_duration: Duration (sec) of the rate.
        :param str rate_mode: Rate limit mode. Valid values: `periodical`, `continuous`.
        :param str rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
        :param Sequence['ListEntryRiskArgs'] risks: Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical). The structure of `risk` block is documented below.
        :param int session_ttl: Session TTL (0 = default).
        :param str shaper: Traffic shaper.
        :param str shaper_reverse: Reverse traffic shaper.
        :param Sequence['ListEntrySubCategoryArgs'] sub_categories: Application Sub-category ID list. The structure of `sub_category` block is documented below.
        :param str technology: Application technology filter.
        :param str vendor: Application vendor filter.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if per_ip_shaper is not None:
            pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if popularity is not None:
            pulumi.set(__self__, "popularity", popularity)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if rate_count is not None:
            pulumi.set(__self__, "rate_count", rate_count)
        if rate_duration is not None:
            pulumi.set(__self__, "rate_duration", rate_duration)
        if rate_mode is not None:
            pulumi.set(__self__, "rate_mode", rate_mode)
        if rate_track is not None:
            pulumi.set(__self__, "rate_track", rate_track)
        if risks is not None:
            pulumi.set(__self__, "risks", risks)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if shaper is not None:
            pulumi.set(__self__, "shaper", shaper)
        if shaper_reverse is not None:
            pulumi.set(__self__, "shaper_reverse", shaper_reverse)
        if sub_categories is not None:
            pulumi.set(__self__, "sub_categories", sub_categories)
        if technology is not None:
            pulumi.set(__self__, "technology", technology)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Pass or block traffic, or reset connection for traffic from this application. Valid values: `pass`, `block`, `reset`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def applications(self) -> Optional[Sequence['outputs.ListEntryApplication']]:
        """
        ID of allowed applications. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        """
        Application behavior filter.
        """
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence['outputs.ListEntryCategory']]:
        """
        Category ID list. The structure of `category` block is documented below.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence['outputs.ListEntryExclusion']]:
        """
        ID of excluded applications. The structure of `exclusion` block is documented below.
        """
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging for this application list. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[str]:
        """
        Enable/disable packet logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_packet")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ListEntryParameter']]:
        """
        Application parameters. The structure of `parameters` block is documented below.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> Optional[str]:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shaper")

    @property
    @pulumi.getter
    def popularity(self) -> Optional[str]:
        """
        Application popularity filter (1 - 5, from least to most popular). Valid values: `1`, `2`, `3`, `4`, `5`.
        """
        return pulumi.get(self, "popularity")

    @property
    @pulumi.getter
    def protocols(self) -> Optional[str]:
        """
        Application protocol filter.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        """
        Quarantine method. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[str]:
        """
        Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        """
        return pulumi.get(self, "quarantine_expiry")

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[str]:
        """
        Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @property
    @pulumi.getter(name="rateCount")
    def rate_count(self) -> Optional[int]:
        """
        Count of the rate.
        """
        return pulumi.get(self, "rate_count")

    @property
    @pulumi.getter(name="rateDuration")
    def rate_duration(self) -> Optional[int]:
        """
        Duration (sec) of the rate.
        """
        return pulumi.get(self, "rate_duration")

    @property
    @pulumi.getter(name="rateMode")
    def rate_mode(self) -> Optional[str]:
        """
        Rate limit mode. Valid values: `periodical`, `continuous`.
        """
        return pulumi.get(self, "rate_mode")

    @property
    @pulumi.getter(name="rateTrack")
    def rate_track(self) -> Optional[str]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
        """
        return pulumi.get(self, "rate_track")

    @property
    @pulumi.getter
    def risks(self) -> Optional[Sequence['outputs.ListEntryRisk']]:
        """
        Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical). The structure of `risk` block is documented below.
        """
        return pulumi.get(self, "risks")

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[int]:
        """
        Session TTL (0 = default).
        """
        return pulumi.get(self, "session_ttl")

    @property
    @pulumi.getter
    def shaper(self) -> Optional[str]:
        """
        Traffic shaper.
        """
        return pulumi.get(self, "shaper")

    @property
    @pulumi.getter(name="shaperReverse")
    def shaper_reverse(self) -> Optional[str]:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "shaper_reverse")

    @property
    @pulumi.getter(name="subCategories")
    def sub_categories(self) -> Optional[Sequence['outputs.ListEntrySubCategory']]:
        """
        Application Sub-category ID list. The structure of `sub_category` block is documented below.
        """
        return pulumi.get(self, "sub_categories")

    @property
    @pulumi.getter
    def technology(self) -> Optional[str]:
        """
        Application technology filter.
        """
        return pulumi.get(self, "technology")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        """
        Application vendor filter.
        """
        return pulumi.get(self, "vendor")


@pulumi.output_type
class ListEntryApplication(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Application IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Application IDs.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ListEntryCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Application category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Application category ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ListEntryExclusion(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Excluded application IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Excluded application IDs.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ListEntryParameter(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 members: Optional[Sequence['outputs.ListEntryParameterMember']] = None,
                 value: Optional[str] = None):
        """
        :param int id: Parameter ID.
        :param Sequence['ListEntryParameterMemberArgs'] members: Parameter tuple members. The structure of `members` block is documented below.
        :param str value: Parameter value.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Parameter ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.ListEntryParameterMember']]:
        """
        Parameter tuple members. The structure of `members` block is documented below.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ListEntryParameterMember(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param int id: Parameter.
        :param str name: Parameter name.
        :param str value: Parameter value.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Parameter.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ListEntryRisk(dict):
    def __init__(__self__, *,
                 level: Optional[int] = None):
        """
        :param int level: Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
        """
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def level(self) -> Optional[int]:
        """
        Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
        """
        return pulumi.get(self, "level")


@pulumi.output_type
class ListEntrySubCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Application sub-category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Application sub-category ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class NameMetadata(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 metaid: Optional[int] = None,
                 valueid: Optional[int] = None):
        """
        :param int id: ID.
        :param int metaid: Meta ID.
        :param int valueid: Value ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metaid is not None:
            pulumi.set(__self__, "metaid", metaid)
        if valueid is not None:
            pulumi.set(__self__, "valueid", valueid)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metaid(self) -> Optional[int]:
        """
        Meta ID.
        """
        return pulumi.get(self, "metaid")

    @property
    @pulumi.getter
    def valueid(self) -> Optional[int]:
        """
        Value ID.
        """
        return pulumi.get(self, "valueid")


@pulumi.output_type
class NameParameter(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Parameter name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")



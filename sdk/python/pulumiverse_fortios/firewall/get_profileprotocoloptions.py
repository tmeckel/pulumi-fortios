# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetProfileprotocoloptionsResult',
    'AwaitableGetProfileprotocoloptionsResult',
    'get_profileprotocoloptions',
    'get_profileprotocoloptions_output',
]

@pulumi.output_type
class GetProfileprotocoloptionsResult:
    """
    A collection of values returned by getProfileprotocoloptions.
    """
    def __init__(__self__, cifs=None, comment=None, dns=None, feature_set=None, ftps=None, https=None, id=None, imaps=None, mail_signatures=None, mapis=None, name=None, nntps=None, oversize_log=None, pop3s=None, replacemsg_group=None, rpc_over_http=None, smtps=None, sshes=None, switching_protocols_log=None, vdomparam=None):
        if cifs and not isinstance(cifs, list):
            raise TypeError("Expected argument 'cifs' to be a list")
        pulumi.set(__self__, "cifs", cifs)
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if dns and not isinstance(dns, list):
            raise TypeError("Expected argument 'dns' to be a list")
        pulumi.set(__self__, "dns", dns)
        if feature_set and not isinstance(feature_set, str):
            raise TypeError("Expected argument 'feature_set' to be a str")
        pulumi.set(__self__, "feature_set", feature_set)
        if ftps and not isinstance(ftps, list):
            raise TypeError("Expected argument 'ftps' to be a list")
        pulumi.set(__self__, "ftps", ftps)
        if https and not isinstance(https, list):
            raise TypeError("Expected argument 'https' to be a list")
        pulumi.set(__self__, "https", https)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if imaps and not isinstance(imaps, list):
            raise TypeError("Expected argument 'imaps' to be a list")
        pulumi.set(__self__, "imaps", imaps)
        if mail_signatures and not isinstance(mail_signatures, list):
            raise TypeError("Expected argument 'mail_signatures' to be a list")
        pulumi.set(__self__, "mail_signatures", mail_signatures)
        if mapis and not isinstance(mapis, list):
            raise TypeError("Expected argument 'mapis' to be a list")
        pulumi.set(__self__, "mapis", mapis)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nntps and not isinstance(nntps, list):
            raise TypeError("Expected argument 'nntps' to be a list")
        pulumi.set(__self__, "nntps", nntps)
        if oversize_log and not isinstance(oversize_log, str):
            raise TypeError("Expected argument 'oversize_log' to be a str")
        pulumi.set(__self__, "oversize_log", oversize_log)
        if pop3s and not isinstance(pop3s, list):
            raise TypeError("Expected argument 'pop3s' to be a list")
        pulumi.set(__self__, "pop3s", pop3s)
        if replacemsg_group and not isinstance(replacemsg_group, str):
            raise TypeError("Expected argument 'replacemsg_group' to be a str")
        pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if rpc_over_http and not isinstance(rpc_over_http, str):
            raise TypeError("Expected argument 'rpc_over_http' to be a str")
        pulumi.set(__self__, "rpc_over_http", rpc_over_http)
        if smtps and not isinstance(smtps, list):
            raise TypeError("Expected argument 'smtps' to be a list")
        pulumi.set(__self__, "smtps", smtps)
        if sshes and not isinstance(sshes, list):
            raise TypeError("Expected argument 'sshes' to be a list")
        pulumi.set(__self__, "sshes", sshes)
        if switching_protocols_log and not isinstance(switching_protocols_log, str):
            raise TypeError("Expected argument 'switching_protocols_log' to be a str")
        pulumi.set(__self__, "switching_protocols_log", switching_protocols_log)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def cifs(self) -> Sequence['outputs.GetProfileprotocoloptionsCifResult']:
        """
        Configure CIFS protocol options. The structure of `cifs` block is documented below.
        """
        return pulumi.get(self, "cifs")

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Optional comments.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def dns(self) -> Sequence['outputs.GetProfileprotocoloptionsDnResult']:
        """
        Configure DNS protocol options. The structure of `dns` block is documented below.
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> str:
        """
        Flow/proxy feature set.
        """
        return pulumi.get(self, "feature_set")

    @property
    @pulumi.getter
    def ftps(self) -> Sequence['outputs.GetProfileprotocoloptionsFtpResult']:
        """
        Configure FTP protocol options. The structure of `ftp` block is documented below.
        """
        return pulumi.get(self, "ftps")

    @property
    @pulumi.getter
    def https(self) -> Sequence['outputs.GetProfileprotocoloptionsHttpResult']:
        """
        Configure HTTP protocol options. The structure of `http` block is documented below.
        """
        return pulumi.get(self, "https")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def imaps(self) -> Sequence['outputs.GetProfileprotocoloptionsImapResult']:
        """
        Configure IMAP protocol options. The structure of `imap` block is documented below.
        """
        return pulumi.get(self, "imaps")

    @property
    @pulumi.getter(name="mailSignatures")
    def mail_signatures(self) -> Sequence['outputs.GetProfileprotocoloptionsMailSignatureResult']:
        """
        Configure Mail signature. The structure of `mail_signature` block is documented below.
        """
        return pulumi.get(self, "mail_signatures")

    @property
    @pulumi.getter
    def mapis(self) -> Sequence['outputs.GetProfileprotocoloptionsMapiResult']:
        """
        Configure MAPI protocol options. The structure of `mapi` block is documented below.
        """
        return pulumi.get(self, "mapis")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nntps(self) -> Sequence['outputs.GetProfileprotocoloptionsNntpResult']:
        """
        Configure NNTP protocol options. The structure of `nntp` block is documented below.
        """
        return pulumi.get(self, "nntps")

    @property
    @pulumi.getter(name="oversizeLog")
    def oversize_log(self) -> str:
        """
        Enable/disable logging for antivirus oversize file blocking.
        """
        return pulumi.get(self, "oversize_log")

    @property
    @pulumi.getter
    def pop3s(self) -> Sequence['outputs.GetProfileprotocoloptionsPop3Result']:
        """
        Configure POP3 protocol options. The structure of `pop3` block is documented below.
        """
        return pulumi.get(self, "pop3s")

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> str:
        """
        Name of the replacement message group to be used
        """
        return pulumi.get(self, "replacemsg_group")

    @property
    @pulumi.getter(name="rpcOverHttp")
    def rpc_over_http(self) -> str:
        """
        Enable/disable inspection of RPC over HTTP.
        """
        return pulumi.get(self, "rpc_over_http")

    @property
    @pulumi.getter
    def smtps(self) -> Sequence['outputs.GetProfileprotocoloptionsSmtpResult']:
        """
        Configure SMTP protocol options. The structure of `smtp` block is documented below.
        """
        return pulumi.get(self, "smtps")

    @property
    @pulumi.getter
    def sshes(self) -> Sequence['outputs.GetProfileprotocoloptionsSshResult']:
        """
        Configure SFTP and SCP protocol options. The structure of `ssh` block is documented below.
        """
        return pulumi.get(self, "sshes")

    @property
    @pulumi.getter(name="switchingProtocolsLog")
    def switching_protocols_log(self) -> str:
        """
        Enable/disable logging for HTTP/HTTPS switching protocols.
        """
        return pulumi.get(self, "switching_protocols_log")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetProfileprotocoloptionsResult(GetProfileprotocoloptionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProfileprotocoloptionsResult(
            cifs=self.cifs,
            comment=self.comment,
            dns=self.dns,
            feature_set=self.feature_set,
            ftps=self.ftps,
            https=self.https,
            id=self.id,
            imaps=self.imaps,
            mail_signatures=self.mail_signatures,
            mapis=self.mapis,
            name=self.name,
            nntps=self.nntps,
            oversize_log=self.oversize_log,
            pop3s=self.pop3s,
            replacemsg_group=self.replacemsg_group,
            rpc_over_http=self.rpc_over_http,
            smtps=self.smtps,
            sshes=self.sshes,
            switching_protocols_log=self.switching_protocols_log,
            vdomparam=self.vdomparam)


def get_profileprotocoloptions(name: Optional[str] = None,
                               vdomparam: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProfileprotocoloptionsResult:
    """
    Use this data source to get information on an fortios firewall profileprotocoloptions


    :param str name: Specify the name of the desired firewall profileprotocoloptions.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:firewall/getProfileprotocoloptions:getProfileprotocoloptions', __args__, opts=opts, typ=GetProfileprotocoloptionsResult).value

    return AwaitableGetProfileprotocoloptionsResult(
        cifs=__ret__.cifs,
        comment=__ret__.comment,
        dns=__ret__.dns,
        feature_set=__ret__.feature_set,
        ftps=__ret__.ftps,
        https=__ret__.https,
        id=__ret__.id,
        imaps=__ret__.imaps,
        mail_signatures=__ret__.mail_signatures,
        mapis=__ret__.mapis,
        name=__ret__.name,
        nntps=__ret__.nntps,
        oversize_log=__ret__.oversize_log,
        pop3s=__ret__.pop3s,
        replacemsg_group=__ret__.replacemsg_group,
        rpc_over_http=__ret__.rpc_over_http,
        smtps=__ret__.smtps,
        sshes=__ret__.sshes,
        switching_protocols_log=__ret__.switching_protocols_log,
        vdomparam=__ret__.vdomparam)


@_utilities.lift_output_func(get_profileprotocoloptions)
def get_profileprotocoloptions_output(name: Optional[pulumi.Input[str]] = None,
                                      vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProfileprotocoloptionsResult]:
    """
    Use this data source to get information on an fortios firewall profileprotocoloptions


    :param str name: Specify the name of the desired firewall profileprotocoloptions.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...

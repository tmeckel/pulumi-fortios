# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPolicy6Result',
    'AwaitableGetPolicy6Result',
    'get_policy6',
    'get_policy6_output',
]

@pulumi.output_type
class GetPolicy6Result:
    """
    A collection of values returned by getPolicy6.
    """
    def __init__(__self__, action=None, anti_replay=None, app_categories=None, app_groups=None, application_list=None, applications=None, auto_asic_offload=None, av_profile=None, cifs_profile=None, comments=None, custom_log_fields=None, decrypted_traffic_mirror=None, devices=None, diffserv_forward=None, diffserv_reverse=None, diffservcode_forward=None, diffservcode_rev=None, dlp_sensor=None, dnsfilter_profile=None, dsri=None, dstaddr_negate=None, dstaddrs=None, dstintfs=None, emailfilter_profile=None, firewall_session_dirty=None, fixedport=None, fsso_groups=None, global_label=None, groups=None, http_policy_redirect=None, icap_profile=None, id=None, inbound=None, inspection_mode=None, ippool=None, ips_sensor=None, label=None, logtraffic=None, logtraffic_start=None, name=None, nat=None, natinbound=None, natoutbound=None, outbound=None, per_ip_shaper=None, policyid=None, poolnames=None, profile_group=None, profile_protocol_options=None, profile_type=None, replacemsg_override_group=None, rsso=None, schedule=None, send_deny_packet=None, service_negate=None, services=None, session_ttl=None, spamfilter_profile=None, srcaddr_negate=None, srcaddrs=None, srcintfs=None, ssh_filter_profile=None, ssh_policy_redirect=None, ssl_mirror=None, ssl_mirror_intfs=None, ssl_ssh_profile=None, status=None, tcp_mss_receiver=None, tcp_mss_sender=None, tcp_session_without_syn=None, timeout_send_rst=None, tos=None, tos_mask=None, tos_negate=None, traffic_shaper=None, traffic_shaper_reverse=None, url_categories=None, users=None, utm_status=None, uuid=None, vdomparam=None, vlan_cos_fwd=None, vlan_cos_rev=None, vlan_filter=None, voip_profile=None, vpntunnel=None, waf_profile=None, webcache=None, webcache_https=None, webfilter_profile=None, webproxy_forward_server=None, webproxy_profile=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if anti_replay and not isinstance(anti_replay, str):
            raise TypeError("Expected argument 'anti_replay' to be a str")
        pulumi.set(__self__, "anti_replay", anti_replay)
        if app_categories and not isinstance(app_categories, list):
            raise TypeError("Expected argument 'app_categories' to be a list")
        pulumi.set(__self__, "app_categories", app_categories)
        if app_groups and not isinstance(app_groups, list):
            raise TypeError("Expected argument 'app_groups' to be a list")
        pulumi.set(__self__, "app_groups", app_groups)
        if application_list and not isinstance(application_list, str):
            raise TypeError("Expected argument 'application_list' to be a str")
        pulumi.set(__self__, "application_list", application_list)
        if applications and not isinstance(applications, list):
            raise TypeError("Expected argument 'applications' to be a list")
        pulumi.set(__self__, "applications", applications)
        if auto_asic_offload and not isinstance(auto_asic_offload, str):
            raise TypeError("Expected argument 'auto_asic_offload' to be a str")
        pulumi.set(__self__, "auto_asic_offload", auto_asic_offload)
        if av_profile and not isinstance(av_profile, str):
            raise TypeError("Expected argument 'av_profile' to be a str")
        pulumi.set(__self__, "av_profile", av_profile)
        if cifs_profile and not isinstance(cifs_profile, str):
            raise TypeError("Expected argument 'cifs_profile' to be a str")
        pulumi.set(__self__, "cifs_profile", cifs_profile)
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if custom_log_fields and not isinstance(custom_log_fields, list):
            raise TypeError("Expected argument 'custom_log_fields' to be a list")
        pulumi.set(__self__, "custom_log_fields", custom_log_fields)
        if decrypted_traffic_mirror and not isinstance(decrypted_traffic_mirror, str):
            raise TypeError("Expected argument 'decrypted_traffic_mirror' to be a str")
        pulumi.set(__self__, "decrypted_traffic_mirror", decrypted_traffic_mirror)
        if devices and not isinstance(devices, list):
            raise TypeError("Expected argument 'devices' to be a list")
        pulumi.set(__self__, "devices", devices)
        if diffserv_forward and not isinstance(diffserv_forward, str):
            raise TypeError("Expected argument 'diffserv_forward' to be a str")
        pulumi.set(__self__, "diffserv_forward", diffserv_forward)
        if diffserv_reverse and not isinstance(diffserv_reverse, str):
            raise TypeError("Expected argument 'diffserv_reverse' to be a str")
        pulumi.set(__self__, "diffserv_reverse", diffserv_reverse)
        if diffservcode_forward and not isinstance(diffservcode_forward, str):
            raise TypeError("Expected argument 'diffservcode_forward' to be a str")
        pulumi.set(__self__, "diffservcode_forward", diffservcode_forward)
        if diffservcode_rev and not isinstance(diffservcode_rev, str):
            raise TypeError("Expected argument 'diffservcode_rev' to be a str")
        pulumi.set(__self__, "diffservcode_rev", diffservcode_rev)
        if dlp_sensor and not isinstance(dlp_sensor, str):
            raise TypeError("Expected argument 'dlp_sensor' to be a str")
        pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dnsfilter_profile and not isinstance(dnsfilter_profile, str):
            raise TypeError("Expected argument 'dnsfilter_profile' to be a str")
        pulumi.set(__self__, "dnsfilter_profile", dnsfilter_profile)
        if dsri and not isinstance(dsri, str):
            raise TypeError("Expected argument 'dsri' to be a str")
        pulumi.set(__self__, "dsri", dsri)
        if dstaddr_negate and not isinstance(dstaddr_negate, str):
            raise TypeError("Expected argument 'dstaddr_negate' to be a str")
        pulumi.set(__self__, "dstaddr_negate", dstaddr_negate)
        if dstaddrs and not isinstance(dstaddrs, list):
            raise TypeError("Expected argument 'dstaddrs' to be a list")
        pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dstintfs and not isinstance(dstintfs, list):
            raise TypeError("Expected argument 'dstintfs' to be a list")
        pulumi.set(__self__, "dstintfs", dstintfs)
        if emailfilter_profile and not isinstance(emailfilter_profile, str):
            raise TypeError("Expected argument 'emailfilter_profile' to be a str")
        pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if firewall_session_dirty and not isinstance(firewall_session_dirty, str):
            raise TypeError("Expected argument 'firewall_session_dirty' to be a str")
        pulumi.set(__self__, "firewall_session_dirty", firewall_session_dirty)
        if fixedport and not isinstance(fixedport, str):
            raise TypeError("Expected argument 'fixedport' to be a str")
        pulumi.set(__self__, "fixedport", fixedport)
        if fsso_groups and not isinstance(fsso_groups, list):
            raise TypeError("Expected argument 'fsso_groups' to be a list")
        pulumi.set(__self__, "fsso_groups", fsso_groups)
        if global_label and not isinstance(global_label, str):
            raise TypeError("Expected argument 'global_label' to be a str")
        pulumi.set(__self__, "global_label", global_label)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if http_policy_redirect and not isinstance(http_policy_redirect, str):
            raise TypeError("Expected argument 'http_policy_redirect' to be a str")
        pulumi.set(__self__, "http_policy_redirect", http_policy_redirect)
        if icap_profile and not isinstance(icap_profile, str):
            raise TypeError("Expected argument 'icap_profile' to be a str")
        pulumi.set(__self__, "icap_profile", icap_profile)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inbound and not isinstance(inbound, str):
            raise TypeError("Expected argument 'inbound' to be a str")
        pulumi.set(__self__, "inbound", inbound)
        if inspection_mode and not isinstance(inspection_mode, str):
            raise TypeError("Expected argument 'inspection_mode' to be a str")
        pulumi.set(__self__, "inspection_mode", inspection_mode)
        if ippool and not isinstance(ippool, str):
            raise TypeError("Expected argument 'ippool' to be a str")
        pulumi.set(__self__, "ippool", ippool)
        if ips_sensor and not isinstance(ips_sensor, str):
            raise TypeError("Expected argument 'ips_sensor' to be a str")
        pulumi.set(__self__, "ips_sensor", ips_sensor)
        if label and not isinstance(label, str):
            raise TypeError("Expected argument 'label' to be a str")
        pulumi.set(__self__, "label", label)
        if logtraffic and not isinstance(logtraffic, str):
            raise TypeError("Expected argument 'logtraffic' to be a str")
        pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start and not isinstance(logtraffic_start, str):
            raise TypeError("Expected argument 'logtraffic_start' to be a str")
        pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nat and not isinstance(nat, str):
            raise TypeError("Expected argument 'nat' to be a str")
        pulumi.set(__self__, "nat", nat)
        if natinbound and not isinstance(natinbound, str):
            raise TypeError("Expected argument 'natinbound' to be a str")
        pulumi.set(__self__, "natinbound", natinbound)
        if natoutbound and not isinstance(natoutbound, str):
            raise TypeError("Expected argument 'natoutbound' to be a str")
        pulumi.set(__self__, "natoutbound", natoutbound)
        if outbound and not isinstance(outbound, str):
            raise TypeError("Expected argument 'outbound' to be a str")
        pulumi.set(__self__, "outbound", outbound)
        if per_ip_shaper and not isinstance(per_ip_shaper, str):
            raise TypeError("Expected argument 'per_ip_shaper' to be a str")
        pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if policyid and not isinstance(policyid, int):
            raise TypeError("Expected argument 'policyid' to be a int")
        pulumi.set(__self__, "policyid", policyid)
        if poolnames and not isinstance(poolnames, list):
            raise TypeError("Expected argument 'poolnames' to be a list")
        pulumi.set(__self__, "poolnames", poolnames)
        if profile_group and not isinstance(profile_group, str):
            raise TypeError("Expected argument 'profile_group' to be a str")
        pulumi.set(__self__, "profile_group", profile_group)
        if profile_protocol_options and not isinstance(profile_protocol_options, str):
            raise TypeError("Expected argument 'profile_protocol_options' to be a str")
        pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if profile_type and not isinstance(profile_type, str):
            raise TypeError("Expected argument 'profile_type' to be a str")
        pulumi.set(__self__, "profile_type", profile_type)
        if replacemsg_override_group and not isinstance(replacemsg_override_group, str):
            raise TypeError("Expected argument 'replacemsg_override_group' to be a str")
        pulumi.set(__self__, "replacemsg_override_group", replacemsg_override_group)
        if rsso and not isinstance(rsso, str):
            raise TypeError("Expected argument 'rsso' to be a str")
        pulumi.set(__self__, "rsso", rsso)
        if schedule and not isinstance(schedule, str):
            raise TypeError("Expected argument 'schedule' to be a str")
        pulumi.set(__self__, "schedule", schedule)
        if send_deny_packet and not isinstance(send_deny_packet, str):
            raise TypeError("Expected argument 'send_deny_packet' to be a str")
        pulumi.set(__self__, "send_deny_packet", send_deny_packet)
        if service_negate and not isinstance(service_negate, str):
            raise TypeError("Expected argument 'service_negate' to be a str")
        pulumi.set(__self__, "service_negate", service_negate)
        if services and not isinstance(services, list):
            raise TypeError("Expected argument 'services' to be a list")
        pulumi.set(__self__, "services", services)
        if session_ttl and not isinstance(session_ttl, int):
            raise TypeError("Expected argument 'session_ttl' to be a int")
        pulumi.set(__self__, "session_ttl", session_ttl)
        if spamfilter_profile and not isinstance(spamfilter_profile, str):
            raise TypeError("Expected argument 'spamfilter_profile' to be a str")
        pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if srcaddr_negate and not isinstance(srcaddr_negate, str):
            raise TypeError("Expected argument 'srcaddr_negate' to be a str")
        pulumi.set(__self__, "srcaddr_negate", srcaddr_negate)
        if srcaddrs and not isinstance(srcaddrs, list):
            raise TypeError("Expected argument 'srcaddrs' to be a list")
        pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintfs and not isinstance(srcintfs, list):
            raise TypeError("Expected argument 'srcintfs' to be a list")
        pulumi.set(__self__, "srcintfs", srcintfs)
        if ssh_filter_profile and not isinstance(ssh_filter_profile, str):
            raise TypeError("Expected argument 'ssh_filter_profile' to be a str")
        pulumi.set(__self__, "ssh_filter_profile", ssh_filter_profile)
        if ssh_policy_redirect and not isinstance(ssh_policy_redirect, str):
            raise TypeError("Expected argument 'ssh_policy_redirect' to be a str")
        pulumi.set(__self__, "ssh_policy_redirect", ssh_policy_redirect)
        if ssl_mirror and not isinstance(ssl_mirror, str):
            raise TypeError("Expected argument 'ssl_mirror' to be a str")
        pulumi.set(__self__, "ssl_mirror", ssl_mirror)
        if ssl_mirror_intfs and not isinstance(ssl_mirror_intfs, list):
            raise TypeError("Expected argument 'ssl_mirror_intfs' to be a list")
        pulumi.set(__self__, "ssl_mirror_intfs", ssl_mirror_intfs)
        if ssl_ssh_profile and not isinstance(ssl_ssh_profile, str):
            raise TypeError("Expected argument 'ssl_ssh_profile' to be a str")
        pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tcp_mss_receiver and not isinstance(tcp_mss_receiver, int):
            raise TypeError("Expected argument 'tcp_mss_receiver' to be a int")
        pulumi.set(__self__, "tcp_mss_receiver", tcp_mss_receiver)
        if tcp_mss_sender and not isinstance(tcp_mss_sender, int):
            raise TypeError("Expected argument 'tcp_mss_sender' to be a int")
        pulumi.set(__self__, "tcp_mss_sender", tcp_mss_sender)
        if tcp_session_without_syn and not isinstance(tcp_session_without_syn, str):
            raise TypeError("Expected argument 'tcp_session_without_syn' to be a str")
        pulumi.set(__self__, "tcp_session_without_syn", tcp_session_without_syn)
        if timeout_send_rst and not isinstance(timeout_send_rst, str):
            raise TypeError("Expected argument 'timeout_send_rst' to be a str")
        pulumi.set(__self__, "timeout_send_rst", timeout_send_rst)
        if tos and not isinstance(tos, str):
            raise TypeError("Expected argument 'tos' to be a str")
        pulumi.set(__self__, "tos", tos)
        if tos_mask and not isinstance(tos_mask, str):
            raise TypeError("Expected argument 'tos_mask' to be a str")
        pulumi.set(__self__, "tos_mask", tos_mask)
        if tos_negate and not isinstance(tos_negate, str):
            raise TypeError("Expected argument 'tos_negate' to be a str")
        pulumi.set(__self__, "tos_negate", tos_negate)
        if traffic_shaper and not isinstance(traffic_shaper, str):
            raise TypeError("Expected argument 'traffic_shaper' to be a str")
        pulumi.set(__self__, "traffic_shaper", traffic_shaper)
        if traffic_shaper_reverse and not isinstance(traffic_shaper_reverse, str):
            raise TypeError("Expected argument 'traffic_shaper_reverse' to be a str")
        pulumi.set(__self__, "traffic_shaper_reverse", traffic_shaper_reverse)
        if url_categories and not isinstance(url_categories, list):
            raise TypeError("Expected argument 'url_categories' to be a list")
        pulumi.set(__self__, "url_categories", url_categories)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)
        if utm_status and not isinstance(utm_status, str):
            raise TypeError("Expected argument 'utm_status' to be a str")
        pulumi.set(__self__, "utm_status", utm_status)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if vlan_cos_fwd and not isinstance(vlan_cos_fwd, int):
            raise TypeError("Expected argument 'vlan_cos_fwd' to be a int")
        pulumi.set(__self__, "vlan_cos_fwd", vlan_cos_fwd)
        if vlan_cos_rev and not isinstance(vlan_cos_rev, int):
            raise TypeError("Expected argument 'vlan_cos_rev' to be a int")
        pulumi.set(__self__, "vlan_cos_rev", vlan_cos_rev)
        if vlan_filter and not isinstance(vlan_filter, str):
            raise TypeError("Expected argument 'vlan_filter' to be a str")
        pulumi.set(__self__, "vlan_filter", vlan_filter)
        if voip_profile and not isinstance(voip_profile, str):
            raise TypeError("Expected argument 'voip_profile' to be a str")
        pulumi.set(__self__, "voip_profile", voip_profile)
        if vpntunnel and not isinstance(vpntunnel, str):
            raise TypeError("Expected argument 'vpntunnel' to be a str")
        pulumi.set(__self__, "vpntunnel", vpntunnel)
        if waf_profile and not isinstance(waf_profile, str):
            raise TypeError("Expected argument 'waf_profile' to be a str")
        pulumi.set(__self__, "waf_profile", waf_profile)
        if webcache and not isinstance(webcache, str):
            raise TypeError("Expected argument 'webcache' to be a str")
        pulumi.set(__self__, "webcache", webcache)
        if webcache_https and not isinstance(webcache_https, str):
            raise TypeError("Expected argument 'webcache_https' to be a str")
        pulumi.set(__self__, "webcache_https", webcache_https)
        if webfilter_profile and not isinstance(webfilter_profile, str):
            raise TypeError("Expected argument 'webfilter_profile' to be a str")
        pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webproxy_forward_server and not isinstance(webproxy_forward_server, str):
            raise TypeError("Expected argument 'webproxy_forward_server' to be a str")
        pulumi.set(__self__, "webproxy_forward_server", webproxy_forward_server)
        if webproxy_profile and not isinstance(webproxy_profile, str):
            raise TypeError("Expected argument 'webproxy_profile' to be a str")
        pulumi.set(__self__, "webproxy_profile", webproxy_profile)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Policy action (allow/deny/ipsec).
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="antiReplay")
    def anti_replay(self) -> str:
        """
        Enable/disable anti-replay check.
        """
        return pulumi.get(self, "anti_replay")

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Sequence['outputs.GetPolicy6AppCategoryResult']:
        """
        Application category ID list. The structure of `app_category` block is documented below.
        """
        return pulumi.get(self, "app_categories")

    @property
    @pulumi.getter(name="appGroups")
    def app_groups(self) -> Sequence['outputs.GetPolicy6AppGroupResult']:
        """
        Application group names. The structure of `app_group` block is documented below.
        """
        return pulumi.get(self, "app_groups")

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> str:
        """
        Name of an existing Application list.
        """
        return pulumi.get(self, "application_list")

    @property
    @pulumi.getter
    def applications(self) -> Sequence['outputs.GetPolicy6ApplicationResult']:
        """
        Application ID list. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="autoAsicOffload")
    def auto_asic_offload(self) -> str:
        """
        Enable/disable policy traffic ASIC offloading.
        """
        return pulumi.get(self, "auto_asic_offload")

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> str:
        """
        Name of an existing Antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> str:
        """
        Name of an existing CIFS profile.
        """
        return pulumi.get(self, "cifs_profile")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="customLogFields")
    def custom_log_fields(self) -> Sequence['outputs.GetPolicy6CustomLogFieldResult']:
        """
        Log field index numbers to append custom log fields to log messages for this policy. The structure of `custom_log_fields` block is documented below.
        """
        return pulumi.get(self, "custom_log_fields")

    @property
    @pulumi.getter(name="decryptedTrafficMirror")
    def decrypted_traffic_mirror(self) -> str:
        """
        Decrypted traffic mirror.
        """
        return pulumi.get(self, "decrypted_traffic_mirror")

    @property
    @pulumi.getter
    def devices(self) -> Sequence['outputs.GetPolicy6DeviceResult']:
        """
        Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> str:
        """
        Enable to change packet's DiffServ values to the specified diffservcode-forward value.
        """
        return pulumi.get(self, "diffserv_forward")

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> str:
        """
        Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.
        """
        return pulumi.get(self, "diffserv_reverse")

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> str:
        """
        Change packet's DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_forward")

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> str:
        """
        Change packet's reverse (reply) DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_rev")

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> str:
        """
        Name of an existing DLP sensor.
        """
        return pulumi.get(self, "dlp_sensor")

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> str:
        """
        Name of an existing DNS filter profile.
        """
        return pulumi.get(self, "dnsfilter_profile")

    @property
    @pulumi.getter
    def dsri(self) -> str:
        """
        Enable DSRI to ignore HTTP server responses.
        """
        return pulumi.get(self, "dsri")

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> str:
        """
        When enabled dstaddr specifies what the destination address must NOT be.
        """
        return pulumi.get(self, "dstaddr_negate")

    @property
    @pulumi.getter
    def dstaddrs(self) -> Sequence['outputs.GetPolicy6DstaddrResult']:
        """
        Destination address and address group names. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter
    def dstintfs(self) -> Sequence['outputs.GetPolicy6DstintfResult']:
        """
        Outgoing (egress) interface. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> str:
        """
        Name of an existing email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @property
    @pulumi.getter(name="firewallSessionDirty")
    def firewall_session_dirty(self) -> str:
        """
        How to handle sessions if the configuration of this firewall policy changes.
        """
        return pulumi.get(self, "firewall_session_dirty")

    @property
    @pulumi.getter
    def fixedport(self) -> str:
        """
        Enable to prevent source NAT from changing a session's source port.
        """
        return pulumi.get(self, "fixedport")

    @property
    @pulumi.getter(name="fssoGroups")
    def fsso_groups(self) -> Sequence['outputs.GetPolicy6FssoGroupResult']:
        """
        Names of FSSO groups. The structure of `fsso_groups` block is documented below.
        """
        return pulumi.get(self, "fsso_groups")

    @property
    @pulumi.getter(name="globalLabel")
    def global_label(self) -> str:
        """
        Label for the policy that appears when the GUI is in Global View mode.
        """
        return pulumi.get(self, "global_label")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetPolicy6GroupResult']:
        """
        Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="httpPolicyRedirect")
    def http_policy_redirect(self) -> str:
        """
        Redirect HTTP(S) traffic to matching transparent web proxy policy.
        """
        return pulumi.get(self, "http_policy_redirect")

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> str:
        """
        Name of an existing ICAP profile.
        """
        return pulumi.get(self, "icap_profile")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def inbound(self) -> str:
        """
        Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN.
        """
        return pulumi.get(self, "inbound")

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> str:
        """
        Policy inspection mode (Flow/proxy). Default is Flow mode.
        """
        return pulumi.get(self, "inspection_mode")

    @property
    @pulumi.getter
    def ippool(self) -> str:
        """
        Enable to use IP Pools for source NAT.
        """
        return pulumi.get(self, "ippool")

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> str:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensor")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Label for the policy that appears when the GUI is in Section View mode.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def logtraffic(self) -> str:
        """
        Enable or disable logging. Log all sessions or security profile sessions.
        """
        return pulumi.get(self, "logtraffic")

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> str:
        """
        Record logs when a session starts.
        """
        return pulumi.get(self, "logtraffic_start")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nat(self) -> str:
        """
        Enable/disable source NAT.
        """
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter
    def natinbound(self) -> str:
        """
        Policy-based IPsec VPN: apply destination NAT to inbound traffic.
        """
        return pulumi.get(self, "natinbound")

    @property
    @pulumi.getter
    def natoutbound(self) -> str:
        """
        Policy-based IPsec VPN: apply source NAT to outbound traffic.
        """
        return pulumi.get(self, "natoutbound")

    @property
    @pulumi.getter
    def outbound(self) -> str:
        """
        Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN.
        """
        return pulumi.get(self, "outbound")

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> str:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shaper")

    @property
    @pulumi.getter
    def policyid(self) -> int:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @property
    @pulumi.getter
    def poolnames(self) -> Sequence['outputs.GetPolicy6PoolnameResult']:
        """
        IP Pool names. The structure of `poolname` block is documented below.
        """
        return pulumi.get(self, "poolnames")

    @property
    @pulumi.getter(name="profileGroup")
    def profile_group(self) -> str:
        """
        Name of profile group.
        """
        return pulumi.get(self, "profile_group")

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> str:
        """
        Name of an existing Protocol options profile.
        """
        return pulumi.get(self, "profile_protocol_options")

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> str:
        """
        Determine whether the firewall policy allows security profile groups or single profiles only.
        """
        return pulumi.get(self, "profile_type")

    @property
    @pulumi.getter(name="replacemsgOverrideGroup")
    def replacemsg_override_group(self) -> str:
        """
        Override the default replacement message group for this policy.
        """
        return pulumi.get(self, "replacemsg_override_group")

    @property
    @pulumi.getter
    def rsso(self) -> str:
        """
        Enable/disable RADIUS single sign-on (RSSO).
        """
        return pulumi.get(self, "rsso")

    @property
    @pulumi.getter
    def schedule(self) -> str:
        """
        Schedule name.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="sendDenyPacket")
    def send_deny_packet(self) -> str:
        """
        Enable/disable return of deny-packet.
        """
        return pulumi.get(self, "send_deny_packet")

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> str:
        """
        When enabled service specifies what the service must NOT be.
        """
        return pulumi.get(self, "service_negate")

    @property
    @pulumi.getter
    def services(self) -> Sequence['outputs.GetPolicy6ServiceResult']:
        """
        Service and service group names. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> int:
        """
        Session TTL in seconds for sessions accepted by this policy. 0 means use the system default session TTL.
        """
        return pulumi.get(self, "session_ttl")

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> str:
        """
        Name of an existing Spam filter profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> str:
        """
        When enabled srcaddr specifies what the source address must NOT be.
        """
        return pulumi.get(self, "srcaddr_negate")

    @property
    @pulumi.getter
    def srcaddrs(self) -> Sequence['outputs.GetPolicy6SrcaddrResult']:
        """
        Source address and address group names. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def srcintfs(self) -> Sequence['outputs.GetPolicy6SrcintfResult']:
        """
        Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> str:
        """
        Name of an existing SSH filter profile.
        """
        return pulumi.get(self, "ssh_filter_profile")

    @property
    @pulumi.getter(name="sshPolicyRedirect")
    def ssh_policy_redirect(self) -> str:
        """
        Redirect SSH traffic to matching transparent proxy policy.
        """
        return pulumi.get(self, "ssh_policy_redirect")

    @property
    @pulumi.getter(name="sslMirror")
    def ssl_mirror(self) -> str:
        """
        Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring).
        """
        return pulumi.get(self, "ssl_mirror")

    @property
    @pulumi.getter(name="sslMirrorIntfs")
    def ssl_mirror_intfs(self) -> Sequence['outputs.GetPolicy6SslMirrorIntfResult']:
        """
        SSL mirror interface name. The structure of `ssl_mirror_intf` block is documented below.
        """
        return pulumi.get(self, "ssl_mirror_intfs")

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> str:
        """
        Name of an existing SSL SSH profile.
        """
        return pulumi.get(self, "ssl_ssh_profile")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable or disable this policy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tcpMssReceiver")
    def tcp_mss_receiver(self) -> int:
        """
        Receiver TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_receiver")

    @property
    @pulumi.getter(name="tcpMssSender")
    def tcp_mss_sender(self) -> int:
        """
        Sender TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_sender")

    @property
    @pulumi.getter(name="tcpSessionWithoutSyn")
    def tcp_session_without_syn(self) -> str:
        """
        Enable/disable creation of TCP session without SYN flag.
        """
        return pulumi.get(self, "tcp_session_without_syn")

    @property
    @pulumi.getter(name="timeoutSendRst")
    def timeout_send_rst(self) -> str:
        """
        Enable/disable sending RST packets when TCP sessions expire.
        """
        return pulumi.get(self, "timeout_send_rst")

    @property
    @pulumi.getter
    def tos(self) -> str:
        """
        ToS (Type of Service) value used for comparison.
        """
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> str:
        """
        Non-zero bit positions are used for comparison while zero bit positions are ignored.
        """
        return pulumi.get(self, "tos_mask")

    @property
    @pulumi.getter(name="tosNegate")
    def tos_negate(self) -> str:
        """
        Enable negated TOS match.
        """
        return pulumi.get(self, "tos_negate")

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> str:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper")

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> str:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper_reverse")

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Sequence['outputs.GetPolicy6UrlCategoryResult']:
        """
        URL category ID list. The structure of `url_category` block is documented below.
        """
        return pulumi.get(self, "url_categories")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetPolicy6UserResult']:
        """
        Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> str:
        """
        Enable AV/web/ips protection profile.
        """
        return pulumi.get(self, "utm_status")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="vlanCosFwd")
    def vlan_cos_fwd(self) -> int:
        """
        VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest
        """
        return pulumi.get(self, "vlan_cos_fwd")

    @property
    @pulumi.getter(name="vlanCosRev")
    def vlan_cos_rev(self) -> int:
        """
        VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest
        """
        return pulumi.get(self, "vlan_cos_rev")

    @property
    @pulumi.getter(name="vlanFilter")
    def vlan_filter(self) -> str:
        """
        Set VLAN filters.
        """
        return pulumi.get(self, "vlan_filter")

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> str:
        """
        Name of an existing VoIP profile.
        """
        return pulumi.get(self, "voip_profile")

    @property
    @pulumi.getter
    def vpntunnel(self) -> str:
        """
        Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
        """
        return pulumi.get(self, "vpntunnel")

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> str:
        """
        Name of an existing Web application firewall profile.
        """
        return pulumi.get(self, "waf_profile")

    @property
    @pulumi.getter
    def webcache(self) -> str:
        """
        Enable/disable web cache.
        """
        return pulumi.get(self, "webcache")

    @property
    @pulumi.getter(name="webcacheHttps")
    def webcache_https(self) -> str:
        """
        Enable/disable web cache for HTTPS.
        """
        return pulumi.get(self, "webcache_https")

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> str:
        """
        Name of an existing Web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @property
    @pulumi.getter(name="webproxyForwardServer")
    def webproxy_forward_server(self) -> str:
        """
        Web proxy forward server name.
        """
        return pulumi.get(self, "webproxy_forward_server")

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> str:
        """
        Webproxy profile name.
        """
        return pulumi.get(self, "webproxy_profile")


class AwaitableGetPolicy6Result(GetPolicy6Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicy6Result(
            action=self.action,
            anti_replay=self.anti_replay,
            app_categories=self.app_categories,
            app_groups=self.app_groups,
            application_list=self.application_list,
            applications=self.applications,
            auto_asic_offload=self.auto_asic_offload,
            av_profile=self.av_profile,
            cifs_profile=self.cifs_profile,
            comments=self.comments,
            custom_log_fields=self.custom_log_fields,
            decrypted_traffic_mirror=self.decrypted_traffic_mirror,
            devices=self.devices,
            diffserv_forward=self.diffserv_forward,
            diffserv_reverse=self.diffserv_reverse,
            diffservcode_forward=self.diffservcode_forward,
            diffservcode_rev=self.diffservcode_rev,
            dlp_sensor=self.dlp_sensor,
            dnsfilter_profile=self.dnsfilter_profile,
            dsri=self.dsri,
            dstaddr_negate=self.dstaddr_negate,
            dstaddrs=self.dstaddrs,
            dstintfs=self.dstintfs,
            emailfilter_profile=self.emailfilter_profile,
            firewall_session_dirty=self.firewall_session_dirty,
            fixedport=self.fixedport,
            fsso_groups=self.fsso_groups,
            global_label=self.global_label,
            groups=self.groups,
            http_policy_redirect=self.http_policy_redirect,
            icap_profile=self.icap_profile,
            id=self.id,
            inbound=self.inbound,
            inspection_mode=self.inspection_mode,
            ippool=self.ippool,
            ips_sensor=self.ips_sensor,
            label=self.label,
            logtraffic=self.logtraffic,
            logtraffic_start=self.logtraffic_start,
            name=self.name,
            nat=self.nat,
            natinbound=self.natinbound,
            natoutbound=self.natoutbound,
            outbound=self.outbound,
            per_ip_shaper=self.per_ip_shaper,
            policyid=self.policyid,
            poolnames=self.poolnames,
            profile_group=self.profile_group,
            profile_protocol_options=self.profile_protocol_options,
            profile_type=self.profile_type,
            replacemsg_override_group=self.replacemsg_override_group,
            rsso=self.rsso,
            schedule=self.schedule,
            send_deny_packet=self.send_deny_packet,
            service_negate=self.service_negate,
            services=self.services,
            session_ttl=self.session_ttl,
            spamfilter_profile=self.spamfilter_profile,
            srcaddr_negate=self.srcaddr_negate,
            srcaddrs=self.srcaddrs,
            srcintfs=self.srcintfs,
            ssh_filter_profile=self.ssh_filter_profile,
            ssh_policy_redirect=self.ssh_policy_redirect,
            ssl_mirror=self.ssl_mirror,
            ssl_mirror_intfs=self.ssl_mirror_intfs,
            ssl_ssh_profile=self.ssl_ssh_profile,
            status=self.status,
            tcp_mss_receiver=self.tcp_mss_receiver,
            tcp_mss_sender=self.tcp_mss_sender,
            tcp_session_without_syn=self.tcp_session_without_syn,
            timeout_send_rst=self.timeout_send_rst,
            tos=self.tos,
            tos_mask=self.tos_mask,
            tos_negate=self.tos_negate,
            traffic_shaper=self.traffic_shaper,
            traffic_shaper_reverse=self.traffic_shaper_reverse,
            url_categories=self.url_categories,
            users=self.users,
            utm_status=self.utm_status,
            uuid=self.uuid,
            vdomparam=self.vdomparam,
            vlan_cos_fwd=self.vlan_cos_fwd,
            vlan_cos_rev=self.vlan_cos_rev,
            vlan_filter=self.vlan_filter,
            voip_profile=self.voip_profile,
            vpntunnel=self.vpntunnel,
            waf_profile=self.waf_profile,
            webcache=self.webcache,
            webcache_https=self.webcache_https,
            webfilter_profile=self.webfilter_profile,
            webproxy_forward_server=self.webproxy_forward_server,
            webproxy_profile=self.webproxy_profile)


def get_policy6(policyid: Optional[int] = None,
                vdomparam: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicy6Result:
    """
    Use this data source to get information on an fortios firewall policy6


    :param int policyid: Specify the policyid of the desired firewall policy6.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['policyid'] = policyid
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:firewall/getPolicy6:getPolicy6', __args__, opts=opts, typ=GetPolicy6Result).value

    return AwaitableGetPolicy6Result(
        action=__ret__.action,
        anti_replay=__ret__.anti_replay,
        app_categories=__ret__.app_categories,
        app_groups=__ret__.app_groups,
        application_list=__ret__.application_list,
        applications=__ret__.applications,
        auto_asic_offload=__ret__.auto_asic_offload,
        av_profile=__ret__.av_profile,
        cifs_profile=__ret__.cifs_profile,
        comments=__ret__.comments,
        custom_log_fields=__ret__.custom_log_fields,
        decrypted_traffic_mirror=__ret__.decrypted_traffic_mirror,
        devices=__ret__.devices,
        diffserv_forward=__ret__.diffserv_forward,
        diffserv_reverse=__ret__.diffserv_reverse,
        diffservcode_forward=__ret__.diffservcode_forward,
        diffservcode_rev=__ret__.diffservcode_rev,
        dlp_sensor=__ret__.dlp_sensor,
        dnsfilter_profile=__ret__.dnsfilter_profile,
        dsri=__ret__.dsri,
        dstaddr_negate=__ret__.dstaddr_negate,
        dstaddrs=__ret__.dstaddrs,
        dstintfs=__ret__.dstintfs,
        emailfilter_profile=__ret__.emailfilter_profile,
        firewall_session_dirty=__ret__.firewall_session_dirty,
        fixedport=__ret__.fixedport,
        fsso_groups=__ret__.fsso_groups,
        global_label=__ret__.global_label,
        groups=__ret__.groups,
        http_policy_redirect=__ret__.http_policy_redirect,
        icap_profile=__ret__.icap_profile,
        id=__ret__.id,
        inbound=__ret__.inbound,
        inspection_mode=__ret__.inspection_mode,
        ippool=__ret__.ippool,
        ips_sensor=__ret__.ips_sensor,
        label=__ret__.label,
        logtraffic=__ret__.logtraffic,
        logtraffic_start=__ret__.logtraffic_start,
        name=__ret__.name,
        nat=__ret__.nat,
        natinbound=__ret__.natinbound,
        natoutbound=__ret__.natoutbound,
        outbound=__ret__.outbound,
        per_ip_shaper=__ret__.per_ip_shaper,
        policyid=__ret__.policyid,
        poolnames=__ret__.poolnames,
        profile_group=__ret__.profile_group,
        profile_protocol_options=__ret__.profile_protocol_options,
        profile_type=__ret__.profile_type,
        replacemsg_override_group=__ret__.replacemsg_override_group,
        rsso=__ret__.rsso,
        schedule=__ret__.schedule,
        send_deny_packet=__ret__.send_deny_packet,
        service_negate=__ret__.service_negate,
        services=__ret__.services,
        session_ttl=__ret__.session_ttl,
        spamfilter_profile=__ret__.spamfilter_profile,
        srcaddr_negate=__ret__.srcaddr_negate,
        srcaddrs=__ret__.srcaddrs,
        srcintfs=__ret__.srcintfs,
        ssh_filter_profile=__ret__.ssh_filter_profile,
        ssh_policy_redirect=__ret__.ssh_policy_redirect,
        ssl_mirror=__ret__.ssl_mirror,
        ssl_mirror_intfs=__ret__.ssl_mirror_intfs,
        ssl_ssh_profile=__ret__.ssl_ssh_profile,
        status=__ret__.status,
        tcp_mss_receiver=__ret__.tcp_mss_receiver,
        tcp_mss_sender=__ret__.tcp_mss_sender,
        tcp_session_without_syn=__ret__.tcp_session_without_syn,
        timeout_send_rst=__ret__.timeout_send_rst,
        tos=__ret__.tos,
        tos_mask=__ret__.tos_mask,
        tos_negate=__ret__.tos_negate,
        traffic_shaper=__ret__.traffic_shaper,
        traffic_shaper_reverse=__ret__.traffic_shaper_reverse,
        url_categories=__ret__.url_categories,
        users=__ret__.users,
        utm_status=__ret__.utm_status,
        uuid=__ret__.uuid,
        vdomparam=__ret__.vdomparam,
        vlan_cos_fwd=__ret__.vlan_cos_fwd,
        vlan_cos_rev=__ret__.vlan_cos_rev,
        vlan_filter=__ret__.vlan_filter,
        voip_profile=__ret__.voip_profile,
        vpntunnel=__ret__.vpntunnel,
        waf_profile=__ret__.waf_profile,
        webcache=__ret__.webcache,
        webcache_https=__ret__.webcache_https,
        webfilter_profile=__ret__.webfilter_profile,
        webproxy_forward_server=__ret__.webproxy_forward_server,
        webproxy_profile=__ret__.webproxy_profile)


@_utilities.lift_output_func(get_policy6)
def get_policy6_output(policyid: Optional[pulumi.Input[int]] = None,
                       vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPolicy6Result]:
    """
    Use this data source to get information on an fortios firewall policy6


    :param int policyid: Specify the policyid of the desired firewall policy6.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...

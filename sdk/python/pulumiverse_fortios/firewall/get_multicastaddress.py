# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMulticastaddressResult',
    'AwaitableGetMulticastaddressResult',
    'get_multicastaddress',
    'get_multicastaddress_output',
]

@pulumi.output_type
class GetMulticastaddressResult:
    """
    A collection of values returned by getMulticastaddress.
    """
    def __init__(__self__, associated_interface=None, color=None, comment=None, end_ip=None, id=None, name=None, start_ip=None, subnet=None, taggings=None, type=None, vdomparam=None, visibility=None):
        if associated_interface and not isinstance(associated_interface, str):
            raise TypeError("Expected argument 'associated_interface' to be a str")
        pulumi.set(__self__, "associated_interface", associated_interface)
        if color and not isinstance(color, int):
            raise TypeError("Expected argument 'color' to be a int")
        pulumi.set(__self__, "color", color)
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if end_ip and not isinstance(end_ip, str):
            raise TypeError("Expected argument 'end_ip' to be a str")
        pulumi.set(__self__, "end_ip", end_ip)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if start_ip and not isinstance(start_ip, str):
            raise TypeError("Expected argument 'start_ip' to be a str")
        pulumi.set(__self__, "start_ip", start_ip)
        if subnet and not isinstance(subnet, str):
            raise TypeError("Expected argument 'subnet' to be a str")
        pulumi.set(__self__, "subnet", subnet)
        if taggings and not isinstance(taggings, list):
            raise TypeError("Expected argument 'taggings' to be a list")
        pulumi.set(__self__, "taggings", taggings)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if visibility and not isinstance(visibility, str):
            raise TypeError("Expected argument 'visibility' to be a str")
        pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="associatedInterface")
    def associated_interface(self) -> str:
        """
        Interface associated with the address object. When setting up a policy, only addresses associated with this interface are available.
        """
        return pulumi.get(self, "associated_interface")

    @property
    @pulumi.getter
    def color(self) -> int:
        """
        Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> str:
        """
        Final IPv4 address (inclusive) in the range for the address.
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> str:
        """
        First IPv4 address (inclusive) in the range for the address.
        """
        return pulumi.get(self, "start_ip")

    @property
    @pulumi.getter
    def subnet(self) -> str:
        """
        Broadcast address and subnet.
        """
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter
    def taggings(self) -> Sequence['outputs.GetMulticastaddressTaggingResult']:
        """
        Config object tagging. The structure of `tagging` block is documented below.
        """
        return pulumi.get(self, "taggings")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of address object: multicast IP address range or broadcast IP/mask to be treated as a multicast address.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def visibility(self) -> str:
        """
        Enable/disable visibility of the multicast address on the GUI.
        """
        return pulumi.get(self, "visibility")


class AwaitableGetMulticastaddressResult(GetMulticastaddressResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMulticastaddressResult(
            associated_interface=self.associated_interface,
            color=self.color,
            comment=self.comment,
            end_ip=self.end_ip,
            id=self.id,
            name=self.name,
            start_ip=self.start_ip,
            subnet=self.subnet,
            taggings=self.taggings,
            type=self.type,
            vdomparam=self.vdomparam,
            visibility=self.visibility)


def get_multicastaddress(name: Optional[str] = None,
                         vdomparam: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMulticastaddressResult:
    """
    Use this data source to get information on an fortios firewall multicastaddress


    :param str name: Specify the name of the desired firewall multicastaddress.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:firewall/getMulticastaddress:getMulticastaddress', __args__, opts=opts, typ=GetMulticastaddressResult).value

    return AwaitableGetMulticastaddressResult(
        associated_interface=__ret__.associated_interface,
        color=__ret__.color,
        comment=__ret__.comment,
        end_ip=__ret__.end_ip,
        id=__ret__.id,
        name=__ret__.name,
        start_ip=__ret__.start_ip,
        subnet=__ret__.subnet,
        taggings=__ret__.taggings,
        type=__ret__.type,
        vdomparam=__ret__.vdomparam,
        visibility=__ret__.visibility)


@_utilities.lift_output_func(get_multicastaddress)
def get_multicastaddress_output(name: Optional[pulumi.Input[str]] = None,
                                vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMulticastaddressResult]:
    """
    Use this data source to get information on an fortios firewall multicastaddress


    :param str name: Specify the name of the desired firewall multicastaddress.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...

# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SecurityPolicysortArgs', 'SecurityPolicysort']

@pulumi.input_type
class SecurityPolicysortArgs:
    def __init__(__self__, *,
                 sortby: pulumi.Input[str],
                 sortdirection: pulumi.Input[str],
                 comment: Optional[pulumi.Input[str]] = None,
                 force_recreate: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SecurityPolicysort resource.
        :param pulumi.Input[str] sortby: Sort security policies by the value, it currently supports "policyid" and "name".
        :param pulumi.Input[str] sortdirection: Sort dirction, supports "ascending" and "descending".
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] force_recreate: The argument is optional, if it is set, when the value changes, the resource will be re-created. It is usually used when new policies are added, or old policies are deleted, or when the policy name is changed when `sortby` is set to `name`, see Example2.
        """
        pulumi.set(__self__, "sortby", sortby)
        pulumi.set(__self__, "sortdirection", sortdirection)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if force_recreate is not None:
            pulumi.set(__self__, "force_recreate", force_recreate)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def sortby(self) -> pulumi.Input[str]:
        """
        Sort security policies by the value, it currently supports "policyid" and "name".
        """
        return pulumi.get(self, "sortby")

    @sortby.setter
    def sortby(self, value: pulumi.Input[str]):
        pulumi.set(self, "sortby", value)

    @property
    @pulumi.getter
    def sortdirection(self) -> pulumi.Input[str]:
        """
        Sort dirction, supports "ascending" and "descending".
        """
        return pulumi.get(self, "sortdirection")

    @sortdirection.setter
    def sortdirection(self, value: pulumi.Input[str]):
        pulumi.set(self, "sortdirection", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="forceRecreate")
    def force_recreate(self) -> Optional[pulumi.Input[str]]:
        """
        The argument is optional, if it is set, when the value changes, the resource will be re-created. It is usually used when new policies are added, or old policies are deleted, or when the policy name is changed when `sortby` is set to `name`, see Example2.
        """
        return pulumi.get(self, "force_recreate")

    @force_recreate.setter
    def force_recreate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "force_recreate", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SecurityPolicysortState:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 force_recreate: Optional[pulumi.Input[str]] = None,
                 sortby: Optional[pulumi.Input[str]] = None,
                 sortdirection: Optional[pulumi.Input[str]] = None,
                 state_policy_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicysortStatePolicyListArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SecurityPolicysort resources.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] force_recreate: The argument is optional, if it is set, when the value changes, the resource will be re-created. It is usually used when new policies are added, or old policies are deleted, or when the policy name is changed when `sortby` is set to `name`, see Example2.
        :param pulumi.Input[str] sortby: Sort security policies by the value, it currently supports "policyid" and "name".
        :param pulumi.Input[str] sortdirection: Sort dirction, supports "ascending" and "descending".
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if force_recreate is not None:
            pulumi.set(__self__, "force_recreate", force_recreate)
        if sortby is not None:
            pulumi.set(__self__, "sortby", sortby)
        if sortdirection is not None:
            pulumi.set(__self__, "sortdirection", sortdirection)
        if state_policy_lists is not None:
            pulumi.set(__self__, "state_policy_lists", state_policy_lists)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="forceRecreate")
    def force_recreate(self) -> Optional[pulumi.Input[str]]:
        """
        The argument is optional, if it is set, when the value changes, the resource will be re-created. It is usually used when new policies are added, or old policies are deleted, or when the policy name is changed when `sortby` is set to `name`, see Example2.
        """
        return pulumi.get(self, "force_recreate")

    @force_recreate.setter
    def force_recreate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "force_recreate", value)

    @property
    @pulumi.getter
    def sortby(self) -> Optional[pulumi.Input[str]]:
        """
        Sort security policies by the value, it currently supports "policyid" and "name".
        """
        return pulumi.get(self, "sortby")

    @sortby.setter
    def sortby(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sortby", value)

    @property
    @pulumi.getter
    def sortdirection(self) -> Optional[pulumi.Input[str]]:
        """
        Sort dirction, supports "ascending" and "descending".
        """
        return pulumi.get(self, "sortdirection")

    @sortdirection.setter
    def sortdirection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sortdirection", value)

    @property
    @pulumi.getter(name="statePolicyLists")
    def state_policy_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicysortStatePolicyListArgs']]]]:
        return pulumi.get(self, "state_policy_lists")

    @state_policy_lists.setter
    def state_policy_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicysortStatePolicyListArgs']]]]):
        pulumi.set(self, "state_policy_lists", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SecurityPolicysort(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 force_recreate: Optional[pulumi.Input[str]] = None,
                 sortby: Optional[pulumi.Input[str]] = None,
                 sortdirection: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Resource to sort firewall security policies by policyid or policy name, in ascending or descending order.

        ## Example Usage
        ### Example1
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test = fortios.firewall.SecurityPolicysort("test",
            sortby="policyid",
            sortdirection="descending")
        pulumi.export("policylistAfterApply", test.state_policy_lists)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] force_recreate: The argument is optional, if it is set, when the value changes, the resource will be re-created. It is usually used when new policies are added, or old policies are deleted, or when the policy name is changed when `sortby` is set to `name`, see Example2.
        :param pulumi.Input[str] sortby: Sort security policies by the value, it currently supports "policyid" and "name".
        :param pulumi.Input[str] sortdirection: Sort dirction, supports "ascending" and "descending".
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecurityPolicysortArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource to sort firewall security policies by policyid or policy name, in ascending or descending order.

        ## Example Usage
        ### Example1
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test = fortios.firewall.SecurityPolicysort("test",
            sortby="policyid",
            sortdirection="descending")
        pulumi.export("policylistAfterApply", test.state_policy_lists)
        ```

        :param str resource_name: The name of the resource.
        :param SecurityPolicysortArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityPolicysortArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 force_recreate: Optional[pulumi.Input[str]] = None,
                 sortby: Optional[pulumi.Input[str]] = None,
                 sortdirection: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityPolicysortArgs.__new__(SecurityPolicysortArgs)

            __props__.__dict__["comment"] = comment
            __props__.__dict__["force_recreate"] = force_recreate
            if sortby is None and not opts.urn:
                raise TypeError("Missing required property 'sortby'")
            __props__.__dict__["sortby"] = sortby
            if sortdirection is None and not opts.urn:
                raise TypeError("Missing required property 'sortdirection'")
            __props__.__dict__["sortdirection"] = sortdirection
            __props__.__dict__["status"] = status
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["state_policy_lists"] = None
        super(SecurityPolicysort, __self__).__init__(
            'fortios:firewall/securityPolicysort:SecurityPolicysort',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comment: Optional[pulumi.Input[str]] = None,
            force_recreate: Optional[pulumi.Input[str]] = None,
            sortby: Optional[pulumi.Input[str]] = None,
            sortdirection: Optional[pulumi.Input[str]] = None,
            state_policy_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SecurityPolicysortStatePolicyListArgs']]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SecurityPolicysort':
        """
        Get an existing SecurityPolicysort resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] force_recreate: The argument is optional, if it is set, when the value changes, the resource will be re-created. It is usually used when new policies are added, or old policies are deleted, or when the policy name is changed when `sortby` is set to `name`, see Example2.
        :param pulumi.Input[str] sortby: Sort security policies by the value, it currently supports "policyid" and "name".
        :param pulumi.Input[str] sortdirection: Sort dirction, supports "ascending" and "descending".
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecurityPolicysortState.__new__(_SecurityPolicysortState)

        __props__.__dict__["comment"] = comment
        __props__.__dict__["force_recreate"] = force_recreate
        __props__.__dict__["sortby"] = sortby
        __props__.__dict__["sortdirection"] = sortdirection
        __props__.__dict__["state_policy_lists"] = state_policy_lists
        __props__.__dict__["status"] = status
        __props__.__dict__["vdomparam"] = vdomparam
        return SecurityPolicysort(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="forceRecreate")
    def force_recreate(self) -> pulumi.Output[Optional[str]]:
        """
        The argument is optional, if it is set, when the value changes, the resource will be re-created. It is usually used when new policies are added, or old policies are deleted, or when the policy name is changed when `sortby` is set to `name`, see Example2.
        """
        return pulumi.get(self, "force_recreate")

    @property
    @pulumi.getter
    def sortby(self) -> pulumi.Output[str]:
        """
        Sort security policies by the value, it currently supports "policyid" and "name".
        """
        return pulumi.get(self, "sortby")

    @property
    @pulumi.getter
    def sortdirection(self) -> pulumi.Output[str]:
        """
        Sort dirction, supports "ascending" and "descending".
        """
        return pulumi.get(self, "sortdirection")

    @property
    @pulumi.getter(name="statePolicyLists")
    def state_policy_lists(self) -> pulumi.Output[Sequence['outputs.SecurityPolicysortStatePolicyList']]:
        return pulumi.get(self, "state_policy_lists")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")


# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'FilterFreeStyle',
    'OverridefilterFreeStyle',
    'SettingSerial',
]

@pulumi.output_type
class FilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        """
        :param str category: Log category.
        :param str filter: Free style filter string.
        :param str filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param int id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class OverridefilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OverridefilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OverridefilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OverridefilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        """
        :param str category: Log category.
        :param str filter: Free style filter string.
        :param str filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param int id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SettingSerial(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Serial Number.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Serial Number.
        """
        return pulumi.get(self, "name")



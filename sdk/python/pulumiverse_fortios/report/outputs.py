# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ChartCategorySeries',
    'ChartColumn',
    'ChartColumnMapping',
    'ChartDrillDownChart',
    'ChartValueSeries',
    'ChartXSeries',
    'ChartYSeries',
    'DatasetField',
    'DatasetParameter',
    'LayoutBodyItem',
    'LayoutBodyItemList',
    'LayoutBodyItemParameter',
    'LayoutPage',
    'LayoutPageFooter',
    'LayoutPageFooterFooterItem',
    'LayoutPageHeader',
    'LayoutPageHeaderHeaderItem',
]

@pulumi.output_type
class ChartCategorySeries(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontSize":
            suggest = "font_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChartCategorySeries. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChartCategorySeries.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChartCategorySeries.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 databind: Optional[str] = None,
                 font_size: Optional[int] = None):
        """
        :param str databind: Category series value expression.
        :param int font_size: Font size of category-series title.
        """
        if databind is not None:
            pulumi.set(__self__, "databind", databind)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)

    @property
    @pulumi.getter
    def databind(self) -> Optional[str]:
        """
        Category series value expression.
        """
        return pulumi.get(self, "databind")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[int]:
        """
        Font size of category-series title.
        """
        return pulumi.get(self, "font_size")


@pulumi.output_type
class ChartColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "detailUnit":
            suggest = "detail_unit"
        elif key == "detailValue":
            suggest = "detail_value"
        elif key == "footerUnit":
            suggest = "footer_unit"
        elif key == "footerValue":
            suggest = "footer_value"
        elif key == "headerValue":
            suggest = "header_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChartColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChartColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChartColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 detail_unit: Optional[str] = None,
                 detail_value: Optional[str] = None,
                 footer_unit: Optional[str] = None,
                 footer_value: Optional[str] = None,
                 header_value: Optional[str] = None,
                 id: Optional[int] = None,
                 mappings: Optional[Sequence['outputs.ChartColumnMapping']] = None):
        """
        :param str detail_unit: Detail unit of column.
        :param str detail_value: Detail value of column.
        :param str footer_unit: Footer unit of column.
        :param str footer_value: Footer value of column.
        :param str header_value: Display name of table header.
        :param int id: ID.
        :param Sequence['ChartColumnMappingArgs'] mappings: Show detail in certain display value for certain condition. The structure of `mapping` block is documented below.
        """
        if detail_unit is not None:
            pulumi.set(__self__, "detail_unit", detail_unit)
        if detail_value is not None:
            pulumi.set(__self__, "detail_value", detail_value)
        if footer_unit is not None:
            pulumi.set(__self__, "footer_unit", footer_unit)
        if footer_value is not None:
            pulumi.set(__self__, "footer_value", footer_value)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)

    @property
    @pulumi.getter(name="detailUnit")
    def detail_unit(self) -> Optional[str]:
        """
        Detail unit of column.
        """
        return pulumi.get(self, "detail_unit")

    @property
    @pulumi.getter(name="detailValue")
    def detail_value(self) -> Optional[str]:
        """
        Detail value of column.
        """
        return pulumi.get(self, "detail_value")

    @property
    @pulumi.getter(name="footerUnit")
    def footer_unit(self) -> Optional[str]:
        """
        Footer unit of column.
        """
        return pulumi.get(self, "footer_unit")

    @property
    @pulumi.getter(name="footerValue")
    def footer_value(self) -> Optional[str]:
        """
        Footer value of column.
        """
        return pulumi.get(self, "footer_value")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        """
        Display name of table header.
        """
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mappings(self) -> Optional[Sequence['outputs.ChartColumnMapping']]:
        """
        Show detail in certain display value for certain condition. The structure of `mapping` block is documented below.
        """
        return pulumi.get(self, "mappings")


@pulumi.output_type
class ChartColumnMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChartColumnMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChartColumnMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChartColumnMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 displayname: Optional[str] = None,
                 id: Optional[int] = None,
                 op: Optional[str] = None,
                 value1: Optional[str] = None,
                 value2: Optional[str] = None,
                 value_type: Optional[str] = None):
        """
        :param str displayname: Display name.
        :param int id: id
        :param str op: Comparision operater. Valid values: `none`, `greater`, `greater-equal`, `less`, `less-equal`, `equal`, `between`.
        :param str value1: Value 1.
        :param str value2: Value 2.
        :param str value_type: Value type. Valid values: `integer`, `string`.
        """
        if displayname is not None:
            pulumi.set(__self__, "displayname", displayname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if op is not None:
            pulumi.set(__self__, "op", op)
        if value1 is not None:
            pulumi.set(__self__, "value1", value1)
        if value2 is not None:
            pulumi.set(__self__, "value2", value2)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter
    def displayname(self) -> Optional[str]:
        """
        Display name.
        """
        return pulumi.get(self, "displayname")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def op(self) -> Optional[str]:
        """
        Comparision operater. Valid values: `none`, `greater`, `greater-equal`, `less`, `less-equal`, `equal`, `between`.
        """
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def value1(self) -> Optional[str]:
        """
        Value 1.
        """
        return pulumi.get(self, "value1")

    @property
    @pulumi.getter
    def value2(self) -> Optional[str]:
        """
        Value 2.
        """
        return pulumi.get(self, "value2")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[str]:
        """
        Value type. Valid values: `integer`, `string`.
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class ChartDrillDownChart(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "chartName":
            suggest = "chart_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChartDrillDownChart. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChartDrillDownChart.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChartDrillDownChart.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart_name: Optional[str] = None,
                 id: Optional[int] = None,
                 status: Optional[str] = None):
        """
        :param str chart_name: Drill down chart name.
        :param int id: Drill down chart ID.
        :param str status: Enable/disable this drill down chart. Valid values: `enable`, `disable`.
        """
        if chart_name is not None:
            pulumi.set(__self__, "chart_name", chart_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="chartName")
    def chart_name(self) -> Optional[str]:
        """
        Drill down chart name.
        """
        return pulumi.get(self, "chart_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Drill down chart ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable this drill down chart. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ChartValueSeries(dict):
    def __init__(__self__, *,
                 databind: Optional[str] = None):
        """
        :param str databind: Value series value expression.
        """
        if databind is not None:
            pulumi.set(__self__, "databind", databind)

    @property
    @pulumi.getter
    def databind(self) -> Optional[str]:
        """
        Value series value expression.
        """
        return pulumi.get(self, "databind")


@pulumi.output_type
class ChartXSeries(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "captionFontSize":
            suggest = "caption_font_size"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "isCategory":
            suggest = "is_category"
        elif key == "labelAngle":
            suggest = "label_angle"
        elif key == "scaleDirection":
            suggest = "scale_direction"
        elif key == "scaleFormat":
            suggest = "scale_format"
        elif key == "scaleStep":
            suggest = "scale_step"
        elif key == "scaleUnit":
            suggest = "scale_unit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChartXSeries. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChartXSeries.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChartXSeries.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 caption: Optional[str] = None,
                 caption_font_size: Optional[int] = None,
                 databind: Optional[str] = None,
                 font_size: Optional[int] = None,
                 is_category: Optional[str] = None,
                 label_angle: Optional[str] = None,
                 scale_direction: Optional[str] = None,
                 scale_format: Optional[str] = None,
                 scale_step: Optional[int] = None,
                 scale_unit: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str caption: X-series caption.
        :param int caption_font_size: X-series caption font size.
        :param str databind: X-series value expression.
        :param int font_size: X-series label font size.
        :param str is_category: X-series represent category or not. Valid values: `yes`, `no`.
        :param str label_angle: X-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
        :param str scale_direction: Scale increase or decrease. Valid values: `decrease`, `increase`.
        :param str scale_format: Date/time format. Valid values: `YYYY-MM-DD-HH-MM`, `YYYY-MM-DD HH`, `YYYY-MM-DD`, `YYYY-MM`, `YYYY`, `HH-MM`, `MM-DD`.
        :param int scale_step: Scale step.
        :param str scale_unit: Scale unit. Valid values: `minute`, `hour`, `day`, `month`, `year`.
        :param str unit: X-series unit.
        """
        if caption is not None:
            pulumi.set(__self__, "caption", caption)
        if caption_font_size is not None:
            pulumi.set(__self__, "caption_font_size", caption_font_size)
        if databind is not None:
            pulumi.set(__self__, "databind", databind)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if is_category is not None:
            pulumi.set(__self__, "is_category", is_category)
        if label_angle is not None:
            pulumi.set(__self__, "label_angle", label_angle)
        if scale_direction is not None:
            pulumi.set(__self__, "scale_direction", scale_direction)
        if scale_format is not None:
            pulumi.set(__self__, "scale_format", scale_format)
        if scale_step is not None:
            pulumi.set(__self__, "scale_step", scale_step)
        if scale_unit is not None:
            pulumi.set(__self__, "scale_unit", scale_unit)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def caption(self) -> Optional[str]:
        """
        X-series caption.
        """
        return pulumi.get(self, "caption")

    @property
    @pulumi.getter(name="captionFontSize")
    def caption_font_size(self) -> Optional[int]:
        """
        X-series caption font size.
        """
        return pulumi.get(self, "caption_font_size")

    @property
    @pulumi.getter
    def databind(self) -> Optional[str]:
        """
        X-series value expression.
        """
        return pulumi.get(self, "databind")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[int]:
        """
        X-series label font size.
        """
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="isCategory")
    def is_category(self) -> Optional[str]:
        """
        X-series represent category or not. Valid values: `yes`, `no`.
        """
        return pulumi.get(self, "is_category")

    @property
    @pulumi.getter(name="labelAngle")
    def label_angle(self) -> Optional[str]:
        """
        X-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
        """
        return pulumi.get(self, "label_angle")

    @property
    @pulumi.getter(name="scaleDirection")
    def scale_direction(self) -> Optional[str]:
        """
        Scale increase or decrease. Valid values: `decrease`, `increase`.
        """
        return pulumi.get(self, "scale_direction")

    @property
    @pulumi.getter(name="scaleFormat")
    def scale_format(self) -> Optional[str]:
        """
        Date/time format. Valid values: `YYYY-MM-DD-HH-MM`, `YYYY-MM-DD HH`, `YYYY-MM-DD`, `YYYY-MM`, `YYYY`, `HH-MM`, `MM-DD`.
        """
        return pulumi.get(self, "scale_format")

    @property
    @pulumi.getter(name="scaleStep")
    def scale_step(self) -> Optional[int]:
        """
        Scale step.
        """
        return pulumi.get(self, "scale_step")

    @property
    @pulumi.getter(name="scaleUnit")
    def scale_unit(self) -> Optional[str]:
        """
        Scale unit. Valid values: `minute`, `hour`, `day`, `month`, `year`.
        """
        return pulumi.get(self, "scale_unit")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        X-series unit.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class ChartYSeries(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "captionFontSize":
            suggest = "caption_font_size"
        elif key == "extraDatabind":
            suggest = "extra_databind"
        elif key == "extraY":
            suggest = "extra_y"
        elif key == "extraYLegend":
            suggest = "extra_y_legend"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "labelAngle":
            suggest = "label_angle"
        elif key == "yLegend":
            suggest = "y_legend"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChartYSeries. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChartYSeries.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChartYSeries.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 caption: Optional[str] = None,
                 caption_font_size: Optional[int] = None,
                 databind: Optional[str] = None,
                 extra_databind: Optional[str] = None,
                 extra_y: Optional[str] = None,
                 extra_y_legend: Optional[str] = None,
                 font_size: Optional[int] = None,
                 group: Optional[str] = None,
                 label_angle: Optional[str] = None,
                 unit: Optional[str] = None,
                 y_legend: Optional[str] = None):
        """
        :param str caption: Y-series caption.
        :param int caption_font_size: Y-series caption font size.
        :param str databind: Y-series value expression.
        :param str extra_databind: Extra Y-series value.
        :param str extra_y: Allow another Y-series value Valid values: `enable`, `disable`.
        :param str extra_y_legend: Extra Y-series legend type/name.
        :param int font_size: Y-series label font size.
        :param str group: Y-series group option.
        :param str label_angle: Y-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
        :param str unit: Y-series unit.
        :param str y_legend: First Y-series legend type/name.
        """
        if caption is not None:
            pulumi.set(__self__, "caption", caption)
        if caption_font_size is not None:
            pulumi.set(__self__, "caption_font_size", caption_font_size)
        if databind is not None:
            pulumi.set(__self__, "databind", databind)
        if extra_databind is not None:
            pulumi.set(__self__, "extra_databind", extra_databind)
        if extra_y is not None:
            pulumi.set(__self__, "extra_y", extra_y)
        if extra_y_legend is not None:
            pulumi.set(__self__, "extra_y_legend", extra_y_legend)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if label_angle is not None:
            pulumi.set(__self__, "label_angle", label_angle)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if y_legend is not None:
            pulumi.set(__self__, "y_legend", y_legend)

    @property
    @pulumi.getter
    def caption(self) -> Optional[str]:
        """
        Y-series caption.
        """
        return pulumi.get(self, "caption")

    @property
    @pulumi.getter(name="captionFontSize")
    def caption_font_size(self) -> Optional[int]:
        """
        Y-series caption font size.
        """
        return pulumi.get(self, "caption_font_size")

    @property
    @pulumi.getter
    def databind(self) -> Optional[str]:
        """
        Y-series value expression.
        """
        return pulumi.get(self, "databind")

    @property
    @pulumi.getter(name="extraDatabind")
    def extra_databind(self) -> Optional[str]:
        """
        Extra Y-series value.
        """
        return pulumi.get(self, "extra_databind")

    @property
    @pulumi.getter(name="extraY")
    def extra_y(self) -> Optional[str]:
        """
        Allow another Y-series value Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "extra_y")

    @property
    @pulumi.getter(name="extraYLegend")
    def extra_y_legend(self) -> Optional[str]:
        """
        Extra Y-series legend type/name.
        """
        return pulumi.get(self, "extra_y_legend")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[int]:
        """
        Y-series label font size.
        """
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Y-series group option.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="labelAngle")
    def label_angle(self) -> Optional[str]:
        """
        Y-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
        """
        return pulumi.get(self, "label_angle")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        Y-series unit.
        """
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter(name="yLegend")
    def y_legend(self) -> Optional[str]:
        """
        First Y-series legend type/name.
        """
        return pulumi.get(self, "y_legend")


@pulumi.output_type
class DatasetField(dict):
    def __init__(__self__, *,
                 displayname: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str displayname: Display name.
        :param int id: Field ID (1 to number of columns in SQL result).
        :param str name: Name.
        :param str type: Field type. Valid values: `text`, `integer`, `double`.
        """
        if displayname is not None:
            pulumi.set(__self__, "displayname", displayname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def displayname(self) -> Optional[str]:
        """
        Display name.
        """
        return pulumi.get(self, "displayname")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Field ID (1 to number of columns in SQL result).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Field type. Valid values: `text`, `integer`, `double`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DatasetParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataType":
            suggest = "data_type"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatasetParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatasetParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatasetParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 field: Optional[str] = None,
                 id: Optional[int] = None):
        """
        :param str data_type: Data type. Valid values: `text`, `integer`, `double`, `long-integer`, `date-time`.
        :param str display_name: Display name.
        :param str field: SQL field name.
        :param int id: Parameter ID (1 to number of columns in SQL result).
        """
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        """
        Data type. Valid values: `text`, `integer`, `double`, `long-integer`, `date-time`.
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        """
        SQL field name.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Parameter ID (1 to number of columns in SQL result).
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LayoutBodyItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "chartOptions":
            suggest = "chart_options"
        elif key == "drillDownItems":
            suggest = "drill_down_items"
        elif key == "drillDownTypes":
            suggest = "drill_down_types"
        elif key == "imgSrc":
            suggest = "img_src"
        elif key == "listComponent":
            suggest = "list_component"
        elif key == "miscComponent":
            suggest = "misc_component"
        elif key == "tableCaptionStyle":
            suggest = "table_caption_style"
        elif key == "tableColumnWidths":
            suggest = "table_column_widths"
        elif key == "tableEvenRowStyle":
            suggest = "table_even_row_style"
        elif key == "tableHeadStyle":
            suggest = "table_head_style"
        elif key == "tableOddRowStyle":
            suggest = "table_odd_row_style"
        elif key == "textComponent":
            suggest = "text_component"
        elif key == "topN":
            suggest = "top_n"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutBodyItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutBodyItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutBodyItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 chart_options: Optional[str] = None,
                 column: Optional[int] = None,
                 content: Optional[str] = None,
                 description: Optional[str] = None,
                 drill_down_items: Optional[str] = None,
                 drill_down_types: Optional[str] = None,
                 hide: Optional[str] = None,
                 id: Optional[int] = None,
                 img_src: Optional[str] = None,
                 list_component: Optional[str] = None,
                 lists: Optional[Sequence['outputs.LayoutBodyItemList']] = None,
                 misc_component: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.LayoutBodyItemParameter']] = None,
                 style: Optional[str] = None,
                 table_caption_style: Optional[str] = None,
                 table_column_widths: Optional[str] = None,
                 table_even_row_style: Optional[str] = None,
                 table_head_style: Optional[str] = None,
                 table_odd_row_style: Optional[str] = None,
                 text_component: Optional[str] = None,
                 title: Optional[str] = None,
                 top_n: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param str chart: Report item chart name.
        :param str chart_options: Report chart options. Valid values: `include-no-data`, `hide-title`, `show-caption`.
        :param int column: Report section column number.
        :param str content: Report item text content.
        :param str description: Description.
        :param str drill_down_items: Control how drill down charts are shown.
        :param str drill_down_types: Control whether keys from the parent being combined or not.
        :param str hide: Enable/disable hide item in report. Valid values: `enable`, `disable`.
        :param int id: Report item ID.
        :param str img_src: Report item image file name.
        :param str list_component: Report item list component. Valid values: `bullet`, `numbered`.
        :param Sequence['LayoutBodyItemListArgs'] lists: Configure report list item. The structure of `list` block is documented below.
        :param str misc_component: Report item miscellaneous component. Valid values: `hline`, `page-break`, `column-break`, `section-start`.
        :param Sequence['LayoutBodyItemParameterArgs'] parameters: Parameters. The structure of `parameters` block is documented below.
        :param str style: Report item style.
        :param str table_caption_style: Table chart caption style.
        :param str table_column_widths: Report item table column widths.
        :param str table_even_row_style: Table chart even row style.
        :param str table_head_style: Table chart head style.
        :param str table_odd_row_style: Table chart odd row style.
        :param str text_component: Report item text component. Valid values: `text`, `heading1`, `heading2`, `heading3`.
        :param str title: Report section title.
        :param int top_n: Value of top.
        :param str type: Report item type. Valid values: `text`, `image`, `chart`, `misc`.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if chart_options is not None:
            pulumi.set(__self__, "chart_options", chart_options)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if drill_down_items is not None:
            pulumi.set(__self__, "drill_down_items", drill_down_items)
        if drill_down_types is not None:
            pulumi.set(__self__, "drill_down_types", drill_down_types)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if img_src is not None:
            pulumi.set(__self__, "img_src", img_src)
        if list_component is not None:
            pulumi.set(__self__, "list_component", list_component)
        if lists is not None:
            pulumi.set(__self__, "lists", lists)
        if misc_component is not None:
            pulumi.set(__self__, "misc_component", misc_component)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if table_caption_style is not None:
            pulumi.set(__self__, "table_caption_style", table_caption_style)
        if table_column_widths is not None:
            pulumi.set(__self__, "table_column_widths", table_column_widths)
        if table_even_row_style is not None:
            pulumi.set(__self__, "table_even_row_style", table_even_row_style)
        if table_head_style is not None:
            pulumi.set(__self__, "table_head_style", table_head_style)
        if table_odd_row_style is not None:
            pulumi.set(__self__, "table_odd_row_style", table_odd_row_style)
        if text_component is not None:
            pulumi.set(__self__, "text_component", text_component)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if top_n is not None:
            pulumi.set(__self__, "top_n", top_n)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Report item chart name.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter(name="chartOptions")
    def chart_options(self) -> Optional[str]:
        """
        Report chart options. Valid values: `include-no-data`, `hide-title`, `show-caption`.
        """
        return pulumi.get(self, "chart_options")

    @property
    @pulumi.getter
    def column(self) -> Optional[int]:
        """
        Report section column number.
        """
        return pulumi.get(self, "column")

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        """
        Report item text content.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="drillDownItems")
    def drill_down_items(self) -> Optional[str]:
        """
        Control how drill down charts are shown.
        """
        return pulumi.get(self, "drill_down_items")

    @property
    @pulumi.getter(name="drillDownTypes")
    def drill_down_types(self) -> Optional[str]:
        """
        Control whether keys from the parent being combined or not.
        """
        return pulumi.get(self, "drill_down_types")

    @property
    @pulumi.getter
    def hide(self) -> Optional[str]:
        """
        Enable/disable hide item in report. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "hide")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Report item ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imgSrc")
    def img_src(self) -> Optional[str]:
        """
        Report item image file name.
        """
        return pulumi.get(self, "img_src")

    @property
    @pulumi.getter(name="listComponent")
    def list_component(self) -> Optional[str]:
        """
        Report item list component. Valid values: `bullet`, `numbered`.
        """
        return pulumi.get(self, "list_component")

    @property
    @pulumi.getter
    def lists(self) -> Optional[Sequence['outputs.LayoutBodyItemList']]:
        """
        Configure report list item. The structure of `list` block is documented below.
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="miscComponent")
    def misc_component(self) -> Optional[str]:
        """
        Report item miscellaneous component. Valid values: `hline`, `page-break`, `column-break`, `section-start`.
        """
        return pulumi.get(self, "misc_component")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.LayoutBodyItemParameter']]:
        """
        Parameters. The structure of `parameters` block is documented below.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        """
        Report item style.
        """
        return pulumi.get(self, "style")

    @property
    @pulumi.getter(name="tableCaptionStyle")
    def table_caption_style(self) -> Optional[str]:
        """
        Table chart caption style.
        """
        return pulumi.get(self, "table_caption_style")

    @property
    @pulumi.getter(name="tableColumnWidths")
    def table_column_widths(self) -> Optional[str]:
        """
        Report item table column widths.
        """
        return pulumi.get(self, "table_column_widths")

    @property
    @pulumi.getter(name="tableEvenRowStyle")
    def table_even_row_style(self) -> Optional[str]:
        """
        Table chart even row style.
        """
        return pulumi.get(self, "table_even_row_style")

    @property
    @pulumi.getter(name="tableHeadStyle")
    def table_head_style(self) -> Optional[str]:
        """
        Table chart head style.
        """
        return pulumi.get(self, "table_head_style")

    @property
    @pulumi.getter(name="tableOddRowStyle")
    def table_odd_row_style(self) -> Optional[str]:
        """
        Table chart odd row style.
        """
        return pulumi.get(self, "table_odd_row_style")

    @property
    @pulumi.getter(name="textComponent")
    def text_component(self) -> Optional[str]:
        """
        Report item text component. Valid values: `text`, `heading1`, `heading2`, `heading3`.
        """
        return pulumi.get(self, "text_component")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Report section title.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="topN")
    def top_n(self) -> Optional[int]:
        """
        Value of top.
        """
        return pulumi.get(self, "top_n")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Report item type. Valid values: `text`, `image`, `chart`, `misc`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class LayoutBodyItemList(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 id: Optional[int] = None):
        """
        :param str content: List entry content.
        :param int id: List entry ID.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        """
        List entry content.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        List entry ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LayoutBodyItemParameter(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param int id: ID.
        :param str name: Field name that match field of parameters defined in dataset.
        :param str value: Value to replace corresponding field of parameters defined in dataset.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Field name that match field of parameters defined in dataset.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value to replace corresponding field of parameters defined in dataset.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LayoutPage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnBreakBefore":
            suggest = "column_break_before"
        elif key == "pageBreakBefore":
            suggest = "page_break_before"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutPage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutPage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutPage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_break_before: Optional[str] = None,
                 footer: Optional['outputs.LayoutPageFooter'] = None,
                 header: Optional['outputs.LayoutPageHeader'] = None,
                 options: Optional[str] = None,
                 page_break_before: Optional[str] = None,
                 paper: Optional[str] = None):
        """
        :param str column_break_before: Report page auto column break before heading. Valid values: `heading1`, `heading2`, `heading3`.
        :param 'LayoutPageFooterArgs' footer: Configure report page footer. The structure of `footer` block is documented below.
        :param 'LayoutPageHeaderArgs' header: Configure report page header. The structure of `header` block is documented below.
        :param str options: Report page options. Valid values: `header-on-first-page`, `footer-on-first-page`.
        :param str page_break_before: Report page auto page break before heading. Valid values: `heading1`, `heading2`, `heading3`.
        :param str paper: Report page paper. Valid values: `a4`, `letter`.
        """
        if column_break_before is not None:
            pulumi.set(__self__, "column_break_before", column_break_before)
        if footer is not None:
            pulumi.set(__self__, "footer", footer)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if page_break_before is not None:
            pulumi.set(__self__, "page_break_before", page_break_before)
        if paper is not None:
            pulumi.set(__self__, "paper", paper)

    @property
    @pulumi.getter(name="columnBreakBefore")
    def column_break_before(self) -> Optional[str]:
        """
        Report page auto column break before heading. Valid values: `heading1`, `heading2`, `heading3`.
        """
        return pulumi.get(self, "column_break_before")

    @property
    @pulumi.getter
    def footer(self) -> Optional['outputs.LayoutPageFooter']:
        """
        Configure report page footer. The structure of `footer` block is documented below.
        """
        return pulumi.get(self, "footer")

    @property
    @pulumi.getter
    def header(self) -> Optional['outputs.LayoutPageHeader']:
        """
        Configure report page header. The structure of `header` block is documented below.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        """
        Report page options. Valid values: `header-on-first-page`, `footer-on-first-page`.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="pageBreakBefore")
    def page_break_before(self) -> Optional[str]:
        """
        Report page auto page break before heading. Valid values: `heading1`, `heading2`, `heading3`.
        """
        return pulumi.get(self, "page_break_before")

    @property
    @pulumi.getter
    def paper(self) -> Optional[str]:
        """
        Report page paper. Valid values: `a4`, `letter`.
        """
        return pulumi.get(self, "paper")


@pulumi.output_type
class LayoutPageFooter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "footerItems":
            suggest = "footer_items"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutPageFooter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutPageFooter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutPageFooter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 footer_items: Optional[Sequence['outputs.LayoutPageFooterFooterItem']] = None,
                 style: Optional[str] = None):
        """
        :param Sequence['LayoutPageFooterFooterItemArgs'] footer_items: Configure report footer item. The structure of `footer_item` block is documented below.
        :param str style: Report footer style.
        """
        if footer_items is not None:
            pulumi.set(__self__, "footer_items", footer_items)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="footerItems")
    def footer_items(self) -> Optional[Sequence['outputs.LayoutPageFooterFooterItem']]:
        """
        Configure report footer item. The structure of `footer_item` block is documented below.
        """
        return pulumi.get(self, "footer_items")

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        """
        Report footer style.
        """
        return pulumi.get(self, "style")


@pulumi.output_type
class LayoutPageFooterFooterItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imgSrc":
            suggest = "img_src"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutPageFooterFooterItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutPageFooterFooterItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutPageFooterFooterItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 img_src: Optional[str] = None,
                 style: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str content: Report item text content.
        :param str description: Description.
        :param int id: Report item ID.
        :param str img_src: Report item image file name.
        :param str style: Report item style.
        :param str type: Report item type. Valid values: `text`, `image`.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if img_src is not None:
            pulumi.set(__self__, "img_src", img_src)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        """
        Report item text content.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Report item ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imgSrc")
    def img_src(self) -> Optional[str]:
        """
        Report item image file name.
        """
        return pulumi.get(self, "img_src")

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        """
        Report item style.
        """
        return pulumi.get(self, "style")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Report item type. Valid values: `text`, `image`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class LayoutPageHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerItems":
            suggest = "header_items"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutPageHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutPageHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutPageHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_items: Optional[Sequence['outputs.LayoutPageHeaderHeaderItem']] = None,
                 style: Optional[str] = None):
        """
        :param Sequence['LayoutPageHeaderHeaderItemArgs'] header_items: Configure report header item. The structure of `header_item` block is documented below.
        :param str style: Report header style.
        """
        if header_items is not None:
            pulumi.set(__self__, "header_items", header_items)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="headerItems")
    def header_items(self) -> Optional[Sequence['outputs.LayoutPageHeaderHeaderItem']]:
        """
        Configure report header item. The structure of `header_item` block is documented below.
        """
        return pulumi.get(self, "header_items")

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        """
        Report header style.
        """
        return pulumi.get(self, "style")


@pulumi.output_type
class LayoutPageHeaderHeaderItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imgSrc":
            suggest = "img_src"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutPageHeaderHeaderItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutPageHeaderHeaderItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutPageHeaderHeaderItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 img_src: Optional[str] = None,
                 style: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str content: Report item text content.
        :param str description: Description.
        :param int id: Report item ID.
        :param str img_src: Report item image file name.
        :param str style: Report item style.
        :param str type: Report item type. Valid values: `text`, `image`.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if img_src is not None:
            pulumi.set(__self__, "img_src", img_src)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        """
        Report item text content.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Report item ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imgSrc")
    def img_src(self) -> Optional[str]:
        """
        Report item image file name.
        """
        return pulumi.get(self, "img_src")

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        """
        Report item style.
        """
        return pulumi.get(self, "style")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Report item type. Valid values: `text`, `image`.
        """
        return pulumi.get(self, "type")



# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ChartCategorySeriesArgs',
    'ChartColumnArgs',
    'ChartColumnMappingArgs',
    'ChartDrillDownChartArgs',
    'ChartValueSeriesArgs',
    'ChartXSeriesArgs',
    'ChartYSeriesArgs',
    'DatasetFieldArgs',
    'DatasetParameterArgs',
    'LayoutBodyItemArgs',
    'LayoutBodyItemListArgs',
    'LayoutBodyItemParameterArgs',
    'LayoutPageArgs',
    'LayoutPageFooterArgs',
    'LayoutPageFooterFooterItemArgs',
    'LayoutPageHeaderArgs',
    'LayoutPageHeaderHeaderItemArgs',
]

@pulumi.input_type
class ChartCategorySeriesArgs:
    def __init__(__self__, *,
                 databind: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] databind: Category series value expression.
        :param pulumi.Input[int] font_size: Font size of category-series title.
        """
        if databind is not None:
            pulumi.set(__self__, "databind", databind)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)

    @property
    @pulumi.getter
    def databind(self) -> Optional[pulumi.Input[str]]:
        """
        Category series value expression.
        """
        return pulumi.get(self, "databind")

    @databind.setter
    def databind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "databind", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[int]]:
        """
        Font size of category-series title.
        """
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "font_size", value)


@pulumi.input_type
class ChartColumnArgs:
    def __init__(__self__, *,
                 detail_unit: Optional[pulumi.Input[str]] = None,
                 detail_value: Optional[pulumi.Input[str]] = None,
                 footer_unit: Optional[pulumi.Input[str]] = None,
                 footer_value: Optional[pulumi.Input[str]] = None,
                 header_value: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 mappings: Optional[pulumi.Input[Sequence[pulumi.Input['ChartColumnMappingArgs']]]] = None):
        """
        :param pulumi.Input[str] detail_unit: Detail unit of column.
        :param pulumi.Input[str] detail_value: Detail value of column.
        :param pulumi.Input[str] footer_unit: Footer unit of column.
        :param pulumi.Input[str] footer_value: Footer value of column.
        :param pulumi.Input[str] header_value: Display name of table header.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[Sequence[pulumi.Input['ChartColumnMappingArgs']]] mappings: Show detail in certain display value for certain condition. The structure of `mapping` block is documented below.
        """
        if detail_unit is not None:
            pulumi.set(__self__, "detail_unit", detail_unit)
        if detail_value is not None:
            pulumi.set(__self__, "detail_value", detail_value)
        if footer_unit is not None:
            pulumi.set(__self__, "footer_unit", footer_unit)
        if footer_value is not None:
            pulumi.set(__self__, "footer_value", footer_value)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)

    @property
    @pulumi.getter(name="detailUnit")
    def detail_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Detail unit of column.
        """
        return pulumi.get(self, "detail_unit")

    @detail_unit.setter
    def detail_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detail_unit", value)

    @property
    @pulumi.getter(name="detailValue")
    def detail_value(self) -> Optional[pulumi.Input[str]]:
        """
        Detail value of column.
        """
        return pulumi.get(self, "detail_value")

    @detail_value.setter
    def detail_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detail_value", value)

    @property
    @pulumi.getter(name="footerUnit")
    def footer_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Footer unit of column.
        """
        return pulumi.get(self, "footer_unit")

    @footer_unit.setter
    def footer_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "footer_unit", value)

    @property
    @pulumi.getter(name="footerValue")
    def footer_value(self) -> Optional[pulumi.Input[str]]:
        """
        Footer value of column.
        """
        return pulumi.get(self, "footer_value")

    @footer_value.setter
    def footer_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "footer_value", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of table header.
        """
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ChartColumnMappingArgs']]]]:
        """
        Show detail in certain display value for certain condition. The structure of `mapping` block is documented below.
        """
        return pulumi.get(self, "mappings")

    @mappings.setter
    def mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ChartColumnMappingArgs']]]]):
        pulumi.set(self, "mappings", value)


@pulumi.input_type
class ChartColumnMappingArgs:
    def __init__(__self__, *,
                 displayname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 op: Optional[pulumi.Input[str]] = None,
                 value1: Optional[pulumi.Input[str]] = None,
                 value2: Optional[pulumi.Input[str]] = None,
                 value_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] displayname: Display name.
        :param pulumi.Input[int] id: id
        :param pulumi.Input[str] op: Comparision operater. Valid values: `none`, `greater`, `greater-equal`, `less`, `less-equal`, `equal`, `between`.
        :param pulumi.Input[str] value1: Value 1.
        :param pulumi.Input[str] value2: Value 2.
        :param pulumi.Input[str] value_type: Value type. Valid values: `integer`, `string`.
        """
        if displayname is not None:
            pulumi.set(__self__, "displayname", displayname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if op is not None:
            pulumi.set(__self__, "op", op)
        if value1 is not None:
            pulumi.set(__self__, "value1", value1)
        if value2 is not None:
            pulumi.set(__self__, "value2", value2)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter
    def displayname(self) -> Optional[pulumi.Input[str]]:
        """
        Display name.
        """
        return pulumi.get(self, "displayname")

    @displayname.setter
    def displayname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "displayname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def op(self) -> Optional[pulumi.Input[str]]:
        """
        Comparision operater. Valid values: `none`, `greater`, `greater-equal`, `less`, `less-equal`, `equal`, `between`.
        """
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def value1(self) -> Optional[pulumi.Input[str]]:
        """
        Value 1.
        """
        return pulumi.get(self, "value1")

    @value1.setter
    def value1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value1", value)

    @property
    @pulumi.getter
    def value2(self) -> Optional[pulumi.Input[str]]:
        """
        Value 2.
        """
        return pulumi.get(self, "value2")

    @value2.setter
    def value2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value2", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[pulumi.Input[str]]:
        """
        Value type. Valid values: `integer`, `string`.
        """
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_type", value)


@pulumi.input_type
class ChartDrillDownChartArgs:
    def __init__(__self__, *,
                 chart_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chart_name: Drill down chart name.
        :param pulumi.Input[int] id: Drill down chart ID.
        :param pulumi.Input[str] status: Enable/disable this drill down chart. Valid values: `enable`, `disable`.
        """
        if chart_name is not None:
            pulumi.set(__self__, "chart_name", chart_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="chartName")
    def chart_name(self) -> Optional[pulumi.Input[str]]:
        """
        Drill down chart name.
        """
        return pulumi.get(self, "chart_name")

    @chart_name.setter
    def chart_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Drill down chart ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this drill down chart. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ChartValueSeriesArgs:
    def __init__(__self__, *,
                 databind: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] databind: Value series value expression.
        """
        if databind is not None:
            pulumi.set(__self__, "databind", databind)

    @property
    @pulumi.getter
    def databind(self) -> Optional[pulumi.Input[str]]:
        """
        Value series value expression.
        """
        return pulumi.get(self, "databind")

    @databind.setter
    def databind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "databind", value)


@pulumi.input_type
class ChartXSeriesArgs:
    def __init__(__self__, *,
                 caption: Optional[pulumi.Input[str]] = None,
                 caption_font_size: Optional[pulumi.Input[int]] = None,
                 databind: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[int]] = None,
                 is_category: Optional[pulumi.Input[str]] = None,
                 label_angle: Optional[pulumi.Input[str]] = None,
                 scale_direction: Optional[pulumi.Input[str]] = None,
                 scale_format: Optional[pulumi.Input[str]] = None,
                 scale_step: Optional[pulumi.Input[int]] = None,
                 scale_unit: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] caption: X-series caption.
        :param pulumi.Input[int] caption_font_size: X-series caption font size.
        :param pulumi.Input[str] databind: X-series value expression.
        :param pulumi.Input[int] font_size: X-series label font size.
        :param pulumi.Input[str] is_category: X-series represent category or not. Valid values: `yes`, `no`.
        :param pulumi.Input[str] label_angle: X-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
        :param pulumi.Input[str] scale_direction: Scale increase or decrease. Valid values: `decrease`, `increase`.
        :param pulumi.Input[str] scale_format: Date/time format. Valid values: `YYYY-MM-DD-HH-MM`, `YYYY-MM-DD HH`, `YYYY-MM-DD`, `YYYY-MM`, `YYYY`, `HH-MM`, `MM-DD`.
        :param pulumi.Input[int] scale_step: Scale step.
        :param pulumi.Input[str] scale_unit: Scale unit. Valid values: `minute`, `hour`, `day`, `month`, `year`.
        :param pulumi.Input[str] unit: X-series unit.
        """
        if caption is not None:
            pulumi.set(__self__, "caption", caption)
        if caption_font_size is not None:
            pulumi.set(__self__, "caption_font_size", caption_font_size)
        if databind is not None:
            pulumi.set(__self__, "databind", databind)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if is_category is not None:
            pulumi.set(__self__, "is_category", is_category)
        if label_angle is not None:
            pulumi.set(__self__, "label_angle", label_angle)
        if scale_direction is not None:
            pulumi.set(__self__, "scale_direction", scale_direction)
        if scale_format is not None:
            pulumi.set(__self__, "scale_format", scale_format)
        if scale_step is not None:
            pulumi.set(__self__, "scale_step", scale_step)
        if scale_unit is not None:
            pulumi.set(__self__, "scale_unit", scale_unit)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def caption(self) -> Optional[pulumi.Input[str]]:
        """
        X-series caption.
        """
        return pulumi.get(self, "caption")

    @caption.setter
    def caption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caption", value)

    @property
    @pulumi.getter(name="captionFontSize")
    def caption_font_size(self) -> Optional[pulumi.Input[int]]:
        """
        X-series caption font size.
        """
        return pulumi.get(self, "caption_font_size")

    @caption_font_size.setter
    def caption_font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "caption_font_size", value)

    @property
    @pulumi.getter
    def databind(self) -> Optional[pulumi.Input[str]]:
        """
        X-series value expression.
        """
        return pulumi.get(self, "databind")

    @databind.setter
    def databind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "databind", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[int]]:
        """
        X-series label font size.
        """
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="isCategory")
    def is_category(self) -> Optional[pulumi.Input[str]]:
        """
        X-series represent category or not. Valid values: `yes`, `no`.
        """
        return pulumi.get(self, "is_category")

    @is_category.setter
    def is_category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_category", value)

    @property
    @pulumi.getter(name="labelAngle")
    def label_angle(self) -> Optional[pulumi.Input[str]]:
        """
        X-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
        """
        return pulumi.get(self, "label_angle")

    @label_angle.setter
    def label_angle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_angle", value)

    @property
    @pulumi.getter(name="scaleDirection")
    def scale_direction(self) -> Optional[pulumi.Input[str]]:
        """
        Scale increase or decrease. Valid values: `decrease`, `increase`.
        """
        return pulumi.get(self, "scale_direction")

    @scale_direction.setter
    def scale_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_direction", value)

    @property
    @pulumi.getter(name="scaleFormat")
    def scale_format(self) -> Optional[pulumi.Input[str]]:
        """
        Date/time format. Valid values: `YYYY-MM-DD-HH-MM`, `YYYY-MM-DD HH`, `YYYY-MM-DD`, `YYYY-MM`, `YYYY`, `HH-MM`, `MM-DD`.
        """
        return pulumi.get(self, "scale_format")

    @scale_format.setter
    def scale_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_format", value)

    @property
    @pulumi.getter(name="scaleStep")
    def scale_step(self) -> Optional[pulumi.Input[int]]:
        """
        Scale step.
        """
        return pulumi.get(self, "scale_step")

    @scale_step.setter
    def scale_step(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_step", value)

    @property
    @pulumi.getter(name="scaleUnit")
    def scale_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Scale unit. Valid values: `minute`, `hour`, `day`, `month`, `year`.
        """
        return pulumi.get(self, "scale_unit")

    @scale_unit.setter
    def scale_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_unit", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        X-series unit.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class ChartYSeriesArgs:
    def __init__(__self__, *,
                 caption: Optional[pulumi.Input[str]] = None,
                 caption_font_size: Optional[pulumi.Input[int]] = None,
                 databind: Optional[pulumi.Input[str]] = None,
                 extra_databind: Optional[pulumi.Input[str]] = None,
                 extra_y: Optional[pulumi.Input[str]] = None,
                 extra_y_legend: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[int]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 label_angle: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 y_legend: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] caption: Y-series caption.
        :param pulumi.Input[int] caption_font_size: Y-series caption font size.
        :param pulumi.Input[str] databind: Y-series value expression.
        :param pulumi.Input[str] extra_databind: Extra Y-series value.
        :param pulumi.Input[str] extra_y: Allow another Y-series value Valid values: `enable`, `disable`.
        :param pulumi.Input[str] extra_y_legend: Extra Y-series legend type/name.
        :param pulumi.Input[int] font_size: Y-series label font size.
        :param pulumi.Input[str] group: Y-series group option.
        :param pulumi.Input[str] label_angle: Y-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
        :param pulumi.Input[str] unit: Y-series unit.
        :param pulumi.Input[str] y_legend: First Y-series legend type/name.
        """
        if caption is not None:
            pulumi.set(__self__, "caption", caption)
        if caption_font_size is not None:
            pulumi.set(__self__, "caption_font_size", caption_font_size)
        if databind is not None:
            pulumi.set(__self__, "databind", databind)
        if extra_databind is not None:
            pulumi.set(__self__, "extra_databind", extra_databind)
        if extra_y is not None:
            pulumi.set(__self__, "extra_y", extra_y)
        if extra_y_legend is not None:
            pulumi.set(__self__, "extra_y_legend", extra_y_legend)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if label_angle is not None:
            pulumi.set(__self__, "label_angle", label_angle)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if y_legend is not None:
            pulumi.set(__self__, "y_legend", y_legend)

    @property
    @pulumi.getter
    def caption(self) -> Optional[pulumi.Input[str]]:
        """
        Y-series caption.
        """
        return pulumi.get(self, "caption")

    @caption.setter
    def caption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caption", value)

    @property
    @pulumi.getter(name="captionFontSize")
    def caption_font_size(self) -> Optional[pulumi.Input[int]]:
        """
        Y-series caption font size.
        """
        return pulumi.get(self, "caption_font_size")

    @caption_font_size.setter
    def caption_font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "caption_font_size", value)

    @property
    @pulumi.getter
    def databind(self) -> Optional[pulumi.Input[str]]:
        """
        Y-series value expression.
        """
        return pulumi.get(self, "databind")

    @databind.setter
    def databind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "databind", value)

    @property
    @pulumi.getter(name="extraDatabind")
    def extra_databind(self) -> Optional[pulumi.Input[str]]:
        """
        Extra Y-series value.
        """
        return pulumi.get(self, "extra_databind")

    @extra_databind.setter
    def extra_databind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_databind", value)

    @property
    @pulumi.getter(name="extraY")
    def extra_y(self) -> Optional[pulumi.Input[str]]:
        """
        Allow another Y-series value Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "extra_y")

    @extra_y.setter
    def extra_y(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_y", value)

    @property
    @pulumi.getter(name="extraYLegend")
    def extra_y_legend(self) -> Optional[pulumi.Input[str]]:
        """
        Extra Y-series legend type/name.
        """
        return pulumi.get(self, "extra_y_legend")

    @extra_y_legend.setter
    def extra_y_legend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_y_legend", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[int]]:
        """
        Y-series label font size.
        """
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Y-series group option.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="labelAngle")
    def label_angle(self) -> Optional[pulumi.Input[str]]:
        """
        Y-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
        """
        return pulumi.get(self, "label_angle")

    @label_angle.setter
    def label_angle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_angle", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        Y-series unit.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter(name="yLegend")
    def y_legend(self) -> Optional[pulumi.Input[str]]:
        """
        First Y-series legend type/name.
        """
        return pulumi.get(self, "y_legend")

    @y_legend.setter
    def y_legend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_legend", value)


@pulumi.input_type
class DatasetFieldArgs:
    def __init__(__self__, *,
                 displayname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] displayname: Display name.
        :param pulumi.Input[int] id: Field ID (1 to number of columns in SQL result).
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] type: Field type. Valid values: `text`, `integer`, `double`.
        """
        if displayname is not None:
            pulumi.set(__self__, "displayname", displayname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def displayname(self) -> Optional[pulumi.Input[str]]:
        """
        Display name.
        """
        return pulumi.get(self, "displayname")

    @displayname.setter
    def displayname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "displayname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Field ID (1 to number of columns in SQL result).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Field type. Valid values: `text`, `integer`, `double`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatasetParameterArgs:
    def __init__(__self__, *,
                 data_type: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 field: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] data_type: Data type. Valid values: `text`, `integer`, `double`, `long-integer`, `date-time`.
        :param pulumi.Input[str] display_name: Display name.
        :param pulumi.Input[str] field: SQL field name.
        :param pulumi.Input[int] id: Parameter ID (1 to number of columns in SQL result).
        """
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input[str]]:
        """
        Data type. Valid values: `text`, `integer`, `double`, `long-integer`, `date-time`.
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[str]]:
        """
        SQL field name.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Parameter ID (1 to number of columns in SQL result).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LayoutBodyItemArgs:
    def __init__(__self__, *,
                 chart: Optional[pulumi.Input[str]] = None,
                 chart_options: Optional[pulumi.Input[str]] = None,
                 column: Optional[pulumi.Input[int]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 drill_down_items: Optional[pulumi.Input[str]] = None,
                 drill_down_types: Optional[pulumi.Input[str]] = None,
                 hide: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 img_src: Optional[pulumi.Input[str]] = None,
                 list_component: Optional[pulumi.Input[str]] = None,
                 lists: Optional[pulumi.Input[Sequence[pulumi.Input['LayoutBodyItemListArgs']]]] = None,
                 misc_component: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['LayoutBodyItemParameterArgs']]]] = None,
                 style: Optional[pulumi.Input[str]] = None,
                 table_caption_style: Optional[pulumi.Input[str]] = None,
                 table_column_widths: Optional[pulumi.Input[str]] = None,
                 table_even_row_style: Optional[pulumi.Input[str]] = None,
                 table_head_style: Optional[pulumi.Input[str]] = None,
                 table_odd_row_style: Optional[pulumi.Input[str]] = None,
                 text_component: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 top_n: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chart: Report item chart name.
        :param pulumi.Input[str] chart_options: Report chart options. Valid values: `include-no-data`, `hide-title`, `show-caption`.
        :param pulumi.Input[int] column: Report section column number.
        :param pulumi.Input[str] content: Report item text content.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] drill_down_items: Control how drill down charts are shown.
        :param pulumi.Input[str] drill_down_types: Control whether keys from the parent being combined or not.
        :param pulumi.Input[str] hide: Enable/disable hide item in report. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] id: Report item ID.
        :param pulumi.Input[str] img_src: Report item image file name.
        :param pulumi.Input[str] list_component: Report item list component. Valid values: `bullet`, `numbered`.
        :param pulumi.Input[Sequence[pulumi.Input['LayoutBodyItemListArgs']]] lists: Configure report list item. The structure of `list` block is documented below.
        :param pulumi.Input[str] misc_component: Report item miscellaneous component. Valid values: `hline`, `page-break`, `column-break`, `section-start`.
        :param pulumi.Input[Sequence[pulumi.Input['LayoutBodyItemParameterArgs']]] parameters: Parameters. The structure of `parameters` block is documented below.
        :param pulumi.Input[str] style: Report item style.
        :param pulumi.Input[str] table_caption_style: Table chart caption style.
        :param pulumi.Input[str] table_column_widths: Report item table column widths.
        :param pulumi.Input[str] table_even_row_style: Table chart even row style.
        :param pulumi.Input[str] table_head_style: Table chart head style.
        :param pulumi.Input[str] table_odd_row_style: Table chart odd row style.
        :param pulumi.Input[str] text_component: Report item text component. Valid values: `text`, `heading1`, `heading2`, `heading3`.
        :param pulumi.Input[str] title: Report section title.
        :param pulumi.Input[int] top_n: Value of top.
        :param pulumi.Input[str] type: Report item type. Valid values: `text`, `image`, `chart`, `misc`.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if chart_options is not None:
            pulumi.set(__self__, "chart_options", chart_options)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if drill_down_items is not None:
            pulumi.set(__self__, "drill_down_items", drill_down_items)
        if drill_down_types is not None:
            pulumi.set(__self__, "drill_down_types", drill_down_types)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if img_src is not None:
            pulumi.set(__self__, "img_src", img_src)
        if list_component is not None:
            pulumi.set(__self__, "list_component", list_component)
        if lists is not None:
            pulumi.set(__self__, "lists", lists)
        if misc_component is not None:
            pulumi.set(__self__, "misc_component", misc_component)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if table_caption_style is not None:
            pulumi.set(__self__, "table_caption_style", table_caption_style)
        if table_column_widths is not None:
            pulumi.set(__self__, "table_column_widths", table_column_widths)
        if table_even_row_style is not None:
            pulumi.set(__self__, "table_even_row_style", table_even_row_style)
        if table_head_style is not None:
            pulumi.set(__self__, "table_head_style", table_head_style)
        if table_odd_row_style is not None:
            pulumi.set(__self__, "table_odd_row_style", table_odd_row_style)
        if text_component is not None:
            pulumi.set(__self__, "text_component", text_component)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if top_n is not None:
            pulumi.set(__self__, "top_n", top_n)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def chart(self) -> Optional[pulumi.Input[str]]:
        """
        Report item chart name.
        """
        return pulumi.get(self, "chart")

    @chart.setter
    def chart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart", value)

    @property
    @pulumi.getter(name="chartOptions")
    def chart_options(self) -> Optional[pulumi.Input[str]]:
        """
        Report chart options. Valid values: `include-no-data`, `hide-title`, `show-caption`.
        """
        return pulumi.get(self, "chart_options")

    @chart_options.setter
    def chart_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart_options", value)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input[int]]:
        """
        Report section column number.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Report item text content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="drillDownItems")
    def drill_down_items(self) -> Optional[pulumi.Input[str]]:
        """
        Control how drill down charts are shown.
        """
        return pulumi.get(self, "drill_down_items")

    @drill_down_items.setter
    def drill_down_items(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drill_down_items", value)

    @property
    @pulumi.getter(name="drillDownTypes")
    def drill_down_types(self) -> Optional[pulumi.Input[str]]:
        """
        Control whether keys from the parent being combined or not.
        """
        return pulumi.get(self, "drill_down_types")

    @drill_down_types.setter
    def drill_down_types(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drill_down_types", value)

    @property
    @pulumi.getter
    def hide(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable hide item in report. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "hide")

    @hide.setter
    def hide(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hide", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Report item ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="imgSrc")
    def img_src(self) -> Optional[pulumi.Input[str]]:
        """
        Report item image file name.
        """
        return pulumi.get(self, "img_src")

    @img_src.setter
    def img_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "img_src", value)

    @property
    @pulumi.getter(name="listComponent")
    def list_component(self) -> Optional[pulumi.Input[str]]:
        """
        Report item list component. Valid values: `bullet`, `numbered`.
        """
        return pulumi.get(self, "list_component")

    @list_component.setter
    def list_component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "list_component", value)

    @property
    @pulumi.getter
    def lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LayoutBodyItemListArgs']]]]:
        """
        Configure report list item. The structure of `list` block is documented below.
        """
        return pulumi.get(self, "lists")

    @lists.setter
    def lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LayoutBodyItemListArgs']]]]):
        pulumi.set(self, "lists", value)

    @property
    @pulumi.getter(name="miscComponent")
    def misc_component(self) -> Optional[pulumi.Input[str]]:
        """
        Report item miscellaneous component. Valid values: `hline`, `page-break`, `column-break`, `section-start`.
        """
        return pulumi.get(self, "misc_component")

    @misc_component.setter
    def misc_component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "misc_component", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LayoutBodyItemParameterArgs']]]]:
        """
        Parameters. The structure of `parameters` block is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LayoutBodyItemParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        """
        Report item style.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter(name="tableCaptionStyle")
    def table_caption_style(self) -> Optional[pulumi.Input[str]]:
        """
        Table chart caption style.
        """
        return pulumi.get(self, "table_caption_style")

    @table_caption_style.setter
    def table_caption_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_caption_style", value)

    @property
    @pulumi.getter(name="tableColumnWidths")
    def table_column_widths(self) -> Optional[pulumi.Input[str]]:
        """
        Report item table column widths.
        """
        return pulumi.get(self, "table_column_widths")

    @table_column_widths.setter
    def table_column_widths(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_column_widths", value)

    @property
    @pulumi.getter(name="tableEvenRowStyle")
    def table_even_row_style(self) -> Optional[pulumi.Input[str]]:
        """
        Table chart even row style.
        """
        return pulumi.get(self, "table_even_row_style")

    @table_even_row_style.setter
    def table_even_row_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_even_row_style", value)

    @property
    @pulumi.getter(name="tableHeadStyle")
    def table_head_style(self) -> Optional[pulumi.Input[str]]:
        """
        Table chart head style.
        """
        return pulumi.get(self, "table_head_style")

    @table_head_style.setter
    def table_head_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_head_style", value)

    @property
    @pulumi.getter(name="tableOddRowStyle")
    def table_odd_row_style(self) -> Optional[pulumi.Input[str]]:
        """
        Table chart odd row style.
        """
        return pulumi.get(self, "table_odd_row_style")

    @table_odd_row_style.setter
    def table_odd_row_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_odd_row_style", value)

    @property
    @pulumi.getter(name="textComponent")
    def text_component(self) -> Optional[pulumi.Input[str]]:
        """
        Report item text component. Valid values: `text`, `heading1`, `heading2`, `heading3`.
        """
        return pulumi.get(self, "text_component")

    @text_component.setter
    def text_component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_component", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Report section title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="topN")
    def top_n(self) -> Optional[pulumi.Input[int]]:
        """
        Value of top.
        """
        return pulumi.get(self, "top_n")

    @top_n.setter
    def top_n(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "top_n", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Report item type. Valid values: `text`, `image`, `chart`, `misc`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class LayoutBodyItemListArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] content: List entry content.
        :param pulumi.Input[int] id: List entry ID.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        List entry content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        List entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LayoutBodyItemParameterArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] name: Field name that match field of parameters defined in dataset.
        :param pulumi.Input[str] value: Value to replace corresponding field of parameters defined in dataset.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Field name that match field of parameters defined in dataset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value to replace corresponding field of parameters defined in dataset.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class LayoutPageArgs:
    def __init__(__self__, *,
                 column_break_before: Optional[pulumi.Input[str]] = None,
                 footer: Optional[pulumi.Input['LayoutPageFooterArgs']] = None,
                 header: Optional[pulumi.Input['LayoutPageHeaderArgs']] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 page_break_before: Optional[pulumi.Input[str]] = None,
                 paper: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] column_break_before: Report page auto column break before heading. Valid values: `heading1`, `heading2`, `heading3`.
        :param pulumi.Input['LayoutPageFooterArgs'] footer: Configure report page footer. The structure of `footer` block is documented below.
        :param pulumi.Input['LayoutPageHeaderArgs'] header: Configure report page header. The structure of `header` block is documented below.
        :param pulumi.Input[str] options: Report page options. Valid values: `header-on-first-page`, `footer-on-first-page`.
        :param pulumi.Input[str] page_break_before: Report page auto page break before heading. Valid values: `heading1`, `heading2`, `heading3`.
        :param pulumi.Input[str] paper: Report page paper. Valid values: `a4`, `letter`.
        """
        if column_break_before is not None:
            pulumi.set(__self__, "column_break_before", column_break_before)
        if footer is not None:
            pulumi.set(__self__, "footer", footer)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if page_break_before is not None:
            pulumi.set(__self__, "page_break_before", page_break_before)
        if paper is not None:
            pulumi.set(__self__, "paper", paper)

    @property
    @pulumi.getter(name="columnBreakBefore")
    def column_break_before(self) -> Optional[pulumi.Input[str]]:
        """
        Report page auto column break before heading. Valid values: `heading1`, `heading2`, `heading3`.
        """
        return pulumi.get(self, "column_break_before")

    @column_break_before.setter
    def column_break_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_break_before", value)

    @property
    @pulumi.getter
    def footer(self) -> Optional[pulumi.Input['LayoutPageFooterArgs']]:
        """
        Configure report page footer. The structure of `footer` block is documented below.
        """
        return pulumi.get(self, "footer")

    @footer.setter
    def footer(self, value: Optional[pulumi.Input['LayoutPageFooterArgs']]):
        pulumi.set(self, "footer", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input['LayoutPageHeaderArgs']]:
        """
        Configure report page header. The structure of `header` block is documented below.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input['LayoutPageHeaderArgs']]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Report page options. Valid values: `header-on-first-page`, `footer-on-first-page`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="pageBreakBefore")
    def page_break_before(self) -> Optional[pulumi.Input[str]]:
        """
        Report page auto page break before heading. Valid values: `heading1`, `heading2`, `heading3`.
        """
        return pulumi.get(self, "page_break_before")

    @page_break_before.setter
    def page_break_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "page_break_before", value)

    @property
    @pulumi.getter
    def paper(self) -> Optional[pulumi.Input[str]]:
        """
        Report page paper. Valid values: `a4`, `letter`.
        """
        return pulumi.get(self, "paper")

    @paper.setter
    def paper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "paper", value)


@pulumi.input_type
class LayoutPageFooterArgs:
    def __init__(__self__, *,
                 footer_items: Optional[pulumi.Input[Sequence[pulumi.Input['LayoutPageFooterFooterItemArgs']]]] = None,
                 style: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['LayoutPageFooterFooterItemArgs']]] footer_items: Configure report footer item. The structure of `footer_item` block is documented below.
        :param pulumi.Input[str] style: Report footer style.
        """
        if footer_items is not None:
            pulumi.set(__self__, "footer_items", footer_items)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="footerItems")
    def footer_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LayoutPageFooterFooterItemArgs']]]]:
        """
        Configure report footer item. The structure of `footer_item` block is documented below.
        """
        return pulumi.get(self, "footer_items")

    @footer_items.setter
    def footer_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LayoutPageFooterFooterItemArgs']]]]):
        pulumi.set(self, "footer_items", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        """
        Report footer style.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class LayoutPageFooterFooterItemArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 img_src: Optional[pulumi.Input[str]] = None,
                 style: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: Report item text content.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] id: Report item ID.
        :param pulumi.Input[str] img_src: Report item image file name.
        :param pulumi.Input[str] style: Report item style.
        :param pulumi.Input[str] type: Report item type. Valid values: `text`, `image`.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if img_src is not None:
            pulumi.set(__self__, "img_src", img_src)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Report item text content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Report item ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="imgSrc")
    def img_src(self) -> Optional[pulumi.Input[str]]:
        """
        Report item image file name.
        """
        return pulumi.get(self, "img_src")

    @img_src.setter
    def img_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "img_src", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        """
        Report item style.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Report item type. Valid values: `text`, `image`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class LayoutPageHeaderArgs:
    def __init__(__self__, *,
                 header_items: Optional[pulumi.Input[Sequence[pulumi.Input['LayoutPageHeaderHeaderItemArgs']]]] = None,
                 style: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['LayoutPageHeaderHeaderItemArgs']]] header_items: Configure report header item. The structure of `header_item` block is documented below.
        :param pulumi.Input[str] style: Report header style.
        """
        if header_items is not None:
            pulumi.set(__self__, "header_items", header_items)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="headerItems")
    def header_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LayoutPageHeaderHeaderItemArgs']]]]:
        """
        Configure report header item. The structure of `header_item` block is documented below.
        """
        return pulumi.get(self, "header_items")

    @header_items.setter
    def header_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LayoutPageHeaderHeaderItemArgs']]]]):
        pulumi.set(self, "header_items", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        """
        Report header style.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class LayoutPageHeaderHeaderItemArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 img_src: Optional[pulumi.Input[str]] = None,
                 style: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: Report item text content.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] id: Report item ID.
        :param pulumi.Input[str] img_src: Report item image file name.
        :param pulumi.Input[str] style: Report item style.
        :param pulumi.Input[str] type: Report item type. Valid values: `text`, `image`.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if img_src is not None:
            pulumi.set(__self__, "img_src", img_src)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Report item text content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Report item ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="imgSrc")
    def img_src(self) -> Optional[pulumi.Input[str]]:
        """
        Report item image file name.
        """
        return pulumi.get(self, "img_src")

    @img_src.setter
    def img_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "img_src", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        """
        Report item style.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Report item type. Valid values: `text`, `image`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)



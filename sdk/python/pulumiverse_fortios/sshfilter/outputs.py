# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ProfileFileFilter',
    'ProfileFileFilterEntry',
    'ProfileFileFilterEntryFileType',
    'ProfileShellCommand',
]

@pulumi.output_type
class ProfileFileFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scanArchiveContents":
            suggest = "scan_archive_contents"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileFileFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileFileFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileFileFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entries: Optional[Sequence['outputs.ProfileFileFilterEntry']] = None,
                 log: Optional[str] = None,
                 scan_archive_contents: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param Sequence['ProfileFileFilterEntryArgs'] entries: File filter entries. The structure of `entries` block is documented below.
        :param str log: Enable/disable file filter logging. Valid values: `enable`, `disable`.
        :param str scan_archive_contents: Enable/disable file filter archive contents scan. Valid values: `enable`, `disable`.
        :param str status: Enable/disable file filter. Valid values: `enable`, `disable`.
        """
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if scan_archive_contents is not None:
            pulumi.set(__self__, "scan_archive_contents", scan_archive_contents)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def entries(self) -> Optional[Sequence['outputs.ProfileFileFilterEntry']]:
        """
        File filter entries. The structure of `entries` block is documented below.
        """
        return pulumi.get(self, "entries")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable file filter logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="scanArchiveContents")
    def scan_archive_contents(self) -> Optional[str]:
        """
        Enable/disable file filter archive contents scan. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_archive_contents")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable file filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ProfileFileFilterEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileTypes":
            suggest = "file_types"
        elif key == "passwordProtected":
            suggest = "password_protected"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileFileFilterEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileFileFilterEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileFileFilterEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 comment: Optional[str] = None,
                 direction: Optional[str] = None,
                 file_types: Optional[Sequence['outputs.ProfileFileFilterEntryFileType']] = None,
                 filter: Optional[str] = None,
                 password_protected: Optional[str] = None):
        """
        :param str action: Action taken for matched file. Valid values: `log`, `block`.
        :param str comment: Comment.
        :param str direction: Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
        :param Sequence['ProfileFileFilterEntryFileTypeArgs'] file_types: Select file type. The structure of `file_type` block is documented below.
        :param str filter: Add a file filter.
        :param str password_protected: Match password-protected files. Valid values: `yes`, `any`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if password_protected is not None:
            pulumi.set(__self__, "password_protected", password_protected)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action taken for matched file. Valid values: `log`, `block`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[Sequence['outputs.ProfileFileFilterEntryFileType']]:
        """
        Select file type. The structure of `file_type` block is documented below.
        """
        return pulumi.get(self, "file_types")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        """
        Add a file filter.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="passwordProtected")
    def password_protected(self) -> Optional[str]:
        """
        Match password-protected files. Valid values: `yes`, `any`.
        """
        return pulumi.get(self, "password_protected")


@pulumi.output_type
class ProfileFileFilterEntryFileType(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: File type name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        File type name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProfileShellCommand(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 alert: Optional[str] = None,
                 id: Optional[int] = None,
                 log: Optional[str] = None,
                 pattern: Optional[str] = None,
                 severity: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str action: Action to take for URL filter matches. Valid values: `block`, `allow`.
        :param str alert: Enable/disable alert. Valid values: `enable`, `disable`.
        :param int id: Id.
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param str pattern: SSH shell command pattern.
        :param str severity: Log severity. Valid values: `low`, `medium`, `high`, `critical`.
        :param str type: Matching type. Valid values: `simple`, `regex`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action to take for URL filter matches. Valid values: `block`, `allow`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def alert(self) -> Optional[str]:
        """
        Enable/disable alert. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        SSH shell command pattern.
        """
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Log severity. Valid values: `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Matching type. Valid values: `simple`, `regex`.
        """
        return pulumi.get(self, "type")



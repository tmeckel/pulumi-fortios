# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ProfileAddressListArgs',
    'ProfileAddressListBlockedAddressArgs',
    'ProfileAddressListTrustedAddressArgs',
    'ProfileConstraintArgs',
    'ProfileConstraintContentLengthArgs',
    'ProfileConstraintExceptionArgs',
    'ProfileConstraintHeaderLengthArgs',
    'ProfileConstraintHostnameArgs',
    'ProfileConstraintLineLengthArgs',
    'ProfileConstraintMalformedArgs',
    'ProfileConstraintMaxCookieArgs',
    'ProfileConstraintMaxHeaderLineArgs',
    'ProfileConstraintMaxRangeSegmentArgs',
    'ProfileConstraintMaxUrlParamArgs',
    'ProfileConstraintMethodArgs',
    'ProfileConstraintParamLengthArgs',
    'ProfileConstraintUrlParamLengthArgs',
    'ProfileConstraintVersionArgs',
    'ProfileMethodArgs',
    'ProfileMethodMethodPolicyArgs',
    'ProfileSignatureArgs',
    'ProfileSignatureCustomSignatureArgs',
    'ProfileSignatureDisabledSignatureArgs',
    'ProfileSignatureDisabledSubClassArgs',
    'ProfileSignatureMainClassArgs',
    'ProfileUrlAccessArgs',
    'ProfileUrlAccessAccessPatternArgs',
]

@pulumi.input_type
class ProfileAddressListArgs:
    def __init__(__self__, *,
                 blocked_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileAddressListBlockedAddressArgs']]]] = None,
                 blocked_log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trusted_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileAddressListTrustedAddressArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ProfileAddressListBlockedAddressArgs']]] blocked_addresses: Blocked address. The structure of `blocked_address` block is documented below.
        :param pulumi.Input[str] blocked_log: Enable/disable logging on blocked addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileAddressListTrustedAddressArgs']]] trusted_addresses: Trusted address. The structure of `trusted_address` block is documented below.
        """
        if blocked_addresses is not None:
            pulumi.set(__self__, "blocked_addresses", blocked_addresses)
        if blocked_log is not None:
            pulumi.set(__self__, "blocked_log", blocked_log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trusted_addresses is not None:
            pulumi.set(__self__, "trusted_addresses", trusted_addresses)

    @property
    @pulumi.getter(name="blockedAddresses")
    def blocked_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileAddressListBlockedAddressArgs']]]]:
        """
        Blocked address. The structure of `blocked_address` block is documented below.
        """
        return pulumi.get(self, "blocked_addresses")

    @blocked_addresses.setter
    def blocked_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileAddressListBlockedAddressArgs']]]]):
        pulumi.set(self, "blocked_addresses", value)

    @property
    @pulumi.getter(name="blockedLog")
    def blocked_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging on blocked addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "blocked_log")

    @blocked_log.setter
    def blocked_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blocked_log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trustedAddresses")
    def trusted_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileAddressListTrustedAddressArgs']]]]:
        """
        Trusted address. The structure of `trusted_address` block is documented below.
        """
        return pulumi.get(self, "trusted_addresses")

    @trusted_addresses.setter
    def trusted_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileAddressListTrustedAddressArgs']]]]):
        pulumi.set(self, "trusted_addresses", value)


@pulumi.input_type
class ProfileAddressListBlockedAddressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProfileAddressListTrustedAddressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProfileConstraintArgs:
    def __init__(__self__, *,
                 content_length: Optional[pulumi.Input['ProfileConstraintContentLengthArgs']] = None,
                 exceptions: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileConstraintExceptionArgs']]]] = None,
                 header_length: Optional[pulumi.Input['ProfileConstraintHeaderLengthArgs']] = None,
                 hostname: Optional[pulumi.Input['ProfileConstraintHostnameArgs']] = None,
                 line_length: Optional[pulumi.Input['ProfileConstraintLineLengthArgs']] = None,
                 malformed: Optional[pulumi.Input['ProfileConstraintMalformedArgs']] = None,
                 max_cookie: Optional[pulumi.Input['ProfileConstraintMaxCookieArgs']] = None,
                 max_header_line: Optional[pulumi.Input['ProfileConstraintMaxHeaderLineArgs']] = None,
                 max_range_segment: Optional[pulumi.Input['ProfileConstraintMaxRangeSegmentArgs']] = None,
                 max_url_param: Optional[pulumi.Input['ProfileConstraintMaxUrlParamArgs']] = None,
                 method: Optional[pulumi.Input['ProfileConstraintMethodArgs']] = None,
                 param_length: Optional[pulumi.Input['ProfileConstraintParamLengthArgs']] = None,
                 url_param_length: Optional[pulumi.Input['ProfileConstraintUrlParamLengthArgs']] = None,
                 version: Optional[pulumi.Input['ProfileConstraintVersionArgs']] = None):
        """
        :param pulumi.Input['ProfileConstraintContentLengthArgs'] content_length: HTTP content length in request. The structure of `content_length` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileConstraintExceptionArgs']]] exceptions: HTTP constraint exception. The structure of `exception` block is documented below.
        :param pulumi.Input['ProfileConstraintHeaderLengthArgs'] header_length: HTTP header length in request. The structure of `header_length` block is documented below.
        :param pulumi.Input['ProfileConstraintHostnameArgs'] hostname: Enable/disable hostname check. The structure of `hostname` block is documented below.
        :param pulumi.Input['ProfileConstraintLineLengthArgs'] line_length: HTTP line length in request. The structure of `line_length` block is documented below.
        :param pulumi.Input['ProfileConstraintMalformedArgs'] malformed: Enable/disable malformed HTTP request check. The structure of `malformed` block is documented below.
        :param pulumi.Input['ProfileConstraintMaxCookieArgs'] max_cookie: Maximum number of cookies in HTTP request. The structure of `max_cookie` block is documented below.
        :param pulumi.Input['ProfileConstraintMaxHeaderLineArgs'] max_header_line: Maximum number of HTTP header line. The structure of `max_header_line` block is documented below.
        :param pulumi.Input['ProfileConstraintMaxRangeSegmentArgs'] max_range_segment: Maximum number of range segments in HTTP range line. The structure of `max_range_segment` block is documented below.
        :param pulumi.Input['ProfileConstraintMaxUrlParamArgs'] max_url_param: Maximum number of parameters in URL. The structure of `max_url_param` block is documented below.
        :param pulumi.Input['ProfileConstraintMethodArgs'] method: Enable/disable HTTP method check. The structure of `method` block is documented below.
        :param pulumi.Input['ProfileConstraintParamLengthArgs'] param_length: Maximum length of parameter in URL, HTTP POST request or HTTP body. The structure of `param_length` block is documented below.
        :param pulumi.Input['ProfileConstraintUrlParamLengthArgs'] url_param_length: Maximum length of parameter in URL. The structure of `url_param_length` block is documented below.
        :param pulumi.Input['ProfileConstraintVersionArgs'] version: Enable/disable HTTP version check. The structure of `version` block is documented below.
        """
        if content_length is not None:
            pulumi.set(__self__, "content_length", content_length)
        if exceptions is not None:
            pulumi.set(__self__, "exceptions", exceptions)
        if header_length is not None:
            pulumi.set(__self__, "header_length", header_length)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if line_length is not None:
            pulumi.set(__self__, "line_length", line_length)
        if malformed is not None:
            pulumi.set(__self__, "malformed", malformed)
        if max_cookie is not None:
            pulumi.set(__self__, "max_cookie", max_cookie)
        if max_header_line is not None:
            pulumi.set(__self__, "max_header_line", max_header_line)
        if max_range_segment is not None:
            pulumi.set(__self__, "max_range_segment", max_range_segment)
        if max_url_param is not None:
            pulumi.set(__self__, "max_url_param", max_url_param)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if param_length is not None:
            pulumi.set(__self__, "param_length", param_length)
        if url_param_length is not None:
            pulumi.set(__self__, "url_param_length", url_param_length)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> Optional[pulumi.Input['ProfileConstraintContentLengthArgs']]:
        """
        HTTP content length in request. The structure of `content_length` block is documented below.
        """
        return pulumi.get(self, "content_length")

    @content_length.setter
    def content_length(self, value: Optional[pulumi.Input['ProfileConstraintContentLengthArgs']]):
        pulumi.set(self, "content_length", value)

    @property
    @pulumi.getter
    def exceptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileConstraintExceptionArgs']]]]:
        """
        HTTP constraint exception. The structure of `exception` block is documented below.
        """
        return pulumi.get(self, "exceptions")

    @exceptions.setter
    def exceptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileConstraintExceptionArgs']]]]):
        pulumi.set(self, "exceptions", value)

    @property
    @pulumi.getter(name="headerLength")
    def header_length(self) -> Optional[pulumi.Input['ProfileConstraintHeaderLengthArgs']]:
        """
        HTTP header length in request. The structure of `header_length` block is documented below.
        """
        return pulumi.get(self, "header_length")

    @header_length.setter
    def header_length(self, value: Optional[pulumi.Input['ProfileConstraintHeaderLengthArgs']]):
        pulumi.set(self, "header_length", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input['ProfileConstraintHostnameArgs']]:
        """
        Enable/disable hostname check. The structure of `hostname` block is documented below.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input['ProfileConstraintHostnameArgs']]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="lineLength")
    def line_length(self) -> Optional[pulumi.Input['ProfileConstraintLineLengthArgs']]:
        """
        HTTP line length in request. The structure of `line_length` block is documented below.
        """
        return pulumi.get(self, "line_length")

    @line_length.setter
    def line_length(self, value: Optional[pulumi.Input['ProfileConstraintLineLengthArgs']]):
        pulumi.set(self, "line_length", value)

    @property
    @pulumi.getter
    def malformed(self) -> Optional[pulumi.Input['ProfileConstraintMalformedArgs']]:
        """
        Enable/disable malformed HTTP request check. The structure of `malformed` block is documented below.
        """
        return pulumi.get(self, "malformed")

    @malformed.setter
    def malformed(self, value: Optional[pulumi.Input['ProfileConstraintMalformedArgs']]):
        pulumi.set(self, "malformed", value)

    @property
    @pulumi.getter(name="maxCookie")
    def max_cookie(self) -> Optional[pulumi.Input['ProfileConstraintMaxCookieArgs']]:
        """
        Maximum number of cookies in HTTP request. The structure of `max_cookie` block is documented below.
        """
        return pulumi.get(self, "max_cookie")

    @max_cookie.setter
    def max_cookie(self, value: Optional[pulumi.Input['ProfileConstraintMaxCookieArgs']]):
        pulumi.set(self, "max_cookie", value)

    @property
    @pulumi.getter(name="maxHeaderLine")
    def max_header_line(self) -> Optional[pulumi.Input['ProfileConstraintMaxHeaderLineArgs']]:
        """
        Maximum number of HTTP header line. The structure of `max_header_line` block is documented below.
        """
        return pulumi.get(self, "max_header_line")

    @max_header_line.setter
    def max_header_line(self, value: Optional[pulumi.Input['ProfileConstraintMaxHeaderLineArgs']]):
        pulumi.set(self, "max_header_line", value)

    @property
    @pulumi.getter(name="maxRangeSegment")
    def max_range_segment(self) -> Optional[pulumi.Input['ProfileConstraintMaxRangeSegmentArgs']]:
        """
        Maximum number of range segments in HTTP range line. The structure of `max_range_segment` block is documented below.
        """
        return pulumi.get(self, "max_range_segment")

    @max_range_segment.setter
    def max_range_segment(self, value: Optional[pulumi.Input['ProfileConstraintMaxRangeSegmentArgs']]):
        pulumi.set(self, "max_range_segment", value)

    @property
    @pulumi.getter(name="maxUrlParam")
    def max_url_param(self) -> Optional[pulumi.Input['ProfileConstraintMaxUrlParamArgs']]:
        """
        Maximum number of parameters in URL. The structure of `max_url_param` block is documented below.
        """
        return pulumi.get(self, "max_url_param")

    @max_url_param.setter
    def max_url_param(self, value: Optional[pulumi.Input['ProfileConstraintMaxUrlParamArgs']]):
        pulumi.set(self, "max_url_param", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input['ProfileConstraintMethodArgs']]:
        """
        Enable/disable HTTP method check. The structure of `method` block is documented below.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input['ProfileConstraintMethodArgs']]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="paramLength")
    def param_length(self) -> Optional[pulumi.Input['ProfileConstraintParamLengthArgs']]:
        """
        Maximum length of parameter in URL, HTTP POST request or HTTP body. The structure of `param_length` block is documented below.
        """
        return pulumi.get(self, "param_length")

    @param_length.setter
    def param_length(self, value: Optional[pulumi.Input['ProfileConstraintParamLengthArgs']]):
        pulumi.set(self, "param_length", value)

    @property
    @pulumi.getter(name="urlParamLength")
    def url_param_length(self) -> Optional[pulumi.Input['ProfileConstraintUrlParamLengthArgs']]:
        """
        Maximum length of parameter in URL. The structure of `url_param_length` block is documented below.
        """
        return pulumi.get(self, "url_param_length")

    @url_param_length.setter
    def url_param_length(self, value: Optional[pulumi.Input['ProfileConstraintUrlParamLengthArgs']]):
        pulumi.set(self, "url_param_length", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input['ProfileConstraintVersionArgs']]:
        """
        Enable/disable HTTP version check. The structure of `version` block is documented below.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input['ProfileConstraintVersionArgs']]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ProfileConstraintContentLengthArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `allow`, `block`.
        :param pulumi.Input[int] length: Length of HTTP content in bytes (0 to 2147483647).
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[int]]:
        """
        Length of HTTP content in bytes (0 to 2147483647).
        """
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileConstraintExceptionArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 content_length: Optional[pulumi.Input[str]] = None,
                 header_length: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 line_length: Optional[pulumi.Input[str]] = None,
                 malformed: Optional[pulumi.Input[str]] = None,
                 max_cookie: Optional[pulumi.Input[str]] = None,
                 max_header_line: Optional[pulumi.Input[str]] = None,
                 max_range_segment: Optional[pulumi.Input[str]] = None,
                 max_url_param: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 param_length: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None,
                 url_param_length: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: Host address.
        :param pulumi.Input[str] content_length: HTTP content length in request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] header_length: HTTP header length in request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] hostname: Enable/disable hostname check. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] id: Exception ID.
        :param pulumi.Input[str] line_length: HTTP line length in request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] malformed: Enable/disable malformed HTTP request check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] max_cookie: Maximum number of cookies in HTTP request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] max_header_line: Maximum number of HTTP header line. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] max_range_segment: Maximum number of range segments in HTTP range line. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] max_url_param: Maximum number of parameters in URL. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] method: Enable/disable HTTP method check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] param_length: Maximum length of parameter in URL, HTTP POST request or HTTP body. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pattern: URL pattern.
        :param pulumi.Input[str] regex: Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] url_param_length: Maximum length of parameter in URL. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] version: Enable/disable HTTP version check. Valid values: `enable`, `disable`.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if content_length is not None:
            pulumi.set(__self__, "content_length", content_length)
        if header_length is not None:
            pulumi.set(__self__, "header_length", header_length)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if line_length is not None:
            pulumi.set(__self__, "line_length", line_length)
        if malformed is not None:
            pulumi.set(__self__, "malformed", malformed)
        if max_cookie is not None:
            pulumi.set(__self__, "max_cookie", max_cookie)
        if max_header_line is not None:
            pulumi.set(__self__, "max_header_line", max_header_line)
        if max_range_segment is not None:
            pulumi.set(__self__, "max_range_segment", max_range_segment)
        if max_url_param is not None:
            pulumi.set(__self__, "max_url_param", max_url_param)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if param_length is not None:
            pulumi.set(__self__, "param_length", param_length)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if url_param_length is not None:
            pulumi.set(__self__, "url_param_length", url_param_length)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Host address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP content length in request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "content_length")

    @content_length.setter
    def content_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_length", value)

    @property
    @pulumi.getter(name="headerLength")
    def header_length(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP header length in request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "header_length")

    @header_length.setter
    def header_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_length", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable hostname check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Exception ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lineLength")
    def line_length(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP line length in request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "line_length")

    @line_length.setter
    def line_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_length", value)

    @property
    @pulumi.getter
    def malformed(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable malformed HTTP request check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "malformed")

    @malformed.setter
    def malformed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed", value)

    @property
    @pulumi.getter(name="maxCookie")
    def max_cookie(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum number of cookies in HTTP request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_cookie")

    @max_cookie.setter
    def max_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_cookie", value)

    @property
    @pulumi.getter(name="maxHeaderLine")
    def max_header_line(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum number of HTTP header line. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_header_line")

    @max_header_line.setter
    def max_header_line(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_header_line", value)

    @property
    @pulumi.getter(name="maxRangeSegment")
    def max_range_segment(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum number of range segments in HTTP range line. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_range_segment")

    @max_range_segment.setter
    def max_range_segment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_range_segment", value)

    @property
    @pulumi.getter(name="maxUrlParam")
    def max_url_param(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum number of parameters in URL. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_url_param")

    @max_url_param.setter
    def max_url_param(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_url_param", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP method check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="paramLength")
    def param_length(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum length of parameter in URL, HTTP POST request or HTTP body. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "param_length")

    @param_length.setter
    def param_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "param_length", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        URL pattern.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter(name="urlParamLength")
    def url_param_length(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum length of parameter in URL. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "url_param_length")

    @url_param_length.setter
    def url_param_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_param_length", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP version check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ProfileConstraintHeaderLengthArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `allow`, `block`.
        :param pulumi.Input[int] length: Length of HTTP header in bytes (0 to 2147483647).
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[int]]:
        """
        Length of HTTP header in bytes (0 to 2147483647).
        """
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileConstraintHostnameArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `allow`, `block`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileConstraintLineLengthArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `allow`, `block`.
        :param pulumi.Input[int] length: Length of HTTP line in bytes (0 to 2147483647).
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[int]]:
        """
        Length of HTTP line in bytes (0 to 2147483647).
        """
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileConstraintMalformedArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `allow`, `block`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileConstraintMaxCookieArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 max_cookie: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `allow`, `block`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_cookie: Maximum number of cookies in HTTP request (0 to 2147483647).
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_cookie is not None:
            pulumi.set(__self__, "max_cookie", max_cookie)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="maxCookie")
    def max_cookie(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of cookies in HTTP request (0 to 2147483647).
        """
        return pulumi.get(self, "max_cookie")

    @max_cookie.setter
    def max_cookie(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_cookie", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileConstraintMaxHeaderLineArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 max_header_line: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `allow`, `block`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_header_line: Maximum number HTTP header lines (0 to 2147483647).
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_header_line is not None:
            pulumi.set(__self__, "max_header_line", max_header_line)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="maxHeaderLine")
    def max_header_line(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number HTTP header lines (0 to 2147483647).
        """
        return pulumi.get(self, "max_header_line")

    @max_header_line.setter
    def max_header_line(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_header_line", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileConstraintMaxRangeSegmentArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 max_range_segment: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `allow`, `block`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_range_segment: Maximum number of range segments in HTTP range line (0 to 2147483647).
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_range_segment is not None:
            pulumi.set(__self__, "max_range_segment", max_range_segment)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="maxRangeSegment")
    def max_range_segment(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of range segments in HTTP range line (0 to 2147483647).
        """
        return pulumi.get(self, "max_range_segment")

    @max_range_segment.setter
    def max_range_segment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_range_segment", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileConstraintMaxUrlParamArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 max_url_param: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `allow`, `block`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_url_param: Maximum number of parameters in URL (0 to 2147483647).
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_url_param is not None:
            pulumi.set(__self__, "max_url_param", max_url_param)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="maxUrlParam")
    def max_url_param(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of parameters in URL (0 to 2147483647).
        """
        return pulumi.get(self, "max_url_param")

    @max_url_param.setter
    def max_url_param(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_url_param", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileConstraintMethodArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `allow`, `block`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileConstraintParamLengthArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `allow`, `block`.
        :param pulumi.Input[int] length: Maximum length of parameter in URL, HTTP POST request or HTTP body in bytes (0 to 2147483647).
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum length of parameter in URL, HTTP POST request or HTTP body in bytes (0 to 2147483647).
        """
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileConstraintUrlParamLengthArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `allow`, `block`.
        :param pulumi.Input[int] length: Maximum length of URL parameter in bytes (0 to 2147483647).
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum length of URL parameter in bytes (0 to 2147483647).
        """
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileConstraintVersionArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `allow`, `block`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileMethodArgs:
    def __init__(__self__, *,
                 default_allowed_methods: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 method_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileMethodMethodPolicyArgs']]]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_allowed_methods: Methods. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`, `others`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileMethodMethodPolicyArgs']]] method_policies: HTTP method policy. The structure of `method_policy` block is documented below.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if default_allowed_methods is not None:
            pulumi.set(__self__, "default_allowed_methods", default_allowed_methods)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if method_policies is not None:
            pulumi.set(__self__, "method_policies", method_policies)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="defaultAllowedMethods")
    def default_allowed_methods(self) -> Optional[pulumi.Input[str]]:
        """
        Methods. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`, `others`.
        """
        return pulumi.get(self, "default_allowed_methods")

    @default_allowed_methods.setter
    def default_allowed_methods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_allowed_methods", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="methodPolicies")
    def method_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileMethodMethodPolicyArgs']]]]:
        """
        HTTP method policy. The structure of `method_policy` block is documented below.
        """
        return pulumi.get(self, "method_policies")

    @method_policies.setter
    def method_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileMethodMethodPolicyArgs']]]]):
        pulumi.set(self, "method_policies", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileMethodMethodPolicyArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 allowed_methods: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: Host address.
        :param pulumi.Input[str] allowed_methods: Allowed Methods. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`, `others`.
        :param pulumi.Input[int] id: HTTP method policy ID.
        :param pulumi.Input[str] pattern: URL pattern.
        :param pulumi.Input[str] regex: Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if allowed_methods is not None:
            pulumi.set(__self__, "allowed_methods", allowed_methods)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Host address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed Methods. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`, `others`.
        """
        return pulumi.get(self, "allowed_methods")

    @allowed_methods.setter
    def allowed_methods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowed_methods", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        HTTP method policy ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        URL pattern.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class ProfileSignatureArgs:
    def __init__(__self__, *,
                 credit_card_detection_threshold: Optional[pulumi.Input[int]] = None,
                 custom_signatures: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileSignatureCustomSignatureArgs']]]] = None,
                 disabled_signatures: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileSignatureDisabledSignatureArgs']]]] = None,
                 disabled_sub_classes: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileSignatureDisabledSubClassArgs']]]] = None,
                 main_classes: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileSignatureMainClassArgs']]]] = None):
        """
        :param pulumi.Input[int] credit_card_detection_threshold: The minimum number of Credit cards to detect violation.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileSignatureCustomSignatureArgs']]] custom_signatures: Custom signature. The structure of `custom_signature` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileSignatureDisabledSignatureArgs']]] disabled_signatures: Disabled signatures The structure of `disabled_signature` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileSignatureDisabledSubClassArgs']]] disabled_sub_classes: Disabled signature subclasses. The structure of `disabled_sub_class` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileSignatureMainClassArgs']]] main_classes: Main signature class. The structure of `main_class` block is documented below.
        """
        if credit_card_detection_threshold is not None:
            pulumi.set(__self__, "credit_card_detection_threshold", credit_card_detection_threshold)
        if custom_signatures is not None:
            pulumi.set(__self__, "custom_signatures", custom_signatures)
        if disabled_signatures is not None:
            pulumi.set(__self__, "disabled_signatures", disabled_signatures)
        if disabled_sub_classes is not None:
            pulumi.set(__self__, "disabled_sub_classes", disabled_sub_classes)
        if main_classes is not None:
            pulumi.set(__self__, "main_classes", main_classes)

    @property
    @pulumi.getter(name="creditCardDetectionThreshold")
    def credit_card_detection_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum number of Credit cards to detect violation.
        """
        return pulumi.get(self, "credit_card_detection_threshold")

    @credit_card_detection_threshold.setter
    def credit_card_detection_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "credit_card_detection_threshold", value)

    @property
    @pulumi.getter(name="customSignatures")
    def custom_signatures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileSignatureCustomSignatureArgs']]]]:
        """
        Custom signature. The structure of `custom_signature` block is documented below.
        """
        return pulumi.get(self, "custom_signatures")

    @custom_signatures.setter
    def custom_signatures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileSignatureCustomSignatureArgs']]]]):
        pulumi.set(self, "custom_signatures", value)

    @property
    @pulumi.getter(name="disabledSignatures")
    def disabled_signatures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileSignatureDisabledSignatureArgs']]]]:
        """
        Disabled signatures The structure of `disabled_signature` block is documented below.
        """
        return pulumi.get(self, "disabled_signatures")

    @disabled_signatures.setter
    def disabled_signatures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileSignatureDisabledSignatureArgs']]]]):
        pulumi.set(self, "disabled_signatures", value)

    @property
    @pulumi.getter(name="disabledSubClasses")
    def disabled_sub_classes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileSignatureDisabledSubClassArgs']]]]:
        """
        Disabled signature subclasses. The structure of `disabled_sub_class` block is documented below.
        """
        return pulumi.get(self, "disabled_sub_classes")

    @disabled_sub_classes.setter
    def disabled_sub_classes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileSignatureDisabledSubClassArgs']]]]):
        pulumi.set(self, "disabled_sub_classes", value)

    @property
    @pulumi.getter(name="mainClasses")
    def main_classes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileSignatureMainClassArgs']]]]:
        """
        Main signature class. The structure of `main_class` block is documented below.
        """
        return pulumi.get(self, "main_classes")

    @main_classes.setter
    def main_classes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileSignatureMainClassArgs']]]]):
        pulumi.set(self, "main_classes", value)


@pulumi.input_type
class ProfileSignatureCustomSignatureArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 case_sensitivity: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `allow`, `block`, `erase`.
        :param pulumi.Input[str] case_sensitivity: Case sensitivity in pattern. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] direction: Traffic direction. Valid values: `request`, `response`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Signature name.
        :param pulumi.Input[str] pattern: Match pattern.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] target: Match HTTP target. Valid values: `arg`, `arg-name`, `req-body`, `req-cookie`, `req-cookie-name`, `req-filename`, `req-header`, `req-header-name`, `req-raw-uri`, `req-uri`, `resp-body`, `resp-hdr`, `resp-status`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if case_sensitivity is not None:
            pulumi.set(__self__, "case_sensitivity", case_sensitivity)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `allow`, `block`, `erase`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="caseSensitivity")
    def case_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Case sensitivity in pattern. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "case_sensitivity")

    @case_sensitivity.setter
    def case_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "case_sensitivity", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic direction. Valid values: `request`, `response`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Signature name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Match pattern.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Match HTTP target. Valid values: `arg`, `arg-name`, `req-body`, `req-cookie`, `req-cookie-name`, `req-filename`, `req-header`, `req-header-name`, `req-raw-uri`, `req-uri`, `resp-body`, `resp-hdr`, `resp-status`.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class ProfileSignatureDisabledSignatureArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Signature ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Signature ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ProfileSignatureDisabledSubClassArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Signature subclass ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Signature subclass ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ProfileSignatureMainClassArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `allow`, `block`, `erase`.
        :param pulumi.Input[int] id: Main signature class ID.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `allow`, `block`, `erase`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Main signature class ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileUrlAccessArgs:
    def __init__(__self__, *,
                 access_patterns: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileUrlAccessAccessPatternArgs']]]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ProfileUrlAccessAccessPatternArgs']]] access_patterns: URL access pattern. The structure of `access_pattern` block is documented below.
        :param pulumi.Input[str] action: Action. Valid values: `bypass`, `permit`, `block`.
        :param pulumi.Input[str] address: Host address.
        :param pulumi.Input[int] id: URL access ID.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        """
        if access_patterns is not None:
            pulumi.set(__self__, "access_patterns", access_patterns)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="accessPatterns")
    def access_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileUrlAccessAccessPatternArgs']]]]:
        """
        URL access pattern. The structure of `access_pattern` block is documented below.
        """
        return pulumi.get(self, "access_patterns")

    @access_patterns.setter
    def access_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileUrlAccessAccessPatternArgs']]]]):
        pulumi.set(self, "access_patterns", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Host address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL access ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class ProfileUrlAccessAccessPatternArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 negate: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None,
                 srcaddr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: URL access pattern ID.
        :param pulumi.Input[str] negate: Enable/disable match negation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pattern: URL pattern.
        :param pulumi.Input[str] regex: Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] srcaddr: Source address.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL access pattern ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable match negation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        URL pattern.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Source address.
        """
        return pulumi.get(self, "srcaddr")

    @srcaddr.setter
    def srcaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr", value)



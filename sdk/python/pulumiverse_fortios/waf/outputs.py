# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ProfileAddressList',
    'ProfileAddressListBlockedAddress',
    'ProfileAddressListTrustedAddress',
    'ProfileConstraint',
    'ProfileConstraintContentLength',
    'ProfileConstraintException',
    'ProfileConstraintHeaderLength',
    'ProfileConstraintHostname',
    'ProfileConstraintLineLength',
    'ProfileConstraintMalformed',
    'ProfileConstraintMaxCookie',
    'ProfileConstraintMaxHeaderLine',
    'ProfileConstraintMaxRangeSegment',
    'ProfileConstraintMaxUrlParam',
    'ProfileConstraintMethod',
    'ProfileConstraintParamLength',
    'ProfileConstraintUrlParamLength',
    'ProfileConstraintVersion',
    'ProfileMethod',
    'ProfileMethodMethodPolicy',
    'ProfileSignature',
    'ProfileSignatureCustomSignature',
    'ProfileSignatureDisabledSignature',
    'ProfileSignatureDisabledSubClass',
    'ProfileSignatureMainClass',
    'ProfileUrlAccess',
    'ProfileUrlAccessAccessPattern',
]

@pulumi.output_type
class ProfileAddressList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockedAddresses":
            suggest = "blocked_addresses"
        elif key == "blockedLog":
            suggest = "blocked_log"
        elif key == "trustedAddresses":
            suggest = "trusted_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileAddressList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileAddressList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileAddressList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blocked_addresses: Optional[Sequence['outputs.ProfileAddressListBlockedAddress']] = None,
                 blocked_log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None,
                 trusted_addresses: Optional[Sequence['outputs.ProfileAddressListTrustedAddress']] = None):
        """
        :param Sequence['ProfileAddressListBlockedAddressArgs'] blocked_addresses: Blocked address. The structure of `blocked_address` block is documented below.
        :param str blocked_log: Enable/disable logging on blocked addresses. Valid values: `enable`, `disable`.
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        :param str status: Status. Valid values: `enable`, `disable`.
        :param Sequence['ProfileAddressListTrustedAddressArgs'] trusted_addresses: Trusted address. The structure of `trusted_address` block is documented below.
        """
        if blocked_addresses is not None:
            pulumi.set(__self__, "blocked_addresses", blocked_addresses)
        if blocked_log is not None:
            pulumi.set(__self__, "blocked_log", blocked_log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trusted_addresses is not None:
            pulumi.set(__self__, "trusted_addresses", trusted_addresses)

    @property
    @pulumi.getter(name="blockedAddresses")
    def blocked_addresses(self) -> Optional[Sequence['outputs.ProfileAddressListBlockedAddress']]:
        """
        Blocked address. The structure of `blocked_address` block is documented below.
        """
        return pulumi.get(self, "blocked_addresses")

    @property
    @pulumi.getter(name="blockedLog")
    def blocked_log(self) -> Optional[str]:
        """
        Enable/disable logging on blocked addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "blocked_log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trustedAddresses")
    def trusted_addresses(self) -> Optional[Sequence['outputs.ProfileAddressListTrustedAddress']]:
        """
        Trusted address. The structure of `trusted_address` block is documented below.
        """
        return pulumi.get(self, "trusted_addresses")


@pulumi.output_type
class ProfileAddressListBlockedAddress(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProfileAddressListTrustedAddress(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProfileConstraint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentLength":
            suggest = "content_length"
        elif key == "headerLength":
            suggest = "header_length"
        elif key == "lineLength":
            suggest = "line_length"
        elif key == "maxCookie":
            suggest = "max_cookie"
        elif key == "maxHeaderLine":
            suggest = "max_header_line"
        elif key == "maxRangeSegment":
            suggest = "max_range_segment"
        elif key == "maxUrlParam":
            suggest = "max_url_param"
        elif key == "paramLength":
            suggest = "param_length"
        elif key == "urlParamLength":
            suggest = "url_param_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileConstraint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileConstraint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileConstraint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_length: Optional['outputs.ProfileConstraintContentLength'] = None,
                 exceptions: Optional[Sequence['outputs.ProfileConstraintException']] = None,
                 header_length: Optional['outputs.ProfileConstraintHeaderLength'] = None,
                 hostname: Optional['outputs.ProfileConstraintHostname'] = None,
                 line_length: Optional['outputs.ProfileConstraintLineLength'] = None,
                 malformed: Optional['outputs.ProfileConstraintMalformed'] = None,
                 max_cookie: Optional['outputs.ProfileConstraintMaxCookie'] = None,
                 max_header_line: Optional['outputs.ProfileConstraintMaxHeaderLine'] = None,
                 max_range_segment: Optional['outputs.ProfileConstraintMaxRangeSegment'] = None,
                 max_url_param: Optional['outputs.ProfileConstraintMaxUrlParam'] = None,
                 method: Optional['outputs.ProfileConstraintMethod'] = None,
                 param_length: Optional['outputs.ProfileConstraintParamLength'] = None,
                 url_param_length: Optional['outputs.ProfileConstraintUrlParamLength'] = None,
                 version: Optional['outputs.ProfileConstraintVersion'] = None):
        """
        :param 'ProfileConstraintContentLengthArgs' content_length: HTTP content length in request. The structure of `content_length` block is documented below.
        :param Sequence['ProfileConstraintExceptionArgs'] exceptions: HTTP constraint exception. The structure of `exception` block is documented below.
        :param 'ProfileConstraintHeaderLengthArgs' header_length: HTTP header length in request. The structure of `header_length` block is documented below.
        :param 'ProfileConstraintHostnameArgs' hostname: Enable/disable hostname check. The structure of `hostname` block is documented below.
        :param 'ProfileConstraintLineLengthArgs' line_length: HTTP line length in request. The structure of `line_length` block is documented below.
        :param 'ProfileConstraintMalformedArgs' malformed: Enable/disable malformed HTTP request check. The structure of `malformed` block is documented below.
        :param 'ProfileConstraintMaxCookieArgs' max_cookie: Maximum number of cookies in HTTP request. The structure of `max_cookie` block is documented below.
        :param 'ProfileConstraintMaxHeaderLineArgs' max_header_line: Maximum number of HTTP header line. The structure of `max_header_line` block is documented below.
        :param 'ProfileConstraintMaxRangeSegmentArgs' max_range_segment: Maximum number of range segments in HTTP range line. The structure of `max_range_segment` block is documented below.
        :param 'ProfileConstraintMaxUrlParamArgs' max_url_param: Maximum number of parameters in URL. The structure of `max_url_param` block is documented below.
        :param 'ProfileConstraintMethodArgs' method: Enable/disable HTTP method check. The structure of `method` block is documented below.
        :param 'ProfileConstraintParamLengthArgs' param_length: Maximum length of parameter in URL, HTTP POST request or HTTP body. The structure of `param_length` block is documented below.
        :param 'ProfileConstraintUrlParamLengthArgs' url_param_length: Maximum length of parameter in URL. The structure of `url_param_length` block is documented below.
        :param 'ProfileConstraintVersionArgs' version: Enable/disable HTTP version check. The structure of `version` block is documented below.
        """
        if content_length is not None:
            pulumi.set(__self__, "content_length", content_length)
        if exceptions is not None:
            pulumi.set(__self__, "exceptions", exceptions)
        if header_length is not None:
            pulumi.set(__self__, "header_length", header_length)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if line_length is not None:
            pulumi.set(__self__, "line_length", line_length)
        if malformed is not None:
            pulumi.set(__self__, "malformed", malformed)
        if max_cookie is not None:
            pulumi.set(__self__, "max_cookie", max_cookie)
        if max_header_line is not None:
            pulumi.set(__self__, "max_header_line", max_header_line)
        if max_range_segment is not None:
            pulumi.set(__self__, "max_range_segment", max_range_segment)
        if max_url_param is not None:
            pulumi.set(__self__, "max_url_param", max_url_param)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if param_length is not None:
            pulumi.set(__self__, "param_length", param_length)
        if url_param_length is not None:
            pulumi.set(__self__, "url_param_length", url_param_length)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> Optional['outputs.ProfileConstraintContentLength']:
        """
        HTTP content length in request. The structure of `content_length` block is documented below.
        """
        return pulumi.get(self, "content_length")

    @property
    @pulumi.getter
    def exceptions(self) -> Optional[Sequence['outputs.ProfileConstraintException']]:
        """
        HTTP constraint exception. The structure of `exception` block is documented below.
        """
        return pulumi.get(self, "exceptions")

    @property
    @pulumi.getter(name="headerLength")
    def header_length(self) -> Optional['outputs.ProfileConstraintHeaderLength']:
        """
        HTTP header length in request. The structure of `header_length` block is documented below.
        """
        return pulumi.get(self, "header_length")

    @property
    @pulumi.getter
    def hostname(self) -> Optional['outputs.ProfileConstraintHostname']:
        """
        Enable/disable hostname check. The structure of `hostname` block is documented below.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="lineLength")
    def line_length(self) -> Optional['outputs.ProfileConstraintLineLength']:
        """
        HTTP line length in request. The structure of `line_length` block is documented below.
        """
        return pulumi.get(self, "line_length")

    @property
    @pulumi.getter
    def malformed(self) -> Optional['outputs.ProfileConstraintMalformed']:
        """
        Enable/disable malformed HTTP request check. The structure of `malformed` block is documented below.
        """
        return pulumi.get(self, "malformed")

    @property
    @pulumi.getter(name="maxCookie")
    def max_cookie(self) -> Optional['outputs.ProfileConstraintMaxCookie']:
        """
        Maximum number of cookies in HTTP request. The structure of `max_cookie` block is documented below.
        """
        return pulumi.get(self, "max_cookie")

    @property
    @pulumi.getter(name="maxHeaderLine")
    def max_header_line(self) -> Optional['outputs.ProfileConstraintMaxHeaderLine']:
        """
        Maximum number of HTTP header line. The structure of `max_header_line` block is documented below.
        """
        return pulumi.get(self, "max_header_line")

    @property
    @pulumi.getter(name="maxRangeSegment")
    def max_range_segment(self) -> Optional['outputs.ProfileConstraintMaxRangeSegment']:
        """
        Maximum number of range segments in HTTP range line. The structure of `max_range_segment` block is documented below.
        """
        return pulumi.get(self, "max_range_segment")

    @property
    @pulumi.getter(name="maxUrlParam")
    def max_url_param(self) -> Optional['outputs.ProfileConstraintMaxUrlParam']:
        """
        Maximum number of parameters in URL. The structure of `max_url_param` block is documented below.
        """
        return pulumi.get(self, "max_url_param")

    @property
    @pulumi.getter
    def method(self) -> Optional['outputs.ProfileConstraintMethod']:
        """
        Enable/disable HTTP method check. The structure of `method` block is documented below.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="paramLength")
    def param_length(self) -> Optional['outputs.ProfileConstraintParamLength']:
        """
        Maximum length of parameter in URL, HTTP POST request or HTTP body. The structure of `param_length` block is documented below.
        """
        return pulumi.get(self, "param_length")

    @property
    @pulumi.getter(name="urlParamLength")
    def url_param_length(self) -> Optional['outputs.ProfileConstraintUrlParamLength']:
        """
        Maximum length of parameter in URL. The structure of `url_param_length` block is documented below.
        """
        return pulumi.get(self, "url_param_length")

    @property
    @pulumi.getter
    def version(self) -> Optional['outputs.ProfileConstraintVersion']:
        """
        Enable/disable HTTP version check. The structure of `version` block is documented below.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ProfileConstraintContentLength(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 length: Optional[int] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str action: Action. Valid values: `allow`, `block`.
        :param int length: Length of HTTP content in bytes (0 to 2147483647).
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        :param str status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        """
        Length of HTTP content in bytes (0 to 2147483647).
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ProfileConstraintException(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentLength":
            suggest = "content_length"
        elif key == "headerLength":
            suggest = "header_length"
        elif key == "lineLength":
            suggest = "line_length"
        elif key == "maxCookie":
            suggest = "max_cookie"
        elif key == "maxHeaderLine":
            suggest = "max_header_line"
        elif key == "maxRangeSegment":
            suggest = "max_range_segment"
        elif key == "maxUrlParam":
            suggest = "max_url_param"
        elif key == "paramLength":
            suggest = "param_length"
        elif key == "urlParamLength":
            suggest = "url_param_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileConstraintException. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileConstraintException.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileConstraintException.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 content_length: Optional[str] = None,
                 header_length: Optional[str] = None,
                 hostname: Optional[str] = None,
                 id: Optional[int] = None,
                 line_length: Optional[str] = None,
                 malformed: Optional[str] = None,
                 max_cookie: Optional[str] = None,
                 max_header_line: Optional[str] = None,
                 max_range_segment: Optional[str] = None,
                 max_url_param: Optional[str] = None,
                 method: Optional[str] = None,
                 param_length: Optional[str] = None,
                 pattern: Optional[str] = None,
                 regex: Optional[str] = None,
                 url_param_length: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str address: Host address.
        :param str content_length: HTTP content length in request. Valid values: `enable`, `disable`.
        :param str header_length: HTTP header length in request. Valid values: `enable`, `disable`.
        :param str hostname: Enable/disable hostname check. Valid values: `enable`, `disable`.
        :param int id: Exception ID.
        :param str line_length: HTTP line length in request. Valid values: `enable`, `disable`.
        :param str malformed: Enable/disable malformed HTTP request check. Valid values: `enable`, `disable`.
        :param str max_cookie: Maximum number of cookies in HTTP request. Valid values: `enable`, `disable`.
        :param str max_header_line: Maximum number of HTTP header line. Valid values: `enable`, `disable`.
        :param str max_range_segment: Maximum number of range segments in HTTP range line. Valid values: `enable`, `disable`.
        :param str max_url_param: Maximum number of parameters in URL. Valid values: `enable`, `disable`.
        :param str method: Enable/disable HTTP method check. Valid values: `enable`, `disable`.
        :param str param_length: Maximum length of parameter in URL, HTTP POST request or HTTP body. Valid values: `enable`, `disable`.
        :param str pattern: URL pattern.
        :param str regex: Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        :param str url_param_length: Maximum length of parameter in URL. Valid values: `enable`, `disable`.
        :param str version: Enable/disable HTTP version check. Valid values: `enable`, `disable`.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if content_length is not None:
            pulumi.set(__self__, "content_length", content_length)
        if header_length is not None:
            pulumi.set(__self__, "header_length", header_length)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if line_length is not None:
            pulumi.set(__self__, "line_length", line_length)
        if malformed is not None:
            pulumi.set(__self__, "malformed", malformed)
        if max_cookie is not None:
            pulumi.set(__self__, "max_cookie", max_cookie)
        if max_header_line is not None:
            pulumi.set(__self__, "max_header_line", max_header_line)
        if max_range_segment is not None:
            pulumi.set(__self__, "max_range_segment", max_range_segment)
        if max_url_param is not None:
            pulumi.set(__self__, "max_url_param", max_url_param)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if param_length is not None:
            pulumi.set(__self__, "param_length", param_length)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if url_param_length is not None:
            pulumi.set(__self__, "url_param_length", url_param_length)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        Host address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> Optional[str]:
        """
        HTTP content length in request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "content_length")

    @property
    @pulumi.getter(name="headerLength")
    def header_length(self) -> Optional[str]:
        """
        HTTP header length in request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "header_length")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        Enable/disable hostname check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Exception ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lineLength")
    def line_length(self) -> Optional[str]:
        """
        HTTP line length in request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "line_length")

    @property
    @pulumi.getter
    def malformed(self) -> Optional[str]:
        """
        Enable/disable malformed HTTP request check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "malformed")

    @property
    @pulumi.getter(name="maxCookie")
    def max_cookie(self) -> Optional[str]:
        """
        Maximum number of cookies in HTTP request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_cookie")

    @property
    @pulumi.getter(name="maxHeaderLine")
    def max_header_line(self) -> Optional[str]:
        """
        Maximum number of HTTP header line. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_header_line")

    @property
    @pulumi.getter(name="maxRangeSegment")
    def max_range_segment(self) -> Optional[str]:
        """
        Maximum number of range segments in HTTP range line. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_range_segment")

    @property
    @pulumi.getter(name="maxUrlParam")
    def max_url_param(self) -> Optional[str]:
        """
        Maximum number of parameters in URL. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_url_param")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        """
        Enable/disable HTTP method check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="paramLength")
    def param_length(self) -> Optional[str]:
        """
        Maximum length of parameter in URL, HTTP POST request or HTTP body. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "param_length")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        URL pattern.
        """
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter(name="urlParamLength")
    def url_param_length(self) -> Optional[str]:
        """
        Maximum length of parameter in URL. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "url_param_length")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Enable/disable HTTP version check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ProfileConstraintHeaderLength(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 length: Optional[int] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str action: Action. Valid values: `allow`, `block`.
        :param int length: Length of HTTP header in bytes (0 to 2147483647).
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        :param str status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        """
        Length of HTTP header in bytes (0 to 2147483647).
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ProfileConstraintHostname(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str action: Action. Valid values: `allow`, `block`.
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        :param str status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ProfileConstraintLineLength(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 length: Optional[int] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str action: Action. Valid values: `allow`, `block`.
        :param int length: Length of HTTP line in bytes (0 to 2147483647).
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        :param str status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        """
        Length of HTTP line in bytes (0 to 2147483647).
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ProfileConstraintMalformed(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str action: Action. Valid values: `allow`, `block`.
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        :param str status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ProfileConstraintMaxCookie(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCookie":
            suggest = "max_cookie"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileConstraintMaxCookie. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileConstraintMaxCookie.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileConstraintMaxCookie.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 max_cookie: Optional[int] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str action: Action. Valid values: `allow`, `block`.
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param int max_cookie: Maximum number of cookies in HTTP request (0 to 2147483647).
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        :param str status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_cookie is not None:
            pulumi.set(__self__, "max_cookie", max_cookie)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="maxCookie")
    def max_cookie(self) -> Optional[int]:
        """
        Maximum number of cookies in HTTP request (0 to 2147483647).
        """
        return pulumi.get(self, "max_cookie")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ProfileConstraintMaxHeaderLine(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxHeaderLine":
            suggest = "max_header_line"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileConstraintMaxHeaderLine. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileConstraintMaxHeaderLine.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileConstraintMaxHeaderLine.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 max_header_line: Optional[int] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str action: Action. Valid values: `allow`, `block`.
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param int max_header_line: Maximum number HTTP header lines (0 to 2147483647).
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        :param str status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_header_line is not None:
            pulumi.set(__self__, "max_header_line", max_header_line)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="maxHeaderLine")
    def max_header_line(self) -> Optional[int]:
        """
        Maximum number HTTP header lines (0 to 2147483647).
        """
        return pulumi.get(self, "max_header_line")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ProfileConstraintMaxRangeSegment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxRangeSegment":
            suggest = "max_range_segment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileConstraintMaxRangeSegment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileConstraintMaxRangeSegment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileConstraintMaxRangeSegment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 max_range_segment: Optional[int] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str action: Action. Valid values: `allow`, `block`.
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param int max_range_segment: Maximum number of range segments in HTTP range line (0 to 2147483647).
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        :param str status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_range_segment is not None:
            pulumi.set(__self__, "max_range_segment", max_range_segment)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="maxRangeSegment")
    def max_range_segment(self) -> Optional[int]:
        """
        Maximum number of range segments in HTTP range line (0 to 2147483647).
        """
        return pulumi.get(self, "max_range_segment")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ProfileConstraintMaxUrlParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxUrlParam":
            suggest = "max_url_param"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileConstraintMaxUrlParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileConstraintMaxUrlParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileConstraintMaxUrlParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 max_url_param: Optional[int] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str action: Action. Valid values: `allow`, `block`.
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param int max_url_param: Maximum number of parameters in URL (0 to 2147483647).
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        :param str status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_url_param is not None:
            pulumi.set(__self__, "max_url_param", max_url_param)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="maxUrlParam")
    def max_url_param(self) -> Optional[int]:
        """
        Maximum number of parameters in URL (0 to 2147483647).
        """
        return pulumi.get(self, "max_url_param")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ProfileConstraintMethod(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str action: Action. Valid values: `allow`, `block`.
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        :param str status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ProfileConstraintParamLength(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 length: Optional[int] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str action: Action. Valid values: `allow`, `block`.
        :param int length: Maximum length of parameter in URL, HTTP POST request or HTTP body in bytes (0 to 2147483647).
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        :param str status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        """
        Maximum length of parameter in URL, HTTP POST request or HTTP body in bytes (0 to 2147483647).
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ProfileConstraintUrlParamLength(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 length: Optional[int] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str action: Action. Valid values: `allow`, `block`.
        :param int length: Maximum length of URL parameter in bytes (0 to 2147483647).
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        :param str status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        """
        Maximum length of URL parameter in bytes (0 to 2147483647).
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ProfileConstraintVersion(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str action: Action. Valid values: `allow`, `block`.
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        :param str status: Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable the constraint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ProfileMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultAllowedMethods":
            suggest = "default_allowed_methods"
        elif key == "methodPolicies":
            suggest = "method_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_allowed_methods: Optional[str] = None,
                 log: Optional[str] = None,
                 method_policies: Optional[Sequence['outputs.ProfileMethodMethodPolicy']] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str default_allowed_methods: Methods. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`, `others`.
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param Sequence['ProfileMethodMethodPolicyArgs'] method_policies: HTTP method policy. The structure of `method_policy` block is documented below.
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        :param str status: Status. Valid values: `enable`, `disable`.
        """
        if default_allowed_methods is not None:
            pulumi.set(__self__, "default_allowed_methods", default_allowed_methods)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if method_policies is not None:
            pulumi.set(__self__, "method_policies", method_policies)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="defaultAllowedMethods")
    def default_allowed_methods(self) -> Optional[str]:
        """
        Methods. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`, `others`.
        """
        return pulumi.get(self, "default_allowed_methods")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="methodPolicies")
    def method_policies(self) -> Optional[Sequence['outputs.ProfileMethodMethodPolicy']]:
        """
        HTTP method policy. The structure of `method_policy` block is documented below.
        """
        return pulumi.get(self, "method_policies")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ProfileMethodMethodPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedMethods":
            suggest = "allowed_methods"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileMethodMethodPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileMethodMethodPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileMethodMethodPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 allowed_methods: Optional[str] = None,
                 id: Optional[int] = None,
                 pattern: Optional[str] = None,
                 regex: Optional[str] = None):
        """
        :param str address: Host address.
        :param str allowed_methods: Allowed Methods. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`, `others`.
        :param int id: HTTP method policy ID.
        :param str pattern: URL pattern.
        :param str regex: Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if allowed_methods is not None:
            pulumi.set(__self__, "allowed_methods", allowed_methods)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        Host address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[str]:
        """
        Allowed Methods. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`, `others`.
        """
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        HTTP method policy ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        URL pattern.
        """
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "regex")


@pulumi.output_type
class ProfileSignature(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creditCardDetectionThreshold":
            suggest = "credit_card_detection_threshold"
        elif key == "customSignatures":
            suggest = "custom_signatures"
        elif key == "disabledSignatures":
            suggest = "disabled_signatures"
        elif key == "disabledSubClasses":
            suggest = "disabled_sub_classes"
        elif key == "mainClasses":
            suggest = "main_classes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileSignature. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileSignature.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileSignature.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credit_card_detection_threshold: Optional[int] = None,
                 custom_signatures: Optional[Sequence['outputs.ProfileSignatureCustomSignature']] = None,
                 disabled_signatures: Optional[Sequence['outputs.ProfileSignatureDisabledSignature']] = None,
                 disabled_sub_classes: Optional[Sequence['outputs.ProfileSignatureDisabledSubClass']] = None,
                 main_classes: Optional[Sequence['outputs.ProfileSignatureMainClass']] = None):
        """
        :param int credit_card_detection_threshold: The minimum number of Credit cards to detect violation.
        :param Sequence['ProfileSignatureCustomSignatureArgs'] custom_signatures: Custom signature. The structure of `custom_signature` block is documented below.
        :param Sequence['ProfileSignatureDisabledSignatureArgs'] disabled_signatures: Disabled signatures The structure of `disabled_signature` block is documented below.
        :param Sequence['ProfileSignatureDisabledSubClassArgs'] disabled_sub_classes: Disabled signature subclasses. The structure of `disabled_sub_class` block is documented below.
        :param Sequence['ProfileSignatureMainClassArgs'] main_classes: Main signature class. The structure of `main_class` block is documented below.
        """
        if credit_card_detection_threshold is not None:
            pulumi.set(__self__, "credit_card_detection_threshold", credit_card_detection_threshold)
        if custom_signatures is not None:
            pulumi.set(__self__, "custom_signatures", custom_signatures)
        if disabled_signatures is not None:
            pulumi.set(__self__, "disabled_signatures", disabled_signatures)
        if disabled_sub_classes is not None:
            pulumi.set(__self__, "disabled_sub_classes", disabled_sub_classes)
        if main_classes is not None:
            pulumi.set(__self__, "main_classes", main_classes)

    @property
    @pulumi.getter(name="creditCardDetectionThreshold")
    def credit_card_detection_threshold(self) -> Optional[int]:
        """
        The minimum number of Credit cards to detect violation.
        """
        return pulumi.get(self, "credit_card_detection_threshold")

    @property
    @pulumi.getter(name="customSignatures")
    def custom_signatures(self) -> Optional[Sequence['outputs.ProfileSignatureCustomSignature']]:
        """
        Custom signature. The structure of `custom_signature` block is documented below.
        """
        return pulumi.get(self, "custom_signatures")

    @property
    @pulumi.getter(name="disabledSignatures")
    def disabled_signatures(self) -> Optional[Sequence['outputs.ProfileSignatureDisabledSignature']]:
        """
        Disabled signatures The structure of `disabled_signature` block is documented below.
        """
        return pulumi.get(self, "disabled_signatures")

    @property
    @pulumi.getter(name="disabledSubClasses")
    def disabled_sub_classes(self) -> Optional[Sequence['outputs.ProfileSignatureDisabledSubClass']]:
        """
        Disabled signature subclasses. The structure of `disabled_sub_class` block is documented below.
        """
        return pulumi.get(self, "disabled_sub_classes")

    @property
    @pulumi.getter(name="mainClasses")
    def main_classes(self) -> Optional[Sequence['outputs.ProfileSignatureMainClass']]:
        """
        Main signature class. The structure of `main_class` block is documented below.
        """
        return pulumi.get(self, "main_classes")


@pulumi.output_type
class ProfileSignatureCustomSignature(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caseSensitivity":
            suggest = "case_sensitivity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileSignatureCustomSignature. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileSignatureCustomSignature.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileSignatureCustomSignature.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 case_sensitivity: Optional[str] = None,
                 direction: Optional[str] = None,
                 log: Optional[str] = None,
                 name: Optional[str] = None,
                 pattern: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None,
                 target: Optional[str] = None):
        """
        :param str action: Action. Valid values: `allow`, `block`, `erase`.
        :param str case_sensitivity: Case sensitivity in pattern. Valid values: `disable`, `enable`.
        :param str direction: Traffic direction. Valid values: `request`, `response`.
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param str name: Signature name.
        :param str pattern: Match pattern.
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        :param str status: Status. Valid values: `enable`, `disable`.
        :param str target: Match HTTP target. Valid values: `arg`, `arg-name`, `req-body`, `req-cookie`, `req-cookie-name`, `req-filename`, `req-header`, `req-header-name`, `req-raw-uri`, `req-uri`, `resp-body`, `resp-hdr`, `resp-status`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if case_sensitivity is not None:
            pulumi.set(__self__, "case_sensitivity", case_sensitivity)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `allow`, `block`, `erase`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="caseSensitivity")
    def case_sensitivity(self) -> Optional[str]:
        """
        Case sensitivity in pattern. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "case_sensitivity")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        Traffic direction. Valid values: `request`, `response`.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Signature name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        Match pattern.
        """
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        Match HTTP target. Valid values: `arg`, `arg-name`, `req-body`, `req-cookie`, `req-cookie-name`, `req-filename`, `req-header`, `req-header-name`, `req-raw-uri`, `req-uri`, `resp-body`, `resp-hdr`, `resp-status`.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class ProfileSignatureDisabledSignature(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Signature ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Signature ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ProfileSignatureDisabledSubClass(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Signature subclass ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Signature subclass ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ProfileSignatureMainClass(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str action: Action. Valid values: `allow`, `block`, `erase`.
        :param int id: Main signature class ID.
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        :param str status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `allow`, `block`, `erase`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Main signature class ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ProfileUrlAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessPatterns":
            suggest = "access_patterns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileUrlAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileUrlAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileUrlAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_patterns: Optional[Sequence['outputs.ProfileUrlAccessAccessPattern']] = None,
                 action: Optional[str] = None,
                 address: Optional[str] = None,
                 id: Optional[int] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        :param Sequence['ProfileUrlAccessAccessPatternArgs'] access_patterns: URL access pattern. The structure of `access_pattern` block is documented below.
        :param str action: Action. Valid values: `bypass`, `permit`, `block`.
        :param str address: Host address.
        :param int id: URL access ID.
        :param str log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param str severity: Severity. Valid values: `high`, `medium`, `low`.
        """
        if access_patterns is not None:
            pulumi.set(__self__, "access_patterns", access_patterns)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="accessPatterns")
    def access_patterns(self) -> Optional[Sequence['outputs.ProfileUrlAccessAccessPattern']]:
        """
        URL access pattern. The structure of `access_pattern` block is documented below.
        """
        return pulumi.get(self, "access_patterns")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        Host address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        URL access ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class ProfileUrlAccessAccessPattern(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 negate: Optional[str] = None,
                 pattern: Optional[str] = None,
                 regex: Optional[str] = None,
                 srcaddr: Optional[str] = None):
        """
        :param int id: URL access pattern ID.
        :param str negate: Enable/disable match negation. Valid values: `enable`, `disable`.
        :param str pattern: URL pattern.
        :param str regex: Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        :param str srcaddr: Source address.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        URL access pattern ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def negate(self) -> Optional[str]:
        """
        Enable/disable match negation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        URL pattern.
        """
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[str]:
        """
        Source address.
        """
        return pulumi.get(self, "srcaddr")



# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ProfileFileFilterArgs',
    'ProfileFileFilterEntryArgs',
    'ProfileFileFilterEntryFileTypeArgs',
    'ProfileServerKeytabArgs',
]

@pulumi.input_type
class ProfileFileFilterArgs:
    def __init__(__self__, *,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryArgs']]]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryArgs']]] entries: File filter entries. The structure of `entries` block is documented below.
        :param pulumi.Input[str] log: Enable/disable file filter logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable file filter. Valid values: `enable`, `disable`.
        """
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryArgs']]]]:
        """
        File filter entries. The structure of `entries` block is documented below.
        """
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileFileFilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryFileTypeArgs']]]] = None,
                 filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action taken for matched file. Valid values: `log`, `block`.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] direction: Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryFileTypeArgs']]] file_types: Select file type. The structure of `file_type` block is documented below.
        :param pulumi.Input[str] filter: Add a file filter.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action taken for matched file. Valid values: `log`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryFileTypeArgs']]]]:
        """
        Select file type. The structure of `file_type` block is documented below.
        """
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryFileTypeArgs']]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Add a file filter.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class ProfileFileFilterEntryFileTypeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: File type name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File type name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProfileServerKeytabArgs:
    def __init__(__self__, *,
                 keytab: Optional[pulumi.Input[str]] = None,
                 principal: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keytab: Base64 encoded keytab file containing credential of the server.
        :param pulumi.Input[str] principal: Service principal.  For example, "host/cifsserver.example.com@example.com".
        """
        if keytab is not None:
            pulumi.set(__self__, "keytab", keytab)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def keytab(self) -> Optional[pulumi.Input[str]]:
        """
        Base64 encoded keytab file containing credential of the server.
        """
        return pulumi.get(self, "keytab")

    @keytab.setter
    def keytab(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keytab", value)

    @property
    @pulumi.getter
    def principal(self) -> Optional[pulumi.Input[str]]:
        """
        Service principal.  For example, "host/cifsserver.example.com@example.com".
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal", value)



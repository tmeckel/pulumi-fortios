# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'NetworkpolicyGuest',
    'NetworkpolicyGuestVoiceSignaling',
    'NetworkpolicySoftphone',
    'NetworkpolicyStreamingVideo',
    'NetworkpolicyVideoConferencing',
    'NetworkpolicyVideoSignaling',
    'NetworkpolicyVoice',
    'NetworkpolicyVoiceSignaling',
    'GetNetworkpolicyGuestResult',
    'GetNetworkpolicyGuestVoiceSignalingResult',
    'GetNetworkpolicySoftphoneResult',
    'GetNetworkpolicyStreamingVideoResult',
    'GetNetworkpolicyVideoConferencingResult',
    'GetNetworkpolicyVideoSignalingResult',
    'GetNetworkpolicyVoiceResult',
    'GetNetworkpolicyVoiceSignalingResult',
]

@pulumi.output_type
class NetworkpolicyGuest(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 priority: Optional[int] = None,
                 status: Optional[str] = None,
                 tag: Optional[str] = None,
                 vlan: Optional[int] = None):
        """
        :param int dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param int priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param str status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param str tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param int vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class NetworkpolicyGuestVoiceSignaling(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 priority: Optional[int] = None,
                 status: Optional[str] = None,
                 tag: Optional[str] = None,
                 vlan: Optional[int] = None):
        """
        :param int dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param int priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param str status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param str tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param int vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class NetworkpolicySoftphone(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 priority: Optional[int] = None,
                 status: Optional[str] = None,
                 tag: Optional[str] = None,
                 vlan: Optional[int] = None):
        """
        :param int dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param int priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param str status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param str tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param int vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class NetworkpolicyStreamingVideo(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 priority: Optional[int] = None,
                 status: Optional[str] = None,
                 tag: Optional[str] = None,
                 vlan: Optional[int] = None):
        """
        :param int dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param int priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param str status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param str tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param int vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class NetworkpolicyVideoConferencing(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 priority: Optional[int] = None,
                 status: Optional[str] = None,
                 tag: Optional[str] = None,
                 vlan: Optional[int] = None):
        """
        :param int dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param int priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param str status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param str tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param int vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class NetworkpolicyVideoSignaling(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 priority: Optional[int] = None,
                 status: Optional[str] = None,
                 tag: Optional[str] = None,
                 vlan: Optional[int] = None):
        """
        :param int dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param int priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param str status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param str tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param int vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class NetworkpolicyVoice(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 priority: Optional[int] = None,
                 status: Optional[str] = None,
                 tag: Optional[str] = None,
                 vlan: Optional[int] = None):
        """
        :param int dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param int priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param str status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param str tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param int vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class NetworkpolicyVoiceSignaling(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 priority: Optional[int] = None,
                 status: Optional[str] = None,
                 tag: Optional[str] = None,
                 vlan: Optional[int] = None):
        """
        :param int dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param int priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param str status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param str tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param int vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetNetworkpolicyGuestResult(dict):
    def __init__(__self__, *,
                 dscp: int,
                 priority: int,
                 status: str,
                 tag: str,
                 vlan: int):
        """
        :param int dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param int priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param str status: Enable/disable advertising this policy.
        :param str tag: Advertise tagged or untagged traffic.
        :param int vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable advertising this policy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> str:
        """
        Advertise tagged or untagged traffic.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetNetworkpolicyGuestVoiceSignalingResult(dict):
    def __init__(__self__, *,
                 dscp: int,
                 priority: int,
                 status: str,
                 tag: str,
                 vlan: int):
        """
        :param int dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param int priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param str status: Enable/disable advertising this policy.
        :param str tag: Advertise tagged or untagged traffic.
        :param int vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable advertising this policy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> str:
        """
        Advertise tagged or untagged traffic.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetNetworkpolicySoftphoneResult(dict):
    def __init__(__self__, *,
                 dscp: int,
                 priority: int,
                 status: str,
                 tag: str,
                 vlan: int):
        """
        :param int dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param int priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param str status: Enable/disable advertising this policy.
        :param str tag: Advertise tagged or untagged traffic.
        :param int vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable advertising this policy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> str:
        """
        Advertise tagged or untagged traffic.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetNetworkpolicyStreamingVideoResult(dict):
    def __init__(__self__, *,
                 dscp: int,
                 priority: int,
                 status: str,
                 tag: str,
                 vlan: int):
        """
        :param int dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param int priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param str status: Enable/disable advertising this policy.
        :param str tag: Advertise tagged or untagged traffic.
        :param int vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable advertising this policy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> str:
        """
        Advertise tagged or untagged traffic.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetNetworkpolicyVideoConferencingResult(dict):
    def __init__(__self__, *,
                 dscp: int,
                 priority: int,
                 status: str,
                 tag: str,
                 vlan: int):
        """
        :param int dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param int priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param str status: Enable/disable advertising this policy.
        :param str tag: Advertise tagged or untagged traffic.
        :param int vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable advertising this policy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> str:
        """
        Advertise tagged or untagged traffic.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetNetworkpolicyVideoSignalingResult(dict):
    def __init__(__self__, *,
                 dscp: int,
                 priority: int,
                 status: str,
                 tag: str,
                 vlan: int):
        """
        :param int dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param int priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param str status: Enable/disable advertising this policy.
        :param str tag: Advertise tagged or untagged traffic.
        :param int vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable advertising this policy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> str:
        """
        Advertise tagged or untagged traffic.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetNetworkpolicyVoiceResult(dict):
    def __init__(__self__, *,
                 dscp: int,
                 priority: int,
                 status: str,
                 tag: str,
                 vlan: int):
        """
        :param int dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param int priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param str status: Enable/disable advertising this policy.
        :param str tag: Advertise tagged or untagged traffic.
        :param int vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable advertising this policy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> str:
        """
        Advertise tagged or untagged traffic.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetNetworkpolicyVoiceSignalingResult(dict):
    def __init__(__self__, *,
                 dscp: int,
                 priority: int,
                 status: str,
                 tag: str,
                 vlan: int):
        """
        :param int dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param int priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param str status: Enable/disable advertising this policy.
        :param str tag: Advertise tagged or untagged traffic.
        :param int vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable advertising this policy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> str:
        """
        Advertise tagged or untagged traffic.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")



# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'NetworkpolicyGuestArgs',
    'NetworkpolicyGuestVoiceSignalingArgs',
    'NetworkpolicySoftphoneArgs',
    'NetworkpolicyStreamingVideoArgs',
    'NetworkpolicyVideoConferencingArgs',
    'NetworkpolicyVideoSignalingArgs',
    'NetworkpolicyVoiceArgs',
    'NetworkpolicyVoiceSignalingArgs',
]

@pulumi.input_type
class NetworkpolicyGuestArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param pulumi.Input[int] priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param pulumi.Input[str] status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param pulumi.Input[int] vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class NetworkpolicyGuestVoiceSignalingArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param pulumi.Input[int] priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param pulumi.Input[str] status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param pulumi.Input[int] vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class NetworkpolicySoftphoneArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param pulumi.Input[int] priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param pulumi.Input[str] status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param pulumi.Input[int] vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class NetworkpolicyStreamingVideoArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param pulumi.Input[int] priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param pulumi.Input[str] status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param pulumi.Input[int] vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class NetworkpolicyVideoConferencingArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param pulumi.Input[int] priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param pulumi.Input[str] status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param pulumi.Input[int] vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class NetworkpolicyVideoSignalingArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param pulumi.Input[int] priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param pulumi.Input[str] status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param pulumi.Input[int] vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class NetworkpolicyVoiceArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param pulumi.Input[int] priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param pulumi.Input[str] status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param pulumi.Input[int] vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class NetworkpolicyVoiceSignalingArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param pulumi.Input[int] priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param pulumi.Input[str] status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param pulumi.Input[int] vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)



# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetPeripshaperResult',
    'AwaitableGetPeripshaperResult',
    'get_peripshaper',
    'get_peripshaper_output',
]

@pulumi.output_type
class GetPeripshaperResult:
    """
    A collection of values returned by getPeripshaper.
    """
    def __init__(__self__, bandwidth_unit=None, diffserv_forward=None, diffserv_reverse=None, diffservcode_forward=None, diffservcode_rev=None, id=None, max_bandwidth=None, max_concurrent_session=None, max_concurrent_tcp_session=None, max_concurrent_udp_session=None, name=None, vdomparam=None):
        if bandwidth_unit and not isinstance(bandwidth_unit, str):
            raise TypeError("Expected argument 'bandwidth_unit' to be a str")
        pulumi.set(__self__, "bandwidth_unit", bandwidth_unit)
        if diffserv_forward and not isinstance(diffserv_forward, str):
            raise TypeError("Expected argument 'diffserv_forward' to be a str")
        pulumi.set(__self__, "diffserv_forward", diffserv_forward)
        if diffserv_reverse and not isinstance(diffserv_reverse, str):
            raise TypeError("Expected argument 'diffserv_reverse' to be a str")
        pulumi.set(__self__, "diffserv_reverse", diffserv_reverse)
        if diffservcode_forward and not isinstance(diffservcode_forward, str):
            raise TypeError("Expected argument 'diffservcode_forward' to be a str")
        pulumi.set(__self__, "diffservcode_forward", diffservcode_forward)
        if diffservcode_rev and not isinstance(diffservcode_rev, str):
            raise TypeError("Expected argument 'diffservcode_rev' to be a str")
        pulumi.set(__self__, "diffservcode_rev", diffservcode_rev)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if max_bandwidth and not isinstance(max_bandwidth, int):
            raise TypeError("Expected argument 'max_bandwidth' to be a int")
        pulumi.set(__self__, "max_bandwidth", max_bandwidth)
        if max_concurrent_session and not isinstance(max_concurrent_session, int):
            raise TypeError("Expected argument 'max_concurrent_session' to be a int")
        pulumi.set(__self__, "max_concurrent_session", max_concurrent_session)
        if max_concurrent_tcp_session and not isinstance(max_concurrent_tcp_session, int):
            raise TypeError("Expected argument 'max_concurrent_tcp_session' to be a int")
        pulumi.set(__self__, "max_concurrent_tcp_session", max_concurrent_tcp_session)
        if max_concurrent_udp_session and not isinstance(max_concurrent_udp_session, int):
            raise TypeError("Expected argument 'max_concurrent_udp_session' to be a int")
        pulumi.set(__self__, "max_concurrent_udp_session", max_concurrent_udp_session)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="bandwidthUnit")
    def bandwidth_unit(self) -> str:
        """
        Unit of measurement for maximum bandwidth for this shaper (Kbps, Mbps or Gbps).
        """
        return pulumi.get(self, "bandwidth_unit")

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> str:
        """
        Enable/disable changing the Forward (original) DiffServ setting applied to traffic accepted by this shaper.
        """
        return pulumi.get(self, "diffserv_forward")

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> str:
        """
        Enable/disable changing the Reverse (reply) DiffServ setting applied to traffic accepted by this shaper.
        """
        return pulumi.get(self, "diffserv_reverse")

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> str:
        """
        Forward (original) DiffServ setting to be applied to traffic accepted by this shaper.
        """
        return pulumi.get(self, "diffservcode_forward")

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> str:
        """
        Reverse (reply) DiffServ setting to be applied to traffic accepted by this shaper.
        """
        return pulumi.get(self, "diffservcode_rev")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxBandwidth")
    def max_bandwidth(self) -> int:
        """
        Upper bandwidth limit enforced by this shaper (0 - 16776000). 0 means no limit. Units depend on the bandwidth-unit setting.
        """
        return pulumi.get(self, "max_bandwidth")

    @property
    @pulumi.getter(name="maxConcurrentSession")
    def max_concurrent_session(self) -> int:
        """
        Maximum number of concurrent sessions allowed by this shaper (0 - 2097000). 0 means no limit.
        """
        return pulumi.get(self, "max_concurrent_session")

    @property
    @pulumi.getter(name="maxConcurrentTcpSession")
    def max_concurrent_tcp_session(self) -> int:
        """
        Maximum number of concurrent TCP sessions allowed by this shaper (0 - 2097000). 0 means no limit.
        """
        return pulumi.get(self, "max_concurrent_tcp_session")

    @property
    @pulumi.getter(name="maxConcurrentUdpSession")
    def max_concurrent_udp_session(self) -> int:
        """
        Maximum number of concurrent UDP sessions allowed by this shaper (0 - 2097000). 0 means no limit.
        """
        return pulumi.get(self, "max_concurrent_udp_session")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Traffic shaper name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetPeripshaperResult(GetPeripshaperResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPeripshaperResult(
            bandwidth_unit=self.bandwidth_unit,
            diffserv_forward=self.diffserv_forward,
            diffserv_reverse=self.diffserv_reverse,
            diffservcode_forward=self.diffservcode_forward,
            diffservcode_rev=self.diffservcode_rev,
            id=self.id,
            max_bandwidth=self.max_bandwidth,
            max_concurrent_session=self.max_concurrent_session,
            max_concurrent_tcp_session=self.max_concurrent_tcp_session,
            max_concurrent_udp_session=self.max_concurrent_udp_session,
            name=self.name,
            vdomparam=self.vdomparam)


def get_peripshaper(name: Optional[str] = None,
                    vdomparam: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPeripshaperResult:
    """
    Use this data source to get information on an fortios firewallshaper peripshaper


    :param str name: Specify the name of the desired firewallshaper peripshaper.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:firewallshaper/getPeripshaper:getPeripshaper', __args__, opts=opts, typ=GetPeripshaperResult).value

    return AwaitableGetPeripshaperResult(
        bandwidth_unit=__ret__.bandwidth_unit,
        diffserv_forward=__ret__.diffserv_forward,
        diffserv_reverse=__ret__.diffserv_reverse,
        diffservcode_forward=__ret__.diffservcode_forward,
        diffservcode_rev=__ret__.diffservcode_rev,
        id=__ret__.id,
        max_bandwidth=__ret__.max_bandwidth,
        max_concurrent_session=__ret__.max_concurrent_session,
        max_concurrent_tcp_session=__ret__.max_concurrent_tcp_session,
        max_concurrent_udp_session=__ret__.max_concurrent_udp_session,
        name=__ret__.name,
        vdomparam=__ret__.vdomparam)


@_utilities.lift_output_func(get_peripshaper)
def get_peripshaper_output(name: Optional[pulumi.Input[str]] = None,
                           vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPeripshaperResult]:
    """
    Use this data source to get information on an fortios firewallshaper peripshaper


    :param str name: Specify the name of the desired firewallshaper peripshaper.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...

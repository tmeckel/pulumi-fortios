# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetTrafficshaperResult',
    'AwaitableGetTrafficshaperResult',
    'get_trafficshaper',
    'get_trafficshaper_output',
]

@pulumi.output_type
class GetTrafficshaperResult:
    """
    A collection of values returned by getTrafficshaper.
    """
    def __init__(__self__, bandwidth_unit=None, diffserv=None, diffservcode=None, dscp_marking_method=None, exceed_bandwidth=None, exceed_class_id=None, exceed_dscp=None, guaranteed_bandwidth=None, id=None, maximum_bandwidth=None, maximum_dscp=None, name=None, overhead=None, per_policy=None, priority=None, vdomparam=None):
        if bandwidth_unit and not isinstance(bandwidth_unit, str):
            raise TypeError("Expected argument 'bandwidth_unit' to be a str")
        pulumi.set(__self__, "bandwidth_unit", bandwidth_unit)
        if diffserv and not isinstance(diffserv, str):
            raise TypeError("Expected argument 'diffserv' to be a str")
        pulumi.set(__self__, "diffserv", diffserv)
        if diffservcode and not isinstance(diffservcode, str):
            raise TypeError("Expected argument 'diffservcode' to be a str")
        pulumi.set(__self__, "diffservcode", diffservcode)
        if dscp_marking_method and not isinstance(dscp_marking_method, str):
            raise TypeError("Expected argument 'dscp_marking_method' to be a str")
        pulumi.set(__self__, "dscp_marking_method", dscp_marking_method)
        if exceed_bandwidth and not isinstance(exceed_bandwidth, int):
            raise TypeError("Expected argument 'exceed_bandwidth' to be a int")
        pulumi.set(__self__, "exceed_bandwidth", exceed_bandwidth)
        if exceed_class_id and not isinstance(exceed_class_id, int):
            raise TypeError("Expected argument 'exceed_class_id' to be a int")
        pulumi.set(__self__, "exceed_class_id", exceed_class_id)
        if exceed_dscp and not isinstance(exceed_dscp, str):
            raise TypeError("Expected argument 'exceed_dscp' to be a str")
        pulumi.set(__self__, "exceed_dscp", exceed_dscp)
        if guaranteed_bandwidth and not isinstance(guaranteed_bandwidth, int):
            raise TypeError("Expected argument 'guaranteed_bandwidth' to be a int")
        pulumi.set(__self__, "guaranteed_bandwidth", guaranteed_bandwidth)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if maximum_bandwidth and not isinstance(maximum_bandwidth, int):
            raise TypeError("Expected argument 'maximum_bandwidth' to be a int")
        pulumi.set(__self__, "maximum_bandwidth", maximum_bandwidth)
        if maximum_dscp and not isinstance(maximum_dscp, str):
            raise TypeError("Expected argument 'maximum_dscp' to be a str")
        pulumi.set(__self__, "maximum_dscp", maximum_dscp)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if overhead and not isinstance(overhead, int):
            raise TypeError("Expected argument 'overhead' to be a int")
        pulumi.set(__self__, "overhead", overhead)
        if per_policy and not isinstance(per_policy, str):
            raise TypeError("Expected argument 'per_policy' to be a str")
        pulumi.set(__self__, "per_policy", per_policy)
        if priority and not isinstance(priority, str):
            raise TypeError("Expected argument 'priority' to be a str")
        pulumi.set(__self__, "priority", priority)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="bandwidthUnit")
    def bandwidth_unit(self) -> str:
        """
        Unit of measurement for guaranteed and maximum bandwidth for this shaper (Kbps, Mbps or Gbps).
        """
        return pulumi.get(self, "bandwidth_unit")

    @property
    @pulumi.getter
    def diffserv(self) -> str:
        """
        Enable/disable changing the DiffServ setting applied to traffic accepted by this shaper.
        """
        return pulumi.get(self, "diffserv")

    @property
    @pulumi.getter
    def diffservcode(self) -> str:
        """
        DiffServ setting to be applied to traffic accepted by this shaper.
        """
        return pulumi.get(self, "diffservcode")

    @property
    @pulumi.getter(name="dscpMarkingMethod")
    def dscp_marking_method(self) -> str:
        """
        Select DSCP marking method.
        """
        return pulumi.get(self, "dscp_marking_method")

    @property
    @pulumi.getter(name="exceedBandwidth")
    def exceed_bandwidth(self) -> int:
        """
        Exceed bandwidth used for DSCP multi-stage marking. Units depend on the bandwidth-unit setting.
        """
        return pulumi.get(self, "exceed_bandwidth")

    @property
    @pulumi.getter(name="exceedClassId")
    def exceed_class_id(self) -> int:
        """
        Class ID for traffic in [guaranteed-bandwidth, maximum-bandwidth].
        """
        return pulumi.get(self, "exceed_class_id")

    @property
    @pulumi.getter(name="exceedDscp")
    def exceed_dscp(self) -> str:
        """
        DSCP mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
        """
        return pulumi.get(self, "exceed_dscp")

    @property
    @pulumi.getter(name="guaranteedBandwidth")
    def guaranteed_bandwidth(self) -> int:
        """
        Amount of bandwidth guaranteed for this shaper (0 - 16776000). Units depend on the bandwidth-unit setting.
        """
        return pulumi.get(self, "guaranteed_bandwidth")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maximumBandwidth")
    def maximum_bandwidth(self) -> int:
        """
        Upper bandwidth limit enforced by this shaper (0 - 16776000). 0 means no limit. Units depend on the bandwidth-unit setting.
        """
        return pulumi.get(self, "maximum_bandwidth")

    @property
    @pulumi.getter(name="maximumDscp")
    def maximum_dscp(self) -> str:
        """
        DSCP mark for traffic in [exceed-bandwidth, maximum-bandwidth].
        """
        return pulumi.get(self, "maximum_dscp")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Traffic shaper name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def overhead(self) -> int:
        """
        Per-packet size overhead used in rate computations.
        """
        return pulumi.get(self, "overhead")

    @property
    @pulumi.getter(name="perPolicy")
    def per_policy(self) -> str:
        """
        Enable/disable applying a separate shaper for each policy. For example, if enabled the guaranteed bandwidth is applied separately for each policy.
        """
        return pulumi.get(self, "per_policy")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        Higher priority traffic is more likely to be forwarded without delays and without compromising the guaranteed bandwidth.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetTrafficshaperResult(GetTrafficshaperResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTrafficshaperResult(
            bandwidth_unit=self.bandwidth_unit,
            diffserv=self.diffserv,
            diffservcode=self.diffservcode,
            dscp_marking_method=self.dscp_marking_method,
            exceed_bandwidth=self.exceed_bandwidth,
            exceed_class_id=self.exceed_class_id,
            exceed_dscp=self.exceed_dscp,
            guaranteed_bandwidth=self.guaranteed_bandwidth,
            id=self.id,
            maximum_bandwidth=self.maximum_bandwidth,
            maximum_dscp=self.maximum_dscp,
            name=self.name,
            overhead=self.overhead,
            per_policy=self.per_policy,
            priority=self.priority,
            vdomparam=self.vdomparam)


def get_trafficshaper(name: Optional[str] = None,
                      vdomparam: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTrafficshaperResult:
    """
    Use this data source to get information on an fortios firewallshaper trafficshaper


    :param str name: Specify the name of the desired firewallshaper trafficshaper.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:firewallshaper/getTrafficshaper:getTrafficshaper', __args__, opts=opts, typ=GetTrafficshaperResult).value

    return AwaitableGetTrafficshaperResult(
        bandwidth_unit=__ret__.bandwidth_unit,
        diffserv=__ret__.diffserv,
        diffservcode=__ret__.diffservcode,
        dscp_marking_method=__ret__.dscp_marking_method,
        exceed_bandwidth=__ret__.exceed_bandwidth,
        exceed_class_id=__ret__.exceed_class_id,
        exceed_dscp=__ret__.exceed_dscp,
        guaranteed_bandwidth=__ret__.guaranteed_bandwidth,
        id=__ret__.id,
        maximum_bandwidth=__ret__.maximum_bandwidth,
        maximum_dscp=__ret__.maximum_dscp,
        name=__ret__.name,
        overhead=__ret__.overhead,
        per_policy=__ret__.per_policy,
        priority=__ret__.priority,
        vdomparam=__ret__.vdomparam)


@_utilities.lift_output_func(get_trafficshaper)
def get_trafficshaper_output(name: Optional[pulumi.Input[str]] = None,
                             vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTrafficshaperResult]:
    """
    Use this data source to get information on an fortios firewallshaper trafficshaper


    :param str name: Specify the name of the desired firewallshaper trafficshaper.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...

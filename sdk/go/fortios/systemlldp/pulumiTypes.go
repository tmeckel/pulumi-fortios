// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package systemlldp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkpolicyGuest struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp *int `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority *int `pulumi:"priority"`
	// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
	Tag *string `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan *int `pulumi:"vlan"`
}

// NetworkpolicyGuestInput is an input type that accepts NetworkpolicyGuestArgs and NetworkpolicyGuestOutput values.
// You can construct a concrete instance of `NetworkpolicyGuestInput` via:
//
//	NetworkpolicyGuestArgs{...}
type NetworkpolicyGuestInput interface {
	pulumi.Input

	ToNetworkpolicyGuestOutput() NetworkpolicyGuestOutput
	ToNetworkpolicyGuestOutputWithContext(context.Context) NetworkpolicyGuestOutput
}

type NetworkpolicyGuestArgs struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp pulumi.IntPtrInput `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan pulumi.IntPtrInput `pulumi:"vlan"`
}

func (NetworkpolicyGuestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkpolicyGuest)(nil)).Elem()
}

func (i NetworkpolicyGuestArgs) ToNetworkpolicyGuestOutput() NetworkpolicyGuestOutput {
	return i.ToNetworkpolicyGuestOutputWithContext(context.Background())
}

func (i NetworkpolicyGuestArgs) ToNetworkpolicyGuestOutputWithContext(ctx context.Context) NetworkpolicyGuestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyGuestOutput)
}

func (i NetworkpolicyGuestArgs) ToNetworkpolicyGuestPtrOutput() NetworkpolicyGuestPtrOutput {
	return i.ToNetworkpolicyGuestPtrOutputWithContext(context.Background())
}

func (i NetworkpolicyGuestArgs) ToNetworkpolicyGuestPtrOutputWithContext(ctx context.Context) NetworkpolicyGuestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyGuestOutput).ToNetworkpolicyGuestPtrOutputWithContext(ctx)
}

// NetworkpolicyGuestPtrInput is an input type that accepts NetworkpolicyGuestArgs, NetworkpolicyGuestPtr and NetworkpolicyGuestPtrOutput values.
// You can construct a concrete instance of `NetworkpolicyGuestPtrInput` via:
//
//	        NetworkpolicyGuestArgs{...}
//
//	or:
//
//	        nil
type NetworkpolicyGuestPtrInput interface {
	pulumi.Input

	ToNetworkpolicyGuestPtrOutput() NetworkpolicyGuestPtrOutput
	ToNetworkpolicyGuestPtrOutputWithContext(context.Context) NetworkpolicyGuestPtrOutput
}

type networkpolicyGuestPtrType NetworkpolicyGuestArgs

func NetworkpolicyGuestPtr(v *NetworkpolicyGuestArgs) NetworkpolicyGuestPtrInput {
	return (*networkpolicyGuestPtrType)(v)
}

func (*networkpolicyGuestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkpolicyGuest)(nil)).Elem()
}

func (i *networkpolicyGuestPtrType) ToNetworkpolicyGuestPtrOutput() NetworkpolicyGuestPtrOutput {
	return i.ToNetworkpolicyGuestPtrOutputWithContext(context.Background())
}

func (i *networkpolicyGuestPtrType) ToNetworkpolicyGuestPtrOutputWithContext(ctx context.Context) NetworkpolicyGuestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyGuestPtrOutput)
}

type NetworkpolicyGuestOutput struct{ *pulumi.OutputState }

func (NetworkpolicyGuestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkpolicyGuest)(nil)).Elem()
}

func (o NetworkpolicyGuestOutput) ToNetworkpolicyGuestOutput() NetworkpolicyGuestOutput {
	return o
}

func (o NetworkpolicyGuestOutput) ToNetworkpolicyGuestOutputWithContext(ctx context.Context) NetworkpolicyGuestOutput {
	return o
}

func (o NetworkpolicyGuestOutput) ToNetworkpolicyGuestPtrOutput() NetworkpolicyGuestPtrOutput {
	return o.ToNetworkpolicyGuestPtrOutputWithContext(context.Background())
}

func (o NetworkpolicyGuestOutput) ToNetworkpolicyGuestPtrOutputWithContext(ctx context.Context) NetworkpolicyGuestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkpolicyGuest) *NetworkpolicyGuest {
		return &v
	}).(NetworkpolicyGuestPtrOutput)
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o NetworkpolicyGuestOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyGuest) *int { return v.Dscp }).(pulumi.IntPtrOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o NetworkpolicyGuestOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyGuest) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
func (o NetworkpolicyGuestOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkpolicyGuest) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
func (o NetworkpolicyGuestOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkpolicyGuest) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o NetworkpolicyGuestOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyGuest) *int { return v.Vlan }).(pulumi.IntPtrOutput)
}

type NetworkpolicyGuestPtrOutput struct{ *pulumi.OutputState }

func (NetworkpolicyGuestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkpolicyGuest)(nil)).Elem()
}

func (o NetworkpolicyGuestPtrOutput) ToNetworkpolicyGuestPtrOutput() NetworkpolicyGuestPtrOutput {
	return o
}

func (o NetworkpolicyGuestPtrOutput) ToNetworkpolicyGuestPtrOutputWithContext(ctx context.Context) NetworkpolicyGuestPtrOutput {
	return o
}

func (o NetworkpolicyGuestPtrOutput) Elem() NetworkpolicyGuestOutput {
	return o.ApplyT(func(v *NetworkpolicyGuest) NetworkpolicyGuest {
		if v != nil {
			return *v
		}
		var ret NetworkpolicyGuest
		return ret
	}).(NetworkpolicyGuestOutput)
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o NetworkpolicyGuestPtrOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyGuest) *int {
		if v == nil {
			return nil
		}
		return v.Dscp
	}).(pulumi.IntPtrOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o NetworkpolicyGuestPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyGuest) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
func (o NetworkpolicyGuestPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyGuest) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
func (o NetworkpolicyGuestPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyGuest) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o NetworkpolicyGuestPtrOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyGuest) *int {
		if v == nil {
			return nil
		}
		return v.Vlan
	}).(pulumi.IntPtrOutput)
}

type NetworkpolicyGuestVoiceSignaling struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp *int `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority *int `pulumi:"priority"`
	// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
	Tag *string `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan *int `pulumi:"vlan"`
}

// NetworkpolicyGuestVoiceSignalingInput is an input type that accepts NetworkpolicyGuestVoiceSignalingArgs and NetworkpolicyGuestVoiceSignalingOutput values.
// You can construct a concrete instance of `NetworkpolicyGuestVoiceSignalingInput` via:
//
//	NetworkpolicyGuestVoiceSignalingArgs{...}
type NetworkpolicyGuestVoiceSignalingInput interface {
	pulumi.Input

	ToNetworkpolicyGuestVoiceSignalingOutput() NetworkpolicyGuestVoiceSignalingOutput
	ToNetworkpolicyGuestVoiceSignalingOutputWithContext(context.Context) NetworkpolicyGuestVoiceSignalingOutput
}

type NetworkpolicyGuestVoiceSignalingArgs struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp pulumi.IntPtrInput `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan pulumi.IntPtrInput `pulumi:"vlan"`
}

func (NetworkpolicyGuestVoiceSignalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkpolicyGuestVoiceSignaling)(nil)).Elem()
}

func (i NetworkpolicyGuestVoiceSignalingArgs) ToNetworkpolicyGuestVoiceSignalingOutput() NetworkpolicyGuestVoiceSignalingOutput {
	return i.ToNetworkpolicyGuestVoiceSignalingOutputWithContext(context.Background())
}

func (i NetworkpolicyGuestVoiceSignalingArgs) ToNetworkpolicyGuestVoiceSignalingOutputWithContext(ctx context.Context) NetworkpolicyGuestVoiceSignalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyGuestVoiceSignalingOutput)
}

func (i NetworkpolicyGuestVoiceSignalingArgs) ToNetworkpolicyGuestVoiceSignalingPtrOutput() NetworkpolicyGuestVoiceSignalingPtrOutput {
	return i.ToNetworkpolicyGuestVoiceSignalingPtrOutputWithContext(context.Background())
}

func (i NetworkpolicyGuestVoiceSignalingArgs) ToNetworkpolicyGuestVoiceSignalingPtrOutputWithContext(ctx context.Context) NetworkpolicyGuestVoiceSignalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyGuestVoiceSignalingOutput).ToNetworkpolicyGuestVoiceSignalingPtrOutputWithContext(ctx)
}

// NetworkpolicyGuestVoiceSignalingPtrInput is an input type that accepts NetworkpolicyGuestVoiceSignalingArgs, NetworkpolicyGuestVoiceSignalingPtr and NetworkpolicyGuestVoiceSignalingPtrOutput values.
// You can construct a concrete instance of `NetworkpolicyGuestVoiceSignalingPtrInput` via:
//
//	        NetworkpolicyGuestVoiceSignalingArgs{...}
//
//	or:
//
//	        nil
type NetworkpolicyGuestVoiceSignalingPtrInput interface {
	pulumi.Input

	ToNetworkpolicyGuestVoiceSignalingPtrOutput() NetworkpolicyGuestVoiceSignalingPtrOutput
	ToNetworkpolicyGuestVoiceSignalingPtrOutputWithContext(context.Context) NetworkpolicyGuestVoiceSignalingPtrOutput
}

type networkpolicyGuestVoiceSignalingPtrType NetworkpolicyGuestVoiceSignalingArgs

func NetworkpolicyGuestVoiceSignalingPtr(v *NetworkpolicyGuestVoiceSignalingArgs) NetworkpolicyGuestVoiceSignalingPtrInput {
	return (*networkpolicyGuestVoiceSignalingPtrType)(v)
}

func (*networkpolicyGuestVoiceSignalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkpolicyGuestVoiceSignaling)(nil)).Elem()
}

func (i *networkpolicyGuestVoiceSignalingPtrType) ToNetworkpolicyGuestVoiceSignalingPtrOutput() NetworkpolicyGuestVoiceSignalingPtrOutput {
	return i.ToNetworkpolicyGuestVoiceSignalingPtrOutputWithContext(context.Background())
}

func (i *networkpolicyGuestVoiceSignalingPtrType) ToNetworkpolicyGuestVoiceSignalingPtrOutputWithContext(ctx context.Context) NetworkpolicyGuestVoiceSignalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyGuestVoiceSignalingPtrOutput)
}

type NetworkpolicyGuestVoiceSignalingOutput struct{ *pulumi.OutputState }

func (NetworkpolicyGuestVoiceSignalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkpolicyGuestVoiceSignaling)(nil)).Elem()
}

func (o NetworkpolicyGuestVoiceSignalingOutput) ToNetworkpolicyGuestVoiceSignalingOutput() NetworkpolicyGuestVoiceSignalingOutput {
	return o
}

func (o NetworkpolicyGuestVoiceSignalingOutput) ToNetworkpolicyGuestVoiceSignalingOutputWithContext(ctx context.Context) NetworkpolicyGuestVoiceSignalingOutput {
	return o
}

func (o NetworkpolicyGuestVoiceSignalingOutput) ToNetworkpolicyGuestVoiceSignalingPtrOutput() NetworkpolicyGuestVoiceSignalingPtrOutput {
	return o.ToNetworkpolicyGuestVoiceSignalingPtrOutputWithContext(context.Background())
}

func (o NetworkpolicyGuestVoiceSignalingOutput) ToNetworkpolicyGuestVoiceSignalingPtrOutputWithContext(ctx context.Context) NetworkpolicyGuestVoiceSignalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkpolicyGuestVoiceSignaling) *NetworkpolicyGuestVoiceSignaling {
		return &v
	}).(NetworkpolicyGuestVoiceSignalingPtrOutput)
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o NetworkpolicyGuestVoiceSignalingOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyGuestVoiceSignaling) *int { return v.Dscp }).(pulumi.IntPtrOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o NetworkpolicyGuestVoiceSignalingOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyGuestVoiceSignaling) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
func (o NetworkpolicyGuestVoiceSignalingOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkpolicyGuestVoiceSignaling) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
func (o NetworkpolicyGuestVoiceSignalingOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkpolicyGuestVoiceSignaling) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o NetworkpolicyGuestVoiceSignalingOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyGuestVoiceSignaling) *int { return v.Vlan }).(pulumi.IntPtrOutput)
}

type NetworkpolicyGuestVoiceSignalingPtrOutput struct{ *pulumi.OutputState }

func (NetworkpolicyGuestVoiceSignalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkpolicyGuestVoiceSignaling)(nil)).Elem()
}

func (o NetworkpolicyGuestVoiceSignalingPtrOutput) ToNetworkpolicyGuestVoiceSignalingPtrOutput() NetworkpolicyGuestVoiceSignalingPtrOutput {
	return o
}

func (o NetworkpolicyGuestVoiceSignalingPtrOutput) ToNetworkpolicyGuestVoiceSignalingPtrOutputWithContext(ctx context.Context) NetworkpolicyGuestVoiceSignalingPtrOutput {
	return o
}

func (o NetworkpolicyGuestVoiceSignalingPtrOutput) Elem() NetworkpolicyGuestVoiceSignalingOutput {
	return o.ApplyT(func(v *NetworkpolicyGuestVoiceSignaling) NetworkpolicyGuestVoiceSignaling {
		if v != nil {
			return *v
		}
		var ret NetworkpolicyGuestVoiceSignaling
		return ret
	}).(NetworkpolicyGuestVoiceSignalingOutput)
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o NetworkpolicyGuestVoiceSignalingPtrOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyGuestVoiceSignaling) *int {
		if v == nil {
			return nil
		}
		return v.Dscp
	}).(pulumi.IntPtrOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o NetworkpolicyGuestVoiceSignalingPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyGuestVoiceSignaling) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
func (o NetworkpolicyGuestVoiceSignalingPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyGuestVoiceSignaling) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
func (o NetworkpolicyGuestVoiceSignalingPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyGuestVoiceSignaling) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o NetworkpolicyGuestVoiceSignalingPtrOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyGuestVoiceSignaling) *int {
		if v == nil {
			return nil
		}
		return v.Vlan
	}).(pulumi.IntPtrOutput)
}

type NetworkpolicySoftphone struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp *int `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority *int `pulumi:"priority"`
	// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
	Tag *string `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan *int `pulumi:"vlan"`
}

// NetworkpolicySoftphoneInput is an input type that accepts NetworkpolicySoftphoneArgs and NetworkpolicySoftphoneOutput values.
// You can construct a concrete instance of `NetworkpolicySoftphoneInput` via:
//
//	NetworkpolicySoftphoneArgs{...}
type NetworkpolicySoftphoneInput interface {
	pulumi.Input

	ToNetworkpolicySoftphoneOutput() NetworkpolicySoftphoneOutput
	ToNetworkpolicySoftphoneOutputWithContext(context.Context) NetworkpolicySoftphoneOutput
}

type NetworkpolicySoftphoneArgs struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp pulumi.IntPtrInput `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan pulumi.IntPtrInput `pulumi:"vlan"`
}

func (NetworkpolicySoftphoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkpolicySoftphone)(nil)).Elem()
}

func (i NetworkpolicySoftphoneArgs) ToNetworkpolicySoftphoneOutput() NetworkpolicySoftphoneOutput {
	return i.ToNetworkpolicySoftphoneOutputWithContext(context.Background())
}

func (i NetworkpolicySoftphoneArgs) ToNetworkpolicySoftphoneOutputWithContext(ctx context.Context) NetworkpolicySoftphoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicySoftphoneOutput)
}

func (i NetworkpolicySoftphoneArgs) ToNetworkpolicySoftphonePtrOutput() NetworkpolicySoftphonePtrOutput {
	return i.ToNetworkpolicySoftphonePtrOutputWithContext(context.Background())
}

func (i NetworkpolicySoftphoneArgs) ToNetworkpolicySoftphonePtrOutputWithContext(ctx context.Context) NetworkpolicySoftphonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicySoftphoneOutput).ToNetworkpolicySoftphonePtrOutputWithContext(ctx)
}

// NetworkpolicySoftphonePtrInput is an input type that accepts NetworkpolicySoftphoneArgs, NetworkpolicySoftphonePtr and NetworkpolicySoftphonePtrOutput values.
// You can construct a concrete instance of `NetworkpolicySoftphonePtrInput` via:
//
//	        NetworkpolicySoftphoneArgs{...}
//
//	or:
//
//	        nil
type NetworkpolicySoftphonePtrInput interface {
	pulumi.Input

	ToNetworkpolicySoftphonePtrOutput() NetworkpolicySoftphonePtrOutput
	ToNetworkpolicySoftphonePtrOutputWithContext(context.Context) NetworkpolicySoftphonePtrOutput
}

type networkpolicySoftphonePtrType NetworkpolicySoftphoneArgs

func NetworkpolicySoftphonePtr(v *NetworkpolicySoftphoneArgs) NetworkpolicySoftphonePtrInput {
	return (*networkpolicySoftphonePtrType)(v)
}

func (*networkpolicySoftphonePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkpolicySoftphone)(nil)).Elem()
}

func (i *networkpolicySoftphonePtrType) ToNetworkpolicySoftphonePtrOutput() NetworkpolicySoftphonePtrOutput {
	return i.ToNetworkpolicySoftphonePtrOutputWithContext(context.Background())
}

func (i *networkpolicySoftphonePtrType) ToNetworkpolicySoftphonePtrOutputWithContext(ctx context.Context) NetworkpolicySoftphonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicySoftphonePtrOutput)
}

type NetworkpolicySoftphoneOutput struct{ *pulumi.OutputState }

func (NetworkpolicySoftphoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkpolicySoftphone)(nil)).Elem()
}

func (o NetworkpolicySoftphoneOutput) ToNetworkpolicySoftphoneOutput() NetworkpolicySoftphoneOutput {
	return o
}

func (o NetworkpolicySoftphoneOutput) ToNetworkpolicySoftphoneOutputWithContext(ctx context.Context) NetworkpolicySoftphoneOutput {
	return o
}

func (o NetworkpolicySoftphoneOutput) ToNetworkpolicySoftphonePtrOutput() NetworkpolicySoftphonePtrOutput {
	return o.ToNetworkpolicySoftphonePtrOutputWithContext(context.Background())
}

func (o NetworkpolicySoftphoneOutput) ToNetworkpolicySoftphonePtrOutputWithContext(ctx context.Context) NetworkpolicySoftphonePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkpolicySoftphone) *NetworkpolicySoftphone {
		return &v
	}).(NetworkpolicySoftphonePtrOutput)
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o NetworkpolicySoftphoneOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicySoftphone) *int { return v.Dscp }).(pulumi.IntPtrOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o NetworkpolicySoftphoneOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicySoftphone) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
func (o NetworkpolicySoftphoneOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkpolicySoftphone) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
func (o NetworkpolicySoftphoneOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkpolicySoftphone) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o NetworkpolicySoftphoneOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicySoftphone) *int { return v.Vlan }).(pulumi.IntPtrOutput)
}

type NetworkpolicySoftphonePtrOutput struct{ *pulumi.OutputState }

func (NetworkpolicySoftphonePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkpolicySoftphone)(nil)).Elem()
}

func (o NetworkpolicySoftphonePtrOutput) ToNetworkpolicySoftphonePtrOutput() NetworkpolicySoftphonePtrOutput {
	return o
}

func (o NetworkpolicySoftphonePtrOutput) ToNetworkpolicySoftphonePtrOutputWithContext(ctx context.Context) NetworkpolicySoftphonePtrOutput {
	return o
}

func (o NetworkpolicySoftphonePtrOutput) Elem() NetworkpolicySoftphoneOutput {
	return o.ApplyT(func(v *NetworkpolicySoftphone) NetworkpolicySoftphone {
		if v != nil {
			return *v
		}
		var ret NetworkpolicySoftphone
		return ret
	}).(NetworkpolicySoftphoneOutput)
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o NetworkpolicySoftphonePtrOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicySoftphone) *int {
		if v == nil {
			return nil
		}
		return v.Dscp
	}).(pulumi.IntPtrOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o NetworkpolicySoftphonePtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicySoftphone) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
func (o NetworkpolicySoftphonePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkpolicySoftphone) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
func (o NetworkpolicySoftphonePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkpolicySoftphone) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o NetworkpolicySoftphonePtrOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicySoftphone) *int {
		if v == nil {
			return nil
		}
		return v.Vlan
	}).(pulumi.IntPtrOutput)
}

type NetworkpolicyStreamingVideo struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp *int `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority *int `pulumi:"priority"`
	// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
	Tag *string `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan *int `pulumi:"vlan"`
}

// NetworkpolicyStreamingVideoInput is an input type that accepts NetworkpolicyStreamingVideoArgs and NetworkpolicyStreamingVideoOutput values.
// You can construct a concrete instance of `NetworkpolicyStreamingVideoInput` via:
//
//	NetworkpolicyStreamingVideoArgs{...}
type NetworkpolicyStreamingVideoInput interface {
	pulumi.Input

	ToNetworkpolicyStreamingVideoOutput() NetworkpolicyStreamingVideoOutput
	ToNetworkpolicyStreamingVideoOutputWithContext(context.Context) NetworkpolicyStreamingVideoOutput
}

type NetworkpolicyStreamingVideoArgs struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp pulumi.IntPtrInput `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan pulumi.IntPtrInput `pulumi:"vlan"`
}

func (NetworkpolicyStreamingVideoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkpolicyStreamingVideo)(nil)).Elem()
}

func (i NetworkpolicyStreamingVideoArgs) ToNetworkpolicyStreamingVideoOutput() NetworkpolicyStreamingVideoOutput {
	return i.ToNetworkpolicyStreamingVideoOutputWithContext(context.Background())
}

func (i NetworkpolicyStreamingVideoArgs) ToNetworkpolicyStreamingVideoOutputWithContext(ctx context.Context) NetworkpolicyStreamingVideoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyStreamingVideoOutput)
}

func (i NetworkpolicyStreamingVideoArgs) ToNetworkpolicyStreamingVideoPtrOutput() NetworkpolicyStreamingVideoPtrOutput {
	return i.ToNetworkpolicyStreamingVideoPtrOutputWithContext(context.Background())
}

func (i NetworkpolicyStreamingVideoArgs) ToNetworkpolicyStreamingVideoPtrOutputWithContext(ctx context.Context) NetworkpolicyStreamingVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyStreamingVideoOutput).ToNetworkpolicyStreamingVideoPtrOutputWithContext(ctx)
}

// NetworkpolicyStreamingVideoPtrInput is an input type that accepts NetworkpolicyStreamingVideoArgs, NetworkpolicyStreamingVideoPtr and NetworkpolicyStreamingVideoPtrOutput values.
// You can construct a concrete instance of `NetworkpolicyStreamingVideoPtrInput` via:
//
//	        NetworkpolicyStreamingVideoArgs{...}
//
//	or:
//
//	        nil
type NetworkpolicyStreamingVideoPtrInput interface {
	pulumi.Input

	ToNetworkpolicyStreamingVideoPtrOutput() NetworkpolicyStreamingVideoPtrOutput
	ToNetworkpolicyStreamingVideoPtrOutputWithContext(context.Context) NetworkpolicyStreamingVideoPtrOutput
}

type networkpolicyStreamingVideoPtrType NetworkpolicyStreamingVideoArgs

func NetworkpolicyStreamingVideoPtr(v *NetworkpolicyStreamingVideoArgs) NetworkpolicyStreamingVideoPtrInput {
	return (*networkpolicyStreamingVideoPtrType)(v)
}

func (*networkpolicyStreamingVideoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkpolicyStreamingVideo)(nil)).Elem()
}

func (i *networkpolicyStreamingVideoPtrType) ToNetworkpolicyStreamingVideoPtrOutput() NetworkpolicyStreamingVideoPtrOutput {
	return i.ToNetworkpolicyStreamingVideoPtrOutputWithContext(context.Background())
}

func (i *networkpolicyStreamingVideoPtrType) ToNetworkpolicyStreamingVideoPtrOutputWithContext(ctx context.Context) NetworkpolicyStreamingVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyStreamingVideoPtrOutput)
}

type NetworkpolicyStreamingVideoOutput struct{ *pulumi.OutputState }

func (NetworkpolicyStreamingVideoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkpolicyStreamingVideo)(nil)).Elem()
}

func (o NetworkpolicyStreamingVideoOutput) ToNetworkpolicyStreamingVideoOutput() NetworkpolicyStreamingVideoOutput {
	return o
}

func (o NetworkpolicyStreamingVideoOutput) ToNetworkpolicyStreamingVideoOutputWithContext(ctx context.Context) NetworkpolicyStreamingVideoOutput {
	return o
}

func (o NetworkpolicyStreamingVideoOutput) ToNetworkpolicyStreamingVideoPtrOutput() NetworkpolicyStreamingVideoPtrOutput {
	return o.ToNetworkpolicyStreamingVideoPtrOutputWithContext(context.Background())
}

func (o NetworkpolicyStreamingVideoOutput) ToNetworkpolicyStreamingVideoPtrOutputWithContext(ctx context.Context) NetworkpolicyStreamingVideoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkpolicyStreamingVideo) *NetworkpolicyStreamingVideo {
		return &v
	}).(NetworkpolicyStreamingVideoPtrOutput)
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o NetworkpolicyStreamingVideoOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyStreamingVideo) *int { return v.Dscp }).(pulumi.IntPtrOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o NetworkpolicyStreamingVideoOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyStreamingVideo) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
func (o NetworkpolicyStreamingVideoOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkpolicyStreamingVideo) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
func (o NetworkpolicyStreamingVideoOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkpolicyStreamingVideo) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o NetworkpolicyStreamingVideoOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyStreamingVideo) *int { return v.Vlan }).(pulumi.IntPtrOutput)
}

type NetworkpolicyStreamingVideoPtrOutput struct{ *pulumi.OutputState }

func (NetworkpolicyStreamingVideoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkpolicyStreamingVideo)(nil)).Elem()
}

func (o NetworkpolicyStreamingVideoPtrOutput) ToNetworkpolicyStreamingVideoPtrOutput() NetworkpolicyStreamingVideoPtrOutput {
	return o
}

func (o NetworkpolicyStreamingVideoPtrOutput) ToNetworkpolicyStreamingVideoPtrOutputWithContext(ctx context.Context) NetworkpolicyStreamingVideoPtrOutput {
	return o
}

func (o NetworkpolicyStreamingVideoPtrOutput) Elem() NetworkpolicyStreamingVideoOutput {
	return o.ApplyT(func(v *NetworkpolicyStreamingVideo) NetworkpolicyStreamingVideo {
		if v != nil {
			return *v
		}
		var ret NetworkpolicyStreamingVideo
		return ret
	}).(NetworkpolicyStreamingVideoOutput)
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o NetworkpolicyStreamingVideoPtrOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyStreamingVideo) *int {
		if v == nil {
			return nil
		}
		return v.Dscp
	}).(pulumi.IntPtrOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o NetworkpolicyStreamingVideoPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyStreamingVideo) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
func (o NetworkpolicyStreamingVideoPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyStreamingVideo) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
func (o NetworkpolicyStreamingVideoPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyStreamingVideo) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o NetworkpolicyStreamingVideoPtrOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyStreamingVideo) *int {
		if v == nil {
			return nil
		}
		return v.Vlan
	}).(pulumi.IntPtrOutput)
}

type NetworkpolicyVideoConferencing struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp *int `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority *int `pulumi:"priority"`
	// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
	Tag *string `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan *int `pulumi:"vlan"`
}

// NetworkpolicyVideoConferencingInput is an input type that accepts NetworkpolicyVideoConferencingArgs and NetworkpolicyVideoConferencingOutput values.
// You can construct a concrete instance of `NetworkpolicyVideoConferencingInput` via:
//
//	NetworkpolicyVideoConferencingArgs{...}
type NetworkpolicyVideoConferencingInput interface {
	pulumi.Input

	ToNetworkpolicyVideoConferencingOutput() NetworkpolicyVideoConferencingOutput
	ToNetworkpolicyVideoConferencingOutputWithContext(context.Context) NetworkpolicyVideoConferencingOutput
}

type NetworkpolicyVideoConferencingArgs struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp pulumi.IntPtrInput `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan pulumi.IntPtrInput `pulumi:"vlan"`
}

func (NetworkpolicyVideoConferencingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkpolicyVideoConferencing)(nil)).Elem()
}

func (i NetworkpolicyVideoConferencingArgs) ToNetworkpolicyVideoConferencingOutput() NetworkpolicyVideoConferencingOutput {
	return i.ToNetworkpolicyVideoConferencingOutputWithContext(context.Background())
}

func (i NetworkpolicyVideoConferencingArgs) ToNetworkpolicyVideoConferencingOutputWithContext(ctx context.Context) NetworkpolicyVideoConferencingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyVideoConferencingOutput)
}

func (i NetworkpolicyVideoConferencingArgs) ToNetworkpolicyVideoConferencingPtrOutput() NetworkpolicyVideoConferencingPtrOutput {
	return i.ToNetworkpolicyVideoConferencingPtrOutputWithContext(context.Background())
}

func (i NetworkpolicyVideoConferencingArgs) ToNetworkpolicyVideoConferencingPtrOutputWithContext(ctx context.Context) NetworkpolicyVideoConferencingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyVideoConferencingOutput).ToNetworkpolicyVideoConferencingPtrOutputWithContext(ctx)
}

// NetworkpolicyVideoConferencingPtrInput is an input type that accepts NetworkpolicyVideoConferencingArgs, NetworkpolicyVideoConferencingPtr and NetworkpolicyVideoConferencingPtrOutput values.
// You can construct a concrete instance of `NetworkpolicyVideoConferencingPtrInput` via:
//
//	        NetworkpolicyVideoConferencingArgs{...}
//
//	or:
//
//	        nil
type NetworkpolicyVideoConferencingPtrInput interface {
	pulumi.Input

	ToNetworkpolicyVideoConferencingPtrOutput() NetworkpolicyVideoConferencingPtrOutput
	ToNetworkpolicyVideoConferencingPtrOutputWithContext(context.Context) NetworkpolicyVideoConferencingPtrOutput
}

type networkpolicyVideoConferencingPtrType NetworkpolicyVideoConferencingArgs

func NetworkpolicyVideoConferencingPtr(v *NetworkpolicyVideoConferencingArgs) NetworkpolicyVideoConferencingPtrInput {
	return (*networkpolicyVideoConferencingPtrType)(v)
}

func (*networkpolicyVideoConferencingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkpolicyVideoConferencing)(nil)).Elem()
}

func (i *networkpolicyVideoConferencingPtrType) ToNetworkpolicyVideoConferencingPtrOutput() NetworkpolicyVideoConferencingPtrOutput {
	return i.ToNetworkpolicyVideoConferencingPtrOutputWithContext(context.Background())
}

func (i *networkpolicyVideoConferencingPtrType) ToNetworkpolicyVideoConferencingPtrOutputWithContext(ctx context.Context) NetworkpolicyVideoConferencingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyVideoConferencingPtrOutput)
}

type NetworkpolicyVideoConferencingOutput struct{ *pulumi.OutputState }

func (NetworkpolicyVideoConferencingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkpolicyVideoConferencing)(nil)).Elem()
}

func (o NetworkpolicyVideoConferencingOutput) ToNetworkpolicyVideoConferencingOutput() NetworkpolicyVideoConferencingOutput {
	return o
}

func (o NetworkpolicyVideoConferencingOutput) ToNetworkpolicyVideoConferencingOutputWithContext(ctx context.Context) NetworkpolicyVideoConferencingOutput {
	return o
}

func (o NetworkpolicyVideoConferencingOutput) ToNetworkpolicyVideoConferencingPtrOutput() NetworkpolicyVideoConferencingPtrOutput {
	return o.ToNetworkpolicyVideoConferencingPtrOutputWithContext(context.Background())
}

func (o NetworkpolicyVideoConferencingOutput) ToNetworkpolicyVideoConferencingPtrOutputWithContext(ctx context.Context) NetworkpolicyVideoConferencingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkpolicyVideoConferencing) *NetworkpolicyVideoConferencing {
		return &v
	}).(NetworkpolicyVideoConferencingPtrOutput)
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o NetworkpolicyVideoConferencingOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVideoConferencing) *int { return v.Dscp }).(pulumi.IntPtrOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o NetworkpolicyVideoConferencingOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVideoConferencing) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
func (o NetworkpolicyVideoConferencingOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVideoConferencing) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
func (o NetworkpolicyVideoConferencingOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVideoConferencing) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o NetworkpolicyVideoConferencingOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVideoConferencing) *int { return v.Vlan }).(pulumi.IntPtrOutput)
}

type NetworkpolicyVideoConferencingPtrOutput struct{ *pulumi.OutputState }

func (NetworkpolicyVideoConferencingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkpolicyVideoConferencing)(nil)).Elem()
}

func (o NetworkpolicyVideoConferencingPtrOutput) ToNetworkpolicyVideoConferencingPtrOutput() NetworkpolicyVideoConferencingPtrOutput {
	return o
}

func (o NetworkpolicyVideoConferencingPtrOutput) ToNetworkpolicyVideoConferencingPtrOutputWithContext(ctx context.Context) NetworkpolicyVideoConferencingPtrOutput {
	return o
}

func (o NetworkpolicyVideoConferencingPtrOutput) Elem() NetworkpolicyVideoConferencingOutput {
	return o.ApplyT(func(v *NetworkpolicyVideoConferencing) NetworkpolicyVideoConferencing {
		if v != nil {
			return *v
		}
		var ret NetworkpolicyVideoConferencing
		return ret
	}).(NetworkpolicyVideoConferencingOutput)
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o NetworkpolicyVideoConferencingPtrOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVideoConferencing) *int {
		if v == nil {
			return nil
		}
		return v.Dscp
	}).(pulumi.IntPtrOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o NetworkpolicyVideoConferencingPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVideoConferencing) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
func (o NetworkpolicyVideoConferencingPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVideoConferencing) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
func (o NetworkpolicyVideoConferencingPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVideoConferencing) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o NetworkpolicyVideoConferencingPtrOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVideoConferencing) *int {
		if v == nil {
			return nil
		}
		return v.Vlan
	}).(pulumi.IntPtrOutput)
}

type NetworkpolicyVideoSignaling struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp *int `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority *int `pulumi:"priority"`
	// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
	Tag *string `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan *int `pulumi:"vlan"`
}

// NetworkpolicyVideoSignalingInput is an input type that accepts NetworkpolicyVideoSignalingArgs and NetworkpolicyVideoSignalingOutput values.
// You can construct a concrete instance of `NetworkpolicyVideoSignalingInput` via:
//
//	NetworkpolicyVideoSignalingArgs{...}
type NetworkpolicyVideoSignalingInput interface {
	pulumi.Input

	ToNetworkpolicyVideoSignalingOutput() NetworkpolicyVideoSignalingOutput
	ToNetworkpolicyVideoSignalingOutputWithContext(context.Context) NetworkpolicyVideoSignalingOutput
}

type NetworkpolicyVideoSignalingArgs struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp pulumi.IntPtrInput `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan pulumi.IntPtrInput `pulumi:"vlan"`
}

func (NetworkpolicyVideoSignalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkpolicyVideoSignaling)(nil)).Elem()
}

func (i NetworkpolicyVideoSignalingArgs) ToNetworkpolicyVideoSignalingOutput() NetworkpolicyVideoSignalingOutput {
	return i.ToNetworkpolicyVideoSignalingOutputWithContext(context.Background())
}

func (i NetworkpolicyVideoSignalingArgs) ToNetworkpolicyVideoSignalingOutputWithContext(ctx context.Context) NetworkpolicyVideoSignalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyVideoSignalingOutput)
}

func (i NetworkpolicyVideoSignalingArgs) ToNetworkpolicyVideoSignalingPtrOutput() NetworkpolicyVideoSignalingPtrOutput {
	return i.ToNetworkpolicyVideoSignalingPtrOutputWithContext(context.Background())
}

func (i NetworkpolicyVideoSignalingArgs) ToNetworkpolicyVideoSignalingPtrOutputWithContext(ctx context.Context) NetworkpolicyVideoSignalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyVideoSignalingOutput).ToNetworkpolicyVideoSignalingPtrOutputWithContext(ctx)
}

// NetworkpolicyVideoSignalingPtrInput is an input type that accepts NetworkpolicyVideoSignalingArgs, NetworkpolicyVideoSignalingPtr and NetworkpolicyVideoSignalingPtrOutput values.
// You can construct a concrete instance of `NetworkpolicyVideoSignalingPtrInput` via:
//
//	        NetworkpolicyVideoSignalingArgs{...}
//
//	or:
//
//	        nil
type NetworkpolicyVideoSignalingPtrInput interface {
	pulumi.Input

	ToNetworkpolicyVideoSignalingPtrOutput() NetworkpolicyVideoSignalingPtrOutput
	ToNetworkpolicyVideoSignalingPtrOutputWithContext(context.Context) NetworkpolicyVideoSignalingPtrOutput
}

type networkpolicyVideoSignalingPtrType NetworkpolicyVideoSignalingArgs

func NetworkpolicyVideoSignalingPtr(v *NetworkpolicyVideoSignalingArgs) NetworkpolicyVideoSignalingPtrInput {
	return (*networkpolicyVideoSignalingPtrType)(v)
}

func (*networkpolicyVideoSignalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkpolicyVideoSignaling)(nil)).Elem()
}

func (i *networkpolicyVideoSignalingPtrType) ToNetworkpolicyVideoSignalingPtrOutput() NetworkpolicyVideoSignalingPtrOutput {
	return i.ToNetworkpolicyVideoSignalingPtrOutputWithContext(context.Background())
}

func (i *networkpolicyVideoSignalingPtrType) ToNetworkpolicyVideoSignalingPtrOutputWithContext(ctx context.Context) NetworkpolicyVideoSignalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyVideoSignalingPtrOutput)
}

type NetworkpolicyVideoSignalingOutput struct{ *pulumi.OutputState }

func (NetworkpolicyVideoSignalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkpolicyVideoSignaling)(nil)).Elem()
}

func (o NetworkpolicyVideoSignalingOutput) ToNetworkpolicyVideoSignalingOutput() NetworkpolicyVideoSignalingOutput {
	return o
}

func (o NetworkpolicyVideoSignalingOutput) ToNetworkpolicyVideoSignalingOutputWithContext(ctx context.Context) NetworkpolicyVideoSignalingOutput {
	return o
}

func (o NetworkpolicyVideoSignalingOutput) ToNetworkpolicyVideoSignalingPtrOutput() NetworkpolicyVideoSignalingPtrOutput {
	return o.ToNetworkpolicyVideoSignalingPtrOutputWithContext(context.Background())
}

func (o NetworkpolicyVideoSignalingOutput) ToNetworkpolicyVideoSignalingPtrOutputWithContext(ctx context.Context) NetworkpolicyVideoSignalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkpolicyVideoSignaling) *NetworkpolicyVideoSignaling {
		return &v
	}).(NetworkpolicyVideoSignalingPtrOutput)
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o NetworkpolicyVideoSignalingOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVideoSignaling) *int { return v.Dscp }).(pulumi.IntPtrOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o NetworkpolicyVideoSignalingOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVideoSignaling) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
func (o NetworkpolicyVideoSignalingOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVideoSignaling) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
func (o NetworkpolicyVideoSignalingOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVideoSignaling) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o NetworkpolicyVideoSignalingOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVideoSignaling) *int { return v.Vlan }).(pulumi.IntPtrOutput)
}

type NetworkpolicyVideoSignalingPtrOutput struct{ *pulumi.OutputState }

func (NetworkpolicyVideoSignalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkpolicyVideoSignaling)(nil)).Elem()
}

func (o NetworkpolicyVideoSignalingPtrOutput) ToNetworkpolicyVideoSignalingPtrOutput() NetworkpolicyVideoSignalingPtrOutput {
	return o
}

func (o NetworkpolicyVideoSignalingPtrOutput) ToNetworkpolicyVideoSignalingPtrOutputWithContext(ctx context.Context) NetworkpolicyVideoSignalingPtrOutput {
	return o
}

func (o NetworkpolicyVideoSignalingPtrOutput) Elem() NetworkpolicyVideoSignalingOutput {
	return o.ApplyT(func(v *NetworkpolicyVideoSignaling) NetworkpolicyVideoSignaling {
		if v != nil {
			return *v
		}
		var ret NetworkpolicyVideoSignaling
		return ret
	}).(NetworkpolicyVideoSignalingOutput)
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o NetworkpolicyVideoSignalingPtrOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVideoSignaling) *int {
		if v == nil {
			return nil
		}
		return v.Dscp
	}).(pulumi.IntPtrOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o NetworkpolicyVideoSignalingPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVideoSignaling) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
func (o NetworkpolicyVideoSignalingPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVideoSignaling) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
func (o NetworkpolicyVideoSignalingPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVideoSignaling) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o NetworkpolicyVideoSignalingPtrOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVideoSignaling) *int {
		if v == nil {
			return nil
		}
		return v.Vlan
	}).(pulumi.IntPtrOutput)
}

type NetworkpolicyVoice struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp *int `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority *int `pulumi:"priority"`
	// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
	Tag *string `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan *int `pulumi:"vlan"`
}

// NetworkpolicyVoiceInput is an input type that accepts NetworkpolicyVoiceArgs and NetworkpolicyVoiceOutput values.
// You can construct a concrete instance of `NetworkpolicyVoiceInput` via:
//
//	NetworkpolicyVoiceArgs{...}
type NetworkpolicyVoiceInput interface {
	pulumi.Input

	ToNetworkpolicyVoiceOutput() NetworkpolicyVoiceOutput
	ToNetworkpolicyVoiceOutputWithContext(context.Context) NetworkpolicyVoiceOutput
}

type NetworkpolicyVoiceArgs struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp pulumi.IntPtrInput `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan pulumi.IntPtrInput `pulumi:"vlan"`
}

func (NetworkpolicyVoiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkpolicyVoice)(nil)).Elem()
}

func (i NetworkpolicyVoiceArgs) ToNetworkpolicyVoiceOutput() NetworkpolicyVoiceOutput {
	return i.ToNetworkpolicyVoiceOutputWithContext(context.Background())
}

func (i NetworkpolicyVoiceArgs) ToNetworkpolicyVoiceOutputWithContext(ctx context.Context) NetworkpolicyVoiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyVoiceOutput)
}

func (i NetworkpolicyVoiceArgs) ToNetworkpolicyVoicePtrOutput() NetworkpolicyVoicePtrOutput {
	return i.ToNetworkpolicyVoicePtrOutputWithContext(context.Background())
}

func (i NetworkpolicyVoiceArgs) ToNetworkpolicyVoicePtrOutputWithContext(ctx context.Context) NetworkpolicyVoicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyVoiceOutput).ToNetworkpolicyVoicePtrOutputWithContext(ctx)
}

// NetworkpolicyVoicePtrInput is an input type that accepts NetworkpolicyVoiceArgs, NetworkpolicyVoicePtr and NetworkpolicyVoicePtrOutput values.
// You can construct a concrete instance of `NetworkpolicyVoicePtrInput` via:
//
//	        NetworkpolicyVoiceArgs{...}
//
//	or:
//
//	        nil
type NetworkpolicyVoicePtrInput interface {
	pulumi.Input

	ToNetworkpolicyVoicePtrOutput() NetworkpolicyVoicePtrOutput
	ToNetworkpolicyVoicePtrOutputWithContext(context.Context) NetworkpolicyVoicePtrOutput
}

type networkpolicyVoicePtrType NetworkpolicyVoiceArgs

func NetworkpolicyVoicePtr(v *NetworkpolicyVoiceArgs) NetworkpolicyVoicePtrInput {
	return (*networkpolicyVoicePtrType)(v)
}

func (*networkpolicyVoicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkpolicyVoice)(nil)).Elem()
}

func (i *networkpolicyVoicePtrType) ToNetworkpolicyVoicePtrOutput() NetworkpolicyVoicePtrOutput {
	return i.ToNetworkpolicyVoicePtrOutputWithContext(context.Background())
}

func (i *networkpolicyVoicePtrType) ToNetworkpolicyVoicePtrOutputWithContext(ctx context.Context) NetworkpolicyVoicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyVoicePtrOutput)
}

type NetworkpolicyVoiceOutput struct{ *pulumi.OutputState }

func (NetworkpolicyVoiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkpolicyVoice)(nil)).Elem()
}

func (o NetworkpolicyVoiceOutput) ToNetworkpolicyVoiceOutput() NetworkpolicyVoiceOutput {
	return o
}

func (o NetworkpolicyVoiceOutput) ToNetworkpolicyVoiceOutputWithContext(ctx context.Context) NetworkpolicyVoiceOutput {
	return o
}

func (o NetworkpolicyVoiceOutput) ToNetworkpolicyVoicePtrOutput() NetworkpolicyVoicePtrOutput {
	return o.ToNetworkpolicyVoicePtrOutputWithContext(context.Background())
}

func (o NetworkpolicyVoiceOutput) ToNetworkpolicyVoicePtrOutputWithContext(ctx context.Context) NetworkpolicyVoicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkpolicyVoice) *NetworkpolicyVoice {
		return &v
	}).(NetworkpolicyVoicePtrOutput)
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o NetworkpolicyVoiceOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVoice) *int { return v.Dscp }).(pulumi.IntPtrOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o NetworkpolicyVoiceOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVoice) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
func (o NetworkpolicyVoiceOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVoice) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
func (o NetworkpolicyVoiceOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVoice) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o NetworkpolicyVoiceOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVoice) *int { return v.Vlan }).(pulumi.IntPtrOutput)
}

type NetworkpolicyVoicePtrOutput struct{ *pulumi.OutputState }

func (NetworkpolicyVoicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkpolicyVoice)(nil)).Elem()
}

func (o NetworkpolicyVoicePtrOutput) ToNetworkpolicyVoicePtrOutput() NetworkpolicyVoicePtrOutput {
	return o
}

func (o NetworkpolicyVoicePtrOutput) ToNetworkpolicyVoicePtrOutputWithContext(ctx context.Context) NetworkpolicyVoicePtrOutput {
	return o
}

func (o NetworkpolicyVoicePtrOutput) Elem() NetworkpolicyVoiceOutput {
	return o.ApplyT(func(v *NetworkpolicyVoice) NetworkpolicyVoice {
		if v != nil {
			return *v
		}
		var ret NetworkpolicyVoice
		return ret
	}).(NetworkpolicyVoiceOutput)
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o NetworkpolicyVoicePtrOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVoice) *int {
		if v == nil {
			return nil
		}
		return v.Dscp
	}).(pulumi.IntPtrOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o NetworkpolicyVoicePtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVoice) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
func (o NetworkpolicyVoicePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVoice) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
func (o NetworkpolicyVoicePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVoice) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o NetworkpolicyVoicePtrOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVoice) *int {
		if v == nil {
			return nil
		}
		return v.Vlan
	}).(pulumi.IntPtrOutput)
}

type NetworkpolicyVoiceSignaling struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp *int `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority *int `pulumi:"priority"`
	// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
	Tag *string `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan *int `pulumi:"vlan"`
}

// NetworkpolicyVoiceSignalingInput is an input type that accepts NetworkpolicyVoiceSignalingArgs and NetworkpolicyVoiceSignalingOutput values.
// You can construct a concrete instance of `NetworkpolicyVoiceSignalingInput` via:
//
//	NetworkpolicyVoiceSignalingArgs{...}
type NetworkpolicyVoiceSignalingInput interface {
	pulumi.Input

	ToNetworkpolicyVoiceSignalingOutput() NetworkpolicyVoiceSignalingOutput
	ToNetworkpolicyVoiceSignalingOutputWithContext(context.Context) NetworkpolicyVoiceSignalingOutput
}

type NetworkpolicyVoiceSignalingArgs struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp pulumi.IntPtrInput `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan pulumi.IntPtrInput `pulumi:"vlan"`
}

func (NetworkpolicyVoiceSignalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkpolicyVoiceSignaling)(nil)).Elem()
}

func (i NetworkpolicyVoiceSignalingArgs) ToNetworkpolicyVoiceSignalingOutput() NetworkpolicyVoiceSignalingOutput {
	return i.ToNetworkpolicyVoiceSignalingOutputWithContext(context.Background())
}

func (i NetworkpolicyVoiceSignalingArgs) ToNetworkpolicyVoiceSignalingOutputWithContext(ctx context.Context) NetworkpolicyVoiceSignalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyVoiceSignalingOutput)
}

func (i NetworkpolicyVoiceSignalingArgs) ToNetworkpolicyVoiceSignalingPtrOutput() NetworkpolicyVoiceSignalingPtrOutput {
	return i.ToNetworkpolicyVoiceSignalingPtrOutputWithContext(context.Background())
}

func (i NetworkpolicyVoiceSignalingArgs) ToNetworkpolicyVoiceSignalingPtrOutputWithContext(ctx context.Context) NetworkpolicyVoiceSignalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyVoiceSignalingOutput).ToNetworkpolicyVoiceSignalingPtrOutputWithContext(ctx)
}

// NetworkpolicyVoiceSignalingPtrInput is an input type that accepts NetworkpolicyVoiceSignalingArgs, NetworkpolicyVoiceSignalingPtr and NetworkpolicyVoiceSignalingPtrOutput values.
// You can construct a concrete instance of `NetworkpolicyVoiceSignalingPtrInput` via:
//
//	        NetworkpolicyVoiceSignalingArgs{...}
//
//	or:
//
//	        nil
type NetworkpolicyVoiceSignalingPtrInput interface {
	pulumi.Input

	ToNetworkpolicyVoiceSignalingPtrOutput() NetworkpolicyVoiceSignalingPtrOutput
	ToNetworkpolicyVoiceSignalingPtrOutputWithContext(context.Context) NetworkpolicyVoiceSignalingPtrOutput
}

type networkpolicyVoiceSignalingPtrType NetworkpolicyVoiceSignalingArgs

func NetworkpolicyVoiceSignalingPtr(v *NetworkpolicyVoiceSignalingArgs) NetworkpolicyVoiceSignalingPtrInput {
	return (*networkpolicyVoiceSignalingPtrType)(v)
}

func (*networkpolicyVoiceSignalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkpolicyVoiceSignaling)(nil)).Elem()
}

func (i *networkpolicyVoiceSignalingPtrType) ToNetworkpolicyVoiceSignalingPtrOutput() NetworkpolicyVoiceSignalingPtrOutput {
	return i.ToNetworkpolicyVoiceSignalingPtrOutputWithContext(context.Background())
}

func (i *networkpolicyVoiceSignalingPtrType) ToNetworkpolicyVoiceSignalingPtrOutputWithContext(ctx context.Context) NetworkpolicyVoiceSignalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkpolicyVoiceSignalingPtrOutput)
}

type NetworkpolicyVoiceSignalingOutput struct{ *pulumi.OutputState }

func (NetworkpolicyVoiceSignalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkpolicyVoiceSignaling)(nil)).Elem()
}

func (o NetworkpolicyVoiceSignalingOutput) ToNetworkpolicyVoiceSignalingOutput() NetworkpolicyVoiceSignalingOutput {
	return o
}

func (o NetworkpolicyVoiceSignalingOutput) ToNetworkpolicyVoiceSignalingOutputWithContext(ctx context.Context) NetworkpolicyVoiceSignalingOutput {
	return o
}

func (o NetworkpolicyVoiceSignalingOutput) ToNetworkpolicyVoiceSignalingPtrOutput() NetworkpolicyVoiceSignalingPtrOutput {
	return o.ToNetworkpolicyVoiceSignalingPtrOutputWithContext(context.Background())
}

func (o NetworkpolicyVoiceSignalingOutput) ToNetworkpolicyVoiceSignalingPtrOutputWithContext(ctx context.Context) NetworkpolicyVoiceSignalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkpolicyVoiceSignaling) *NetworkpolicyVoiceSignaling {
		return &v
	}).(NetworkpolicyVoiceSignalingPtrOutput)
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o NetworkpolicyVoiceSignalingOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVoiceSignaling) *int { return v.Dscp }).(pulumi.IntPtrOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o NetworkpolicyVoiceSignalingOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVoiceSignaling) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
func (o NetworkpolicyVoiceSignalingOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVoiceSignaling) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
func (o NetworkpolicyVoiceSignalingOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVoiceSignaling) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o NetworkpolicyVoiceSignalingOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkpolicyVoiceSignaling) *int { return v.Vlan }).(pulumi.IntPtrOutput)
}

type NetworkpolicyVoiceSignalingPtrOutput struct{ *pulumi.OutputState }

func (NetworkpolicyVoiceSignalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkpolicyVoiceSignaling)(nil)).Elem()
}

func (o NetworkpolicyVoiceSignalingPtrOutput) ToNetworkpolicyVoiceSignalingPtrOutput() NetworkpolicyVoiceSignalingPtrOutput {
	return o
}

func (o NetworkpolicyVoiceSignalingPtrOutput) ToNetworkpolicyVoiceSignalingPtrOutputWithContext(ctx context.Context) NetworkpolicyVoiceSignalingPtrOutput {
	return o
}

func (o NetworkpolicyVoiceSignalingPtrOutput) Elem() NetworkpolicyVoiceSignalingOutput {
	return o.ApplyT(func(v *NetworkpolicyVoiceSignaling) NetworkpolicyVoiceSignaling {
		if v != nil {
			return *v
		}
		var ret NetworkpolicyVoiceSignaling
		return ret
	}).(NetworkpolicyVoiceSignalingOutput)
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o NetworkpolicyVoiceSignalingPtrOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVoiceSignaling) *int {
		if v == nil {
			return nil
		}
		return v.Dscp
	}).(pulumi.IntPtrOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o NetworkpolicyVoiceSignalingPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVoiceSignaling) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// Enable/disable advertising this policy. Valid values: `disable`, `enable`.
func (o NetworkpolicyVoiceSignalingPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVoiceSignaling) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
func (o NetworkpolicyVoiceSignalingPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVoiceSignaling) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o NetworkpolicyVoiceSignalingPtrOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkpolicyVoiceSignaling) *int {
		if v == nil {
			return nil
		}
		return v.Vlan
	}).(pulumi.IntPtrOutput)
}

type GetNetworkpolicyGuest struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp int `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority int `pulumi:"priority"`
	// Enable/disable advertising this policy.
	Status string `pulumi:"status"`
	// Advertise tagged or untagged traffic.
	Tag string `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan int `pulumi:"vlan"`
}

// GetNetworkpolicyGuestInput is an input type that accepts GetNetworkpolicyGuestArgs and GetNetworkpolicyGuestOutput values.
// You can construct a concrete instance of `GetNetworkpolicyGuestInput` via:
//
//	GetNetworkpolicyGuestArgs{...}
type GetNetworkpolicyGuestInput interface {
	pulumi.Input

	ToGetNetworkpolicyGuestOutput() GetNetworkpolicyGuestOutput
	ToGetNetworkpolicyGuestOutputWithContext(context.Context) GetNetworkpolicyGuestOutput
}

type GetNetworkpolicyGuestArgs struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp pulumi.IntInput `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority pulumi.IntInput `pulumi:"priority"`
	// Enable/disable advertising this policy.
	Status pulumi.StringInput `pulumi:"status"`
	// Advertise tagged or untagged traffic.
	Tag pulumi.StringInput `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan pulumi.IntInput `pulumi:"vlan"`
}

func (GetNetworkpolicyGuestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkpolicyGuest)(nil)).Elem()
}

func (i GetNetworkpolicyGuestArgs) ToGetNetworkpolicyGuestOutput() GetNetworkpolicyGuestOutput {
	return i.ToGetNetworkpolicyGuestOutputWithContext(context.Background())
}

func (i GetNetworkpolicyGuestArgs) ToGetNetworkpolicyGuestOutputWithContext(ctx context.Context) GetNetworkpolicyGuestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkpolicyGuestOutput)
}

// GetNetworkpolicyGuestArrayInput is an input type that accepts GetNetworkpolicyGuestArray and GetNetworkpolicyGuestArrayOutput values.
// You can construct a concrete instance of `GetNetworkpolicyGuestArrayInput` via:
//
//	GetNetworkpolicyGuestArray{ GetNetworkpolicyGuestArgs{...} }
type GetNetworkpolicyGuestArrayInput interface {
	pulumi.Input

	ToGetNetworkpolicyGuestArrayOutput() GetNetworkpolicyGuestArrayOutput
	ToGetNetworkpolicyGuestArrayOutputWithContext(context.Context) GetNetworkpolicyGuestArrayOutput
}

type GetNetworkpolicyGuestArray []GetNetworkpolicyGuestInput

func (GetNetworkpolicyGuestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkpolicyGuest)(nil)).Elem()
}

func (i GetNetworkpolicyGuestArray) ToGetNetworkpolicyGuestArrayOutput() GetNetworkpolicyGuestArrayOutput {
	return i.ToGetNetworkpolicyGuestArrayOutputWithContext(context.Background())
}

func (i GetNetworkpolicyGuestArray) ToGetNetworkpolicyGuestArrayOutputWithContext(ctx context.Context) GetNetworkpolicyGuestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkpolicyGuestArrayOutput)
}

type GetNetworkpolicyGuestOutput struct{ *pulumi.OutputState }

func (GetNetworkpolicyGuestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkpolicyGuest)(nil)).Elem()
}

func (o GetNetworkpolicyGuestOutput) ToGetNetworkpolicyGuestOutput() GetNetworkpolicyGuestOutput {
	return o
}

func (o GetNetworkpolicyGuestOutput) ToGetNetworkpolicyGuestOutputWithContext(ctx context.Context) GetNetworkpolicyGuestOutput {
	return o
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o GetNetworkpolicyGuestOutput) Dscp() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyGuest) int { return v.Dscp }).(pulumi.IntOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o GetNetworkpolicyGuestOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyGuest) int { return v.Priority }).(pulumi.IntOutput)
}

// Enable/disable advertising this policy.
func (o GetNetworkpolicyGuestOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkpolicyGuest) string { return v.Status }).(pulumi.StringOutput)
}

// Advertise tagged or untagged traffic.
func (o GetNetworkpolicyGuestOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkpolicyGuest) string { return v.Tag }).(pulumi.StringOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o GetNetworkpolicyGuestOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyGuest) int { return v.Vlan }).(pulumi.IntOutput)
}

type GetNetworkpolicyGuestArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkpolicyGuestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkpolicyGuest)(nil)).Elem()
}

func (o GetNetworkpolicyGuestArrayOutput) ToGetNetworkpolicyGuestArrayOutput() GetNetworkpolicyGuestArrayOutput {
	return o
}

func (o GetNetworkpolicyGuestArrayOutput) ToGetNetworkpolicyGuestArrayOutputWithContext(ctx context.Context) GetNetworkpolicyGuestArrayOutput {
	return o
}

func (o GetNetworkpolicyGuestArrayOutput) Index(i pulumi.IntInput) GetNetworkpolicyGuestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkpolicyGuest {
		return vs[0].([]GetNetworkpolicyGuest)[vs[1].(int)]
	}).(GetNetworkpolicyGuestOutput)
}

type GetNetworkpolicyGuestVoiceSignaling struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp int `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority int `pulumi:"priority"`
	// Enable/disable advertising this policy.
	Status string `pulumi:"status"`
	// Advertise tagged or untagged traffic.
	Tag string `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan int `pulumi:"vlan"`
}

// GetNetworkpolicyGuestVoiceSignalingInput is an input type that accepts GetNetworkpolicyGuestVoiceSignalingArgs and GetNetworkpolicyGuestVoiceSignalingOutput values.
// You can construct a concrete instance of `GetNetworkpolicyGuestVoiceSignalingInput` via:
//
//	GetNetworkpolicyGuestVoiceSignalingArgs{...}
type GetNetworkpolicyGuestVoiceSignalingInput interface {
	pulumi.Input

	ToGetNetworkpolicyGuestVoiceSignalingOutput() GetNetworkpolicyGuestVoiceSignalingOutput
	ToGetNetworkpolicyGuestVoiceSignalingOutputWithContext(context.Context) GetNetworkpolicyGuestVoiceSignalingOutput
}

type GetNetworkpolicyGuestVoiceSignalingArgs struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp pulumi.IntInput `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority pulumi.IntInput `pulumi:"priority"`
	// Enable/disable advertising this policy.
	Status pulumi.StringInput `pulumi:"status"`
	// Advertise tagged or untagged traffic.
	Tag pulumi.StringInput `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan pulumi.IntInput `pulumi:"vlan"`
}

func (GetNetworkpolicyGuestVoiceSignalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkpolicyGuestVoiceSignaling)(nil)).Elem()
}

func (i GetNetworkpolicyGuestVoiceSignalingArgs) ToGetNetworkpolicyGuestVoiceSignalingOutput() GetNetworkpolicyGuestVoiceSignalingOutput {
	return i.ToGetNetworkpolicyGuestVoiceSignalingOutputWithContext(context.Background())
}

func (i GetNetworkpolicyGuestVoiceSignalingArgs) ToGetNetworkpolicyGuestVoiceSignalingOutputWithContext(ctx context.Context) GetNetworkpolicyGuestVoiceSignalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkpolicyGuestVoiceSignalingOutput)
}

// GetNetworkpolicyGuestVoiceSignalingArrayInput is an input type that accepts GetNetworkpolicyGuestVoiceSignalingArray and GetNetworkpolicyGuestVoiceSignalingArrayOutput values.
// You can construct a concrete instance of `GetNetworkpolicyGuestVoiceSignalingArrayInput` via:
//
//	GetNetworkpolicyGuestVoiceSignalingArray{ GetNetworkpolicyGuestVoiceSignalingArgs{...} }
type GetNetworkpolicyGuestVoiceSignalingArrayInput interface {
	pulumi.Input

	ToGetNetworkpolicyGuestVoiceSignalingArrayOutput() GetNetworkpolicyGuestVoiceSignalingArrayOutput
	ToGetNetworkpolicyGuestVoiceSignalingArrayOutputWithContext(context.Context) GetNetworkpolicyGuestVoiceSignalingArrayOutput
}

type GetNetworkpolicyGuestVoiceSignalingArray []GetNetworkpolicyGuestVoiceSignalingInput

func (GetNetworkpolicyGuestVoiceSignalingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkpolicyGuestVoiceSignaling)(nil)).Elem()
}

func (i GetNetworkpolicyGuestVoiceSignalingArray) ToGetNetworkpolicyGuestVoiceSignalingArrayOutput() GetNetworkpolicyGuestVoiceSignalingArrayOutput {
	return i.ToGetNetworkpolicyGuestVoiceSignalingArrayOutputWithContext(context.Background())
}

func (i GetNetworkpolicyGuestVoiceSignalingArray) ToGetNetworkpolicyGuestVoiceSignalingArrayOutputWithContext(ctx context.Context) GetNetworkpolicyGuestVoiceSignalingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkpolicyGuestVoiceSignalingArrayOutput)
}

type GetNetworkpolicyGuestVoiceSignalingOutput struct{ *pulumi.OutputState }

func (GetNetworkpolicyGuestVoiceSignalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkpolicyGuestVoiceSignaling)(nil)).Elem()
}

func (o GetNetworkpolicyGuestVoiceSignalingOutput) ToGetNetworkpolicyGuestVoiceSignalingOutput() GetNetworkpolicyGuestVoiceSignalingOutput {
	return o
}

func (o GetNetworkpolicyGuestVoiceSignalingOutput) ToGetNetworkpolicyGuestVoiceSignalingOutputWithContext(ctx context.Context) GetNetworkpolicyGuestVoiceSignalingOutput {
	return o
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o GetNetworkpolicyGuestVoiceSignalingOutput) Dscp() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyGuestVoiceSignaling) int { return v.Dscp }).(pulumi.IntOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o GetNetworkpolicyGuestVoiceSignalingOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyGuestVoiceSignaling) int { return v.Priority }).(pulumi.IntOutput)
}

// Enable/disable advertising this policy.
func (o GetNetworkpolicyGuestVoiceSignalingOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkpolicyGuestVoiceSignaling) string { return v.Status }).(pulumi.StringOutput)
}

// Advertise tagged or untagged traffic.
func (o GetNetworkpolicyGuestVoiceSignalingOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkpolicyGuestVoiceSignaling) string { return v.Tag }).(pulumi.StringOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o GetNetworkpolicyGuestVoiceSignalingOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyGuestVoiceSignaling) int { return v.Vlan }).(pulumi.IntOutput)
}

type GetNetworkpolicyGuestVoiceSignalingArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkpolicyGuestVoiceSignalingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkpolicyGuestVoiceSignaling)(nil)).Elem()
}

func (o GetNetworkpolicyGuestVoiceSignalingArrayOutput) ToGetNetworkpolicyGuestVoiceSignalingArrayOutput() GetNetworkpolicyGuestVoiceSignalingArrayOutput {
	return o
}

func (o GetNetworkpolicyGuestVoiceSignalingArrayOutput) ToGetNetworkpolicyGuestVoiceSignalingArrayOutputWithContext(ctx context.Context) GetNetworkpolicyGuestVoiceSignalingArrayOutput {
	return o
}

func (o GetNetworkpolicyGuestVoiceSignalingArrayOutput) Index(i pulumi.IntInput) GetNetworkpolicyGuestVoiceSignalingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkpolicyGuestVoiceSignaling {
		return vs[0].([]GetNetworkpolicyGuestVoiceSignaling)[vs[1].(int)]
	}).(GetNetworkpolicyGuestVoiceSignalingOutput)
}

type GetNetworkpolicySoftphone struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp int `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority int `pulumi:"priority"`
	// Enable/disable advertising this policy.
	Status string `pulumi:"status"`
	// Advertise tagged or untagged traffic.
	Tag string `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan int `pulumi:"vlan"`
}

// GetNetworkpolicySoftphoneInput is an input type that accepts GetNetworkpolicySoftphoneArgs and GetNetworkpolicySoftphoneOutput values.
// You can construct a concrete instance of `GetNetworkpolicySoftphoneInput` via:
//
//	GetNetworkpolicySoftphoneArgs{...}
type GetNetworkpolicySoftphoneInput interface {
	pulumi.Input

	ToGetNetworkpolicySoftphoneOutput() GetNetworkpolicySoftphoneOutput
	ToGetNetworkpolicySoftphoneOutputWithContext(context.Context) GetNetworkpolicySoftphoneOutput
}

type GetNetworkpolicySoftphoneArgs struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp pulumi.IntInput `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority pulumi.IntInput `pulumi:"priority"`
	// Enable/disable advertising this policy.
	Status pulumi.StringInput `pulumi:"status"`
	// Advertise tagged or untagged traffic.
	Tag pulumi.StringInput `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan pulumi.IntInput `pulumi:"vlan"`
}

func (GetNetworkpolicySoftphoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkpolicySoftphone)(nil)).Elem()
}

func (i GetNetworkpolicySoftphoneArgs) ToGetNetworkpolicySoftphoneOutput() GetNetworkpolicySoftphoneOutput {
	return i.ToGetNetworkpolicySoftphoneOutputWithContext(context.Background())
}

func (i GetNetworkpolicySoftphoneArgs) ToGetNetworkpolicySoftphoneOutputWithContext(ctx context.Context) GetNetworkpolicySoftphoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkpolicySoftphoneOutput)
}

// GetNetworkpolicySoftphoneArrayInput is an input type that accepts GetNetworkpolicySoftphoneArray and GetNetworkpolicySoftphoneArrayOutput values.
// You can construct a concrete instance of `GetNetworkpolicySoftphoneArrayInput` via:
//
//	GetNetworkpolicySoftphoneArray{ GetNetworkpolicySoftphoneArgs{...} }
type GetNetworkpolicySoftphoneArrayInput interface {
	pulumi.Input

	ToGetNetworkpolicySoftphoneArrayOutput() GetNetworkpolicySoftphoneArrayOutput
	ToGetNetworkpolicySoftphoneArrayOutputWithContext(context.Context) GetNetworkpolicySoftphoneArrayOutput
}

type GetNetworkpolicySoftphoneArray []GetNetworkpolicySoftphoneInput

func (GetNetworkpolicySoftphoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkpolicySoftphone)(nil)).Elem()
}

func (i GetNetworkpolicySoftphoneArray) ToGetNetworkpolicySoftphoneArrayOutput() GetNetworkpolicySoftphoneArrayOutput {
	return i.ToGetNetworkpolicySoftphoneArrayOutputWithContext(context.Background())
}

func (i GetNetworkpolicySoftphoneArray) ToGetNetworkpolicySoftphoneArrayOutputWithContext(ctx context.Context) GetNetworkpolicySoftphoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkpolicySoftphoneArrayOutput)
}

type GetNetworkpolicySoftphoneOutput struct{ *pulumi.OutputState }

func (GetNetworkpolicySoftphoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkpolicySoftphone)(nil)).Elem()
}

func (o GetNetworkpolicySoftphoneOutput) ToGetNetworkpolicySoftphoneOutput() GetNetworkpolicySoftphoneOutput {
	return o
}

func (o GetNetworkpolicySoftphoneOutput) ToGetNetworkpolicySoftphoneOutputWithContext(ctx context.Context) GetNetworkpolicySoftphoneOutput {
	return o
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o GetNetworkpolicySoftphoneOutput) Dscp() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicySoftphone) int { return v.Dscp }).(pulumi.IntOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o GetNetworkpolicySoftphoneOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicySoftphone) int { return v.Priority }).(pulumi.IntOutput)
}

// Enable/disable advertising this policy.
func (o GetNetworkpolicySoftphoneOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkpolicySoftphone) string { return v.Status }).(pulumi.StringOutput)
}

// Advertise tagged or untagged traffic.
func (o GetNetworkpolicySoftphoneOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkpolicySoftphone) string { return v.Tag }).(pulumi.StringOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o GetNetworkpolicySoftphoneOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicySoftphone) int { return v.Vlan }).(pulumi.IntOutput)
}

type GetNetworkpolicySoftphoneArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkpolicySoftphoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkpolicySoftphone)(nil)).Elem()
}

func (o GetNetworkpolicySoftphoneArrayOutput) ToGetNetworkpolicySoftphoneArrayOutput() GetNetworkpolicySoftphoneArrayOutput {
	return o
}

func (o GetNetworkpolicySoftphoneArrayOutput) ToGetNetworkpolicySoftphoneArrayOutputWithContext(ctx context.Context) GetNetworkpolicySoftphoneArrayOutput {
	return o
}

func (o GetNetworkpolicySoftphoneArrayOutput) Index(i pulumi.IntInput) GetNetworkpolicySoftphoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkpolicySoftphone {
		return vs[0].([]GetNetworkpolicySoftphone)[vs[1].(int)]
	}).(GetNetworkpolicySoftphoneOutput)
}

type GetNetworkpolicyStreamingVideo struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp int `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority int `pulumi:"priority"`
	// Enable/disable advertising this policy.
	Status string `pulumi:"status"`
	// Advertise tagged or untagged traffic.
	Tag string `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan int `pulumi:"vlan"`
}

// GetNetworkpolicyStreamingVideoInput is an input type that accepts GetNetworkpolicyStreamingVideoArgs and GetNetworkpolicyStreamingVideoOutput values.
// You can construct a concrete instance of `GetNetworkpolicyStreamingVideoInput` via:
//
//	GetNetworkpolicyStreamingVideoArgs{...}
type GetNetworkpolicyStreamingVideoInput interface {
	pulumi.Input

	ToGetNetworkpolicyStreamingVideoOutput() GetNetworkpolicyStreamingVideoOutput
	ToGetNetworkpolicyStreamingVideoOutputWithContext(context.Context) GetNetworkpolicyStreamingVideoOutput
}

type GetNetworkpolicyStreamingVideoArgs struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp pulumi.IntInput `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority pulumi.IntInput `pulumi:"priority"`
	// Enable/disable advertising this policy.
	Status pulumi.StringInput `pulumi:"status"`
	// Advertise tagged or untagged traffic.
	Tag pulumi.StringInput `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan pulumi.IntInput `pulumi:"vlan"`
}

func (GetNetworkpolicyStreamingVideoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkpolicyStreamingVideo)(nil)).Elem()
}

func (i GetNetworkpolicyStreamingVideoArgs) ToGetNetworkpolicyStreamingVideoOutput() GetNetworkpolicyStreamingVideoOutput {
	return i.ToGetNetworkpolicyStreamingVideoOutputWithContext(context.Background())
}

func (i GetNetworkpolicyStreamingVideoArgs) ToGetNetworkpolicyStreamingVideoOutputWithContext(ctx context.Context) GetNetworkpolicyStreamingVideoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkpolicyStreamingVideoOutput)
}

// GetNetworkpolicyStreamingVideoArrayInput is an input type that accepts GetNetworkpolicyStreamingVideoArray and GetNetworkpolicyStreamingVideoArrayOutput values.
// You can construct a concrete instance of `GetNetworkpolicyStreamingVideoArrayInput` via:
//
//	GetNetworkpolicyStreamingVideoArray{ GetNetworkpolicyStreamingVideoArgs{...} }
type GetNetworkpolicyStreamingVideoArrayInput interface {
	pulumi.Input

	ToGetNetworkpolicyStreamingVideoArrayOutput() GetNetworkpolicyStreamingVideoArrayOutput
	ToGetNetworkpolicyStreamingVideoArrayOutputWithContext(context.Context) GetNetworkpolicyStreamingVideoArrayOutput
}

type GetNetworkpolicyStreamingVideoArray []GetNetworkpolicyStreamingVideoInput

func (GetNetworkpolicyStreamingVideoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkpolicyStreamingVideo)(nil)).Elem()
}

func (i GetNetworkpolicyStreamingVideoArray) ToGetNetworkpolicyStreamingVideoArrayOutput() GetNetworkpolicyStreamingVideoArrayOutput {
	return i.ToGetNetworkpolicyStreamingVideoArrayOutputWithContext(context.Background())
}

func (i GetNetworkpolicyStreamingVideoArray) ToGetNetworkpolicyStreamingVideoArrayOutputWithContext(ctx context.Context) GetNetworkpolicyStreamingVideoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkpolicyStreamingVideoArrayOutput)
}

type GetNetworkpolicyStreamingVideoOutput struct{ *pulumi.OutputState }

func (GetNetworkpolicyStreamingVideoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkpolicyStreamingVideo)(nil)).Elem()
}

func (o GetNetworkpolicyStreamingVideoOutput) ToGetNetworkpolicyStreamingVideoOutput() GetNetworkpolicyStreamingVideoOutput {
	return o
}

func (o GetNetworkpolicyStreamingVideoOutput) ToGetNetworkpolicyStreamingVideoOutputWithContext(ctx context.Context) GetNetworkpolicyStreamingVideoOutput {
	return o
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o GetNetworkpolicyStreamingVideoOutput) Dscp() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyStreamingVideo) int { return v.Dscp }).(pulumi.IntOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o GetNetworkpolicyStreamingVideoOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyStreamingVideo) int { return v.Priority }).(pulumi.IntOutput)
}

// Enable/disable advertising this policy.
func (o GetNetworkpolicyStreamingVideoOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkpolicyStreamingVideo) string { return v.Status }).(pulumi.StringOutput)
}

// Advertise tagged or untagged traffic.
func (o GetNetworkpolicyStreamingVideoOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkpolicyStreamingVideo) string { return v.Tag }).(pulumi.StringOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o GetNetworkpolicyStreamingVideoOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyStreamingVideo) int { return v.Vlan }).(pulumi.IntOutput)
}

type GetNetworkpolicyStreamingVideoArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkpolicyStreamingVideoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkpolicyStreamingVideo)(nil)).Elem()
}

func (o GetNetworkpolicyStreamingVideoArrayOutput) ToGetNetworkpolicyStreamingVideoArrayOutput() GetNetworkpolicyStreamingVideoArrayOutput {
	return o
}

func (o GetNetworkpolicyStreamingVideoArrayOutput) ToGetNetworkpolicyStreamingVideoArrayOutputWithContext(ctx context.Context) GetNetworkpolicyStreamingVideoArrayOutput {
	return o
}

func (o GetNetworkpolicyStreamingVideoArrayOutput) Index(i pulumi.IntInput) GetNetworkpolicyStreamingVideoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkpolicyStreamingVideo {
		return vs[0].([]GetNetworkpolicyStreamingVideo)[vs[1].(int)]
	}).(GetNetworkpolicyStreamingVideoOutput)
}

type GetNetworkpolicyVideoConferencing struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp int `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority int `pulumi:"priority"`
	// Enable/disable advertising this policy.
	Status string `pulumi:"status"`
	// Advertise tagged or untagged traffic.
	Tag string `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan int `pulumi:"vlan"`
}

// GetNetworkpolicyVideoConferencingInput is an input type that accepts GetNetworkpolicyVideoConferencingArgs and GetNetworkpolicyVideoConferencingOutput values.
// You can construct a concrete instance of `GetNetworkpolicyVideoConferencingInput` via:
//
//	GetNetworkpolicyVideoConferencingArgs{...}
type GetNetworkpolicyVideoConferencingInput interface {
	pulumi.Input

	ToGetNetworkpolicyVideoConferencingOutput() GetNetworkpolicyVideoConferencingOutput
	ToGetNetworkpolicyVideoConferencingOutputWithContext(context.Context) GetNetworkpolicyVideoConferencingOutput
}

type GetNetworkpolicyVideoConferencingArgs struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp pulumi.IntInput `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority pulumi.IntInput `pulumi:"priority"`
	// Enable/disable advertising this policy.
	Status pulumi.StringInput `pulumi:"status"`
	// Advertise tagged or untagged traffic.
	Tag pulumi.StringInput `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan pulumi.IntInput `pulumi:"vlan"`
}

func (GetNetworkpolicyVideoConferencingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkpolicyVideoConferencing)(nil)).Elem()
}

func (i GetNetworkpolicyVideoConferencingArgs) ToGetNetworkpolicyVideoConferencingOutput() GetNetworkpolicyVideoConferencingOutput {
	return i.ToGetNetworkpolicyVideoConferencingOutputWithContext(context.Background())
}

func (i GetNetworkpolicyVideoConferencingArgs) ToGetNetworkpolicyVideoConferencingOutputWithContext(ctx context.Context) GetNetworkpolicyVideoConferencingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkpolicyVideoConferencingOutput)
}

// GetNetworkpolicyVideoConferencingArrayInput is an input type that accepts GetNetworkpolicyVideoConferencingArray and GetNetworkpolicyVideoConferencingArrayOutput values.
// You can construct a concrete instance of `GetNetworkpolicyVideoConferencingArrayInput` via:
//
//	GetNetworkpolicyVideoConferencingArray{ GetNetworkpolicyVideoConferencingArgs{...} }
type GetNetworkpolicyVideoConferencingArrayInput interface {
	pulumi.Input

	ToGetNetworkpolicyVideoConferencingArrayOutput() GetNetworkpolicyVideoConferencingArrayOutput
	ToGetNetworkpolicyVideoConferencingArrayOutputWithContext(context.Context) GetNetworkpolicyVideoConferencingArrayOutput
}

type GetNetworkpolicyVideoConferencingArray []GetNetworkpolicyVideoConferencingInput

func (GetNetworkpolicyVideoConferencingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkpolicyVideoConferencing)(nil)).Elem()
}

func (i GetNetworkpolicyVideoConferencingArray) ToGetNetworkpolicyVideoConferencingArrayOutput() GetNetworkpolicyVideoConferencingArrayOutput {
	return i.ToGetNetworkpolicyVideoConferencingArrayOutputWithContext(context.Background())
}

func (i GetNetworkpolicyVideoConferencingArray) ToGetNetworkpolicyVideoConferencingArrayOutputWithContext(ctx context.Context) GetNetworkpolicyVideoConferencingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkpolicyVideoConferencingArrayOutput)
}

type GetNetworkpolicyVideoConferencingOutput struct{ *pulumi.OutputState }

func (GetNetworkpolicyVideoConferencingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkpolicyVideoConferencing)(nil)).Elem()
}

func (o GetNetworkpolicyVideoConferencingOutput) ToGetNetworkpolicyVideoConferencingOutput() GetNetworkpolicyVideoConferencingOutput {
	return o
}

func (o GetNetworkpolicyVideoConferencingOutput) ToGetNetworkpolicyVideoConferencingOutputWithContext(ctx context.Context) GetNetworkpolicyVideoConferencingOutput {
	return o
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o GetNetworkpolicyVideoConferencingOutput) Dscp() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyVideoConferencing) int { return v.Dscp }).(pulumi.IntOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o GetNetworkpolicyVideoConferencingOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyVideoConferencing) int { return v.Priority }).(pulumi.IntOutput)
}

// Enable/disable advertising this policy.
func (o GetNetworkpolicyVideoConferencingOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkpolicyVideoConferencing) string { return v.Status }).(pulumi.StringOutput)
}

// Advertise tagged or untagged traffic.
func (o GetNetworkpolicyVideoConferencingOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkpolicyVideoConferencing) string { return v.Tag }).(pulumi.StringOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o GetNetworkpolicyVideoConferencingOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyVideoConferencing) int { return v.Vlan }).(pulumi.IntOutput)
}

type GetNetworkpolicyVideoConferencingArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkpolicyVideoConferencingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkpolicyVideoConferencing)(nil)).Elem()
}

func (o GetNetworkpolicyVideoConferencingArrayOutput) ToGetNetworkpolicyVideoConferencingArrayOutput() GetNetworkpolicyVideoConferencingArrayOutput {
	return o
}

func (o GetNetworkpolicyVideoConferencingArrayOutput) ToGetNetworkpolicyVideoConferencingArrayOutputWithContext(ctx context.Context) GetNetworkpolicyVideoConferencingArrayOutput {
	return o
}

func (o GetNetworkpolicyVideoConferencingArrayOutput) Index(i pulumi.IntInput) GetNetworkpolicyVideoConferencingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkpolicyVideoConferencing {
		return vs[0].([]GetNetworkpolicyVideoConferencing)[vs[1].(int)]
	}).(GetNetworkpolicyVideoConferencingOutput)
}

type GetNetworkpolicyVideoSignaling struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp int `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority int `pulumi:"priority"`
	// Enable/disable advertising this policy.
	Status string `pulumi:"status"`
	// Advertise tagged or untagged traffic.
	Tag string `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan int `pulumi:"vlan"`
}

// GetNetworkpolicyVideoSignalingInput is an input type that accepts GetNetworkpolicyVideoSignalingArgs and GetNetworkpolicyVideoSignalingOutput values.
// You can construct a concrete instance of `GetNetworkpolicyVideoSignalingInput` via:
//
//	GetNetworkpolicyVideoSignalingArgs{...}
type GetNetworkpolicyVideoSignalingInput interface {
	pulumi.Input

	ToGetNetworkpolicyVideoSignalingOutput() GetNetworkpolicyVideoSignalingOutput
	ToGetNetworkpolicyVideoSignalingOutputWithContext(context.Context) GetNetworkpolicyVideoSignalingOutput
}

type GetNetworkpolicyVideoSignalingArgs struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp pulumi.IntInput `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority pulumi.IntInput `pulumi:"priority"`
	// Enable/disable advertising this policy.
	Status pulumi.StringInput `pulumi:"status"`
	// Advertise tagged or untagged traffic.
	Tag pulumi.StringInput `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan pulumi.IntInput `pulumi:"vlan"`
}

func (GetNetworkpolicyVideoSignalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkpolicyVideoSignaling)(nil)).Elem()
}

func (i GetNetworkpolicyVideoSignalingArgs) ToGetNetworkpolicyVideoSignalingOutput() GetNetworkpolicyVideoSignalingOutput {
	return i.ToGetNetworkpolicyVideoSignalingOutputWithContext(context.Background())
}

func (i GetNetworkpolicyVideoSignalingArgs) ToGetNetworkpolicyVideoSignalingOutputWithContext(ctx context.Context) GetNetworkpolicyVideoSignalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkpolicyVideoSignalingOutput)
}

// GetNetworkpolicyVideoSignalingArrayInput is an input type that accepts GetNetworkpolicyVideoSignalingArray and GetNetworkpolicyVideoSignalingArrayOutput values.
// You can construct a concrete instance of `GetNetworkpolicyVideoSignalingArrayInput` via:
//
//	GetNetworkpolicyVideoSignalingArray{ GetNetworkpolicyVideoSignalingArgs{...} }
type GetNetworkpolicyVideoSignalingArrayInput interface {
	pulumi.Input

	ToGetNetworkpolicyVideoSignalingArrayOutput() GetNetworkpolicyVideoSignalingArrayOutput
	ToGetNetworkpolicyVideoSignalingArrayOutputWithContext(context.Context) GetNetworkpolicyVideoSignalingArrayOutput
}

type GetNetworkpolicyVideoSignalingArray []GetNetworkpolicyVideoSignalingInput

func (GetNetworkpolicyVideoSignalingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkpolicyVideoSignaling)(nil)).Elem()
}

func (i GetNetworkpolicyVideoSignalingArray) ToGetNetworkpolicyVideoSignalingArrayOutput() GetNetworkpolicyVideoSignalingArrayOutput {
	return i.ToGetNetworkpolicyVideoSignalingArrayOutputWithContext(context.Background())
}

func (i GetNetworkpolicyVideoSignalingArray) ToGetNetworkpolicyVideoSignalingArrayOutputWithContext(ctx context.Context) GetNetworkpolicyVideoSignalingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkpolicyVideoSignalingArrayOutput)
}

type GetNetworkpolicyVideoSignalingOutput struct{ *pulumi.OutputState }

func (GetNetworkpolicyVideoSignalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkpolicyVideoSignaling)(nil)).Elem()
}

func (o GetNetworkpolicyVideoSignalingOutput) ToGetNetworkpolicyVideoSignalingOutput() GetNetworkpolicyVideoSignalingOutput {
	return o
}

func (o GetNetworkpolicyVideoSignalingOutput) ToGetNetworkpolicyVideoSignalingOutputWithContext(ctx context.Context) GetNetworkpolicyVideoSignalingOutput {
	return o
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o GetNetworkpolicyVideoSignalingOutput) Dscp() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyVideoSignaling) int { return v.Dscp }).(pulumi.IntOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o GetNetworkpolicyVideoSignalingOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyVideoSignaling) int { return v.Priority }).(pulumi.IntOutput)
}

// Enable/disable advertising this policy.
func (o GetNetworkpolicyVideoSignalingOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkpolicyVideoSignaling) string { return v.Status }).(pulumi.StringOutput)
}

// Advertise tagged or untagged traffic.
func (o GetNetworkpolicyVideoSignalingOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkpolicyVideoSignaling) string { return v.Tag }).(pulumi.StringOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o GetNetworkpolicyVideoSignalingOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyVideoSignaling) int { return v.Vlan }).(pulumi.IntOutput)
}

type GetNetworkpolicyVideoSignalingArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkpolicyVideoSignalingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkpolicyVideoSignaling)(nil)).Elem()
}

func (o GetNetworkpolicyVideoSignalingArrayOutput) ToGetNetworkpolicyVideoSignalingArrayOutput() GetNetworkpolicyVideoSignalingArrayOutput {
	return o
}

func (o GetNetworkpolicyVideoSignalingArrayOutput) ToGetNetworkpolicyVideoSignalingArrayOutputWithContext(ctx context.Context) GetNetworkpolicyVideoSignalingArrayOutput {
	return o
}

func (o GetNetworkpolicyVideoSignalingArrayOutput) Index(i pulumi.IntInput) GetNetworkpolicyVideoSignalingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkpolicyVideoSignaling {
		return vs[0].([]GetNetworkpolicyVideoSignaling)[vs[1].(int)]
	}).(GetNetworkpolicyVideoSignalingOutput)
}

type GetNetworkpolicyVoice struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp int `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority int `pulumi:"priority"`
	// Enable/disable advertising this policy.
	Status string `pulumi:"status"`
	// Advertise tagged or untagged traffic.
	Tag string `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan int `pulumi:"vlan"`
}

// GetNetworkpolicyVoiceInput is an input type that accepts GetNetworkpolicyVoiceArgs and GetNetworkpolicyVoiceOutput values.
// You can construct a concrete instance of `GetNetworkpolicyVoiceInput` via:
//
//	GetNetworkpolicyVoiceArgs{...}
type GetNetworkpolicyVoiceInput interface {
	pulumi.Input

	ToGetNetworkpolicyVoiceOutput() GetNetworkpolicyVoiceOutput
	ToGetNetworkpolicyVoiceOutputWithContext(context.Context) GetNetworkpolicyVoiceOutput
}

type GetNetworkpolicyVoiceArgs struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp pulumi.IntInput `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority pulumi.IntInput `pulumi:"priority"`
	// Enable/disable advertising this policy.
	Status pulumi.StringInput `pulumi:"status"`
	// Advertise tagged or untagged traffic.
	Tag pulumi.StringInput `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan pulumi.IntInput `pulumi:"vlan"`
}

func (GetNetworkpolicyVoiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkpolicyVoice)(nil)).Elem()
}

func (i GetNetworkpolicyVoiceArgs) ToGetNetworkpolicyVoiceOutput() GetNetworkpolicyVoiceOutput {
	return i.ToGetNetworkpolicyVoiceOutputWithContext(context.Background())
}

func (i GetNetworkpolicyVoiceArgs) ToGetNetworkpolicyVoiceOutputWithContext(ctx context.Context) GetNetworkpolicyVoiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkpolicyVoiceOutput)
}

// GetNetworkpolicyVoiceArrayInput is an input type that accepts GetNetworkpolicyVoiceArray and GetNetworkpolicyVoiceArrayOutput values.
// You can construct a concrete instance of `GetNetworkpolicyVoiceArrayInput` via:
//
//	GetNetworkpolicyVoiceArray{ GetNetworkpolicyVoiceArgs{...} }
type GetNetworkpolicyVoiceArrayInput interface {
	pulumi.Input

	ToGetNetworkpolicyVoiceArrayOutput() GetNetworkpolicyVoiceArrayOutput
	ToGetNetworkpolicyVoiceArrayOutputWithContext(context.Context) GetNetworkpolicyVoiceArrayOutput
}

type GetNetworkpolicyVoiceArray []GetNetworkpolicyVoiceInput

func (GetNetworkpolicyVoiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkpolicyVoice)(nil)).Elem()
}

func (i GetNetworkpolicyVoiceArray) ToGetNetworkpolicyVoiceArrayOutput() GetNetworkpolicyVoiceArrayOutput {
	return i.ToGetNetworkpolicyVoiceArrayOutputWithContext(context.Background())
}

func (i GetNetworkpolicyVoiceArray) ToGetNetworkpolicyVoiceArrayOutputWithContext(ctx context.Context) GetNetworkpolicyVoiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkpolicyVoiceArrayOutput)
}

type GetNetworkpolicyVoiceOutput struct{ *pulumi.OutputState }

func (GetNetworkpolicyVoiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkpolicyVoice)(nil)).Elem()
}

func (o GetNetworkpolicyVoiceOutput) ToGetNetworkpolicyVoiceOutput() GetNetworkpolicyVoiceOutput {
	return o
}

func (o GetNetworkpolicyVoiceOutput) ToGetNetworkpolicyVoiceOutputWithContext(ctx context.Context) GetNetworkpolicyVoiceOutput {
	return o
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o GetNetworkpolicyVoiceOutput) Dscp() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyVoice) int { return v.Dscp }).(pulumi.IntOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o GetNetworkpolicyVoiceOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyVoice) int { return v.Priority }).(pulumi.IntOutput)
}

// Enable/disable advertising this policy.
func (o GetNetworkpolicyVoiceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkpolicyVoice) string { return v.Status }).(pulumi.StringOutput)
}

// Advertise tagged or untagged traffic.
func (o GetNetworkpolicyVoiceOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkpolicyVoice) string { return v.Tag }).(pulumi.StringOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o GetNetworkpolicyVoiceOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyVoice) int { return v.Vlan }).(pulumi.IntOutput)
}

type GetNetworkpolicyVoiceArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkpolicyVoiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkpolicyVoice)(nil)).Elem()
}

func (o GetNetworkpolicyVoiceArrayOutput) ToGetNetworkpolicyVoiceArrayOutput() GetNetworkpolicyVoiceArrayOutput {
	return o
}

func (o GetNetworkpolicyVoiceArrayOutput) ToGetNetworkpolicyVoiceArrayOutputWithContext(ctx context.Context) GetNetworkpolicyVoiceArrayOutput {
	return o
}

func (o GetNetworkpolicyVoiceArrayOutput) Index(i pulumi.IntInput) GetNetworkpolicyVoiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkpolicyVoice {
		return vs[0].([]GetNetworkpolicyVoice)[vs[1].(int)]
	}).(GetNetworkpolicyVoiceOutput)
}

type GetNetworkpolicyVoiceSignaling struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp int `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority int `pulumi:"priority"`
	// Enable/disable advertising this policy.
	Status string `pulumi:"status"`
	// Advertise tagged or untagged traffic.
	Tag string `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan int `pulumi:"vlan"`
}

// GetNetworkpolicyVoiceSignalingInput is an input type that accepts GetNetworkpolicyVoiceSignalingArgs and GetNetworkpolicyVoiceSignalingOutput values.
// You can construct a concrete instance of `GetNetworkpolicyVoiceSignalingInput` via:
//
//	GetNetworkpolicyVoiceSignalingArgs{...}
type GetNetworkpolicyVoiceSignalingInput interface {
	pulumi.Input

	ToGetNetworkpolicyVoiceSignalingOutput() GetNetworkpolicyVoiceSignalingOutput
	ToGetNetworkpolicyVoiceSignalingOutputWithContext(context.Context) GetNetworkpolicyVoiceSignalingOutput
}

type GetNetworkpolicyVoiceSignalingArgs struct {
	// Differentiated Services Code Point (DSCP) value to advertise.
	Dscp pulumi.IntInput `pulumi:"dscp"`
	// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
	Priority pulumi.IntInput `pulumi:"priority"`
	// Enable/disable advertising this policy.
	Status pulumi.StringInput `pulumi:"status"`
	// Advertise tagged or untagged traffic.
	Tag pulumi.StringInput `pulumi:"tag"`
	// 802.1Q VLAN ID to advertise (1 - 4094).
	Vlan pulumi.IntInput `pulumi:"vlan"`
}

func (GetNetworkpolicyVoiceSignalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkpolicyVoiceSignaling)(nil)).Elem()
}

func (i GetNetworkpolicyVoiceSignalingArgs) ToGetNetworkpolicyVoiceSignalingOutput() GetNetworkpolicyVoiceSignalingOutput {
	return i.ToGetNetworkpolicyVoiceSignalingOutputWithContext(context.Background())
}

func (i GetNetworkpolicyVoiceSignalingArgs) ToGetNetworkpolicyVoiceSignalingOutputWithContext(ctx context.Context) GetNetworkpolicyVoiceSignalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkpolicyVoiceSignalingOutput)
}

// GetNetworkpolicyVoiceSignalingArrayInput is an input type that accepts GetNetworkpolicyVoiceSignalingArray and GetNetworkpolicyVoiceSignalingArrayOutput values.
// You can construct a concrete instance of `GetNetworkpolicyVoiceSignalingArrayInput` via:
//
//	GetNetworkpolicyVoiceSignalingArray{ GetNetworkpolicyVoiceSignalingArgs{...} }
type GetNetworkpolicyVoiceSignalingArrayInput interface {
	pulumi.Input

	ToGetNetworkpolicyVoiceSignalingArrayOutput() GetNetworkpolicyVoiceSignalingArrayOutput
	ToGetNetworkpolicyVoiceSignalingArrayOutputWithContext(context.Context) GetNetworkpolicyVoiceSignalingArrayOutput
}

type GetNetworkpolicyVoiceSignalingArray []GetNetworkpolicyVoiceSignalingInput

func (GetNetworkpolicyVoiceSignalingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkpolicyVoiceSignaling)(nil)).Elem()
}

func (i GetNetworkpolicyVoiceSignalingArray) ToGetNetworkpolicyVoiceSignalingArrayOutput() GetNetworkpolicyVoiceSignalingArrayOutput {
	return i.ToGetNetworkpolicyVoiceSignalingArrayOutputWithContext(context.Background())
}

func (i GetNetworkpolicyVoiceSignalingArray) ToGetNetworkpolicyVoiceSignalingArrayOutputWithContext(ctx context.Context) GetNetworkpolicyVoiceSignalingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkpolicyVoiceSignalingArrayOutput)
}

type GetNetworkpolicyVoiceSignalingOutput struct{ *pulumi.OutputState }

func (GetNetworkpolicyVoiceSignalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkpolicyVoiceSignaling)(nil)).Elem()
}

func (o GetNetworkpolicyVoiceSignalingOutput) ToGetNetworkpolicyVoiceSignalingOutput() GetNetworkpolicyVoiceSignalingOutput {
	return o
}

func (o GetNetworkpolicyVoiceSignalingOutput) ToGetNetworkpolicyVoiceSignalingOutputWithContext(ctx context.Context) GetNetworkpolicyVoiceSignalingOutput {
	return o
}

// Differentiated Services Code Point (DSCP) value to advertise.
func (o GetNetworkpolicyVoiceSignalingOutput) Dscp() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyVoiceSignaling) int { return v.Dscp }).(pulumi.IntOutput)
}

// 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
func (o GetNetworkpolicyVoiceSignalingOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyVoiceSignaling) int { return v.Priority }).(pulumi.IntOutput)
}

// Enable/disable advertising this policy.
func (o GetNetworkpolicyVoiceSignalingOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkpolicyVoiceSignaling) string { return v.Status }).(pulumi.StringOutput)
}

// Advertise tagged or untagged traffic.
func (o GetNetworkpolicyVoiceSignalingOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkpolicyVoiceSignaling) string { return v.Tag }).(pulumi.StringOutput)
}

// 802.1Q VLAN ID to advertise (1 - 4094).
func (o GetNetworkpolicyVoiceSignalingOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkpolicyVoiceSignaling) int { return v.Vlan }).(pulumi.IntOutput)
}

type GetNetworkpolicyVoiceSignalingArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkpolicyVoiceSignalingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkpolicyVoiceSignaling)(nil)).Elem()
}

func (o GetNetworkpolicyVoiceSignalingArrayOutput) ToGetNetworkpolicyVoiceSignalingArrayOutput() GetNetworkpolicyVoiceSignalingArrayOutput {
	return o
}

func (o GetNetworkpolicyVoiceSignalingArrayOutput) ToGetNetworkpolicyVoiceSignalingArrayOutputWithContext(ctx context.Context) GetNetworkpolicyVoiceSignalingArrayOutput {
	return o
}

func (o GetNetworkpolicyVoiceSignalingArrayOutput) Index(i pulumi.IntInput) GetNetworkpolicyVoiceSignalingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkpolicyVoiceSignaling {
		return vs[0].([]GetNetworkpolicyVoiceSignaling)[vs[1].(int)]
	}).(GetNetworkpolicyVoiceSignalingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkpolicyGuestInput)(nil)).Elem(), NetworkpolicyGuestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkpolicyGuestPtrInput)(nil)).Elem(), NetworkpolicyGuestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkpolicyGuestVoiceSignalingInput)(nil)).Elem(), NetworkpolicyGuestVoiceSignalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkpolicyGuestVoiceSignalingPtrInput)(nil)).Elem(), NetworkpolicyGuestVoiceSignalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkpolicySoftphoneInput)(nil)).Elem(), NetworkpolicySoftphoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkpolicySoftphonePtrInput)(nil)).Elem(), NetworkpolicySoftphoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkpolicyStreamingVideoInput)(nil)).Elem(), NetworkpolicyStreamingVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkpolicyStreamingVideoPtrInput)(nil)).Elem(), NetworkpolicyStreamingVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkpolicyVideoConferencingInput)(nil)).Elem(), NetworkpolicyVideoConferencingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkpolicyVideoConferencingPtrInput)(nil)).Elem(), NetworkpolicyVideoConferencingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkpolicyVideoSignalingInput)(nil)).Elem(), NetworkpolicyVideoSignalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkpolicyVideoSignalingPtrInput)(nil)).Elem(), NetworkpolicyVideoSignalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkpolicyVoiceInput)(nil)).Elem(), NetworkpolicyVoiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkpolicyVoicePtrInput)(nil)).Elem(), NetworkpolicyVoiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkpolicyVoiceSignalingInput)(nil)).Elem(), NetworkpolicyVoiceSignalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkpolicyVoiceSignalingPtrInput)(nil)).Elem(), NetworkpolicyVoiceSignalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkpolicyGuestInput)(nil)).Elem(), GetNetworkpolicyGuestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkpolicyGuestArrayInput)(nil)).Elem(), GetNetworkpolicyGuestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkpolicyGuestVoiceSignalingInput)(nil)).Elem(), GetNetworkpolicyGuestVoiceSignalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkpolicyGuestVoiceSignalingArrayInput)(nil)).Elem(), GetNetworkpolicyGuestVoiceSignalingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkpolicySoftphoneInput)(nil)).Elem(), GetNetworkpolicySoftphoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkpolicySoftphoneArrayInput)(nil)).Elem(), GetNetworkpolicySoftphoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkpolicyStreamingVideoInput)(nil)).Elem(), GetNetworkpolicyStreamingVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkpolicyStreamingVideoArrayInput)(nil)).Elem(), GetNetworkpolicyStreamingVideoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkpolicyVideoConferencingInput)(nil)).Elem(), GetNetworkpolicyVideoConferencingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkpolicyVideoConferencingArrayInput)(nil)).Elem(), GetNetworkpolicyVideoConferencingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkpolicyVideoSignalingInput)(nil)).Elem(), GetNetworkpolicyVideoSignalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkpolicyVideoSignalingArrayInput)(nil)).Elem(), GetNetworkpolicyVideoSignalingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkpolicyVoiceInput)(nil)).Elem(), GetNetworkpolicyVoiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkpolicyVoiceArrayInput)(nil)).Elem(), GetNetworkpolicyVoiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkpolicyVoiceSignalingInput)(nil)).Elem(), GetNetworkpolicyVoiceSignalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkpolicyVoiceSignalingArrayInput)(nil)).Elem(), GetNetworkpolicyVoiceSignalingArray{})
	pulumi.RegisterOutputType(NetworkpolicyGuestOutput{})
	pulumi.RegisterOutputType(NetworkpolicyGuestPtrOutput{})
	pulumi.RegisterOutputType(NetworkpolicyGuestVoiceSignalingOutput{})
	pulumi.RegisterOutputType(NetworkpolicyGuestVoiceSignalingPtrOutput{})
	pulumi.RegisterOutputType(NetworkpolicySoftphoneOutput{})
	pulumi.RegisterOutputType(NetworkpolicySoftphonePtrOutput{})
	pulumi.RegisterOutputType(NetworkpolicyStreamingVideoOutput{})
	pulumi.RegisterOutputType(NetworkpolicyStreamingVideoPtrOutput{})
	pulumi.RegisterOutputType(NetworkpolicyVideoConferencingOutput{})
	pulumi.RegisterOutputType(NetworkpolicyVideoConferencingPtrOutput{})
	pulumi.RegisterOutputType(NetworkpolicyVideoSignalingOutput{})
	pulumi.RegisterOutputType(NetworkpolicyVideoSignalingPtrOutput{})
	pulumi.RegisterOutputType(NetworkpolicyVoiceOutput{})
	pulumi.RegisterOutputType(NetworkpolicyVoicePtrOutput{})
	pulumi.RegisterOutputType(NetworkpolicyVoiceSignalingOutput{})
	pulumi.RegisterOutputType(NetworkpolicyVoiceSignalingPtrOutput{})
	pulumi.RegisterOutputType(GetNetworkpolicyGuestOutput{})
	pulumi.RegisterOutputType(GetNetworkpolicyGuestArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkpolicyGuestVoiceSignalingOutput{})
	pulumi.RegisterOutputType(GetNetworkpolicyGuestVoiceSignalingArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkpolicySoftphoneOutput{})
	pulumi.RegisterOutputType(GetNetworkpolicySoftphoneArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkpolicyStreamingVideoOutput{})
	pulumi.RegisterOutputType(GetNetworkpolicyStreamingVideoArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkpolicyVideoConferencingOutput{})
	pulumi.RegisterOutputType(GetNetworkpolicyVideoConferencingArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkpolicyVideoSignalingOutput{})
	pulumi.RegisterOutputType(GetNetworkpolicyVideoSignalingArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkpolicyVoiceOutput{})
	pulumi.RegisterOutputType(GetNetworkpolicyVoiceArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkpolicyVoiceSignalingOutput{})
	pulumi.RegisterOutputType(GetNetworkpolicyVoiceSignalingArrayOutput{})
}

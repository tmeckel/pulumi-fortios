// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package application

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GroupApplication struct {
	// Application IDs.
	Id *int `pulumi:"id"`
}

// GroupApplicationInput is an input type that accepts GroupApplicationArgs and GroupApplicationOutput values.
// You can construct a concrete instance of `GroupApplicationInput` via:
//
//	GroupApplicationArgs{...}
type GroupApplicationInput interface {
	pulumi.Input

	ToGroupApplicationOutput() GroupApplicationOutput
	ToGroupApplicationOutputWithContext(context.Context) GroupApplicationOutput
}

type GroupApplicationArgs struct {
	// Application IDs.
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (GroupApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupApplication)(nil)).Elem()
}

func (i GroupApplicationArgs) ToGroupApplicationOutput() GroupApplicationOutput {
	return i.ToGroupApplicationOutputWithContext(context.Background())
}

func (i GroupApplicationArgs) ToGroupApplicationOutputWithContext(ctx context.Context) GroupApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupApplicationOutput)
}

// GroupApplicationArrayInput is an input type that accepts GroupApplicationArray and GroupApplicationArrayOutput values.
// You can construct a concrete instance of `GroupApplicationArrayInput` via:
//
//	GroupApplicationArray{ GroupApplicationArgs{...} }
type GroupApplicationArrayInput interface {
	pulumi.Input

	ToGroupApplicationArrayOutput() GroupApplicationArrayOutput
	ToGroupApplicationArrayOutputWithContext(context.Context) GroupApplicationArrayOutput
}

type GroupApplicationArray []GroupApplicationInput

func (GroupApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupApplication)(nil)).Elem()
}

func (i GroupApplicationArray) ToGroupApplicationArrayOutput() GroupApplicationArrayOutput {
	return i.ToGroupApplicationArrayOutputWithContext(context.Background())
}

func (i GroupApplicationArray) ToGroupApplicationArrayOutputWithContext(ctx context.Context) GroupApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupApplicationArrayOutput)
}

type GroupApplicationOutput struct{ *pulumi.OutputState }

func (GroupApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupApplication)(nil)).Elem()
}

func (o GroupApplicationOutput) ToGroupApplicationOutput() GroupApplicationOutput {
	return o
}

func (o GroupApplicationOutput) ToGroupApplicationOutputWithContext(ctx context.Context) GroupApplicationOutput {
	return o
}

// Application IDs.
func (o GroupApplicationOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupApplication) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type GroupApplicationArrayOutput struct{ *pulumi.OutputState }

func (GroupApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupApplication)(nil)).Elem()
}

func (o GroupApplicationArrayOutput) ToGroupApplicationArrayOutput() GroupApplicationArrayOutput {
	return o
}

func (o GroupApplicationArrayOutput) ToGroupApplicationArrayOutputWithContext(ctx context.Context) GroupApplicationArrayOutput {
	return o
}

func (o GroupApplicationArrayOutput) Index(i pulumi.IntInput) GroupApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupApplication {
		return vs[0].([]GroupApplication)[vs[1].(int)]
	}).(GroupApplicationOutput)
}

type GroupCategory struct {
	// Category IDs.
	Id *int `pulumi:"id"`
}

// GroupCategoryInput is an input type that accepts GroupCategoryArgs and GroupCategoryOutput values.
// You can construct a concrete instance of `GroupCategoryInput` via:
//
//	GroupCategoryArgs{...}
type GroupCategoryInput interface {
	pulumi.Input

	ToGroupCategoryOutput() GroupCategoryOutput
	ToGroupCategoryOutputWithContext(context.Context) GroupCategoryOutput
}

type GroupCategoryArgs struct {
	// Category IDs.
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (GroupCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupCategory)(nil)).Elem()
}

func (i GroupCategoryArgs) ToGroupCategoryOutput() GroupCategoryOutput {
	return i.ToGroupCategoryOutputWithContext(context.Background())
}

func (i GroupCategoryArgs) ToGroupCategoryOutputWithContext(ctx context.Context) GroupCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupCategoryOutput)
}

// GroupCategoryArrayInput is an input type that accepts GroupCategoryArray and GroupCategoryArrayOutput values.
// You can construct a concrete instance of `GroupCategoryArrayInput` via:
//
//	GroupCategoryArray{ GroupCategoryArgs{...} }
type GroupCategoryArrayInput interface {
	pulumi.Input

	ToGroupCategoryArrayOutput() GroupCategoryArrayOutput
	ToGroupCategoryArrayOutputWithContext(context.Context) GroupCategoryArrayOutput
}

type GroupCategoryArray []GroupCategoryInput

func (GroupCategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupCategory)(nil)).Elem()
}

func (i GroupCategoryArray) ToGroupCategoryArrayOutput() GroupCategoryArrayOutput {
	return i.ToGroupCategoryArrayOutputWithContext(context.Background())
}

func (i GroupCategoryArray) ToGroupCategoryArrayOutputWithContext(ctx context.Context) GroupCategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupCategoryArrayOutput)
}

type GroupCategoryOutput struct{ *pulumi.OutputState }

func (GroupCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupCategory)(nil)).Elem()
}

func (o GroupCategoryOutput) ToGroupCategoryOutput() GroupCategoryOutput {
	return o
}

func (o GroupCategoryOutput) ToGroupCategoryOutputWithContext(ctx context.Context) GroupCategoryOutput {
	return o
}

// Category IDs.
func (o GroupCategoryOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupCategory) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type GroupCategoryArrayOutput struct{ *pulumi.OutputState }

func (GroupCategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupCategory)(nil)).Elem()
}

func (o GroupCategoryArrayOutput) ToGroupCategoryArrayOutput() GroupCategoryArrayOutput {
	return o
}

func (o GroupCategoryArrayOutput) ToGroupCategoryArrayOutputWithContext(ctx context.Context) GroupCategoryArrayOutput {
	return o
}

func (o GroupCategoryArrayOutput) Index(i pulumi.IntInput) GroupCategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupCategory {
		return vs[0].([]GroupCategory)[vs[1].(int)]
	}).(GroupCategoryOutput)
}

type GroupRisk struct {
	// Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
	Level *int `pulumi:"level"`
}

// GroupRiskInput is an input type that accepts GroupRiskArgs and GroupRiskOutput values.
// You can construct a concrete instance of `GroupRiskInput` via:
//
//	GroupRiskArgs{...}
type GroupRiskInput interface {
	pulumi.Input

	ToGroupRiskOutput() GroupRiskOutput
	ToGroupRiskOutputWithContext(context.Context) GroupRiskOutput
}

type GroupRiskArgs struct {
	// Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
	Level pulumi.IntPtrInput `pulumi:"level"`
}

func (GroupRiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupRisk)(nil)).Elem()
}

func (i GroupRiskArgs) ToGroupRiskOutput() GroupRiskOutput {
	return i.ToGroupRiskOutputWithContext(context.Background())
}

func (i GroupRiskArgs) ToGroupRiskOutputWithContext(ctx context.Context) GroupRiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRiskOutput)
}

// GroupRiskArrayInput is an input type that accepts GroupRiskArray and GroupRiskArrayOutput values.
// You can construct a concrete instance of `GroupRiskArrayInput` via:
//
//	GroupRiskArray{ GroupRiskArgs{...} }
type GroupRiskArrayInput interface {
	pulumi.Input

	ToGroupRiskArrayOutput() GroupRiskArrayOutput
	ToGroupRiskArrayOutputWithContext(context.Context) GroupRiskArrayOutput
}

type GroupRiskArray []GroupRiskInput

func (GroupRiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupRisk)(nil)).Elem()
}

func (i GroupRiskArray) ToGroupRiskArrayOutput() GroupRiskArrayOutput {
	return i.ToGroupRiskArrayOutputWithContext(context.Background())
}

func (i GroupRiskArray) ToGroupRiskArrayOutputWithContext(ctx context.Context) GroupRiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRiskArrayOutput)
}

type GroupRiskOutput struct{ *pulumi.OutputState }

func (GroupRiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupRisk)(nil)).Elem()
}

func (o GroupRiskOutput) ToGroupRiskOutput() GroupRiskOutput {
	return o
}

func (o GroupRiskOutput) ToGroupRiskOutputWithContext(ctx context.Context) GroupRiskOutput {
	return o
}

// Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
func (o GroupRiskOutput) Level() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupRisk) *int { return v.Level }).(pulumi.IntPtrOutput)
}

type GroupRiskArrayOutput struct{ *pulumi.OutputState }

func (GroupRiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupRisk)(nil)).Elem()
}

func (o GroupRiskArrayOutput) ToGroupRiskArrayOutput() GroupRiskArrayOutput {
	return o
}

func (o GroupRiskArrayOutput) ToGroupRiskArrayOutputWithContext(ctx context.Context) GroupRiskArrayOutput {
	return o
}

func (o GroupRiskArrayOutput) Index(i pulumi.IntInput) GroupRiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupRisk {
		return vs[0].([]GroupRisk)[vs[1].(int)]
	}).(GroupRiskOutput)
}

type ListDefaultNetworkService struct {
	// Entry ID.
	Id *int `pulumi:"id"`
	// Port number.
	Port *int `pulumi:"port"`
	// Network protocols. Valid values: `http`, `ssh`, `telnet`, `ftp`, `dns`, `smtp`, `pop3`, `imap`, `snmp`, `nntp`, `https`.
	Services *string `pulumi:"services"`
	// Action for protocols not white listed under selected port. Valid values: `pass`, `monitor`, `block`.
	ViolationAction *string `pulumi:"violationAction"`
}

// ListDefaultNetworkServiceInput is an input type that accepts ListDefaultNetworkServiceArgs and ListDefaultNetworkServiceOutput values.
// You can construct a concrete instance of `ListDefaultNetworkServiceInput` via:
//
//	ListDefaultNetworkServiceArgs{...}
type ListDefaultNetworkServiceInput interface {
	pulumi.Input

	ToListDefaultNetworkServiceOutput() ListDefaultNetworkServiceOutput
	ToListDefaultNetworkServiceOutputWithContext(context.Context) ListDefaultNetworkServiceOutput
}

type ListDefaultNetworkServiceArgs struct {
	// Entry ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Port number.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Network protocols. Valid values: `http`, `ssh`, `telnet`, `ftp`, `dns`, `smtp`, `pop3`, `imap`, `snmp`, `nntp`, `https`.
	Services pulumi.StringPtrInput `pulumi:"services"`
	// Action for protocols not white listed under selected port. Valid values: `pass`, `monitor`, `block`.
	ViolationAction pulumi.StringPtrInput `pulumi:"violationAction"`
}

func (ListDefaultNetworkServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListDefaultNetworkService)(nil)).Elem()
}

func (i ListDefaultNetworkServiceArgs) ToListDefaultNetworkServiceOutput() ListDefaultNetworkServiceOutput {
	return i.ToListDefaultNetworkServiceOutputWithContext(context.Background())
}

func (i ListDefaultNetworkServiceArgs) ToListDefaultNetworkServiceOutputWithContext(ctx context.Context) ListDefaultNetworkServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListDefaultNetworkServiceOutput)
}

// ListDefaultNetworkServiceArrayInput is an input type that accepts ListDefaultNetworkServiceArray and ListDefaultNetworkServiceArrayOutput values.
// You can construct a concrete instance of `ListDefaultNetworkServiceArrayInput` via:
//
//	ListDefaultNetworkServiceArray{ ListDefaultNetworkServiceArgs{...} }
type ListDefaultNetworkServiceArrayInput interface {
	pulumi.Input

	ToListDefaultNetworkServiceArrayOutput() ListDefaultNetworkServiceArrayOutput
	ToListDefaultNetworkServiceArrayOutputWithContext(context.Context) ListDefaultNetworkServiceArrayOutput
}

type ListDefaultNetworkServiceArray []ListDefaultNetworkServiceInput

func (ListDefaultNetworkServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListDefaultNetworkService)(nil)).Elem()
}

func (i ListDefaultNetworkServiceArray) ToListDefaultNetworkServiceArrayOutput() ListDefaultNetworkServiceArrayOutput {
	return i.ToListDefaultNetworkServiceArrayOutputWithContext(context.Background())
}

func (i ListDefaultNetworkServiceArray) ToListDefaultNetworkServiceArrayOutputWithContext(ctx context.Context) ListDefaultNetworkServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListDefaultNetworkServiceArrayOutput)
}

type ListDefaultNetworkServiceOutput struct{ *pulumi.OutputState }

func (ListDefaultNetworkServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListDefaultNetworkService)(nil)).Elem()
}

func (o ListDefaultNetworkServiceOutput) ToListDefaultNetworkServiceOutput() ListDefaultNetworkServiceOutput {
	return o
}

func (o ListDefaultNetworkServiceOutput) ToListDefaultNetworkServiceOutputWithContext(ctx context.Context) ListDefaultNetworkServiceOutput {
	return o
}

// Entry ID.
func (o ListDefaultNetworkServiceOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListDefaultNetworkService) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Port number.
func (o ListDefaultNetworkServiceOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListDefaultNetworkService) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Network protocols. Valid values: `http`, `ssh`, `telnet`, `ftp`, `dns`, `smtp`, `pop3`, `imap`, `snmp`, `nntp`, `https`.
func (o ListDefaultNetworkServiceOutput) Services() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListDefaultNetworkService) *string { return v.Services }).(pulumi.StringPtrOutput)
}

// Action for protocols not white listed under selected port. Valid values: `pass`, `monitor`, `block`.
func (o ListDefaultNetworkServiceOutput) ViolationAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListDefaultNetworkService) *string { return v.ViolationAction }).(pulumi.StringPtrOutput)
}

type ListDefaultNetworkServiceArrayOutput struct{ *pulumi.OutputState }

func (ListDefaultNetworkServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListDefaultNetworkService)(nil)).Elem()
}

func (o ListDefaultNetworkServiceArrayOutput) ToListDefaultNetworkServiceArrayOutput() ListDefaultNetworkServiceArrayOutput {
	return o
}

func (o ListDefaultNetworkServiceArrayOutput) ToListDefaultNetworkServiceArrayOutputWithContext(ctx context.Context) ListDefaultNetworkServiceArrayOutput {
	return o
}

func (o ListDefaultNetworkServiceArrayOutput) Index(i pulumi.IntInput) ListDefaultNetworkServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListDefaultNetworkService {
		return vs[0].([]ListDefaultNetworkService)[vs[1].(int)]
	}).(ListDefaultNetworkServiceOutput)
}

type ListEntry struct {
	// Pass or block traffic, or reset connection for traffic from this application. Valid values: `pass`, `block`, `reset`.
	Action *string `pulumi:"action"`
	// ID of allowed applications. The structure of `application` block is documented below.
	Applications []ListEntryApplication `pulumi:"applications"`
	// Application behavior filter.
	Behavior *string `pulumi:"behavior"`
	// Category ID list. The structure of `category` block is documented below.
	Categories []ListEntryCategory `pulumi:"categories"`
	// ID of excluded applications. The structure of `exclusion` block is documented below.
	Exclusions []ListEntryExclusion `pulumi:"exclusions"`
	// Entry ID.
	Id *int `pulumi:"id"`
	// Enable/disable logging for this application list. Valid values: `disable`, `enable`.
	Log *string `pulumi:"log"`
	// Enable/disable packet logging. Valid values: `disable`, `enable`.
	LogPacket *string `pulumi:"logPacket"`
	// Application parameters. The structure of `parameters` block is documented below.
	Parameters []ListEntryParameter `pulumi:"parameters"`
	// Per-IP traffic shaper.
	PerIpShaper *string `pulumi:"perIpShaper"`
	// Application popularity filter (1 - 5, from least to most popular). Valid values: `1`, `2`, `3`, `4`, `5`.
	Popularity *string `pulumi:"popularity"`
	// Application protocol filter.
	Protocols *string `pulumi:"protocols"`
	// Quarantine method. Valid values: `none`, `attacker`.
	Quarantine *string `pulumi:"quarantine"`
	// Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
	QuarantineExpiry *string `pulumi:"quarantineExpiry"`
	// Enable/disable quarantine logging. Valid values: `disable`, `enable`.
	QuarantineLog *string `pulumi:"quarantineLog"`
	// Count of the rate.
	RateCount *int `pulumi:"rateCount"`
	// Duration (sec) of the rate.
	RateDuration *int `pulumi:"rateDuration"`
	// Rate limit mode. Valid values: `periodical`, `continuous`.
	RateMode *string `pulumi:"rateMode"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
	RateTrack *string `pulumi:"rateTrack"`
	// Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical). The structure of `risk` block is documented below.
	Risks []ListEntryRisk `pulumi:"risks"`
	// Session TTL (0 = default).
	SessionTtl *int `pulumi:"sessionTtl"`
	// Traffic shaper.
	Shaper *string `pulumi:"shaper"`
	// Reverse traffic shaper.
	ShaperReverse *string `pulumi:"shaperReverse"`
	// Application Sub-category ID list. The structure of `subCategory` block is documented below.
	SubCategories []ListEntrySubCategory `pulumi:"subCategories"`
	// Application technology filter.
	Technology *string `pulumi:"technology"`
	// Application vendor filter.
	Vendor *string `pulumi:"vendor"`
}

// ListEntryInput is an input type that accepts ListEntryArgs and ListEntryOutput values.
// You can construct a concrete instance of `ListEntryInput` via:
//
//	ListEntryArgs{...}
type ListEntryInput interface {
	pulumi.Input

	ToListEntryOutput() ListEntryOutput
	ToListEntryOutputWithContext(context.Context) ListEntryOutput
}

type ListEntryArgs struct {
	// Pass or block traffic, or reset connection for traffic from this application. Valid values: `pass`, `block`, `reset`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// ID of allowed applications. The structure of `application` block is documented below.
	Applications ListEntryApplicationArrayInput `pulumi:"applications"`
	// Application behavior filter.
	Behavior pulumi.StringPtrInput `pulumi:"behavior"`
	// Category ID list. The structure of `category` block is documented below.
	Categories ListEntryCategoryArrayInput `pulumi:"categories"`
	// ID of excluded applications. The structure of `exclusion` block is documented below.
	Exclusions ListEntryExclusionArrayInput `pulumi:"exclusions"`
	// Entry ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Enable/disable logging for this application list. Valid values: `disable`, `enable`.
	Log pulumi.StringPtrInput `pulumi:"log"`
	// Enable/disable packet logging. Valid values: `disable`, `enable`.
	LogPacket pulumi.StringPtrInput `pulumi:"logPacket"`
	// Application parameters. The structure of `parameters` block is documented below.
	Parameters ListEntryParameterArrayInput `pulumi:"parameters"`
	// Per-IP traffic shaper.
	PerIpShaper pulumi.StringPtrInput `pulumi:"perIpShaper"`
	// Application popularity filter (1 - 5, from least to most popular). Valid values: `1`, `2`, `3`, `4`, `5`.
	Popularity pulumi.StringPtrInput `pulumi:"popularity"`
	// Application protocol filter.
	Protocols pulumi.StringPtrInput `pulumi:"protocols"`
	// Quarantine method. Valid values: `none`, `attacker`.
	Quarantine pulumi.StringPtrInput `pulumi:"quarantine"`
	// Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
	QuarantineExpiry pulumi.StringPtrInput `pulumi:"quarantineExpiry"`
	// Enable/disable quarantine logging. Valid values: `disable`, `enable`.
	QuarantineLog pulumi.StringPtrInput `pulumi:"quarantineLog"`
	// Count of the rate.
	RateCount pulumi.IntPtrInput `pulumi:"rateCount"`
	// Duration (sec) of the rate.
	RateDuration pulumi.IntPtrInput `pulumi:"rateDuration"`
	// Rate limit mode. Valid values: `periodical`, `continuous`.
	RateMode pulumi.StringPtrInput `pulumi:"rateMode"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
	RateTrack pulumi.StringPtrInput `pulumi:"rateTrack"`
	// Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical). The structure of `risk` block is documented below.
	Risks ListEntryRiskArrayInput `pulumi:"risks"`
	// Session TTL (0 = default).
	SessionTtl pulumi.IntPtrInput `pulumi:"sessionTtl"`
	// Traffic shaper.
	Shaper pulumi.StringPtrInput `pulumi:"shaper"`
	// Reverse traffic shaper.
	ShaperReverse pulumi.StringPtrInput `pulumi:"shaperReverse"`
	// Application Sub-category ID list. The structure of `subCategory` block is documented below.
	SubCategories ListEntrySubCategoryArrayInput `pulumi:"subCategories"`
	// Application technology filter.
	Technology pulumi.StringPtrInput `pulumi:"technology"`
	// Application vendor filter.
	Vendor pulumi.StringPtrInput `pulumi:"vendor"`
}

func (ListEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEntry)(nil)).Elem()
}

func (i ListEntryArgs) ToListEntryOutput() ListEntryOutput {
	return i.ToListEntryOutputWithContext(context.Background())
}

func (i ListEntryArgs) ToListEntryOutputWithContext(ctx context.Context) ListEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListEntryOutput)
}

// ListEntryArrayInput is an input type that accepts ListEntryArray and ListEntryArrayOutput values.
// You can construct a concrete instance of `ListEntryArrayInput` via:
//
//	ListEntryArray{ ListEntryArgs{...} }
type ListEntryArrayInput interface {
	pulumi.Input

	ToListEntryArrayOutput() ListEntryArrayOutput
	ToListEntryArrayOutputWithContext(context.Context) ListEntryArrayOutput
}

type ListEntryArray []ListEntryInput

func (ListEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListEntry)(nil)).Elem()
}

func (i ListEntryArray) ToListEntryArrayOutput() ListEntryArrayOutput {
	return i.ToListEntryArrayOutputWithContext(context.Background())
}

func (i ListEntryArray) ToListEntryArrayOutputWithContext(ctx context.Context) ListEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListEntryArrayOutput)
}

type ListEntryOutput struct{ *pulumi.OutputState }

func (ListEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEntry)(nil)).Elem()
}

func (o ListEntryOutput) ToListEntryOutput() ListEntryOutput {
	return o
}

func (o ListEntryOutput) ToListEntryOutputWithContext(ctx context.Context) ListEntryOutput {
	return o
}

// Pass or block traffic, or reset connection for traffic from this application. Valid values: `pass`, `block`, `reset`.
func (o ListEntryOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntry) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// ID of allowed applications. The structure of `application` block is documented below.
func (o ListEntryOutput) Applications() ListEntryApplicationArrayOutput {
	return o.ApplyT(func(v ListEntry) []ListEntryApplication { return v.Applications }).(ListEntryApplicationArrayOutput)
}

// Application behavior filter.
func (o ListEntryOutput) Behavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntry) *string { return v.Behavior }).(pulumi.StringPtrOutput)
}

// Category ID list. The structure of `category` block is documented below.
func (o ListEntryOutput) Categories() ListEntryCategoryArrayOutput {
	return o.ApplyT(func(v ListEntry) []ListEntryCategory { return v.Categories }).(ListEntryCategoryArrayOutput)
}

// ID of excluded applications. The structure of `exclusion` block is documented below.
func (o ListEntryOutput) Exclusions() ListEntryExclusionArrayOutput {
	return o.ApplyT(func(v ListEntry) []ListEntryExclusion { return v.Exclusions }).(ListEntryExclusionArrayOutput)
}

// Entry ID.
func (o ListEntryOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListEntry) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Enable/disable logging for this application list. Valid values: `disable`, `enable`.
func (o ListEntryOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntry) *string { return v.Log }).(pulumi.StringPtrOutput)
}

// Enable/disable packet logging. Valid values: `disable`, `enable`.
func (o ListEntryOutput) LogPacket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntry) *string { return v.LogPacket }).(pulumi.StringPtrOutput)
}

// Application parameters. The structure of `parameters` block is documented below.
func (o ListEntryOutput) Parameters() ListEntryParameterArrayOutput {
	return o.ApplyT(func(v ListEntry) []ListEntryParameter { return v.Parameters }).(ListEntryParameterArrayOutput)
}

// Per-IP traffic shaper.
func (o ListEntryOutput) PerIpShaper() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntry) *string { return v.PerIpShaper }).(pulumi.StringPtrOutput)
}

// Application popularity filter (1 - 5, from least to most popular). Valid values: `1`, `2`, `3`, `4`, `5`.
func (o ListEntryOutput) Popularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntry) *string { return v.Popularity }).(pulumi.StringPtrOutput)
}

// Application protocol filter.
func (o ListEntryOutput) Protocols() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntry) *string { return v.Protocols }).(pulumi.StringPtrOutput)
}

// Quarantine method. Valid values: `none`, `attacker`.
func (o ListEntryOutput) Quarantine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntry) *string { return v.Quarantine }).(pulumi.StringPtrOutput)
}

// Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
func (o ListEntryOutput) QuarantineExpiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntry) *string { return v.QuarantineExpiry }).(pulumi.StringPtrOutput)
}

// Enable/disable quarantine logging. Valid values: `disable`, `enable`.
func (o ListEntryOutput) QuarantineLog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntry) *string { return v.QuarantineLog }).(pulumi.StringPtrOutput)
}

// Count of the rate.
func (o ListEntryOutput) RateCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListEntry) *int { return v.RateCount }).(pulumi.IntPtrOutput)
}

// Duration (sec) of the rate.
func (o ListEntryOutput) RateDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListEntry) *int { return v.RateDuration }).(pulumi.IntPtrOutput)
}

// Rate limit mode. Valid values: `periodical`, `continuous`.
func (o ListEntryOutput) RateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntry) *string { return v.RateMode }).(pulumi.StringPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
func (o ListEntryOutput) RateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntry) *string { return v.RateTrack }).(pulumi.StringPtrOutput)
}

// Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical). The structure of `risk` block is documented below.
func (o ListEntryOutput) Risks() ListEntryRiskArrayOutput {
	return o.ApplyT(func(v ListEntry) []ListEntryRisk { return v.Risks }).(ListEntryRiskArrayOutput)
}

// Session TTL (0 = default).
func (o ListEntryOutput) SessionTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListEntry) *int { return v.SessionTtl }).(pulumi.IntPtrOutput)
}

// Traffic shaper.
func (o ListEntryOutput) Shaper() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntry) *string { return v.Shaper }).(pulumi.StringPtrOutput)
}

// Reverse traffic shaper.
func (o ListEntryOutput) ShaperReverse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntry) *string { return v.ShaperReverse }).(pulumi.StringPtrOutput)
}

// Application Sub-category ID list. The structure of `subCategory` block is documented below.
func (o ListEntryOutput) SubCategories() ListEntrySubCategoryArrayOutput {
	return o.ApplyT(func(v ListEntry) []ListEntrySubCategory { return v.SubCategories }).(ListEntrySubCategoryArrayOutput)
}

// Application technology filter.
func (o ListEntryOutput) Technology() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntry) *string { return v.Technology }).(pulumi.StringPtrOutput)
}

// Application vendor filter.
func (o ListEntryOutput) Vendor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntry) *string { return v.Vendor }).(pulumi.StringPtrOutput)
}

type ListEntryArrayOutput struct{ *pulumi.OutputState }

func (ListEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListEntry)(nil)).Elem()
}

func (o ListEntryArrayOutput) ToListEntryArrayOutput() ListEntryArrayOutput {
	return o
}

func (o ListEntryArrayOutput) ToListEntryArrayOutputWithContext(ctx context.Context) ListEntryArrayOutput {
	return o
}

func (o ListEntryArrayOutput) Index(i pulumi.IntInput) ListEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListEntry {
		return vs[0].([]ListEntry)[vs[1].(int)]
	}).(ListEntryOutput)
}

type ListEntryApplication struct {
	// Application IDs.
	Id *int `pulumi:"id"`
}

// ListEntryApplicationInput is an input type that accepts ListEntryApplicationArgs and ListEntryApplicationOutput values.
// You can construct a concrete instance of `ListEntryApplicationInput` via:
//
//	ListEntryApplicationArgs{...}
type ListEntryApplicationInput interface {
	pulumi.Input

	ToListEntryApplicationOutput() ListEntryApplicationOutput
	ToListEntryApplicationOutputWithContext(context.Context) ListEntryApplicationOutput
}

type ListEntryApplicationArgs struct {
	// Application IDs.
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (ListEntryApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEntryApplication)(nil)).Elem()
}

func (i ListEntryApplicationArgs) ToListEntryApplicationOutput() ListEntryApplicationOutput {
	return i.ToListEntryApplicationOutputWithContext(context.Background())
}

func (i ListEntryApplicationArgs) ToListEntryApplicationOutputWithContext(ctx context.Context) ListEntryApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListEntryApplicationOutput)
}

// ListEntryApplicationArrayInput is an input type that accepts ListEntryApplicationArray and ListEntryApplicationArrayOutput values.
// You can construct a concrete instance of `ListEntryApplicationArrayInput` via:
//
//	ListEntryApplicationArray{ ListEntryApplicationArgs{...} }
type ListEntryApplicationArrayInput interface {
	pulumi.Input

	ToListEntryApplicationArrayOutput() ListEntryApplicationArrayOutput
	ToListEntryApplicationArrayOutputWithContext(context.Context) ListEntryApplicationArrayOutput
}

type ListEntryApplicationArray []ListEntryApplicationInput

func (ListEntryApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListEntryApplication)(nil)).Elem()
}

func (i ListEntryApplicationArray) ToListEntryApplicationArrayOutput() ListEntryApplicationArrayOutput {
	return i.ToListEntryApplicationArrayOutputWithContext(context.Background())
}

func (i ListEntryApplicationArray) ToListEntryApplicationArrayOutputWithContext(ctx context.Context) ListEntryApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListEntryApplicationArrayOutput)
}

type ListEntryApplicationOutput struct{ *pulumi.OutputState }

func (ListEntryApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEntryApplication)(nil)).Elem()
}

func (o ListEntryApplicationOutput) ToListEntryApplicationOutput() ListEntryApplicationOutput {
	return o
}

func (o ListEntryApplicationOutput) ToListEntryApplicationOutputWithContext(ctx context.Context) ListEntryApplicationOutput {
	return o
}

// Application IDs.
func (o ListEntryApplicationOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListEntryApplication) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type ListEntryApplicationArrayOutput struct{ *pulumi.OutputState }

func (ListEntryApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListEntryApplication)(nil)).Elem()
}

func (o ListEntryApplicationArrayOutput) ToListEntryApplicationArrayOutput() ListEntryApplicationArrayOutput {
	return o
}

func (o ListEntryApplicationArrayOutput) ToListEntryApplicationArrayOutputWithContext(ctx context.Context) ListEntryApplicationArrayOutput {
	return o
}

func (o ListEntryApplicationArrayOutput) Index(i pulumi.IntInput) ListEntryApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListEntryApplication {
		return vs[0].([]ListEntryApplication)[vs[1].(int)]
	}).(ListEntryApplicationOutput)
}

type ListEntryCategory struct {
	// Application category ID.
	Id *int `pulumi:"id"`
}

// ListEntryCategoryInput is an input type that accepts ListEntryCategoryArgs and ListEntryCategoryOutput values.
// You can construct a concrete instance of `ListEntryCategoryInput` via:
//
//	ListEntryCategoryArgs{...}
type ListEntryCategoryInput interface {
	pulumi.Input

	ToListEntryCategoryOutput() ListEntryCategoryOutput
	ToListEntryCategoryOutputWithContext(context.Context) ListEntryCategoryOutput
}

type ListEntryCategoryArgs struct {
	// Application category ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (ListEntryCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEntryCategory)(nil)).Elem()
}

func (i ListEntryCategoryArgs) ToListEntryCategoryOutput() ListEntryCategoryOutput {
	return i.ToListEntryCategoryOutputWithContext(context.Background())
}

func (i ListEntryCategoryArgs) ToListEntryCategoryOutputWithContext(ctx context.Context) ListEntryCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListEntryCategoryOutput)
}

// ListEntryCategoryArrayInput is an input type that accepts ListEntryCategoryArray and ListEntryCategoryArrayOutput values.
// You can construct a concrete instance of `ListEntryCategoryArrayInput` via:
//
//	ListEntryCategoryArray{ ListEntryCategoryArgs{...} }
type ListEntryCategoryArrayInput interface {
	pulumi.Input

	ToListEntryCategoryArrayOutput() ListEntryCategoryArrayOutput
	ToListEntryCategoryArrayOutputWithContext(context.Context) ListEntryCategoryArrayOutput
}

type ListEntryCategoryArray []ListEntryCategoryInput

func (ListEntryCategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListEntryCategory)(nil)).Elem()
}

func (i ListEntryCategoryArray) ToListEntryCategoryArrayOutput() ListEntryCategoryArrayOutput {
	return i.ToListEntryCategoryArrayOutputWithContext(context.Background())
}

func (i ListEntryCategoryArray) ToListEntryCategoryArrayOutputWithContext(ctx context.Context) ListEntryCategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListEntryCategoryArrayOutput)
}

type ListEntryCategoryOutput struct{ *pulumi.OutputState }

func (ListEntryCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEntryCategory)(nil)).Elem()
}

func (o ListEntryCategoryOutput) ToListEntryCategoryOutput() ListEntryCategoryOutput {
	return o
}

func (o ListEntryCategoryOutput) ToListEntryCategoryOutputWithContext(ctx context.Context) ListEntryCategoryOutput {
	return o
}

// Application category ID.
func (o ListEntryCategoryOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListEntryCategory) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type ListEntryCategoryArrayOutput struct{ *pulumi.OutputState }

func (ListEntryCategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListEntryCategory)(nil)).Elem()
}

func (o ListEntryCategoryArrayOutput) ToListEntryCategoryArrayOutput() ListEntryCategoryArrayOutput {
	return o
}

func (o ListEntryCategoryArrayOutput) ToListEntryCategoryArrayOutputWithContext(ctx context.Context) ListEntryCategoryArrayOutput {
	return o
}

func (o ListEntryCategoryArrayOutput) Index(i pulumi.IntInput) ListEntryCategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListEntryCategory {
		return vs[0].([]ListEntryCategory)[vs[1].(int)]
	}).(ListEntryCategoryOutput)
}

type ListEntryExclusion struct {
	// Excluded application IDs.
	Id *int `pulumi:"id"`
}

// ListEntryExclusionInput is an input type that accepts ListEntryExclusionArgs and ListEntryExclusionOutput values.
// You can construct a concrete instance of `ListEntryExclusionInput` via:
//
//	ListEntryExclusionArgs{...}
type ListEntryExclusionInput interface {
	pulumi.Input

	ToListEntryExclusionOutput() ListEntryExclusionOutput
	ToListEntryExclusionOutputWithContext(context.Context) ListEntryExclusionOutput
}

type ListEntryExclusionArgs struct {
	// Excluded application IDs.
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (ListEntryExclusionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEntryExclusion)(nil)).Elem()
}

func (i ListEntryExclusionArgs) ToListEntryExclusionOutput() ListEntryExclusionOutput {
	return i.ToListEntryExclusionOutputWithContext(context.Background())
}

func (i ListEntryExclusionArgs) ToListEntryExclusionOutputWithContext(ctx context.Context) ListEntryExclusionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListEntryExclusionOutput)
}

// ListEntryExclusionArrayInput is an input type that accepts ListEntryExclusionArray and ListEntryExclusionArrayOutput values.
// You can construct a concrete instance of `ListEntryExclusionArrayInput` via:
//
//	ListEntryExclusionArray{ ListEntryExclusionArgs{...} }
type ListEntryExclusionArrayInput interface {
	pulumi.Input

	ToListEntryExclusionArrayOutput() ListEntryExclusionArrayOutput
	ToListEntryExclusionArrayOutputWithContext(context.Context) ListEntryExclusionArrayOutput
}

type ListEntryExclusionArray []ListEntryExclusionInput

func (ListEntryExclusionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListEntryExclusion)(nil)).Elem()
}

func (i ListEntryExclusionArray) ToListEntryExclusionArrayOutput() ListEntryExclusionArrayOutput {
	return i.ToListEntryExclusionArrayOutputWithContext(context.Background())
}

func (i ListEntryExclusionArray) ToListEntryExclusionArrayOutputWithContext(ctx context.Context) ListEntryExclusionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListEntryExclusionArrayOutput)
}

type ListEntryExclusionOutput struct{ *pulumi.OutputState }

func (ListEntryExclusionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEntryExclusion)(nil)).Elem()
}

func (o ListEntryExclusionOutput) ToListEntryExclusionOutput() ListEntryExclusionOutput {
	return o
}

func (o ListEntryExclusionOutput) ToListEntryExclusionOutputWithContext(ctx context.Context) ListEntryExclusionOutput {
	return o
}

// Excluded application IDs.
func (o ListEntryExclusionOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListEntryExclusion) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type ListEntryExclusionArrayOutput struct{ *pulumi.OutputState }

func (ListEntryExclusionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListEntryExclusion)(nil)).Elem()
}

func (o ListEntryExclusionArrayOutput) ToListEntryExclusionArrayOutput() ListEntryExclusionArrayOutput {
	return o
}

func (o ListEntryExclusionArrayOutput) ToListEntryExclusionArrayOutputWithContext(ctx context.Context) ListEntryExclusionArrayOutput {
	return o
}

func (o ListEntryExclusionArrayOutput) Index(i pulumi.IntInput) ListEntryExclusionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListEntryExclusion {
		return vs[0].([]ListEntryExclusion)[vs[1].(int)]
	}).(ListEntryExclusionOutput)
}

type ListEntryParameter struct {
	// Parameter ID.
	Id *int `pulumi:"id"`
	// Parameter tuple members. The structure of `members` block is documented below.
	Members []ListEntryParameterMember `pulumi:"members"`
	// Parameter value.
	Value *string `pulumi:"value"`
}

// ListEntryParameterInput is an input type that accepts ListEntryParameterArgs and ListEntryParameterOutput values.
// You can construct a concrete instance of `ListEntryParameterInput` via:
//
//	ListEntryParameterArgs{...}
type ListEntryParameterInput interface {
	pulumi.Input

	ToListEntryParameterOutput() ListEntryParameterOutput
	ToListEntryParameterOutputWithContext(context.Context) ListEntryParameterOutput
}

type ListEntryParameterArgs struct {
	// Parameter ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Parameter tuple members. The structure of `members` block is documented below.
	Members ListEntryParameterMemberArrayInput `pulumi:"members"`
	// Parameter value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ListEntryParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEntryParameter)(nil)).Elem()
}

func (i ListEntryParameterArgs) ToListEntryParameterOutput() ListEntryParameterOutput {
	return i.ToListEntryParameterOutputWithContext(context.Background())
}

func (i ListEntryParameterArgs) ToListEntryParameterOutputWithContext(ctx context.Context) ListEntryParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListEntryParameterOutput)
}

// ListEntryParameterArrayInput is an input type that accepts ListEntryParameterArray and ListEntryParameterArrayOutput values.
// You can construct a concrete instance of `ListEntryParameterArrayInput` via:
//
//	ListEntryParameterArray{ ListEntryParameterArgs{...} }
type ListEntryParameterArrayInput interface {
	pulumi.Input

	ToListEntryParameterArrayOutput() ListEntryParameterArrayOutput
	ToListEntryParameterArrayOutputWithContext(context.Context) ListEntryParameterArrayOutput
}

type ListEntryParameterArray []ListEntryParameterInput

func (ListEntryParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListEntryParameter)(nil)).Elem()
}

func (i ListEntryParameterArray) ToListEntryParameterArrayOutput() ListEntryParameterArrayOutput {
	return i.ToListEntryParameterArrayOutputWithContext(context.Background())
}

func (i ListEntryParameterArray) ToListEntryParameterArrayOutputWithContext(ctx context.Context) ListEntryParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListEntryParameterArrayOutput)
}

type ListEntryParameterOutput struct{ *pulumi.OutputState }

func (ListEntryParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEntryParameter)(nil)).Elem()
}

func (o ListEntryParameterOutput) ToListEntryParameterOutput() ListEntryParameterOutput {
	return o
}

func (o ListEntryParameterOutput) ToListEntryParameterOutputWithContext(ctx context.Context) ListEntryParameterOutput {
	return o
}

// Parameter ID.
func (o ListEntryParameterOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListEntryParameter) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Parameter tuple members. The structure of `members` block is documented below.
func (o ListEntryParameterOutput) Members() ListEntryParameterMemberArrayOutput {
	return o.ApplyT(func(v ListEntryParameter) []ListEntryParameterMember { return v.Members }).(ListEntryParameterMemberArrayOutput)
}

// Parameter value.
func (o ListEntryParameterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntryParameter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ListEntryParameterArrayOutput struct{ *pulumi.OutputState }

func (ListEntryParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListEntryParameter)(nil)).Elem()
}

func (o ListEntryParameterArrayOutput) ToListEntryParameterArrayOutput() ListEntryParameterArrayOutput {
	return o
}

func (o ListEntryParameterArrayOutput) ToListEntryParameterArrayOutputWithContext(ctx context.Context) ListEntryParameterArrayOutput {
	return o
}

func (o ListEntryParameterArrayOutput) Index(i pulumi.IntInput) ListEntryParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListEntryParameter {
		return vs[0].([]ListEntryParameter)[vs[1].(int)]
	}).(ListEntryParameterOutput)
}

type ListEntryParameterMember struct {
	// Parameter.
	Id *int `pulumi:"id"`
	// Parameter name.
	Name *string `pulumi:"name"`
	// Parameter value.
	Value *string `pulumi:"value"`
}

// ListEntryParameterMemberInput is an input type that accepts ListEntryParameterMemberArgs and ListEntryParameterMemberOutput values.
// You can construct a concrete instance of `ListEntryParameterMemberInput` via:
//
//	ListEntryParameterMemberArgs{...}
type ListEntryParameterMemberInput interface {
	pulumi.Input

	ToListEntryParameterMemberOutput() ListEntryParameterMemberOutput
	ToListEntryParameterMemberOutputWithContext(context.Context) ListEntryParameterMemberOutput
}

type ListEntryParameterMemberArgs struct {
	// Parameter.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Parameter name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Parameter value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ListEntryParameterMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEntryParameterMember)(nil)).Elem()
}

func (i ListEntryParameterMemberArgs) ToListEntryParameterMemberOutput() ListEntryParameterMemberOutput {
	return i.ToListEntryParameterMemberOutputWithContext(context.Background())
}

func (i ListEntryParameterMemberArgs) ToListEntryParameterMemberOutputWithContext(ctx context.Context) ListEntryParameterMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListEntryParameterMemberOutput)
}

// ListEntryParameterMemberArrayInput is an input type that accepts ListEntryParameterMemberArray and ListEntryParameterMemberArrayOutput values.
// You can construct a concrete instance of `ListEntryParameterMemberArrayInput` via:
//
//	ListEntryParameterMemberArray{ ListEntryParameterMemberArgs{...} }
type ListEntryParameterMemberArrayInput interface {
	pulumi.Input

	ToListEntryParameterMemberArrayOutput() ListEntryParameterMemberArrayOutput
	ToListEntryParameterMemberArrayOutputWithContext(context.Context) ListEntryParameterMemberArrayOutput
}

type ListEntryParameterMemberArray []ListEntryParameterMemberInput

func (ListEntryParameterMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListEntryParameterMember)(nil)).Elem()
}

func (i ListEntryParameterMemberArray) ToListEntryParameterMemberArrayOutput() ListEntryParameterMemberArrayOutput {
	return i.ToListEntryParameterMemberArrayOutputWithContext(context.Background())
}

func (i ListEntryParameterMemberArray) ToListEntryParameterMemberArrayOutputWithContext(ctx context.Context) ListEntryParameterMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListEntryParameterMemberArrayOutput)
}

type ListEntryParameterMemberOutput struct{ *pulumi.OutputState }

func (ListEntryParameterMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEntryParameterMember)(nil)).Elem()
}

func (o ListEntryParameterMemberOutput) ToListEntryParameterMemberOutput() ListEntryParameterMemberOutput {
	return o
}

func (o ListEntryParameterMemberOutput) ToListEntryParameterMemberOutputWithContext(ctx context.Context) ListEntryParameterMemberOutput {
	return o
}

// Parameter.
func (o ListEntryParameterMemberOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListEntryParameterMember) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Parameter name.
func (o ListEntryParameterMemberOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntryParameterMember) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Parameter value.
func (o ListEntryParameterMemberOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEntryParameterMember) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ListEntryParameterMemberArrayOutput struct{ *pulumi.OutputState }

func (ListEntryParameterMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListEntryParameterMember)(nil)).Elem()
}

func (o ListEntryParameterMemberArrayOutput) ToListEntryParameterMemberArrayOutput() ListEntryParameterMemberArrayOutput {
	return o
}

func (o ListEntryParameterMemberArrayOutput) ToListEntryParameterMemberArrayOutputWithContext(ctx context.Context) ListEntryParameterMemberArrayOutput {
	return o
}

func (o ListEntryParameterMemberArrayOutput) Index(i pulumi.IntInput) ListEntryParameterMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListEntryParameterMember {
		return vs[0].([]ListEntryParameterMember)[vs[1].(int)]
	}).(ListEntryParameterMemberOutput)
}

type ListEntryRisk struct {
	// Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
	Level *int `pulumi:"level"`
}

// ListEntryRiskInput is an input type that accepts ListEntryRiskArgs and ListEntryRiskOutput values.
// You can construct a concrete instance of `ListEntryRiskInput` via:
//
//	ListEntryRiskArgs{...}
type ListEntryRiskInput interface {
	pulumi.Input

	ToListEntryRiskOutput() ListEntryRiskOutput
	ToListEntryRiskOutputWithContext(context.Context) ListEntryRiskOutput
}

type ListEntryRiskArgs struct {
	// Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
	Level pulumi.IntPtrInput `pulumi:"level"`
}

func (ListEntryRiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEntryRisk)(nil)).Elem()
}

func (i ListEntryRiskArgs) ToListEntryRiskOutput() ListEntryRiskOutput {
	return i.ToListEntryRiskOutputWithContext(context.Background())
}

func (i ListEntryRiskArgs) ToListEntryRiskOutputWithContext(ctx context.Context) ListEntryRiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListEntryRiskOutput)
}

// ListEntryRiskArrayInput is an input type that accepts ListEntryRiskArray and ListEntryRiskArrayOutput values.
// You can construct a concrete instance of `ListEntryRiskArrayInput` via:
//
//	ListEntryRiskArray{ ListEntryRiskArgs{...} }
type ListEntryRiskArrayInput interface {
	pulumi.Input

	ToListEntryRiskArrayOutput() ListEntryRiskArrayOutput
	ToListEntryRiskArrayOutputWithContext(context.Context) ListEntryRiskArrayOutput
}

type ListEntryRiskArray []ListEntryRiskInput

func (ListEntryRiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListEntryRisk)(nil)).Elem()
}

func (i ListEntryRiskArray) ToListEntryRiskArrayOutput() ListEntryRiskArrayOutput {
	return i.ToListEntryRiskArrayOutputWithContext(context.Background())
}

func (i ListEntryRiskArray) ToListEntryRiskArrayOutputWithContext(ctx context.Context) ListEntryRiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListEntryRiskArrayOutput)
}

type ListEntryRiskOutput struct{ *pulumi.OutputState }

func (ListEntryRiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEntryRisk)(nil)).Elem()
}

func (o ListEntryRiskOutput) ToListEntryRiskOutput() ListEntryRiskOutput {
	return o
}

func (o ListEntryRiskOutput) ToListEntryRiskOutputWithContext(ctx context.Context) ListEntryRiskOutput {
	return o
}

// Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
func (o ListEntryRiskOutput) Level() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListEntryRisk) *int { return v.Level }).(pulumi.IntPtrOutput)
}

type ListEntryRiskArrayOutput struct{ *pulumi.OutputState }

func (ListEntryRiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListEntryRisk)(nil)).Elem()
}

func (o ListEntryRiskArrayOutput) ToListEntryRiskArrayOutput() ListEntryRiskArrayOutput {
	return o
}

func (o ListEntryRiskArrayOutput) ToListEntryRiskArrayOutputWithContext(ctx context.Context) ListEntryRiskArrayOutput {
	return o
}

func (o ListEntryRiskArrayOutput) Index(i pulumi.IntInput) ListEntryRiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListEntryRisk {
		return vs[0].([]ListEntryRisk)[vs[1].(int)]
	}).(ListEntryRiskOutput)
}

type ListEntrySubCategory struct {
	// Application sub-category ID.
	Id *int `pulumi:"id"`
}

// ListEntrySubCategoryInput is an input type that accepts ListEntrySubCategoryArgs and ListEntrySubCategoryOutput values.
// You can construct a concrete instance of `ListEntrySubCategoryInput` via:
//
//	ListEntrySubCategoryArgs{...}
type ListEntrySubCategoryInput interface {
	pulumi.Input

	ToListEntrySubCategoryOutput() ListEntrySubCategoryOutput
	ToListEntrySubCategoryOutputWithContext(context.Context) ListEntrySubCategoryOutput
}

type ListEntrySubCategoryArgs struct {
	// Application sub-category ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (ListEntrySubCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEntrySubCategory)(nil)).Elem()
}

func (i ListEntrySubCategoryArgs) ToListEntrySubCategoryOutput() ListEntrySubCategoryOutput {
	return i.ToListEntrySubCategoryOutputWithContext(context.Background())
}

func (i ListEntrySubCategoryArgs) ToListEntrySubCategoryOutputWithContext(ctx context.Context) ListEntrySubCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListEntrySubCategoryOutput)
}

// ListEntrySubCategoryArrayInput is an input type that accepts ListEntrySubCategoryArray and ListEntrySubCategoryArrayOutput values.
// You can construct a concrete instance of `ListEntrySubCategoryArrayInput` via:
//
//	ListEntrySubCategoryArray{ ListEntrySubCategoryArgs{...} }
type ListEntrySubCategoryArrayInput interface {
	pulumi.Input

	ToListEntrySubCategoryArrayOutput() ListEntrySubCategoryArrayOutput
	ToListEntrySubCategoryArrayOutputWithContext(context.Context) ListEntrySubCategoryArrayOutput
}

type ListEntrySubCategoryArray []ListEntrySubCategoryInput

func (ListEntrySubCategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListEntrySubCategory)(nil)).Elem()
}

func (i ListEntrySubCategoryArray) ToListEntrySubCategoryArrayOutput() ListEntrySubCategoryArrayOutput {
	return i.ToListEntrySubCategoryArrayOutputWithContext(context.Background())
}

func (i ListEntrySubCategoryArray) ToListEntrySubCategoryArrayOutputWithContext(ctx context.Context) ListEntrySubCategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListEntrySubCategoryArrayOutput)
}

type ListEntrySubCategoryOutput struct{ *pulumi.OutputState }

func (ListEntrySubCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEntrySubCategory)(nil)).Elem()
}

func (o ListEntrySubCategoryOutput) ToListEntrySubCategoryOutput() ListEntrySubCategoryOutput {
	return o
}

func (o ListEntrySubCategoryOutput) ToListEntrySubCategoryOutputWithContext(ctx context.Context) ListEntrySubCategoryOutput {
	return o
}

// Application sub-category ID.
func (o ListEntrySubCategoryOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListEntrySubCategory) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type ListEntrySubCategoryArrayOutput struct{ *pulumi.OutputState }

func (ListEntrySubCategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListEntrySubCategory)(nil)).Elem()
}

func (o ListEntrySubCategoryArrayOutput) ToListEntrySubCategoryArrayOutput() ListEntrySubCategoryArrayOutput {
	return o
}

func (o ListEntrySubCategoryArrayOutput) ToListEntrySubCategoryArrayOutputWithContext(ctx context.Context) ListEntrySubCategoryArrayOutput {
	return o
}

func (o ListEntrySubCategoryArrayOutput) Index(i pulumi.IntInput) ListEntrySubCategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListEntrySubCategory {
		return vs[0].([]ListEntrySubCategory)[vs[1].(int)]
	}).(ListEntrySubCategoryOutput)
}

type NameMetadata struct {
	// ID.
	Id *int `pulumi:"id"`
	// Meta ID.
	Metaid *int `pulumi:"metaid"`
	// Value ID.
	Valueid *int `pulumi:"valueid"`
}

// NameMetadataInput is an input type that accepts NameMetadataArgs and NameMetadataOutput values.
// You can construct a concrete instance of `NameMetadataInput` via:
//
//	NameMetadataArgs{...}
type NameMetadataInput interface {
	pulumi.Input

	ToNameMetadataOutput() NameMetadataOutput
	ToNameMetadataOutputWithContext(context.Context) NameMetadataOutput
}

type NameMetadataArgs struct {
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Meta ID.
	Metaid pulumi.IntPtrInput `pulumi:"metaid"`
	// Value ID.
	Valueid pulumi.IntPtrInput `pulumi:"valueid"`
}

func (NameMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NameMetadata)(nil)).Elem()
}

func (i NameMetadataArgs) ToNameMetadataOutput() NameMetadataOutput {
	return i.ToNameMetadataOutputWithContext(context.Background())
}

func (i NameMetadataArgs) ToNameMetadataOutputWithContext(ctx context.Context) NameMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NameMetadataOutput)
}

// NameMetadataArrayInput is an input type that accepts NameMetadataArray and NameMetadataArrayOutput values.
// You can construct a concrete instance of `NameMetadataArrayInput` via:
//
//	NameMetadataArray{ NameMetadataArgs{...} }
type NameMetadataArrayInput interface {
	pulumi.Input

	ToNameMetadataArrayOutput() NameMetadataArrayOutput
	ToNameMetadataArrayOutputWithContext(context.Context) NameMetadataArrayOutput
}

type NameMetadataArray []NameMetadataInput

func (NameMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NameMetadata)(nil)).Elem()
}

func (i NameMetadataArray) ToNameMetadataArrayOutput() NameMetadataArrayOutput {
	return i.ToNameMetadataArrayOutputWithContext(context.Background())
}

func (i NameMetadataArray) ToNameMetadataArrayOutputWithContext(ctx context.Context) NameMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NameMetadataArrayOutput)
}

type NameMetadataOutput struct{ *pulumi.OutputState }

func (NameMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NameMetadata)(nil)).Elem()
}

func (o NameMetadataOutput) ToNameMetadataOutput() NameMetadataOutput {
	return o
}

func (o NameMetadataOutput) ToNameMetadataOutputWithContext(ctx context.Context) NameMetadataOutput {
	return o
}

// ID.
func (o NameMetadataOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NameMetadata) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Meta ID.
func (o NameMetadataOutput) Metaid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NameMetadata) *int { return v.Metaid }).(pulumi.IntPtrOutput)
}

// Value ID.
func (o NameMetadataOutput) Valueid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NameMetadata) *int { return v.Valueid }).(pulumi.IntPtrOutput)
}

type NameMetadataArrayOutput struct{ *pulumi.OutputState }

func (NameMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NameMetadata)(nil)).Elem()
}

func (o NameMetadataArrayOutput) ToNameMetadataArrayOutput() NameMetadataArrayOutput {
	return o
}

func (o NameMetadataArrayOutput) ToNameMetadataArrayOutputWithContext(ctx context.Context) NameMetadataArrayOutput {
	return o
}

func (o NameMetadataArrayOutput) Index(i pulumi.IntInput) NameMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NameMetadata {
		return vs[0].([]NameMetadata)[vs[1].(int)]
	}).(NameMetadataOutput)
}

type NameParameter struct {
	// Parameter name.
	Name *string `pulumi:"name"`
}

// NameParameterInput is an input type that accepts NameParameterArgs and NameParameterOutput values.
// You can construct a concrete instance of `NameParameterInput` via:
//
//	NameParameterArgs{...}
type NameParameterInput interface {
	pulumi.Input

	ToNameParameterOutput() NameParameterOutput
	ToNameParameterOutputWithContext(context.Context) NameParameterOutput
}

type NameParameterArgs struct {
	// Parameter name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (NameParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NameParameter)(nil)).Elem()
}

func (i NameParameterArgs) ToNameParameterOutput() NameParameterOutput {
	return i.ToNameParameterOutputWithContext(context.Background())
}

func (i NameParameterArgs) ToNameParameterOutputWithContext(ctx context.Context) NameParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NameParameterOutput)
}

// NameParameterArrayInput is an input type that accepts NameParameterArray and NameParameterArrayOutput values.
// You can construct a concrete instance of `NameParameterArrayInput` via:
//
//	NameParameterArray{ NameParameterArgs{...} }
type NameParameterArrayInput interface {
	pulumi.Input

	ToNameParameterArrayOutput() NameParameterArrayOutput
	ToNameParameterArrayOutputWithContext(context.Context) NameParameterArrayOutput
}

type NameParameterArray []NameParameterInput

func (NameParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NameParameter)(nil)).Elem()
}

func (i NameParameterArray) ToNameParameterArrayOutput() NameParameterArrayOutput {
	return i.ToNameParameterArrayOutputWithContext(context.Background())
}

func (i NameParameterArray) ToNameParameterArrayOutputWithContext(ctx context.Context) NameParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NameParameterArrayOutput)
}

type NameParameterOutput struct{ *pulumi.OutputState }

func (NameParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NameParameter)(nil)).Elem()
}

func (o NameParameterOutput) ToNameParameterOutput() NameParameterOutput {
	return o
}

func (o NameParameterOutput) ToNameParameterOutputWithContext(ctx context.Context) NameParameterOutput {
	return o
}

// Parameter name.
func (o NameParameterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NameParameter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type NameParameterArrayOutput struct{ *pulumi.OutputState }

func (NameParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NameParameter)(nil)).Elem()
}

func (o NameParameterArrayOutput) ToNameParameterArrayOutput() NameParameterArrayOutput {
	return o
}

func (o NameParameterArrayOutput) ToNameParameterArrayOutputWithContext(ctx context.Context) NameParameterArrayOutput {
	return o
}

func (o NameParameterArrayOutput) Index(i pulumi.IntInput) NameParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NameParameter {
		return vs[0].([]NameParameter)[vs[1].(int)]
	}).(NameParameterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupApplicationInput)(nil)).Elem(), GroupApplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupApplicationArrayInput)(nil)).Elem(), GroupApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupCategoryInput)(nil)).Elem(), GroupCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupCategoryArrayInput)(nil)).Elem(), GroupCategoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRiskInput)(nil)).Elem(), GroupRiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRiskArrayInput)(nil)).Elem(), GroupRiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListDefaultNetworkServiceInput)(nil)).Elem(), ListDefaultNetworkServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListDefaultNetworkServiceArrayInput)(nil)).Elem(), ListDefaultNetworkServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListEntryInput)(nil)).Elem(), ListEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListEntryArrayInput)(nil)).Elem(), ListEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListEntryApplicationInput)(nil)).Elem(), ListEntryApplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListEntryApplicationArrayInput)(nil)).Elem(), ListEntryApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListEntryCategoryInput)(nil)).Elem(), ListEntryCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListEntryCategoryArrayInput)(nil)).Elem(), ListEntryCategoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListEntryExclusionInput)(nil)).Elem(), ListEntryExclusionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListEntryExclusionArrayInput)(nil)).Elem(), ListEntryExclusionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListEntryParameterInput)(nil)).Elem(), ListEntryParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListEntryParameterArrayInput)(nil)).Elem(), ListEntryParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListEntryParameterMemberInput)(nil)).Elem(), ListEntryParameterMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListEntryParameterMemberArrayInput)(nil)).Elem(), ListEntryParameterMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListEntryRiskInput)(nil)).Elem(), ListEntryRiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListEntryRiskArrayInput)(nil)).Elem(), ListEntryRiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListEntrySubCategoryInput)(nil)).Elem(), ListEntrySubCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListEntrySubCategoryArrayInput)(nil)).Elem(), ListEntrySubCategoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NameMetadataInput)(nil)).Elem(), NameMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NameMetadataArrayInput)(nil)).Elem(), NameMetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NameParameterInput)(nil)).Elem(), NameParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NameParameterArrayInput)(nil)).Elem(), NameParameterArray{})
	pulumi.RegisterOutputType(GroupApplicationOutput{})
	pulumi.RegisterOutputType(GroupApplicationArrayOutput{})
	pulumi.RegisterOutputType(GroupCategoryOutput{})
	pulumi.RegisterOutputType(GroupCategoryArrayOutput{})
	pulumi.RegisterOutputType(GroupRiskOutput{})
	pulumi.RegisterOutputType(GroupRiskArrayOutput{})
	pulumi.RegisterOutputType(ListDefaultNetworkServiceOutput{})
	pulumi.RegisterOutputType(ListDefaultNetworkServiceArrayOutput{})
	pulumi.RegisterOutputType(ListEntryOutput{})
	pulumi.RegisterOutputType(ListEntryArrayOutput{})
	pulumi.RegisterOutputType(ListEntryApplicationOutput{})
	pulumi.RegisterOutputType(ListEntryApplicationArrayOutput{})
	pulumi.RegisterOutputType(ListEntryCategoryOutput{})
	pulumi.RegisterOutputType(ListEntryCategoryArrayOutput{})
	pulumi.RegisterOutputType(ListEntryExclusionOutput{})
	pulumi.RegisterOutputType(ListEntryExclusionArrayOutput{})
	pulumi.RegisterOutputType(ListEntryParameterOutput{})
	pulumi.RegisterOutputType(ListEntryParameterArrayOutput{})
	pulumi.RegisterOutputType(ListEntryParameterMemberOutput{})
	pulumi.RegisterOutputType(ListEntryParameterMemberArrayOutput{})
	pulumi.RegisterOutputType(ListEntryRiskOutput{})
	pulumi.RegisterOutputType(ListEntryRiskArrayOutput{})
	pulumi.RegisterOutputType(ListEntrySubCategoryOutput{})
	pulumi.RegisterOutputType(ListEntrySubCategoryArrayOutput{})
	pulumi.RegisterOutputType(NameMetadataOutput{})
	pulumi.RegisterOutputType(NameMetadataArrayOutput{})
	pulumi.RegisterOutputType(NameParameterOutput{})
	pulumi.RegisterOutputType(NameParameterArrayOutput{})
}

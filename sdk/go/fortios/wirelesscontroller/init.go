// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wirelesscontroller

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "fortios:wirelesscontroller/accesscontrollist:Accesscontrollist":
		r = &Accesscontrollist{}
	case "fortios:wirelesscontroller/address:Address":
		r = &Address{}
	case "fortios:wirelesscontroller/addrgrp:Addrgrp":
		r = &Addrgrp{}
	case "fortios:wirelesscontroller/apcfgprofile:Apcfgprofile":
		r = &Apcfgprofile{}
	case "fortios:wirelesscontroller/apstatus:Apstatus":
		r = &Apstatus{}
	case "fortios:wirelesscontroller/arrpprofile:Arrpprofile":
		r = &Arrpprofile{}
	case "fortios:wirelesscontroller/bleprofile:Bleprofile":
		r = &Bleprofile{}
	case "fortios:wirelesscontroller/bonjourprofile:Bonjourprofile":
		r = &Bonjourprofile{}
	case "fortios:wirelesscontroller/global:Global":
		r = &Global{}
	case "fortios:wirelesscontroller/intercontroller:Intercontroller":
		r = &Intercontroller{}
	case "fortios:wirelesscontroller/log:Log":
		r = &Log{}
	case "fortios:wirelesscontroller/mpskprofile:Mpskprofile":
		r = &Mpskprofile{}
	case "fortios:wirelesscontroller/nacprofile:Nacprofile":
		r = &Nacprofile{}
	case "fortios:wirelesscontroller/qosprofile:Qosprofile":
		r = &Qosprofile{}
	case "fortios:wirelesscontroller/region:Region":
		r = &Region{}
	case "fortios:wirelesscontroller/setting:Setting":
		r = &Setting{}
	case "fortios:wirelesscontroller/snmp:Snmp":
		r = &Snmp{}
	case "fortios:wirelesscontroller/ssidpolicy:Ssidpolicy":
		r = &Ssidpolicy{}
	case "fortios:wirelesscontroller/syslogprofile:Syslogprofile":
		r = &Syslogprofile{}
	case "fortios:wirelesscontroller/timers:Timers":
		r = &Timers{}
	case "fortios:wirelesscontroller/utmprofile:Utmprofile":
		r = &Utmprofile{}
	case "fortios:wirelesscontroller/vap:Vap":
		r = &Vap{}
	case "fortios:wirelesscontroller/vapgroup:Vapgroup":
		r = &Vapgroup{}
	case "fortios:wirelesscontroller/wagprofile:Wagprofile":
		r = &Wagprofile{}
	case "fortios:wirelesscontroller/widsprofile:Widsprofile":
		r = &Widsprofile{}
	case "fortios:wirelesscontroller/wtp:Wtp":
		r = &Wtp{}
	case "fortios:wirelesscontroller/wtpgroup:Wtpgroup":
		r = &Wtpgroup{}
	case "fortios:wirelesscontroller/wtpprofile:Wtpprofile":
		r = &Wtpprofile{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := fortios.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/accesscontrollist",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/address",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/addrgrp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/apcfgprofile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/apstatus",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/arrpprofile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/bleprofile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/bonjourprofile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/global",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/intercontroller",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/log",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/mpskprofile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/nacprofile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/qosprofile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/region",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/setting",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/snmp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/ssidpolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/syslogprofile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/timers",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/utmprofile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/vap",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/vapgroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/wagprofile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/widsprofile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/wtp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/wtpgroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"fortios",
		"wirelesscontroller/wtpprofile",
		&module{version},
	)
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ips

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DecoderParameter struct {
	// Parameter name.
	Name *string `pulumi:"name"`
	// Parameter value.
	Value *string `pulumi:"value"`
}

// DecoderParameterInput is an input type that accepts DecoderParameterArgs and DecoderParameterOutput values.
// You can construct a concrete instance of `DecoderParameterInput` via:
//
//	DecoderParameterArgs{...}
type DecoderParameterInput interface {
	pulumi.Input

	ToDecoderParameterOutput() DecoderParameterOutput
	ToDecoderParameterOutputWithContext(context.Context) DecoderParameterOutput
}

type DecoderParameterArgs struct {
	// Parameter name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Parameter value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DecoderParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderParameter)(nil)).Elem()
}

func (i DecoderParameterArgs) ToDecoderParameterOutput() DecoderParameterOutput {
	return i.ToDecoderParameterOutputWithContext(context.Background())
}

func (i DecoderParameterArgs) ToDecoderParameterOutputWithContext(ctx context.Context) DecoderParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DecoderParameterOutput)
}

// DecoderParameterArrayInput is an input type that accepts DecoderParameterArray and DecoderParameterArrayOutput values.
// You can construct a concrete instance of `DecoderParameterArrayInput` via:
//
//	DecoderParameterArray{ DecoderParameterArgs{...} }
type DecoderParameterArrayInput interface {
	pulumi.Input

	ToDecoderParameterArrayOutput() DecoderParameterArrayOutput
	ToDecoderParameterArrayOutputWithContext(context.Context) DecoderParameterArrayOutput
}

type DecoderParameterArray []DecoderParameterInput

func (DecoderParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DecoderParameter)(nil)).Elem()
}

func (i DecoderParameterArray) ToDecoderParameterArrayOutput() DecoderParameterArrayOutput {
	return i.ToDecoderParameterArrayOutputWithContext(context.Background())
}

func (i DecoderParameterArray) ToDecoderParameterArrayOutputWithContext(ctx context.Context) DecoderParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DecoderParameterArrayOutput)
}

type DecoderParameterOutput struct{ *pulumi.OutputState }

func (DecoderParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderParameter)(nil)).Elem()
}

func (o DecoderParameterOutput) ToDecoderParameterOutput() DecoderParameterOutput {
	return o
}

func (o DecoderParameterOutput) ToDecoderParameterOutputWithContext(ctx context.Context) DecoderParameterOutput {
	return o
}

// Parameter name.
func (o DecoderParameterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DecoderParameter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Parameter value.
func (o DecoderParameterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DecoderParameter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DecoderParameterArrayOutput struct{ *pulumi.OutputState }

func (DecoderParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DecoderParameter)(nil)).Elem()
}

func (o DecoderParameterArrayOutput) ToDecoderParameterArrayOutput() DecoderParameterArrayOutput {
	return o
}

func (o DecoderParameterArrayOutput) ToDecoderParameterArrayOutputWithContext(ctx context.Context) DecoderParameterArrayOutput {
	return o
}

func (o DecoderParameterArrayOutput) Index(i pulumi.IntInput) DecoderParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DecoderParameter {
		return vs[0].([]DecoderParameter)[vs[1].(int)]
	}).(DecoderParameterOutput)
}

type GlobalTlsActiveProbe struct {
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Source IP address used for TLS active probe.
	SourceIp *string `pulumi:"sourceIp"`
	// Source IPv6 address used for TLS active probe.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// Virtual domain name for TLS active probe.
	Vdom *string `pulumi:"vdom"`
}

// GlobalTlsActiveProbeInput is an input type that accepts GlobalTlsActiveProbeArgs and GlobalTlsActiveProbeOutput values.
// You can construct a concrete instance of `GlobalTlsActiveProbeInput` via:
//
//	GlobalTlsActiveProbeArgs{...}
type GlobalTlsActiveProbeInput interface {
	pulumi.Input

	ToGlobalTlsActiveProbeOutput() GlobalTlsActiveProbeOutput
	ToGlobalTlsActiveProbeOutputWithContext(context.Context) GlobalTlsActiveProbeOutput
}

type GlobalTlsActiveProbeArgs struct {
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput `pulumi:"interfaceSelectMethod"`
	// Source IP address used for TLS active probe.
	SourceIp pulumi.StringPtrInput `pulumi:"sourceIp"`
	// Source IPv6 address used for TLS active probe.
	SourceIp6 pulumi.StringPtrInput `pulumi:"sourceIp6"`
	// Virtual domain name for TLS active probe.
	Vdom pulumi.StringPtrInput `pulumi:"vdom"`
}

func (GlobalTlsActiveProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalTlsActiveProbe)(nil)).Elem()
}

func (i GlobalTlsActiveProbeArgs) ToGlobalTlsActiveProbeOutput() GlobalTlsActiveProbeOutput {
	return i.ToGlobalTlsActiveProbeOutputWithContext(context.Background())
}

func (i GlobalTlsActiveProbeArgs) ToGlobalTlsActiveProbeOutputWithContext(ctx context.Context) GlobalTlsActiveProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalTlsActiveProbeOutput)
}

func (i GlobalTlsActiveProbeArgs) ToGlobalTlsActiveProbePtrOutput() GlobalTlsActiveProbePtrOutput {
	return i.ToGlobalTlsActiveProbePtrOutputWithContext(context.Background())
}

func (i GlobalTlsActiveProbeArgs) ToGlobalTlsActiveProbePtrOutputWithContext(ctx context.Context) GlobalTlsActiveProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalTlsActiveProbeOutput).ToGlobalTlsActiveProbePtrOutputWithContext(ctx)
}

// GlobalTlsActiveProbePtrInput is an input type that accepts GlobalTlsActiveProbeArgs, GlobalTlsActiveProbePtr and GlobalTlsActiveProbePtrOutput values.
// You can construct a concrete instance of `GlobalTlsActiveProbePtrInput` via:
//
//	        GlobalTlsActiveProbeArgs{...}
//
//	or:
//
//	        nil
type GlobalTlsActiveProbePtrInput interface {
	pulumi.Input

	ToGlobalTlsActiveProbePtrOutput() GlobalTlsActiveProbePtrOutput
	ToGlobalTlsActiveProbePtrOutputWithContext(context.Context) GlobalTlsActiveProbePtrOutput
}

type globalTlsActiveProbePtrType GlobalTlsActiveProbeArgs

func GlobalTlsActiveProbePtr(v *GlobalTlsActiveProbeArgs) GlobalTlsActiveProbePtrInput {
	return (*globalTlsActiveProbePtrType)(v)
}

func (*globalTlsActiveProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalTlsActiveProbe)(nil)).Elem()
}

func (i *globalTlsActiveProbePtrType) ToGlobalTlsActiveProbePtrOutput() GlobalTlsActiveProbePtrOutput {
	return i.ToGlobalTlsActiveProbePtrOutputWithContext(context.Background())
}

func (i *globalTlsActiveProbePtrType) ToGlobalTlsActiveProbePtrOutputWithContext(ctx context.Context) GlobalTlsActiveProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalTlsActiveProbePtrOutput)
}

type GlobalTlsActiveProbeOutput struct{ *pulumi.OutputState }

func (GlobalTlsActiveProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalTlsActiveProbe)(nil)).Elem()
}

func (o GlobalTlsActiveProbeOutput) ToGlobalTlsActiveProbeOutput() GlobalTlsActiveProbeOutput {
	return o
}

func (o GlobalTlsActiveProbeOutput) ToGlobalTlsActiveProbeOutputWithContext(ctx context.Context) GlobalTlsActiveProbeOutput {
	return o
}

func (o GlobalTlsActiveProbeOutput) ToGlobalTlsActiveProbePtrOutput() GlobalTlsActiveProbePtrOutput {
	return o.ToGlobalTlsActiveProbePtrOutputWithContext(context.Background())
}

func (o GlobalTlsActiveProbeOutput) ToGlobalTlsActiveProbePtrOutputWithContext(ctx context.Context) GlobalTlsActiveProbePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalTlsActiveProbe) *GlobalTlsActiveProbe {
		return &v
	}).(GlobalTlsActiveProbePtrOutput)
}

// Specify outgoing interface to reach server.
func (o GlobalTlsActiveProbeOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalTlsActiveProbe) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
func (o GlobalTlsActiveProbeOutput) InterfaceSelectMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalTlsActiveProbe) *string { return v.InterfaceSelectMethod }).(pulumi.StringPtrOutput)
}

// Source IP address used for TLS active probe.
func (o GlobalTlsActiveProbeOutput) SourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalTlsActiveProbe) *string { return v.SourceIp }).(pulumi.StringPtrOutput)
}

// Source IPv6 address used for TLS active probe.
func (o GlobalTlsActiveProbeOutput) SourceIp6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalTlsActiveProbe) *string { return v.SourceIp6 }).(pulumi.StringPtrOutput)
}

// Virtual domain name for TLS active probe.
func (o GlobalTlsActiveProbeOutput) Vdom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalTlsActiveProbe) *string { return v.Vdom }).(pulumi.StringPtrOutput)
}

type GlobalTlsActiveProbePtrOutput struct{ *pulumi.OutputState }

func (GlobalTlsActiveProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalTlsActiveProbe)(nil)).Elem()
}

func (o GlobalTlsActiveProbePtrOutput) ToGlobalTlsActiveProbePtrOutput() GlobalTlsActiveProbePtrOutput {
	return o
}

func (o GlobalTlsActiveProbePtrOutput) ToGlobalTlsActiveProbePtrOutputWithContext(ctx context.Context) GlobalTlsActiveProbePtrOutput {
	return o
}

func (o GlobalTlsActiveProbePtrOutput) Elem() GlobalTlsActiveProbeOutput {
	return o.ApplyT(func(v *GlobalTlsActiveProbe) GlobalTlsActiveProbe {
		if v != nil {
			return *v
		}
		var ret GlobalTlsActiveProbe
		return ret
	}).(GlobalTlsActiveProbeOutput)
}

// Specify outgoing interface to reach server.
func (o GlobalTlsActiveProbePtrOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalTlsActiveProbe) *string {
		if v == nil {
			return nil
		}
		return v.Interface
	}).(pulumi.StringPtrOutput)
}

// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
func (o GlobalTlsActiveProbePtrOutput) InterfaceSelectMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalTlsActiveProbe) *string {
		if v == nil {
			return nil
		}
		return v.InterfaceSelectMethod
	}).(pulumi.StringPtrOutput)
}

// Source IP address used for TLS active probe.
func (o GlobalTlsActiveProbePtrOutput) SourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalTlsActiveProbe) *string {
		if v == nil {
			return nil
		}
		return v.SourceIp
	}).(pulumi.StringPtrOutput)
}

// Source IPv6 address used for TLS active probe.
func (o GlobalTlsActiveProbePtrOutput) SourceIp6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalTlsActiveProbe) *string {
		if v == nil {
			return nil
		}
		return v.SourceIp6
	}).(pulumi.StringPtrOutput)
}

// Virtual domain name for TLS active probe.
func (o GlobalTlsActiveProbePtrOutput) Vdom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalTlsActiveProbe) *string {
		if v == nil {
			return nil
		}
		return v.Vdom
	}).(pulumi.StringPtrOutput)
}

type RuleMetadata struct {
	// ID.
	Id *int `pulumi:"id"`
	// Meta ID.
	Metaid *int `pulumi:"metaid"`
	// Value ID.
	Valueid *int `pulumi:"valueid"`
}

// RuleMetadataInput is an input type that accepts RuleMetadataArgs and RuleMetadataOutput values.
// You can construct a concrete instance of `RuleMetadataInput` via:
//
//	RuleMetadataArgs{...}
type RuleMetadataInput interface {
	pulumi.Input

	ToRuleMetadataOutput() RuleMetadataOutput
	ToRuleMetadataOutputWithContext(context.Context) RuleMetadataOutput
}

type RuleMetadataArgs struct {
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Meta ID.
	Metaid pulumi.IntPtrInput `pulumi:"metaid"`
	// Value ID.
	Valueid pulumi.IntPtrInput `pulumi:"valueid"`
}

func (RuleMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleMetadata)(nil)).Elem()
}

func (i RuleMetadataArgs) ToRuleMetadataOutput() RuleMetadataOutput {
	return i.ToRuleMetadataOutputWithContext(context.Background())
}

func (i RuleMetadataArgs) ToRuleMetadataOutputWithContext(ctx context.Context) RuleMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleMetadataOutput)
}

// RuleMetadataArrayInput is an input type that accepts RuleMetadataArray and RuleMetadataArrayOutput values.
// You can construct a concrete instance of `RuleMetadataArrayInput` via:
//
//	RuleMetadataArray{ RuleMetadataArgs{...} }
type RuleMetadataArrayInput interface {
	pulumi.Input

	ToRuleMetadataArrayOutput() RuleMetadataArrayOutput
	ToRuleMetadataArrayOutputWithContext(context.Context) RuleMetadataArrayOutput
}

type RuleMetadataArray []RuleMetadataInput

func (RuleMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleMetadata)(nil)).Elem()
}

func (i RuleMetadataArray) ToRuleMetadataArrayOutput() RuleMetadataArrayOutput {
	return i.ToRuleMetadataArrayOutputWithContext(context.Background())
}

func (i RuleMetadataArray) ToRuleMetadataArrayOutputWithContext(ctx context.Context) RuleMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleMetadataArrayOutput)
}

type RuleMetadataOutput struct{ *pulumi.OutputState }

func (RuleMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleMetadata)(nil)).Elem()
}

func (o RuleMetadataOutput) ToRuleMetadataOutput() RuleMetadataOutput {
	return o
}

func (o RuleMetadataOutput) ToRuleMetadataOutputWithContext(ctx context.Context) RuleMetadataOutput {
	return o
}

// ID.
func (o RuleMetadataOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleMetadata) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Meta ID.
func (o RuleMetadataOutput) Metaid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleMetadata) *int { return v.Metaid }).(pulumi.IntPtrOutput)
}

// Value ID.
func (o RuleMetadataOutput) Valueid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleMetadata) *int { return v.Valueid }).(pulumi.IntPtrOutput)
}

type RuleMetadataArrayOutput struct{ *pulumi.OutputState }

func (RuleMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleMetadata)(nil)).Elem()
}

func (o RuleMetadataArrayOutput) ToRuleMetadataArrayOutput() RuleMetadataArrayOutput {
	return o
}

func (o RuleMetadataArrayOutput) ToRuleMetadataArrayOutputWithContext(ctx context.Context) RuleMetadataArrayOutput {
	return o
}

func (o RuleMetadataArrayOutput) Index(i pulumi.IntInput) RuleMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleMetadata {
		return vs[0].([]RuleMetadata)[vs[1].(int)]
	}).(RuleMetadataOutput)
}

type SensorEntry struct {
	// Action taken with traffic in which signatures are detected. Valid values: `pass`, `block`, `reset`, `default`.
	Action *string `pulumi:"action"`
	// Applications to be protected. set application ? lists available applications. all includes all applications. other includes all unlisted applications.
	Application *string `pulumi:"application"`
	// List of CVE IDs of the signatures to add to the sensor The structure of `cve` block is documented below.
	Cves []SensorEntryCfe `pulumi:"cves"`
	// Signature default action filter. Valid values: `all`, `pass`, `block`.
	DefaultAction *string `pulumi:"defaultAction"`
	// Signature default status filter. Valid values: `all`, `enable`, `disable`.
	DefaultStatus *string `pulumi:"defaultStatus"`
	// Traffic from selected source or destination IP addresses is exempt from this signature. The structure of `exemptIp` block is documented below.
	ExemptIps []SensorEntryExemptIp `pulumi:"exemptIps"`
	// Rule ID in IPS database (0 - 4294967295).
	Id *int `pulumi:"id"`
	// Filter by signature last modified date. Formats: before <date>, after <date>, between <start-date> <end-date>.
	LastModified *string `pulumi:"lastModified"`
	// Protect client or server traffic.
	Location *string `pulumi:"location"`
	// Enable/disable logging of signatures included in filter. Valid values: `disable`, `enable`.
	Log *string `pulumi:"log"`
	// Enable/disable logging of attack context: URL buffer, header buffer, body buffer, packet buffer. Valid values: `disable`, `enable`.
	LogAttackContext *string `pulumi:"logAttackContext"`
	// Enable/disable packet logging. Enable to save the packet that triggers the filter. You can download the packets in pcap format for diagnostic use. Valid values: `disable`, `enable`.
	LogPacket *string `pulumi:"logPacket"`
	// Operating systems to be protected.  all includes all operating systems. other includes all unlisted operating systems.
	Os *string `pulumi:"os"`
	// Protocols to be examined. set protocol ? lists available protocols. all includes all protocols. other includes all unlisted protocols.
	Protocol *string `pulumi:"protocol"`
	// Quarantine method. Valid values: `none`, `attacker`.
	Quarantine *string `pulumi:"quarantine"`
	// Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
	QuarantineExpiry *string `pulumi:"quarantineExpiry"`
	// Enable/disable quarantine logging. Valid values: `disable`, `enable`.
	QuarantineLog *string `pulumi:"quarantineLog"`
	// Count of the rate.
	RateCount *int `pulumi:"rateCount"`
	// Duration (sec) of the rate.
	RateDuration *int `pulumi:"rateDuration"`
	// Rate limit mode. Valid values: `periodical`, `continuous`.
	RateMode *string `pulumi:"rateMode"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
	RateTrack *string `pulumi:"rateTrack"`
	// Identifies the predefined or custom IPS signatures to add to the sensor. The structure of `rule` block is documented below.
	Rules []SensorEntryRule `pulumi:"rules"`
	// Relative severity of the signature, from info to critical. Log messages generated by the signature include the severity.
	Severity *string `pulumi:"severity"`
	// Status of the signatures included in filter. default enables the filter and only use filters with default status of enable. Filters with default status of disable will not be used. Valid values: `disable`, `enable`, `default`.
	Status *string `pulumi:"status"`
	// List of signature vulnerability types to filter by. The structure of `vulnType` block is documented below.
	VulnTypes []SensorEntryVulnType `pulumi:"vulnTypes"`
}

// SensorEntryInput is an input type that accepts SensorEntryArgs and SensorEntryOutput values.
// You can construct a concrete instance of `SensorEntryInput` via:
//
//	SensorEntryArgs{...}
type SensorEntryInput interface {
	pulumi.Input

	ToSensorEntryOutput() SensorEntryOutput
	ToSensorEntryOutputWithContext(context.Context) SensorEntryOutput
}

type SensorEntryArgs struct {
	// Action taken with traffic in which signatures are detected. Valid values: `pass`, `block`, `reset`, `default`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Applications to be protected. set application ? lists available applications. all includes all applications. other includes all unlisted applications.
	Application pulumi.StringPtrInput `pulumi:"application"`
	// List of CVE IDs of the signatures to add to the sensor The structure of `cve` block is documented below.
	Cves SensorEntryCfeArrayInput `pulumi:"cves"`
	// Signature default action filter. Valid values: `all`, `pass`, `block`.
	DefaultAction pulumi.StringPtrInput `pulumi:"defaultAction"`
	// Signature default status filter. Valid values: `all`, `enable`, `disable`.
	DefaultStatus pulumi.StringPtrInput `pulumi:"defaultStatus"`
	// Traffic from selected source or destination IP addresses is exempt from this signature. The structure of `exemptIp` block is documented below.
	ExemptIps SensorEntryExemptIpArrayInput `pulumi:"exemptIps"`
	// Rule ID in IPS database (0 - 4294967295).
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Filter by signature last modified date. Formats: before <date>, after <date>, between <start-date> <end-date>.
	LastModified pulumi.StringPtrInput `pulumi:"lastModified"`
	// Protect client or server traffic.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Enable/disable logging of signatures included in filter. Valid values: `disable`, `enable`.
	Log pulumi.StringPtrInput `pulumi:"log"`
	// Enable/disable logging of attack context: URL buffer, header buffer, body buffer, packet buffer. Valid values: `disable`, `enable`.
	LogAttackContext pulumi.StringPtrInput `pulumi:"logAttackContext"`
	// Enable/disable packet logging. Enable to save the packet that triggers the filter. You can download the packets in pcap format for diagnostic use. Valid values: `disable`, `enable`.
	LogPacket pulumi.StringPtrInput `pulumi:"logPacket"`
	// Operating systems to be protected.  all includes all operating systems. other includes all unlisted operating systems.
	Os pulumi.StringPtrInput `pulumi:"os"`
	// Protocols to be examined. set protocol ? lists available protocols. all includes all protocols. other includes all unlisted protocols.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Quarantine method. Valid values: `none`, `attacker`.
	Quarantine pulumi.StringPtrInput `pulumi:"quarantine"`
	// Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
	QuarantineExpiry pulumi.StringPtrInput `pulumi:"quarantineExpiry"`
	// Enable/disable quarantine logging. Valid values: `disable`, `enable`.
	QuarantineLog pulumi.StringPtrInput `pulumi:"quarantineLog"`
	// Count of the rate.
	RateCount pulumi.IntPtrInput `pulumi:"rateCount"`
	// Duration (sec) of the rate.
	RateDuration pulumi.IntPtrInput `pulumi:"rateDuration"`
	// Rate limit mode. Valid values: `periodical`, `continuous`.
	RateMode pulumi.StringPtrInput `pulumi:"rateMode"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
	RateTrack pulumi.StringPtrInput `pulumi:"rateTrack"`
	// Identifies the predefined or custom IPS signatures to add to the sensor. The structure of `rule` block is documented below.
	Rules SensorEntryRuleArrayInput `pulumi:"rules"`
	// Relative severity of the signature, from info to critical. Log messages generated by the signature include the severity.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Status of the signatures included in filter. default enables the filter and only use filters with default status of enable. Filters with default status of disable will not be used. Valid values: `disable`, `enable`, `default`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// List of signature vulnerability types to filter by. The structure of `vulnType` block is documented below.
	VulnTypes SensorEntryVulnTypeArrayInput `pulumi:"vulnTypes"`
}

func (SensorEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorEntry)(nil)).Elem()
}

func (i SensorEntryArgs) ToSensorEntryOutput() SensorEntryOutput {
	return i.ToSensorEntryOutputWithContext(context.Background())
}

func (i SensorEntryArgs) ToSensorEntryOutputWithContext(ctx context.Context) SensorEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorEntryOutput)
}

// SensorEntryArrayInput is an input type that accepts SensorEntryArray and SensorEntryArrayOutput values.
// You can construct a concrete instance of `SensorEntryArrayInput` via:
//
//	SensorEntryArray{ SensorEntryArgs{...} }
type SensorEntryArrayInput interface {
	pulumi.Input

	ToSensorEntryArrayOutput() SensorEntryArrayOutput
	ToSensorEntryArrayOutputWithContext(context.Context) SensorEntryArrayOutput
}

type SensorEntryArray []SensorEntryInput

func (SensorEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorEntry)(nil)).Elem()
}

func (i SensorEntryArray) ToSensorEntryArrayOutput() SensorEntryArrayOutput {
	return i.ToSensorEntryArrayOutputWithContext(context.Background())
}

func (i SensorEntryArray) ToSensorEntryArrayOutputWithContext(ctx context.Context) SensorEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorEntryArrayOutput)
}

type SensorEntryOutput struct{ *pulumi.OutputState }

func (SensorEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorEntry)(nil)).Elem()
}

func (o SensorEntryOutput) ToSensorEntryOutput() SensorEntryOutput {
	return o
}

func (o SensorEntryOutput) ToSensorEntryOutputWithContext(ctx context.Context) SensorEntryOutput {
	return o
}

// Action taken with traffic in which signatures are detected. Valid values: `pass`, `block`, `reset`, `default`.
func (o SensorEntryOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Applications to be protected. set application ? lists available applications. all includes all applications. other includes all unlisted applications.
func (o SensorEntryOutput) Application() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.Application }).(pulumi.StringPtrOutput)
}

// List of CVE IDs of the signatures to add to the sensor The structure of `cve` block is documented below.
func (o SensorEntryOutput) Cves() SensorEntryCfeArrayOutput {
	return o.ApplyT(func(v SensorEntry) []SensorEntryCfe { return v.Cves }).(SensorEntryCfeArrayOutput)
}

// Signature default action filter. Valid values: `all`, `pass`, `block`.
func (o SensorEntryOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.DefaultAction }).(pulumi.StringPtrOutput)
}

// Signature default status filter. Valid values: `all`, `enable`, `disable`.
func (o SensorEntryOutput) DefaultStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.DefaultStatus }).(pulumi.StringPtrOutput)
}

// Traffic from selected source or destination IP addresses is exempt from this signature. The structure of `exemptIp` block is documented below.
func (o SensorEntryOutput) ExemptIps() SensorEntryExemptIpArrayOutput {
	return o.ApplyT(func(v SensorEntry) []SensorEntryExemptIp { return v.ExemptIps }).(SensorEntryExemptIpArrayOutput)
}

// Rule ID in IPS database (0 - 4294967295).
func (o SensorEntryOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SensorEntry) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Filter by signature last modified date. Formats: before <date>, after <date>, between <start-date> <end-date>.
func (o SensorEntryOutput) LastModified() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.LastModified }).(pulumi.StringPtrOutput)
}

// Protect client or server traffic.
func (o SensorEntryOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Enable/disable logging of signatures included in filter. Valid values: `disable`, `enable`.
func (o SensorEntryOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.Log }).(pulumi.StringPtrOutput)
}

// Enable/disable logging of attack context: URL buffer, header buffer, body buffer, packet buffer. Valid values: `disable`, `enable`.
func (o SensorEntryOutput) LogAttackContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.LogAttackContext }).(pulumi.StringPtrOutput)
}

// Enable/disable packet logging. Enable to save the packet that triggers the filter. You can download the packets in pcap format for diagnostic use. Valid values: `disable`, `enable`.
func (o SensorEntryOutput) LogPacket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.LogPacket }).(pulumi.StringPtrOutput)
}

// Operating systems to be protected.  all includes all operating systems. other includes all unlisted operating systems.
func (o SensorEntryOutput) Os() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.Os }).(pulumi.StringPtrOutput)
}

// Protocols to be examined. set protocol ? lists available protocols. all includes all protocols. other includes all unlisted protocols.
func (o SensorEntryOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Quarantine method. Valid values: `none`, `attacker`.
func (o SensorEntryOutput) Quarantine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.Quarantine }).(pulumi.StringPtrOutput)
}

// Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
func (o SensorEntryOutput) QuarantineExpiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.QuarantineExpiry }).(pulumi.StringPtrOutput)
}

// Enable/disable quarantine logging. Valid values: `disable`, `enable`.
func (o SensorEntryOutput) QuarantineLog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.QuarantineLog }).(pulumi.StringPtrOutput)
}

// Count of the rate.
func (o SensorEntryOutput) RateCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SensorEntry) *int { return v.RateCount }).(pulumi.IntPtrOutput)
}

// Duration (sec) of the rate.
func (o SensorEntryOutput) RateDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SensorEntry) *int { return v.RateDuration }).(pulumi.IntPtrOutput)
}

// Rate limit mode. Valid values: `periodical`, `continuous`.
func (o SensorEntryOutput) RateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.RateMode }).(pulumi.StringPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
func (o SensorEntryOutput) RateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.RateTrack }).(pulumi.StringPtrOutput)
}

// Identifies the predefined or custom IPS signatures to add to the sensor. The structure of `rule` block is documented below.
func (o SensorEntryOutput) Rules() SensorEntryRuleArrayOutput {
	return o.ApplyT(func(v SensorEntry) []SensorEntryRule { return v.Rules }).(SensorEntryRuleArrayOutput)
}

// Relative severity of the signature, from info to critical. Log messages generated by the signature include the severity.
func (o SensorEntryOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Status of the signatures included in filter. default enables the filter and only use filters with default status of enable. Filters with default status of disable will not be used. Valid values: `disable`, `enable`, `default`.
func (o SensorEntryOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// List of signature vulnerability types to filter by. The structure of `vulnType` block is documented below.
func (o SensorEntryOutput) VulnTypes() SensorEntryVulnTypeArrayOutput {
	return o.ApplyT(func(v SensorEntry) []SensorEntryVulnType { return v.VulnTypes }).(SensorEntryVulnTypeArrayOutput)
}

type SensorEntryArrayOutput struct{ *pulumi.OutputState }

func (SensorEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorEntry)(nil)).Elem()
}

func (o SensorEntryArrayOutput) ToSensorEntryArrayOutput() SensorEntryArrayOutput {
	return o
}

func (o SensorEntryArrayOutput) ToSensorEntryArrayOutputWithContext(ctx context.Context) SensorEntryArrayOutput {
	return o
}

func (o SensorEntryArrayOutput) Index(i pulumi.IntInput) SensorEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SensorEntry {
		return vs[0].([]SensorEntry)[vs[1].(int)]
	}).(SensorEntryOutput)
}

type SensorEntryCfe struct {
	// CVE IDs or CVE wildcards.
	CveEntry *string `pulumi:"cveEntry"`
}

// SensorEntryCfeInput is an input type that accepts SensorEntryCfeArgs and SensorEntryCfeOutput values.
// You can construct a concrete instance of `SensorEntryCfeInput` via:
//
//	SensorEntryCfeArgs{...}
type SensorEntryCfeInput interface {
	pulumi.Input

	ToSensorEntryCfeOutput() SensorEntryCfeOutput
	ToSensorEntryCfeOutputWithContext(context.Context) SensorEntryCfeOutput
}

type SensorEntryCfeArgs struct {
	// CVE IDs or CVE wildcards.
	CveEntry pulumi.StringPtrInput `pulumi:"cveEntry"`
}

func (SensorEntryCfeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorEntryCfe)(nil)).Elem()
}

func (i SensorEntryCfeArgs) ToSensorEntryCfeOutput() SensorEntryCfeOutput {
	return i.ToSensorEntryCfeOutputWithContext(context.Background())
}

func (i SensorEntryCfeArgs) ToSensorEntryCfeOutputWithContext(ctx context.Context) SensorEntryCfeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorEntryCfeOutput)
}

// SensorEntryCfeArrayInput is an input type that accepts SensorEntryCfeArray and SensorEntryCfeArrayOutput values.
// You can construct a concrete instance of `SensorEntryCfeArrayInput` via:
//
//	SensorEntryCfeArray{ SensorEntryCfeArgs{...} }
type SensorEntryCfeArrayInput interface {
	pulumi.Input

	ToSensorEntryCfeArrayOutput() SensorEntryCfeArrayOutput
	ToSensorEntryCfeArrayOutputWithContext(context.Context) SensorEntryCfeArrayOutput
}

type SensorEntryCfeArray []SensorEntryCfeInput

func (SensorEntryCfeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorEntryCfe)(nil)).Elem()
}

func (i SensorEntryCfeArray) ToSensorEntryCfeArrayOutput() SensorEntryCfeArrayOutput {
	return i.ToSensorEntryCfeArrayOutputWithContext(context.Background())
}

func (i SensorEntryCfeArray) ToSensorEntryCfeArrayOutputWithContext(ctx context.Context) SensorEntryCfeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorEntryCfeArrayOutput)
}

type SensorEntryCfeOutput struct{ *pulumi.OutputState }

func (SensorEntryCfeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorEntryCfe)(nil)).Elem()
}

func (o SensorEntryCfeOutput) ToSensorEntryCfeOutput() SensorEntryCfeOutput {
	return o
}

func (o SensorEntryCfeOutput) ToSensorEntryCfeOutputWithContext(ctx context.Context) SensorEntryCfeOutput {
	return o
}

// CVE IDs or CVE wildcards.
func (o SensorEntryCfeOutput) CveEntry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntryCfe) *string { return v.CveEntry }).(pulumi.StringPtrOutput)
}

type SensorEntryCfeArrayOutput struct{ *pulumi.OutputState }

func (SensorEntryCfeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorEntryCfe)(nil)).Elem()
}

func (o SensorEntryCfeArrayOutput) ToSensorEntryCfeArrayOutput() SensorEntryCfeArrayOutput {
	return o
}

func (o SensorEntryCfeArrayOutput) ToSensorEntryCfeArrayOutputWithContext(ctx context.Context) SensorEntryCfeArrayOutput {
	return o
}

func (o SensorEntryCfeArrayOutput) Index(i pulumi.IntInput) SensorEntryCfeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SensorEntryCfe {
		return vs[0].([]SensorEntryCfe)[vs[1].(int)]
	}).(SensorEntryCfeOutput)
}

type SensorEntryExemptIp struct {
	// Destination IP address and netmask.
	DstIp *string `pulumi:"dstIp"`
	// Exempt IP ID.
	Id *int `pulumi:"id"`
	// Source IP address and netmask.
	SrcIp *string `pulumi:"srcIp"`
}

// SensorEntryExemptIpInput is an input type that accepts SensorEntryExemptIpArgs and SensorEntryExemptIpOutput values.
// You can construct a concrete instance of `SensorEntryExemptIpInput` via:
//
//	SensorEntryExemptIpArgs{...}
type SensorEntryExemptIpInput interface {
	pulumi.Input

	ToSensorEntryExemptIpOutput() SensorEntryExemptIpOutput
	ToSensorEntryExemptIpOutputWithContext(context.Context) SensorEntryExemptIpOutput
}

type SensorEntryExemptIpArgs struct {
	// Destination IP address and netmask.
	DstIp pulumi.StringPtrInput `pulumi:"dstIp"`
	// Exempt IP ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Source IP address and netmask.
	SrcIp pulumi.StringPtrInput `pulumi:"srcIp"`
}

func (SensorEntryExemptIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorEntryExemptIp)(nil)).Elem()
}

func (i SensorEntryExemptIpArgs) ToSensorEntryExemptIpOutput() SensorEntryExemptIpOutput {
	return i.ToSensorEntryExemptIpOutputWithContext(context.Background())
}

func (i SensorEntryExemptIpArgs) ToSensorEntryExemptIpOutputWithContext(ctx context.Context) SensorEntryExemptIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorEntryExemptIpOutput)
}

// SensorEntryExemptIpArrayInput is an input type that accepts SensorEntryExemptIpArray and SensorEntryExemptIpArrayOutput values.
// You can construct a concrete instance of `SensorEntryExemptIpArrayInput` via:
//
//	SensorEntryExemptIpArray{ SensorEntryExemptIpArgs{...} }
type SensorEntryExemptIpArrayInput interface {
	pulumi.Input

	ToSensorEntryExemptIpArrayOutput() SensorEntryExemptIpArrayOutput
	ToSensorEntryExemptIpArrayOutputWithContext(context.Context) SensorEntryExemptIpArrayOutput
}

type SensorEntryExemptIpArray []SensorEntryExemptIpInput

func (SensorEntryExemptIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorEntryExemptIp)(nil)).Elem()
}

func (i SensorEntryExemptIpArray) ToSensorEntryExemptIpArrayOutput() SensorEntryExemptIpArrayOutput {
	return i.ToSensorEntryExemptIpArrayOutputWithContext(context.Background())
}

func (i SensorEntryExemptIpArray) ToSensorEntryExemptIpArrayOutputWithContext(ctx context.Context) SensorEntryExemptIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorEntryExemptIpArrayOutput)
}

type SensorEntryExemptIpOutput struct{ *pulumi.OutputState }

func (SensorEntryExemptIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorEntryExemptIp)(nil)).Elem()
}

func (o SensorEntryExemptIpOutput) ToSensorEntryExemptIpOutput() SensorEntryExemptIpOutput {
	return o
}

func (o SensorEntryExemptIpOutput) ToSensorEntryExemptIpOutputWithContext(ctx context.Context) SensorEntryExemptIpOutput {
	return o
}

// Destination IP address and netmask.
func (o SensorEntryExemptIpOutput) DstIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntryExemptIp) *string { return v.DstIp }).(pulumi.StringPtrOutput)
}

// Exempt IP ID.
func (o SensorEntryExemptIpOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SensorEntryExemptIp) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Source IP address and netmask.
func (o SensorEntryExemptIpOutput) SrcIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntryExemptIp) *string { return v.SrcIp }).(pulumi.StringPtrOutput)
}

type SensorEntryExemptIpArrayOutput struct{ *pulumi.OutputState }

func (SensorEntryExemptIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorEntryExemptIp)(nil)).Elem()
}

func (o SensorEntryExemptIpArrayOutput) ToSensorEntryExemptIpArrayOutput() SensorEntryExemptIpArrayOutput {
	return o
}

func (o SensorEntryExemptIpArrayOutput) ToSensorEntryExemptIpArrayOutputWithContext(ctx context.Context) SensorEntryExemptIpArrayOutput {
	return o
}

func (o SensorEntryExemptIpArrayOutput) Index(i pulumi.IntInput) SensorEntryExemptIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SensorEntryExemptIp {
		return vs[0].([]SensorEntryExemptIp)[vs[1].(int)]
	}).(SensorEntryExemptIpOutput)
}

type SensorEntryRule struct {
	// Rule IPS.
	Id *int `pulumi:"id"`
}

// SensorEntryRuleInput is an input type that accepts SensorEntryRuleArgs and SensorEntryRuleOutput values.
// You can construct a concrete instance of `SensorEntryRuleInput` via:
//
//	SensorEntryRuleArgs{...}
type SensorEntryRuleInput interface {
	pulumi.Input

	ToSensorEntryRuleOutput() SensorEntryRuleOutput
	ToSensorEntryRuleOutputWithContext(context.Context) SensorEntryRuleOutput
}

type SensorEntryRuleArgs struct {
	// Rule IPS.
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (SensorEntryRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorEntryRule)(nil)).Elem()
}

func (i SensorEntryRuleArgs) ToSensorEntryRuleOutput() SensorEntryRuleOutput {
	return i.ToSensorEntryRuleOutputWithContext(context.Background())
}

func (i SensorEntryRuleArgs) ToSensorEntryRuleOutputWithContext(ctx context.Context) SensorEntryRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorEntryRuleOutput)
}

// SensorEntryRuleArrayInput is an input type that accepts SensorEntryRuleArray and SensorEntryRuleArrayOutput values.
// You can construct a concrete instance of `SensorEntryRuleArrayInput` via:
//
//	SensorEntryRuleArray{ SensorEntryRuleArgs{...} }
type SensorEntryRuleArrayInput interface {
	pulumi.Input

	ToSensorEntryRuleArrayOutput() SensorEntryRuleArrayOutput
	ToSensorEntryRuleArrayOutputWithContext(context.Context) SensorEntryRuleArrayOutput
}

type SensorEntryRuleArray []SensorEntryRuleInput

func (SensorEntryRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorEntryRule)(nil)).Elem()
}

func (i SensorEntryRuleArray) ToSensorEntryRuleArrayOutput() SensorEntryRuleArrayOutput {
	return i.ToSensorEntryRuleArrayOutputWithContext(context.Background())
}

func (i SensorEntryRuleArray) ToSensorEntryRuleArrayOutputWithContext(ctx context.Context) SensorEntryRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorEntryRuleArrayOutput)
}

type SensorEntryRuleOutput struct{ *pulumi.OutputState }

func (SensorEntryRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorEntryRule)(nil)).Elem()
}

func (o SensorEntryRuleOutput) ToSensorEntryRuleOutput() SensorEntryRuleOutput {
	return o
}

func (o SensorEntryRuleOutput) ToSensorEntryRuleOutputWithContext(ctx context.Context) SensorEntryRuleOutput {
	return o
}

// Rule IPS.
func (o SensorEntryRuleOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SensorEntryRule) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type SensorEntryRuleArrayOutput struct{ *pulumi.OutputState }

func (SensorEntryRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorEntryRule)(nil)).Elem()
}

func (o SensorEntryRuleArrayOutput) ToSensorEntryRuleArrayOutput() SensorEntryRuleArrayOutput {
	return o
}

func (o SensorEntryRuleArrayOutput) ToSensorEntryRuleArrayOutputWithContext(ctx context.Context) SensorEntryRuleArrayOutput {
	return o
}

func (o SensorEntryRuleArrayOutput) Index(i pulumi.IntInput) SensorEntryRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SensorEntryRule {
		return vs[0].([]SensorEntryRule)[vs[1].(int)]
	}).(SensorEntryRuleOutput)
}

type SensorEntryVulnType struct {
	// Vulnerability type ID.
	Id *int `pulumi:"id"`
}

// SensorEntryVulnTypeInput is an input type that accepts SensorEntryVulnTypeArgs and SensorEntryVulnTypeOutput values.
// You can construct a concrete instance of `SensorEntryVulnTypeInput` via:
//
//	SensorEntryVulnTypeArgs{...}
type SensorEntryVulnTypeInput interface {
	pulumi.Input

	ToSensorEntryVulnTypeOutput() SensorEntryVulnTypeOutput
	ToSensorEntryVulnTypeOutputWithContext(context.Context) SensorEntryVulnTypeOutput
}

type SensorEntryVulnTypeArgs struct {
	// Vulnerability type ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (SensorEntryVulnTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorEntryVulnType)(nil)).Elem()
}

func (i SensorEntryVulnTypeArgs) ToSensorEntryVulnTypeOutput() SensorEntryVulnTypeOutput {
	return i.ToSensorEntryVulnTypeOutputWithContext(context.Background())
}

func (i SensorEntryVulnTypeArgs) ToSensorEntryVulnTypeOutputWithContext(ctx context.Context) SensorEntryVulnTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorEntryVulnTypeOutput)
}

// SensorEntryVulnTypeArrayInput is an input type that accepts SensorEntryVulnTypeArray and SensorEntryVulnTypeArrayOutput values.
// You can construct a concrete instance of `SensorEntryVulnTypeArrayInput` via:
//
//	SensorEntryVulnTypeArray{ SensorEntryVulnTypeArgs{...} }
type SensorEntryVulnTypeArrayInput interface {
	pulumi.Input

	ToSensorEntryVulnTypeArrayOutput() SensorEntryVulnTypeArrayOutput
	ToSensorEntryVulnTypeArrayOutputWithContext(context.Context) SensorEntryVulnTypeArrayOutput
}

type SensorEntryVulnTypeArray []SensorEntryVulnTypeInput

func (SensorEntryVulnTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorEntryVulnType)(nil)).Elem()
}

func (i SensorEntryVulnTypeArray) ToSensorEntryVulnTypeArrayOutput() SensorEntryVulnTypeArrayOutput {
	return i.ToSensorEntryVulnTypeArrayOutputWithContext(context.Background())
}

func (i SensorEntryVulnTypeArray) ToSensorEntryVulnTypeArrayOutputWithContext(ctx context.Context) SensorEntryVulnTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorEntryVulnTypeArrayOutput)
}

type SensorEntryVulnTypeOutput struct{ *pulumi.OutputState }

func (SensorEntryVulnTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorEntryVulnType)(nil)).Elem()
}

func (o SensorEntryVulnTypeOutput) ToSensorEntryVulnTypeOutput() SensorEntryVulnTypeOutput {
	return o
}

func (o SensorEntryVulnTypeOutput) ToSensorEntryVulnTypeOutputWithContext(ctx context.Context) SensorEntryVulnTypeOutput {
	return o
}

// Vulnerability type ID.
func (o SensorEntryVulnTypeOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SensorEntryVulnType) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type SensorEntryVulnTypeArrayOutput struct{ *pulumi.OutputState }

func (SensorEntryVulnTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorEntryVulnType)(nil)).Elem()
}

func (o SensorEntryVulnTypeArrayOutput) ToSensorEntryVulnTypeArrayOutput() SensorEntryVulnTypeArrayOutput {
	return o
}

func (o SensorEntryVulnTypeArrayOutput) ToSensorEntryVulnTypeArrayOutputWithContext(ctx context.Context) SensorEntryVulnTypeArrayOutput {
	return o
}

func (o SensorEntryVulnTypeArrayOutput) Index(i pulumi.IntInput) SensorEntryVulnTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SensorEntryVulnType {
		return vs[0].([]SensorEntryVulnType)[vs[1].(int)]
	}).(SensorEntryVulnTypeOutput)
}

type SensorFilter struct {
	// Action of selected rules. Valid values: `pass`, `block`, `reset`, `default`.
	Action *string `pulumi:"action"`
	// Vulnerable application filter.
	Application *string `pulumi:"application"`
	// Vulnerability location filter.
	Location *string `pulumi:"location"`
	// Enable/disable logging of selected rules. Valid values: `disable`, `enable`.
	Log *string `pulumi:"log"`
	// Enable/disable packet logging of selected rules. Valid values: `disable`, `enable`.
	LogPacket *string `pulumi:"logPacket"`
	// Filter name.
	Name *string `pulumi:"name"`
	// Vulnerable OS filter.
	Os *string `pulumi:"os"`
	// Vulnerable protocol filter.
	Protocol *string `pulumi:"protocol"`
	// Quarantine IP or interface. Valid values: `none`, `attacker`.
	Quarantine *string `pulumi:"quarantine"`
	// Duration of quarantine in minute.
	QuarantineExpiry *int `pulumi:"quarantineExpiry"`
	// Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
	QuarantineLog *string `pulumi:"quarantineLog"`
	// Vulnerability severity filter.
	Severity *string `pulumi:"severity"`
	// Selected rules status. Valid values: `disable`, `enable`, `default`.
	Status *string `pulumi:"status"`
}

// SensorFilterInput is an input type that accepts SensorFilterArgs and SensorFilterOutput values.
// You can construct a concrete instance of `SensorFilterInput` via:
//
//	SensorFilterArgs{...}
type SensorFilterInput interface {
	pulumi.Input

	ToSensorFilterOutput() SensorFilterOutput
	ToSensorFilterOutputWithContext(context.Context) SensorFilterOutput
}

type SensorFilterArgs struct {
	// Action of selected rules. Valid values: `pass`, `block`, `reset`, `default`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Vulnerable application filter.
	Application pulumi.StringPtrInput `pulumi:"application"`
	// Vulnerability location filter.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Enable/disable logging of selected rules. Valid values: `disable`, `enable`.
	Log pulumi.StringPtrInput `pulumi:"log"`
	// Enable/disable packet logging of selected rules. Valid values: `disable`, `enable`.
	LogPacket pulumi.StringPtrInput `pulumi:"logPacket"`
	// Filter name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Vulnerable OS filter.
	Os pulumi.StringPtrInput `pulumi:"os"`
	// Vulnerable protocol filter.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Quarantine IP or interface. Valid values: `none`, `attacker`.
	Quarantine pulumi.StringPtrInput `pulumi:"quarantine"`
	// Duration of quarantine in minute.
	QuarantineExpiry pulumi.IntPtrInput `pulumi:"quarantineExpiry"`
	// Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
	QuarantineLog pulumi.StringPtrInput `pulumi:"quarantineLog"`
	// Vulnerability severity filter.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Selected rules status. Valid values: `disable`, `enable`, `default`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (SensorFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorFilter)(nil)).Elem()
}

func (i SensorFilterArgs) ToSensorFilterOutput() SensorFilterOutput {
	return i.ToSensorFilterOutputWithContext(context.Background())
}

func (i SensorFilterArgs) ToSensorFilterOutputWithContext(ctx context.Context) SensorFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorFilterOutput)
}

// SensorFilterArrayInput is an input type that accepts SensorFilterArray and SensorFilterArrayOutput values.
// You can construct a concrete instance of `SensorFilterArrayInput` via:
//
//	SensorFilterArray{ SensorFilterArgs{...} }
type SensorFilterArrayInput interface {
	pulumi.Input

	ToSensorFilterArrayOutput() SensorFilterArrayOutput
	ToSensorFilterArrayOutputWithContext(context.Context) SensorFilterArrayOutput
}

type SensorFilterArray []SensorFilterInput

func (SensorFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorFilter)(nil)).Elem()
}

func (i SensorFilterArray) ToSensorFilterArrayOutput() SensorFilterArrayOutput {
	return i.ToSensorFilterArrayOutputWithContext(context.Background())
}

func (i SensorFilterArray) ToSensorFilterArrayOutputWithContext(ctx context.Context) SensorFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorFilterArrayOutput)
}

type SensorFilterOutput struct{ *pulumi.OutputState }

func (SensorFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorFilter)(nil)).Elem()
}

func (o SensorFilterOutput) ToSensorFilterOutput() SensorFilterOutput {
	return o
}

func (o SensorFilterOutput) ToSensorFilterOutputWithContext(ctx context.Context) SensorFilterOutput {
	return o
}

// Action of selected rules. Valid values: `pass`, `block`, `reset`, `default`.
func (o SensorFilterOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Vulnerable application filter.
func (o SensorFilterOutput) Application() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Application }).(pulumi.StringPtrOutput)
}

// Vulnerability location filter.
func (o SensorFilterOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Enable/disable logging of selected rules. Valid values: `disable`, `enable`.
func (o SensorFilterOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Log }).(pulumi.StringPtrOutput)
}

// Enable/disable packet logging of selected rules. Valid values: `disable`, `enable`.
func (o SensorFilterOutput) LogPacket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.LogPacket }).(pulumi.StringPtrOutput)
}

// Filter name.
func (o SensorFilterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Vulnerable OS filter.
func (o SensorFilterOutput) Os() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Os }).(pulumi.StringPtrOutput)
}

// Vulnerable protocol filter.
func (o SensorFilterOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Quarantine IP or interface. Valid values: `none`, `attacker`.
func (o SensorFilterOutput) Quarantine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Quarantine }).(pulumi.StringPtrOutput)
}

// Duration of quarantine in minute.
func (o SensorFilterOutput) QuarantineExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SensorFilter) *int { return v.QuarantineExpiry }).(pulumi.IntPtrOutput)
}

// Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
func (o SensorFilterOutput) QuarantineLog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.QuarantineLog }).(pulumi.StringPtrOutput)
}

// Vulnerability severity filter.
func (o SensorFilterOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Selected rules status. Valid values: `disable`, `enable`, `default`.
func (o SensorFilterOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SensorFilterArrayOutput struct{ *pulumi.OutputState }

func (SensorFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorFilter)(nil)).Elem()
}

func (o SensorFilterArrayOutput) ToSensorFilterArrayOutput() SensorFilterArrayOutput {
	return o
}

func (o SensorFilterArrayOutput) ToSensorFilterArrayOutputWithContext(ctx context.Context) SensorFilterArrayOutput {
	return o
}

func (o SensorFilterArrayOutput) Index(i pulumi.IntInput) SensorFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SensorFilter {
		return vs[0].([]SensorFilter)[vs[1].(int)]
	}).(SensorFilterOutput)
}

type SensorOverride struct {
	// Action of override rule. Valid values: `pass`, `block`, `reset`.
	Action *string `pulumi:"action"`
	// Exempted IP. The structure of `exemptIp` block is documented below.
	ExemptIps []SensorOverrideExemptIp `pulumi:"exemptIps"`
	// Enable/disable logging. Valid values: `disable`, `enable`.
	Log *string `pulumi:"log"`
	// Enable/disable packet logging. Valid values: `disable`, `enable`.
	LogPacket *string `pulumi:"logPacket"`
	// Quarantine IP or interface. Valid values: `none`, `attacker`.
	Quarantine *string `pulumi:"quarantine"`
	// Duration of quarantine in minute.
	QuarantineExpiry *int `pulumi:"quarantineExpiry"`
	// Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
	QuarantineLog *string `pulumi:"quarantineLog"`
	// Override rule ID.
	RuleId *int `pulumi:"ruleId"`
	// Enable/disable status of override rule. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
}

// SensorOverrideInput is an input type that accepts SensorOverrideArgs and SensorOverrideOutput values.
// You can construct a concrete instance of `SensorOverrideInput` via:
//
//	SensorOverrideArgs{...}
type SensorOverrideInput interface {
	pulumi.Input

	ToSensorOverrideOutput() SensorOverrideOutput
	ToSensorOverrideOutputWithContext(context.Context) SensorOverrideOutput
}

type SensorOverrideArgs struct {
	// Action of override rule. Valid values: `pass`, `block`, `reset`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Exempted IP. The structure of `exemptIp` block is documented below.
	ExemptIps SensorOverrideExemptIpArrayInput `pulumi:"exemptIps"`
	// Enable/disable logging. Valid values: `disable`, `enable`.
	Log pulumi.StringPtrInput `pulumi:"log"`
	// Enable/disable packet logging. Valid values: `disable`, `enable`.
	LogPacket pulumi.StringPtrInput `pulumi:"logPacket"`
	// Quarantine IP or interface. Valid values: `none`, `attacker`.
	Quarantine pulumi.StringPtrInput `pulumi:"quarantine"`
	// Duration of quarantine in minute.
	QuarantineExpiry pulumi.IntPtrInput `pulumi:"quarantineExpiry"`
	// Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
	QuarantineLog pulumi.StringPtrInput `pulumi:"quarantineLog"`
	// Override rule ID.
	RuleId pulumi.IntPtrInput `pulumi:"ruleId"`
	// Enable/disable status of override rule. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (SensorOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorOverride)(nil)).Elem()
}

func (i SensorOverrideArgs) ToSensorOverrideOutput() SensorOverrideOutput {
	return i.ToSensorOverrideOutputWithContext(context.Background())
}

func (i SensorOverrideArgs) ToSensorOverrideOutputWithContext(ctx context.Context) SensorOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorOverrideOutput)
}

// SensorOverrideArrayInput is an input type that accepts SensorOverrideArray and SensorOverrideArrayOutput values.
// You can construct a concrete instance of `SensorOverrideArrayInput` via:
//
//	SensorOverrideArray{ SensorOverrideArgs{...} }
type SensorOverrideArrayInput interface {
	pulumi.Input

	ToSensorOverrideArrayOutput() SensorOverrideArrayOutput
	ToSensorOverrideArrayOutputWithContext(context.Context) SensorOverrideArrayOutput
}

type SensorOverrideArray []SensorOverrideInput

func (SensorOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorOverride)(nil)).Elem()
}

func (i SensorOverrideArray) ToSensorOverrideArrayOutput() SensorOverrideArrayOutput {
	return i.ToSensorOverrideArrayOutputWithContext(context.Background())
}

func (i SensorOverrideArray) ToSensorOverrideArrayOutputWithContext(ctx context.Context) SensorOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorOverrideArrayOutput)
}

type SensorOverrideOutput struct{ *pulumi.OutputState }

func (SensorOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorOverride)(nil)).Elem()
}

func (o SensorOverrideOutput) ToSensorOverrideOutput() SensorOverrideOutput {
	return o
}

func (o SensorOverrideOutput) ToSensorOverrideOutputWithContext(ctx context.Context) SensorOverrideOutput {
	return o
}

// Action of override rule. Valid values: `pass`, `block`, `reset`.
func (o SensorOverrideOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorOverride) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Exempted IP. The structure of `exemptIp` block is documented below.
func (o SensorOverrideOutput) ExemptIps() SensorOverrideExemptIpArrayOutput {
	return o.ApplyT(func(v SensorOverride) []SensorOverrideExemptIp { return v.ExemptIps }).(SensorOverrideExemptIpArrayOutput)
}

// Enable/disable logging. Valid values: `disable`, `enable`.
func (o SensorOverrideOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorOverride) *string { return v.Log }).(pulumi.StringPtrOutput)
}

// Enable/disable packet logging. Valid values: `disable`, `enable`.
func (o SensorOverrideOutput) LogPacket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorOverride) *string { return v.LogPacket }).(pulumi.StringPtrOutput)
}

// Quarantine IP or interface. Valid values: `none`, `attacker`.
func (o SensorOverrideOutput) Quarantine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorOverride) *string { return v.Quarantine }).(pulumi.StringPtrOutput)
}

// Duration of quarantine in minute.
func (o SensorOverrideOutput) QuarantineExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SensorOverride) *int { return v.QuarantineExpiry }).(pulumi.IntPtrOutput)
}

// Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
func (o SensorOverrideOutput) QuarantineLog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorOverride) *string { return v.QuarantineLog }).(pulumi.StringPtrOutput)
}

// Override rule ID.
func (o SensorOverrideOutput) RuleId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SensorOverride) *int { return v.RuleId }).(pulumi.IntPtrOutput)
}

// Enable/disable status of override rule. Valid values: `disable`, `enable`.
func (o SensorOverrideOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorOverride) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SensorOverrideArrayOutput struct{ *pulumi.OutputState }

func (SensorOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorOverride)(nil)).Elem()
}

func (o SensorOverrideArrayOutput) ToSensorOverrideArrayOutput() SensorOverrideArrayOutput {
	return o
}

func (o SensorOverrideArrayOutput) ToSensorOverrideArrayOutputWithContext(ctx context.Context) SensorOverrideArrayOutput {
	return o
}

func (o SensorOverrideArrayOutput) Index(i pulumi.IntInput) SensorOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SensorOverride {
		return vs[0].([]SensorOverride)[vs[1].(int)]
	}).(SensorOverrideOutput)
}

type SensorOverrideExemptIp struct {
	// Destination IP address and netmask.
	DstIp *string `pulumi:"dstIp"`
	// Exempt IP ID.
	Id *int `pulumi:"id"`
	// Source IP address and netmask.
	SrcIp *string `pulumi:"srcIp"`
}

// SensorOverrideExemptIpInput is an input type that accepts SensorOverrideExemptIpArgs and SensorOverrideExemptIpOutput values.
// You can construct a concrete instance of `SensorOverrideExemptIpInput` via:
//
//	SensorOverrideExemptIpArgs{...}
type SensorOverrideExemptIpInput interface {
	pulumi.Input

	ToSensorOverrideExemptIpOutput() SensorOverrideExemptIpOutput
	ToSensorOverrideExemptIpOutputWithContext(context.Context) SensorOverrideExemptIpOutput
}

type SensorOverrideExemptIpArgs struct {
	// Destination IP address and netmask.
	DstIp pulumi.StringPtrInput `pulumi:"dstIp"`
	// Exempt IP ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Source IP address and netmask.
	SrcIp pulumi.StringPtrInput `pulumi:"srcIp"`
}

func (SensorOverrideExemptIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorOverrideExemptIp)(nil)).Elem()
}

func (i SensorOverrideExemptIpArgs) ToSensorOverrideExemptIpOutput() SensorOverrideExemptIpOutput {
	return i.ToSensorOverrideExemptIpOutputWithContext(context.Background())
}

func (i SensorOverrideExemptIpArgs) ToSensorOverrideExemptIpOutputWithContext(ctx context.Context) SensorOverrideExemptIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorOverrideExemptIpOutput)
}

// SensorOverrideExemptIpArrayInput is an input type that accepts SensorOverrideExemptIpArray and SensorOverrideExemptIpArrayOutput values.
// You can construct a concrete instance of `SensorOverrideExemptIpArrayInput` via:
//
//	SensorOverrideExemptIpArray{ SensorOverrideExemptIpArgs{...} }
type SensorOverrideExemptIpArrayInput interface {
	pulumi.Input

	ToSensorOverrideExemptIpArrayOutput() SensorOverrideExemptIpArrayOutput
	ToSensorOverrideExemptIpArrayOutputWithContext(context.Context) SensorOverrideExemptIpArrayOutput
}

type SensorOverrideExemptIpArray []SensorOverrideExemptIpInput

func (SensorOverrideExemptIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorOverrideExemptIp)(nil)).Elem()
}

func (i SensorOverrideExemptIpArray) ToSensorOverrideExemptIpArrayOutput() SensorOverrideExemptIpArrayOutput {
	return i.ToSensorOverrideExemptIpArrayOutputWithContext(context.Background())
}

func (i SensorOverrideExemptIpArray) ToSensorOverrideExemptIpArrayOutputWithContext(ctx context.Context) SensorOverrideExemptIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorOverrideExemptIpArrayOutput)
}

type SensorOverrideExemptIpOutput struct{ *pulumi.OutputState }

func (SensorOverrideExemptIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorOverrideExemptIp)(nil)).Elem()
}

func (o SensorOverrideExemptIpOutput) ToSensorOverrideExemptIpOutput() SensorOverrideExemptIpOutput {
	return o
}

func (o SensorOverrideExemptIpOutput) ToSensorOverrideExemptIpOutputWithContext(ctx context.Context) SensorOverrideExemptIpOutput {
	return o
}

// Destination IP address and netmask.
func (o SensorOverrideExemptIpOutput) DstIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorOverrideExemptIp) *string { return v.DstIp }).(pulumi.StringPtrOutput)
}

// Exempt IP ID.
func (o SensorOverrideExemptIpOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SensorOverrideExemptIp) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Source IP address and netmask.
func (o SensorOverrideExemptIpOutput) SrcIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorOverrideExemptIp) *string { return v.SrcIp }).(pulumi.StringPtrOutput)
}

type SensorOverrideExemptIpArrayOutput struct{ *pulumi.OutputState }

func (SensorOverrideExemptIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorOverrideExemptIp)(nil)).Elem()
}

func (o SensorOverrideExemptIpArrayOutput) ToSensorOverrideExemptIpArrayOutput() SensorOverrideExemptIpArrayOutput {
	return o
}

func (o SensorOverrideExemptIpArrayOutput) ToSensorOverrideExemptIpArrayOutputWithContext(ctx context.Context) SensorOverrideExemptIpArrayOutput {
	return o
}

func (o SensorOverrideExemptIpArrayOutput) Index(i pulumi.IntInput) SensorOverrideExemptIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SensorOverrideExemptIp {
		return vs[0].([]SensorOverrideExemptIp)[vs[1].(int)]
	}).(SensorOverrideExemptIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DecoderParameterInput)(nil)).Elem(), DecoderParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DecoderParameterArrayInput)(nil)).Elem(), DecoderParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalTlsActiveProbeInput)(nil)).Elem(), GlobalTlsActiveProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalTlsActiveProbePtrInput)(nil)).Elem(), GlobalTlsActiveProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleMetadataInput)(nil)).Elem(), RuleMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleMetadataArrayInput)(nil)).Elem(), RuleMetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorEntryInput)(nil)).Elem(), SensorEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorEntryArrayInput)(nil)).Elem(), SensorEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorEntryCfeInput)(nil)).Elem(), SensorEntryCfeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorEntryCfeArrayInput)(nil)).Elem(), SensorEntryCfeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorEntryExemptIpInput)(nil)).Elem(), SensorEntryExemptIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorEntryExemptIpArrayInput)(nil)).Elem(), SensorEntryExemptIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorEntryRuleInput)(nil)).Elem(), SensorEntryRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorEntryRuleArrayInput)(nil)).Elem(), SensorEntryRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorEntryVulnTypeInput)(nil)).Elem(), SensorEntryVulnTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorEntryVulnTypeArrayInput)(nil)).Elem(), SensorEntryVulnTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorFilterInput)(nil)).Elem(), SensorFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorFilterArrayInput)(nil)).Elem(), SensorFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorOverrideInput)(nil)).Elem(), SensorOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorOverrideArrayInput)(nil)).Elem(), SensorOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorOverrideExemptIpInput)(nil)).Elem(), SensorOverrideExemptIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorOverrideExemptIpArrayInput)(nil)).Elem(), SensorOverrideExemptIpArray{})
	pulumi.RegisterOutputType(DecoderParameterOutput{})
	pulumi.RegisterOutputType(DecoderParameterArrayOutput{})
	pulumi.RegisterOutputType(GlobalTlsActiveProbeOutput{})
	pulumi.RegisterOutputType(GlobalTlsActiveProbePtrOutput{})
	pulumi.RegisterOutputType(RuleMetadataOutput{})
	pulumi.RegisterOutputType(RuleMetadataArrayOutput{})
	pulumi.RegisterOutputType(SensorEntryOutput{})
	pulumi.RegisterOutputType(SensorEntryArrayOutput{})
	pulumi.RegisterOutputType(SensorEntryCfeOutput{})
	pulumi.RegisterOutputType(SensorEntryCfeArrayOutput{})
	pulumi.RegisterOutputType(SensorEntryExemptIpOutput{})
	pulumi.RegisterOutputType(SensorEntryExemptIpArrayOutput{})
	pulumi.RegisterOutputType(SensorEntryRuleOutput{})
	pulumi.RegisterOutputType(SensorEntryRuleArrayOutput{})
	pulumi.RegisterOutputType(SensorEntryVulnTypeOutput{})
	pulumi.RegisterOutputType(SensorEntryVulnTypeArrayOutput{})
	pulumi.RegisterOutputType(SensorFilterOutput{})
	pulumi.RegisterOutputType(SensorFilterArrayOutput{})
	pulumi.RegisterOutputType(SensorOverrideOutput{})
	pulumi.RegisterOutputType(SensorOverrideArrayOutput{})
	pulumi.RegisterOutputType(SensorOverrideExemptIpOutput{})
	pulumi.RegisterOutputType(SensorOverrideExemptIpArrayOutput{})
}

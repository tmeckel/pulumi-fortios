// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CentralsnatmapMove struct {
	pulumi.CustomResourceState

	Comment              pulumi.StringPtrOutput `pulumi:"comment"`
	Move                 pulumi.StringOutput    `pulumi:"move"`
	PolicyidDst          pulumi.IntOutput       `pulumi:"policyidDst"`
	PolicyidSrc          pulumi.IntOutput       `pulumi:"policyidSrc"`
	StatePolicySrcdstPos pulumi.StringPtrOutput `pulumi:"statePolicySrcdstPos"`
	Vdomparam            pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewCentralsnatmapMove registers a new resource with the given unique name, arguments, and options.
func NewCentralsnatmapMove(ctx *pulumi.Context,
	name string, args *CentralsnatmapMoveArgs, opts ...pulumi.ResourceOption) (*CentralsnatmapMove, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Move == nil {
		return nil, errors.New("invalid value for required argument 'Move'")
	}
	if args.PolicyidDst == nil {
		return nil, errors.New("invalid value for required argument 'PolicyidDst'")
	}
	if args.PolicyidSrc == nil {
		return nil, errors.New("invalid value for required argument 'PolicyidSrc'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CentralsnatmapMove
	err := ctx.RegisterResource("fortios:firewall/centralsnatmapMove:CentralsnatmapMove", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCentralsnatmapMove gets an existing CentralsnatmapMove resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCentralsnatmapMove(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CentralsnatmapMoveState, opts ...pulumi.ResourceOption) (*CentralsnatmapMove, error) {
	var resource CentralsnatmapMove
	err := ctx.ReadResource("fortios:firewall/centralsnatmapMove:CentralsnatmapMove", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CentralsnatmapMove resources.
type centralsnatmapMoveState struct {
	Comment              *string `pulumi:"comment"`
	Move                 *string `pulumi:"move"`
	PolicyidDst          *int    `pulumi:"policyidDst"`
	PolicyidSrc          *int    `pulumi:"policyidSrc"`
	StatePolicySrcdstPos *string `pulumi:"statePolicySrcdstPos"`
	Vdomparam            *string `pulumi:"vdomparam"`
}

type CentralsnatmapMoveState struct {
	Comment              pulumi.StringPtrInput
	Move                 pulumi.StringPtrInput
	PolicyidDst          pulumi.IntPtrInput
	PolicyidSrc          pulumi.IntPtrInput
	StatePolicySrcdstPos pulumi.StringPtrInput
	Vdomparam            pulumi.StringPtrInput
}

func (CentralsnatmapMoveState) ElementType() reflect.Type {
	return reflect.TypeOf((*centralsnatmapMoveState)(nil)).Elem()
}

type centralsnatmapMoveArgs struct {
	Comment              *string `pulumi:"comment"`
	Move                 string  `pulumi:"move"`
	PolicyidDst          int     `pulumi:"policyidDst"`
	PolicyidSrc          int     `pulumi:"policyidSrc"`
	StatePolicySrcdstPos *string `pulumi:"statePolicySrcdstPos"`
	Vdomparam            *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a CentralsnatmapMove resource.
type CentralsnatmapMoveArgs struct {
	Comment              pulumi.StringPtrInput
	Move                 pulumi.StringInput
	PolicyidDst          pulumi.IntInput
	PolicyidSrc          pulumi.IntInput
	StatePolicySrcdstPos pulumi.StringPtrInput
	Vdomparam            pulumi.StringPtrInput
}

func (CentralsnatmapMoveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*centralsnatmapMoveArgs)(nil)).Elem()
}

type CentralsnatmapMoveInput interface {
	pulumi.Input

	ToCentralsnatmapMoveOutput() CentralsnatmapMoveOutput
	ToCentralsnatmapMoveOutputWithContext(ctx context.Context) CentralsnatmapMoveOutput
}

func (*CentralsnatmapMove) ElementType() reflect.Type {
	return reflect.TypeOf((**CentralsnatmapMove)(nil)).Elem()
}

func (i *CentralsnatmapMove) ToCentralsnatmapMoveOutput() CentralsnatmapMoveOutput {
	return i.ToCentralsnatmapMoveOutputWithContext(context.Background())
}

func (i *CentralsnatmapMove) ToCentralsnatmapMoveOutputWithContext(ctx context.Context) CentralsnatmapMoveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralsnatmapMoveOutput)
}

// CentralsnatmapMoveArrayInput is an input type that accepts CentralsnatmapMoveArray and CentralsnatmapMoveArrayOutput values.
// You can construct a concrete instance of `CentralsnatmapMoveArrayInput` via:
//
//	CentralsnatmapMoveArray{ CentralsnatmapMoveArgs{...} }
type CentralsnatmapMoveArrayInput interface {
	pulumi.Input

	ToCentralsnatmapMoveArrayOutput() CentralsnatmapMoveArrayOutput
	ToCentralsnatmapMoveArrayOutputWithContext(context.Context) CentralsnatmapMoveArrayOutput
}

type CentralsnatmapMoveArray []CentralsnatmapMoveInput

func (CentralsnatmapMoveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CentralsnatmapMove)(nil)).Elem()
}

func (i CentralsnatmapMoveArray) ToCentralsnatmapMoveArrayOutput() CentralsnatmapMoveArrayOutput {
	return i.ToCentralsnatmapMoveArrayOutputWithContext(context.Background())
}

func (i CentralsnatmapMoveArray) ToCentralsnatmapMoveArrayOutputWithContext(ctx context.Context) CentralsnatmapMoveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralsnatmapMoveArrayOutput)
}

// CentralsnatmapMoveMapInput is an input type that accepts CentralsnatmapMoveMap and CentralsnatmapMoveMapOutput values.
// You can construct a concrete instance of `CentralsnatmapMoveMapInput` via:
//
//	CentralsnatmapMoveMap{ "key": CentralsnatmapMoveArgs{...} }
type CentralsnatmapMoveMapInput interface {
	pulumi.Input

	ToCentralsnatmapMoveMapOutput() CentralsnatmapMoveMapOutput
	ToCentralsnatmapMoveMapOutputWithContext(context.Context) CentralsnatmapMoveMapOutput
}

type CentralsnatmapMoveMap map[string]CentralsnatmapMoveInput

func (CentralsnatmapMoveMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CentralsnatmapMove)(nil)).Elem()
}

func (i CentralsnatmapMoveMap) ToCentralsnatmapMoveMapOutput() CentralsnatmapMoveMapOutput {
	return i.ToCentralsnatmapMoveMapOutputWithContext(context.Background())
}

func (i CentralsnatmapMoveMap) ToCentralsnatmapMoveMapOutputWithContext(ctx context.Context) CentralsnatmapMoveMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralsnatmapMoveMapOutput)
}

type CentralsnatmapMoveOutput struct{ *pulumi.OutputState }

func (CentralsnatmapMoveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CentralsnatmapMove)(nil)).Elem()
}

func (o CentralsnatmapMoveOutput) ToCentralsnatmapMoveOutput() CentralsnatmapMoveOutput {
	return o
}

func (o CentralsnatmapMoveOutput) ToCentralsnatmapMoveOutputWithContext(ctx context.Context) CentralsnatmapMoveOutput {
	return o
}

func (o CentralsnatmapMoveOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CentralsnatmapMove) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o CentralsnatmapMoveOutput) Move() pulumi.StringOutput {
	return o.ApplyT(func(v *CentralsnatmapMove) pulumi.StringOutput { return v.Move }).(pulumi.StringOutput)
}

func (o CentralsnatmapMoveOutput) PolicyidDst() pulumi.IntOutput {
	return o.ApplyT(func(v *CentralsnatmapMove) pulumi.IntOutput { return v.PolicyidDst }).(pulumi.IntOutput)
}

func (o CentralsnatmapMoveOutput) PolicyidSrc() pulumi.IntOutput {
	return o.ApplyT(func(v *CentralsnatmapMove) pulumi.IntOutput { return v.PolicyidSrc }).(pulumi.IntOutput)
}

func (o CentralsnatmapMoveOutput) StatePolicySrcdstPos() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CentralsnatmapMove) pulumi.StringPtrOutput { return v.StatePolicySrcdstPos }).(pulumi.StringPtrOutput)
}

func (o CentralsnatmapMoveOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CentralsnatmapMove) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type CentralsnatmapMoveArrayOutput struct{ *pulumi.OutputState }

func (CentralsnatmapMoveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CentralsnatmapMove)(nil)).Elem()
}

func (o CentralsnatmapMoveArrayOutput) ToCentralsnatmapMoveArrayOutput() CentralsnatmapMoveArrayOutput {
	return o
}

func (o CentralsnatmapMoveArrayOutput) ToCentralsnatmapMoveArrayOutputWithContext(ctx context.Context) CentralsnatmapMoveArrayOutput {
	return o
}

func (o CentralsnatmapMoveArrayOutput) Index(i pulumi.IntInput) CentralsnatmapMoveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CentralsnatmapMove {
		return vs[0].([]*CentralsnatmapMove)[vs[1].(int)]
	}).(CentralsnatmapMoveOutput)
}

type CentralsnatmapMoveMapOutput struct{ *pulumi.OutputState }

func (CentralsnatmapMoveMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CentralsnatmapMove)(nil)).Elem()
}

func (o CentralsnatmapMoveMapOutput) ToCentralsnatmapMoveMapOutput() CentralsnatmapMoveMapOutput {
	return o
}

func (o CentralsnatmapMoveMapOutput) ToCentralsnatmapMoveMapOutputWithContext(ctx context.Context) CentralsnatmapMoveMapOutput {
	return o
}

func (o CentralsnatmapMoveMapOutput) MapIndex(k pulumi.StringInput) CentralsnatmapMoveOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CentralsnatmapMove {
		return vs[0].(map[string]*CentralsnatmapMove)[vs[1].(string)]
	}).(CentralsnatmapMoveOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CentralsnatmapMoveInput)(nil)).Elem(), &CentralsnatmapMove{})
	pulumi.RegisterInputType(reflect.TypeOf((*CentralsnatmapMoveArrayInput)(nil)).Elem(), CentralsnatmapMoveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CentralsnatmapMoveMapInput)(nil)).Elem(), CentralsnatmapMoveMap{})
	pulumi.RegisterOutputType(CentralsnatmapMoveOutput{})
	pulumi.RegisterOutputType(CentralsnatmapMoveArrayOutput{})
	pulumi.RegisterOutputType(CentralsnatmapMoveMapOutput{})
}

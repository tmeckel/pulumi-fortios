// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information on an fortios firewall policy6
func LookupPolicy6(ctx *pulumi.Context, args *LookupPolicy6Args, opts ...pulumi.InvokeOption) (*LookupPolicy6Result, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupPolicy6Result
	err := ctx.Invoke("fortios:firewall/getPolicy6:getPolicy6", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPolicy6.
type LookupPolicy6Args struct {
	// Specify the policyid of the desired firewall policy6.
	Policyid int `pulumi:"policyid"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by getPolicy6.
type LookupPolicy6Result struct {
	// Policy action (allow/deny/ipsec).
	Action string `pulumi:"action"`
	// Enable/disable anti-replay check.
	AntiReplay string `pulumi:"antiReplay"`
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories []GetPolicy6AppCategory `pulumi:"appCategories"`
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups []GetPolicy6AppGroup `pulumi:"appGroups"`
	// Name of an existing Application list.
	ApplicationList string `pulumi:"applicationList"`
	// Application ID list. The structure of `application` block is documented below.
	Applications []GetPolicy6Application `pulumi:"applications"`
	// Enable/disable policy traffic ASIC offloading.
	AutoAsicOffload string `pulumi:"autoAsicOffload"`
	// Name of an existing Antivirus profile.
	AvProfile string `pulumi:"avProfile"`
	// Name of an existing CIFS profile.
	CifsProfile string `pulumi:"cifsProfile"`
	// Comment.
	Comments string `pulumi:"comments"`
	// Log field index numbers to append custom log fields to log messages for this policy. The structure of `customLogFields` block is documented below.
	CustomLogFields []GetPolicy6CustomLogField `pulumi:"customLogFields"`
	// Decrypted traffic mirror.
	DecryptedTrafficMirror string `pulumi:"decryptedTrafficMirror"`
	// Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
	Devices []GetPolicy6Device `pulumi:"devices"`
	// Enable to change packet's DiffServ values to the specified diffservcode-forward value.
	DiffservForward string `pulumi:"diffservForward"`
	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.
	DiffservReverse string `pulumi:"diffservReverse"`
	// Change packet's DiffServ to this value.
	DiffservcodeForward string `pulumi:"diffservcodeForward"`
	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev string `pulumi:"diffservcodeRev"`
	// Name of an existing DLP sensor.
	DlpSensor string `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile string `pulumi:"dnsfilterProfile"`
	// Enable DSRI to ignore HTTP server responses.
	Dsri string `pulumi:"dsri"`
	// When enabled dstaddr specifies what the destination address must NOT be.
	DstaddrNegate string `pulumi:"dstaddrNegate"`
	// Destination address and address group names. The structure of `dstaddr` block is documented below.
	Dstaddrs []GetPolicy6Dstaddr `pulumi:"dstaddrs"`
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs []GetPolicy6Dstintf `pulumi:"dstintfs"`
	// Name of an existing email filter profile.
	EmailfilterProfile string `pulumi:"emailfilterProfile"`
	// How to handle sessions if the configuration of this firewall policy changes.
	FirewallSessionDirty string `pulumi:"firewallSessionDirty"`
	// Enable to prevent source NAT from changing a session's source port.
	Fixedport string `pulumi:"fixedport"`
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups []GetPolicy6FssoGroup `pulumi:"fssoGroups"`
	// Label for the policy that appears when the GUI is in Global View mode.
	GlobalLabel string `pulumi:"globalLabel"`
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups []GetPolicy6Group `pulumi:"groups"`
	// Redirect HTTP(S) traffic to matching transparent web proxy policy.
	HttpPolicyRedirect string `pulumi:"httpPolicyRedirect"`
	// Name of an existing ICAP profile.
	IcapProfile string `pulumi:"icapProfile"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN.
	Inbound string `pulumi:"inbound"`
	// Policy inspection mode (Flow/proxy). Default is Flow mode.
	InspectionMode string `pulumi:"inspectionMode"`
	// Enable to use IP Pools for source NAT.
	Ippool string `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensor string `pulumi:"ipsSensor"`
	// Label for the policy that appears when the GUI is in Section View mode.
	Label string `pulumi:"label"`
	// Enable or disable logging. Log all sessions or security profile sessions.
	Logtraffic string `pulumi:"logtraffic"`
	// Record logs when a session starts.
	LogtrafficStart string `pulumi:"logtrafficStart"`
	// Names of FSSO groups.
	Name string `pulumi:"name"`
	// Enable/disable source NAT.
	Nat string `pulumi:"nat"`
	// Policy-based IPsec VPN: apply destination NAT to inbound traffic.
	Natinbound string `pulumi:"natinbound"`
	// Policy-based IPsec VPN: apply source NAT to outbound traffic.
	Natoutbound string `pulumi:"natoutbound"`
	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN.
	Outbound string `pulumi:"outbound"`
	// Per-IP traffic shaper.
	PerIpShaper string `pulumi:"perIpShaper"`
	// Policy ID.
	Policyid int `pulumi:"policyid"`
	// IP Pool names. The structure of `poolname` block is documented below.
	Poolnames []GetPolicy6Poolname `pulumi:"poolnames"`
	// Name of profile group.
	ProfileGroup string `pulumi:"profileGroup"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions string `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only.
	ProfileType string `pulumi:"profileType"`
	// Override the default replacement message group for this policy.
	ReplacemsgOverrideGroup string `pulumi:"replacemsgOverrideGroup"`
	// Enable/disable RADIUS single sign-on (RSSO).
	Rsso string `pulumi:"rsso"`
	// Schedule name.
	Schedule string `pulumi:"schedule"`
	// Enable/disable return of deny-packet.
	SendDenyPacket string `pulumi:"sendDenyPacket"`
	// When enabled service specifies what the service must NOT be.
	ServiceNegate string `pulumi:"serviceNegate"`
	// Service and service group names. The structure of `service` block is documented below.
	Services []GetPolicy6Service `pulumi:"services"`
	// Session TTL in seconds for sessions accepted by this policy. 0 means use the system default session TTL.
	SessionTtl int `pulumi:"sessionTtl"`
	// Name of an existing Spam filter profile.
	SpamfilterProfile string `pulumi:"spamfilterProfile"`
	// When enabled srcaddr specifies what the source address must NOT be.
	SrcaddrNegate string `pulumi:"srcaddrNegate"`
	// Source address and address group names. The structure of `srcaddr` block is documented below.
	Srcaddrs []GetPolicy6Srcaddr `pulumi:"srcaddrs"`
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs []GetPolicy6Srcintf `pulumi:"srcintfs"`
	// Name of an existing SSH filter profile.
	SshFilterProfile string `pulumi:"sshFilterProfile"`
	// Redirect SSH traffic to matching transparent proxy policy.
	SshPolicyRedirect string `pulumi:"sshPolicyRedirect"`
	// Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring).
	SslMirror string `pulumi:"sslMirror"`
	// SSL mirror interface name. The structure of `sslMirrorIntf` block is documented below.
	SslMirrorIntfs []GetPolicy6SslMirrorIntf `pulumi:"sslMirrorIntfs"`
	// Name of an existing SSL SSH profile.
	SslSshProfile string `pulumi:"sslSshProfile"`
	// Enable or disable this policy.
	Status string `pulumi:"status"`
	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver int `pulumi:"tcpMssReceiver"`
	// Sender TCP maximum segment size (MSS).
	TcpMssSender int `pulumi:"tcpMssSender"`
	// Enable/disable creation of TCP session without SYN flag.
	TcpSessionWithoutSyn string `pulumi:"tcpSessionWithoutSyn"`
	// Enable/disable sending RST packets when TCP sessions expire.
	TimeoutSendRst string `pulumi:"timeoutSendRst"`
	// ToS (Type of Service) value used for comparison.
	Tos string `pulumi:"tos"`
	// Non-zero bit positions are used for comparison while zero bit positions are ignored.
	TosMask string `pulumi:"tosMask"`
	// Enable negated TOS match.
	TosNegate string `pulumi:"tosNegate"`
	// Reverse traffic shaper.
	TrafficShaper string `pulumi:"trafficShaper"`
	// Reverse traffic shaper.
	TrafficShaperReverse string `pulumi:"trafficShaperReverse"`
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories []GetPolicy6UrlCategory `pulumi:"urlCategories"`
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users []GetPolicy6User `pulumi:"users"`
	// Enable AV/web/ips protection profile.
	UtmStatus string `pulumi:"utmStatus"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid      string  `pulumi:"uuid"`
	Vdomparam *string `pulumi:"vdomparam"`
	// VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest
	VlanCosFwd int `pulumi:"vlanCosFwd"`
	// VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest
	VlanCosRev int `pulumi:"vlanCosRev"`
	// Set VLAN filters.
	VlanFilter string `pulumi:"vlanFilter"`
	// Name of an existing VoIP profile.
	VoipProfile string `pulumi:"voipProfile"`
	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel string `pulumi:"vpntunnel"`
	// Name of an existing Web application firewall profile.
	WafProfile string `pulumi:"wafProfile"`
	// Enable/disable web cache.
	Webcache string `pulumi:"webcache"`
	// Enable/disable web cache for HTTPS.
	WebcacheHttps string `pulumi:"webcacheHttps"`
	// Name of an existing Web filter profile.
	WebfilterProfile string `pulumi:"webfilterProfile"`
	// Web proxy forward server name.
	WebproxyForwardServer string `pulumi:"webproxyForwardServer"`
	// Webproxy profile name.
	WebproxyProfile string `pulumi:"webproxyProfile"`
}

func LookupPolicy6Output(ctx *pulumi.Context, args LookupPolicy6OutputArgs, opts ...pulumi.InvokeOption) LookupPolicy6ResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPolicy6Result, error) {
			args := v.(LookupPolicy6Args)
			r, err := LookupPolicy6(ctx, &args, opts...)
			var s LookupPolicy6Result
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPolicy6ResultOutput)
}

// A collection of arguments for invoking getPolicy6.
type LookupPolicy6OutputArgs struct {
	// Specify the policyid of the desired firewall policy6.
	Policyid pulumi.IntInput `pulumi:"policyid"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupPolicy6OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicy6Args)(nil)).Elem()
}

// A collection of values returned by getPolicy6.
type LookupPolicy6ResultOutput struct{ *pulumi.OutputState }

func (LookupPolicy6ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicy6Result)(nil)).Elem()
}

func (o LookupPolicy6ResultOutput) ToLookupPolicy6ResultOutput() LookupPolicy6ResultOutput {
	return o
}

func (o LookupPolicy6ResultOutput) ToLookupPolicy6ResultOutputWithContext(ctx context.Context) LookupPolicy6ResultOutput {
	return o
}

// Policy action (allow/deny/ipsec).
func (o LookupPolicy6ResultOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Action }).(pulumi.StringOutput)
}

// Enable/disable anti-replay check.
func (o LookupPolicy6ResultOutput) AntiReplay() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.AntiReplay }).(pulumi.StringOutput)
}

// Application category ID list. The structure of `appCategory` block is documented below.
func (o LookupPolicy6ResultOutput) AppCategories() GetPolicy6AppCategoryArrayOutput {
	return o.ApplyT(func(v LookupPolicy6Result) []GetPolicy6AppCategory { return v.AppCategories }).(GetPolicy6AppCategoryArrayOutput)
}

// Application group names. The structure of `appGroup` block is documented below.
func (o LookupPolicy6ResultOutput) AppGroups() GetPolicy6AppGroupArrayOutput {
	return o.ApplyT(func(v LookupPolicy6Result) []GetPolicy6AppGroup { return v.AppGroups }).(GetPolicy6AppGroupArrayOutput)
}

// Name of an existing Application list.
func (o LookupPolicy6ResultOutput) ApplicationList() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.ApplicationList }).(pulumi.StringOutput)
}

// Application ID list. The structure of `application` block is documented below.
func (o LookupPolicy6ResultOutput) Applications() GetPolicy6ApplicationArrayOutput {
	return o.ApplyT(func(v LookupPolicy6Result) []GetPolicy6Application { return v.Applications }).(GetPolicy6ApplicationArrayOutput)
}

// Enable/disable policy traffic ASIC offloading.
func (o LookupPolicy6ResultOutput) AutoAsicOffload() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.AutoAsicOffload }).(pulumi.StringOutput)
}

// Name of an existing Antivirus profile.
func (o LookupPolicy6ResultOutput) AvProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.AvProfile }).(pulumi.StringOutput)
}

// Name of an existing CIFS profile.
func (o LookupPolicy6ResultOutput) CifsProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.CifsProfile }).(pulumi.StringOutput)
}

// Comment.
func (o LookupPolicy6ResultOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Comments }).(pulumi.StringOutput)
}

// Log field index numbers to append custom log fields to log messages for this policy. The structure of `customLogFields` block is documented below.
func (o LookupPolicy6ResultOutput) CustomLogFields() GetPolicy6CustomLogFieldArrayOutput {
	return o.ApplyT(func(v LookupPolicy6Result) []GetPolicy6CustomLogField { return v.CustomLogFields }).(GetPolicy6CustomLogFieldArrayOutput)
}

// Decrypted traffic mirror.
func (o LookupPolicy6ResultOutput) DecryptedTrafficMirror() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.DecryptedTrafficMirror }).(pulumi.StringOutput)
}

// Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
func (o LookupPolicy6ResultOutput) Devices() GetPolicy6DeviceArrayOutput {
	return o.ApplyT(func(v LookupPolicy6Result) []GetPolicy6Device { return v.Devices }).(GetPolicy6DeviceArrayOutput)
}

// Enable to change packet's DiffServ values to the specified diffservcode-forward value.
func (o LookupPolicy6ResultOutput) DiffservForward() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.DiffservForward }).(pulumi.StringOutput)
}

// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.
func (o LookupPolicy6ResultOutput) DiffservReverse() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.DiffservReverse }).(pulumi.StringOutput)
}

// Change packet's DiffServ to this value.
func (o LookupPolicy6ResultOutput) DiffservcodeForward() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.DiffservcodeForward }).(pulumi.StringOutput)
}

// Change packet's reverse (reply) DiffServ to this value.
func (o LookupPolicy6ResultOutput) DiffservcodeRev() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.DiffservcodeRev }).(pulumi.StringOutput)
}

// Name of an existing DLP sensor.
func (o LookupPolicy6ResultOutput) DlpSensor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.DlpSensor }).(pulumi.StringOutput)
}

// Name of an existing DNS filter profile.
func (o LookupPolicy6ResultOutput) DnsfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.DnsfilterProfile }).(pulumi.StringOutput)
}

// Enable DSRI to ignore HTTP server responses.
func (o LookupPolicy6ResultOutput) Dsri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Dsri }).(pulumi.StringOutput)
}

// When enabled dstaddr specifies what the destination address must NOT be.
func (o LookupPolicy6ResultOutput) DstaddrNegate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.DstaddrNegate }).(pulumi.StringOutput)
}

// Destination address and address group names. The structure of `dstaddr` block is documented below.
func (o LookupPolicy6ResultOutput) Dstaddrs() GetPolicy6DstaddrArrayOutput {
	return o.ApplyT(func(v LookupPolicy6Result) []GetPolicy6Dstaddr { return v.Dstaddrs }).(GetPolicy6DstaddrArrayOutput)
}

// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
func (o LookupPolicy6ResultOutput) Dstintfs() GetPolicy6DstintfArrayOutput {
	return o.ApplyT(func(v LookupPolicy6Result) []GetPolicy6Dstintf { return v.Dstintfs }).(GetPolicy6DstintfArrayOutput)
}

// Name of an existing email filter profile.
func (o LookupPolicy6ResultOutput) EmailfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.EmailfilterProfile }).(pulumi.StringOutput)
}

// How to handle sessions if the configuration of this firewall policy changes.
func (o LookupPolicy6ResultOutput) FirewallSessionDirty() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.FirewallSessionDirty }).(pulumi.StringOutput)
}

// Enable to prevent source NAT from changing a session's source port.
func (o LookupPolicy6ResultOutput) Fixedport() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Fixedport }).(pulumi.StringOutput)
}

// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
func (o LookupPolicy6ResultOutput) FssoGroups() GetPolicy6FssoGroupArrayOutput {
	return o.ApplyT(func(v LookupPolicy6Result) []GetPolicy6FssoGroup { return v.FssoGroups }).(GetPolicy6FssoGroupArrayOutput)
}

// Label for the policy that appears when the GUI is in Global View mode.
func (o LookupPolicy6ResultOutput) GlobalLabel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.GlobalLabel }).(pulumi.StringOutput)
}

// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
func (o LookupPolicy6ResultOutput) Groups() GetPolicy6GroupArrayOutput {
	return o.ApplyT(func(v LookupPolicy6Result) []GetPolicy6Group { return v.Groups }).(GetPolicy6GroupArrayOutput)
}

// Redirect HTTP(S) traffic to matching transparent web proxy policy.
func (o LookupPolicy6ResultOutput) HttpPolicyRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.HttpPolicyRedirect }).(pulumi.StringOutput)
}

// Name of an existing ICAP profile.
func (o LookupPolicy6ResultOutput) IcapProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.IcapProfile }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPolicy6ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Id }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN.
func (o LookupPolicy6ResultOutput) Inbound() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Inbound }).(pulumi.StringOutput)
}

// Policy inspection mode (Flow/proxy). Default is Flow mode.
func (o LookupPolicy6ResultOutput) InspectionMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.InspectionMode }).(pulumi.StringOutput)
}

// Enable to use IP Pools for source NAT.
func (o LookupPolicy6ResultOutput) Ippool() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Ippool }).(pulumi.StringOutput)
}

// Name of an existing IPS sensor.
func (o LookupPolicy6ResultOutput) IpsSensor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.IpsSensor }).(pulumi.StringOutput)
}

// Label for the policy that appears when the GUI is in Section View mode.
func (o LookupPolicy6ResultOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Label }).(pulumi.StringOutput)
}

// Enable or disable logging. Log all sessions or security profile sessions.
func (o LookupPolicy6ResultOutput) Logtraffic() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Logtraffic }).(pulumi.StringOutput)
}

// Record logs when a session starts.
func (o LookupPolicy6ResultOutput) LogtrafficStart() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.LogtrafficStart }).(pulumi.StringOutput)
}

// Names of FSSO groups.
func (o LookupPolicy6ResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable source NAT.
func (o LookupPolicy6ResultOutput) Nat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Nat }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: apply destination NAT to inbound traffic.
func (o LookupPolicy6ResultOutput) Natinbound() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Natinbound }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: apply source NAT to outbound traffic.
func (o LookupPolicy6ResultOutput) Natoutbound() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Natoutbound }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN.
func (o LookupPolicy6ResultOutput) Outbound() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Outbound }).(pulumi.StringOutput)
}

// Per-IP traffic shaper.
func (o LookupPolicy6ResultOutput) PerIpShaper() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.PerIpShaper }).(pulumi.StringOutput)
}

// Policy ID.
func (o LookupPolicy6ResultOutput) Policyid() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPolicy6Result) int { return v.Policyid }).(pulumi.IntOutput)
}

// IP Pool names. The structure of `poolname` block is documented below.
func (o LookupPolicy6ResultOutput) Poolnames() GetPolicy6PoolnameArrayOutput {
	return o.ApplyT(func(v LookupPolicy6Result) []GetPolicy6Poolname { return v.Poolnames }).(GetPolicy6PoolnameArrayOutput)
}

// Name of profile group.
func (o LookupPolicy6ResultOutput) ProfileGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.ProfileGroup }).(pulumi.StringOutput)
}

// Name of an existing Protocol options profile.
func (o LookupPolicy6ResultOutput) ProfileProtocolOptions() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.ProfileProtocolOptions }).(pulumi.StringOutput)
}

// Determine whether the firewall policy allows security profile groups or single profiles only.
func (o LookupPolicy6ResultOutput) ProfileType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.ProfileType }).(pulumi.StringOutput)
}

// Override the default replacement message group for this policy.
func (o LookupPolicy6ResultOutput) ReplacemsgOverrideGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.ReplacemsgOverrideGroup }).(pulumi.StringOutput)
}

// Enable/disable RADIUS single sign-on (RSSO).
func (o LookupPolicy6ResultOutput) Rsso() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Rsso }).(pulumi.StringOutput)
}

// Schedule name.
func (o LookupPolicy6ResultOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Schedule }).(pulumi.StringOutput)
}

// Enable/disable return of deny-packet.
func (o LookupPolicy6ResultOutput) SendDenyPacket() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.SendDenyPacket }).(pulumi.StringOutput)
}

// When enabled service specifies what the service must NOT be.
func (o LookupPolicy6ResultOutput) ServiceNegate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.ServiceNegate }).(pulumi.StringOutput)
}

// Service and service group names. The structure of `service` block is documented below.
func (o LookupPolicy6ResultOutput) Services() GetPolicy6ServiceArrayOutput {
	return o.ApplyT(func(v LookupPolicy6Result) []GetPolicy6Service { return v.Services }).(GetPolicy6ServiceArrayOutput)
}

// Session TTL in seconds for sessions accepted by this policy. 0 means use the system default session TTL.
func (o LookupPolicy6ResultOutput) SessionTtl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPolicy6Result) int { return v.SessionTtl }).(pulumi.IntOutput)
}

// Name of an existing Spam filter profile.
func (o LookupPolicy6ResultOutput) SpamfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.SpamfilterProfile }).(pulumi.StringOutput)
}

// When enabled srcaddr specifies what the source address must NOT be.
func (o LookupPolicy6ResultOutput) SrcaddrNegate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.SrcaddrNegate }).(pulumi.StringOutput)
}

// Source address and address group names. The structure of `srcaddr` block is documented below.
func (o LookupPolicy6ResultOutput) Srcaddrs() GetPolicy6SrcaddrArrayOutput {
	return o.ApplyT(func(v LookupPolicy6Result) []GetPolicy6Srcaddr { return v.Srcaddrs }).(GetPolicy6SrcaddrArrayOutput)
}

// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
func (o LookupPolicy6ResultOutput) Srcintfs() GetPolicy6SrcintfArrayOutput {
	return o.ApplyT(func(v LookupPolicy6Result) []GetPolicy6Srcintf { return v.Srcintfs }).(GetPolicy6SrcintfArrayOutput)
}

// Name of an existing SSH filter profile.
func (o LookupPolicy6ResultOutput) SshFilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.SshFilterProfile }).(pulumi.StringOutput)
}

// Redirect SSH traffic to matching transparent proxy policy.
func (o LookupPolicy6ResultOutput) SshPolicyRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.SshPolicyRedirect }).(pulumi.StringOutput)
}

// Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring).
func (o LookupPolicy6ResultOutput) SslMirror() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.SslMirror }).(pulumi.StringOutput)
}

// SSL mirror interface name. The structure of `sslMirrorIntf` block is documented below.
func (o LookupPolicy6ResultOutput) SslMirrorIntfs() GetPolicy6SslMirrorIntfArrayOutput {
	return o.ApplyT(func(v LookupPolicy6Result) []GetPolicy6SslMirrorIntf { return v.SslMirrorIntfs }).(GetPolicy6SslMirrorIntfArrayOutput)
}

// Name of an existing SSL SSH profile.
func (o LookupPolicy6ResultOutput) SslSshProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.SslSshProfile }).(pulumi.StringOutput)
}

// Enable or disable this policy.
func (o LookupPolicy6ResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Status }).(pulumi.StringOutput)
}

// Receiver TCP maximum segment size (MSS).
func (o LookupPolicy6ResultOutput) TcpMssReceiver() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPolicy6Result) int { return v.TcpMssReceiver }).(pulumi.IntOutput)
}

// Sender TCP maximum segment size (MSS).
func (o LookupPolicy6ResultOutput) TcpMssSender() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPolicy6Result) int { return v.TcpMssSender }).(pulumi.IntOutput)
}

// Enable/disable creation of TCP session without SYN flag.
func (o LookupPolicy6ResultOutput) TcpSessionWithoutSyn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.TcpSessionWithoutSyn }).(pulumi.StringOutput)
}

// Enable/disable sending RST packets when TCP sessions expire.
func (o LookupPolicy6ResultOutput) TimeoutSendRst() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.TimeoutSendRst }).(pulumi.StringOutput)
}

// ToS (Type of Service) value used for comparison.
func (o LookupPolicy6ResultOutput) Tos() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Tos }).(pulumi.StringOutput)
}

// Non-zero bit positions are used for comparison while zero bit positions are ignored.
func (o LookupPolicy6ResultOutput) TosMask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.TosMask }).(pulumi.StringOutput)
}

// Enable negated TOS match.
func (o LookupPolicy6ResultOutput) TosNegate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.TosNegate }).(pulumi.StringOutput)
}

// Reverse traffic shaper.
func (o LookupPolicy6ResultOutput) TrafficShaper() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.TrafficShaper }).(pulumi.StringOutput)
}

// Reverse traffic shaper.
func (o LookupPolicy6ResultOutput) TrafficShaperReverse() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.TrafficShaperReverse }).(pulumi.StringOutput)
}

// URL category ID list. The structure of `urlCategory` block is documented below.
func (o LookupPolicy6ResultOutput) UrlCategories() GetPolicy6UrlCategoryArrayOutput {
	return o.ApplyT(func(v LookupPolicy6Result) []GetPolicy6UrlCategory { return v.UrlCategories }).(GetPolicy6UrlCategoryArrayOutput)
}

// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
func (o LookupPolicy6ResultOutput) Users() GetPolicy6UserArrayOutput {
	return o.ApplyT(func(v LookupPolicy6Result) []GetPolicy6User { return v.Users }).(GetPolicy6UserArrayOutput)
}

// Enable AV/web/ips protection profile.
func (o LookupPolicy6ResultOutput) UtmStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.UtmStatus }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o LookupPolicy6ResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Uuid }).(pulumi.StringOutput)
}

func (o LookupPolicy6ResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicy6Result) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest
func (o LookupPolicy6ResultOutput) VlanCosFwd() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPolicy6Result) int { return v.VlanCosFwd }).(pulumi.IntOutput)
}

// VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest
func (o LookupPolicy6ResultOutput) VlanCosRev() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPolicy6Result) int { return v.VlanCosRev }).(pulumi.IntOutput)
}

// Set VLAN filters.
func (o LookupPolicy6ResultOutput) VlanFilter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.VlanFilter }).(pulumi.StringOutput)
}

// Name of an existing VoIP profile.
func (o LookupPolicy6ResultOutput) VoipProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.VoipProfile }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
func (o LookupPolicy6ResultOutput) Vpntunnel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Vpntunnel }).(pulumi.StringOutput)
}

// Name of an existing Web application firewall profile.
func (o LookupPolicy6ResultOutput) WafProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.WafProfile }).(pulumi.StringOutput)
}

// Enable/disable web cache.
func (o LookupPolicy6ResultOutput) Webcache() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.Webcache }).(pulumi.StringOutput)
}

// Enable/disable web cache for HTTPS.
func (o LookupPolicy6ResultOutput) WebcacheHttps() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.WebcacheHttps }).(pulumi.StringOutput)
}

// Name of an existing Web filter profile.
func (o LookupPolicy6ResultOutput) WebfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.WebfilterProfile }).(pulumi.StringOutput)
}

// Web proxy forward server name.
func (o LookupPolicy6ResultOutput) WebproxyForwardServer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.WebproxyForwardServer }).(pulumi.StringOutput)
}

// Webproxy profile name.
func (o LookupPolicy6ResultOutput) WebproxyProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicy6Result) string { return v.WebproxyProfile }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPolicy6ResultOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SecurityPolicyseq struct {
	pulumi.CustomResourceState

	// The alter position: should only be "before" or "after"
	AlterPosition pulumi.StringOutput `pulumi:"alterPosition"`
	// Comment
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Enable status detection for policySrcId and policy_dst_id
	EnableStateChecking pulumi.BoolPtrOutput `pulumi:"enableStateChecking"`
	// The dest policy id which you want to alter
	PolicyDstId pulumi.IntOutput `pulumi:"policyDstId"`
	// The policy id which you want to alter
	PolicySrcId          pulumi.IntOutput                            `pulumi:"policySrcId"`
	StatePolicyLists     SecurityPolicyseqStatePolicyListArrayOutput `pulumi:"statePolicyLists"`
	StatePolicySrcdstPos pulumi.StringPtrOutput                      `pulumi:"statePolicySrcdstPos"`
	Vdomparam            pulumi.StringPtrOutput                      `pulumi:"vdomparam"`
}

// NewSecurityPolicyseq registers a new resource with the given unique name, arguments, and options.
func NewSecurityPolicyseq(ctx *pulumi.Context,
	name string, args *SecurityPolicyseqArgs, opts ...pulumi.ResourceOption) (*SecurityPolicyseq, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlterPosition == nil {
		return nil, errors.New("invalid value for required argument 'AlterPosition'")
	}
	if args.PolicyDstId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyDstId'")
	}
	if args.PolicySrcId == nil {
		return nil, errors.New("invalid value for required argument 'PolicySrcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SecurityPolicyseq
	err := ctx.RegisterResource("fortios:firewall/securityPolicyseq:SecurityPolicyseq", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityPolicyseq gets an existing SecurityPolicyseq resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityPolicyseq(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityPolicyseqState, opts ...pulumi.ResourceOption) (*SecurityPolicyseq, error) {
	var resource SecurityPolicyseq
	err := ctx.ReadResource("fortios:firewall/securityPolicyseq:SecurityPolicyseq", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityPolicyseq resources.
type securityPolicyseqState struct {
	// The alter position: should only be "before" or "after"
	AlterPosition *string `pulumi:"alterPosition"`
	// Comment
	Comment *string `pulumi:"comment"`
	// Enable status detection for policySrcId and policy_dst_id
	EnableStateChecking *bool `pulumi:"enableStateChecking"`
	// The dest policy id which you want to alter
	PolicyDstId *int `pulumi:"policyDstId"`
	// The policy id which you want to alter
	PolicySrcId          *int                               `pulumi:"policySrcId"`
	StatePolicyLists     []SecurityPolicyseqStatePolicyList `pulumi:"statePolicyLists"`
	StatePolicySrcdstPos *string                            `pulumi:"statePolicySrcdstPos"`
	Vdomparam            *string                            `pulumi:"vdomparam"`
}

type SecurityPolicyseqState struct {
	// The alter position: should only be "before" or "after"
	AlterPosition pulumi.StringPtrInput
	// Comment
	Comment pulumi.StringPtrInput
	// Enable status detection for policySrcId and policy_dst_id
	EnableStateChecking pulumi.BoolPtrInput
	// The dest policy id which you want to alter
	PolicyDstId pulumi.IntPtrInput
	// The policy id which you want to alter
	PolicySrcId          pulumi.IntPtrInput
	StatePolicyLists     SecurityPolicyseqStatePolicyListArrayInput
	StatePolicySrcdstPos pulumi.StringPtrInput
	Vdomparam            pulumi.StringPtrInput
}

func (SecurityPolicyseqState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityPolicyseqState)(nil)).Elem()
}

type securityPolicyseqArgs struct {
	// The alter position: should only be "before" or "after"
	AlterPosition string `pulumi:"alterPosition"`
	// Comment
	Comment *string `pulumi:"comment"`
	// Enable status detection for policySrcId and policy_dst_id
	EnableStateChecking *bool `pulumi:"enableStateChecking"`
	// The dest policy id which you want to alter
	PolicyDstId int `pulumi:"policyDstId"`
	// The policy id which you want to alter
	PolicySrcId          int     `pulumi:"policySrcId"`
	StatePolicySrcdstPos *string `pulumi:"statePolicySrcdstPos"`
	Vdomparam            *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SecurityPolicyseq resource.
type SecurityPolicyseqArgs struct {
	// The alter position: should only be "before" or "after"
	AlterPosition pulumi.StringInput
	// Comment
	Comment pulumi.StringPtrInput
	// Enable status detection for policySrcId and policy_dst_id
	EnableStateChecking pulumi.BoolPtrInput
	// The dest policy id which you want to alter
	PolicyDstId pulumi.IntInput
	// The policy id which you want to alter
	PolicySrcId          pulumi.IntInput
	StatePolicySrcdstPos pulumi.StringPtrInput
	Vdomparam            pulumi.StringPtrInput
}

func (SecurityPolicyseqArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityPolicyseqArgs)(nil)).Elem()
}

type SecurityPolicyseqInput interface {
	pulumi.Input

	ToSecurityPolicyseqOutput() SecurityPolicyseqOutput
	ToSecurityPolicyseqOutputWithContext(ctx context.Context) SecurityPolicyseqOutput
}

func (*SecurityPolicyseq) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyseq)(nil)).Elem()
}

func (i *SecurityPolicyseq) ToSecurityPolicyseqOutput() SecurityPolicyseqOutput {
	return i.ToSecurityPolicyseqOutputWithContext(context.Background())
}

func (i *SecurityPolicyseq) ToSecurityPolicyseqOutputWithContext(ctx context.Context) SecurityPolicyseqOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyseqOutput)
}

// SecurityPolicyseqArrayInput is an input type that accepts SecurityPolicyseqArray and SecurityPolicyseqArrayOutput values.
// You can construct a concrete instance of `SecurityPolicyseqArrayInput` via:
//
//	SecurityPolicyseqArray{ SecurityPolicyseqArgs{...} }
type SecurityPolicyseqArrayInput interface {
	pulumi.Input

	ToSecurityPolicyseqArrayOutput() SecurityPolicyseqArrayOutput
	ToSecurityPolicyseqArrayOutputWithContext(context.Context) SecurityPolicyseqArrayOutput
}

type SecurityPolicyseqArray []SecurityPolicyseqInput

func (SecurityPolicyseqArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityPolicyseq)(nil)).Elem()
}

func (i SecurityPolicyseqArray) ToSecurityPolicyseqArrayOutput() SecurityPolicyseqArrayOutput {
	return i.ToSecurityPolicyseqArrayOutputWithContext(context.Background())
}

func (i SecurityPolicyseqArray) ToSecurityPolicyseqArrayOutputWithContext(ctx context.Context) SecurityPolicyseqArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyseqArrayOutput)
}

// SecurityPolicyseqMapInput is an input type that accepts SecurityPolicyseqMap and SecurityPolicyseqMapOutput values.
// You can construct a concrete instance of `SecurityPolicyseqMapInput` via:
//
//	SecurityPolicyseqMap{ "key": SecurityPolicyseqArgs{...} }
type SecurityPolicyseqMapInput interface {
	pulumi.Input

	ToSecurityPolicyseqMapOutput() SecurityPolicyseqMapOutput
	ToSecurityPolicyseqMapOutputWithContext(context.Context) SecurityPolicyseqMapOutput
}

type SecurityPolicyseqMap map[string]SecurityPolicyseqInput

func (SecurityPolicyseqMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityPolicyseq)(nil)).Elem()
}

func (i SecurityPolicyseqMap) ToSecurityPolicyseqMapOutput() SecurityPolicyseqMapOutput {
	return i.ToSecurityPolicyseqMapOutputWithContext(context.Background())
}

func (i SecurityPolicyseqMap) ToSecurityPolicyseqMapOutputWithContext(ctx context.Context) SecurityPolicyseqMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyseqMapOutput)
}

type SecurityPolicyseqOutput struct{ *pulumi.OutputState }

func (SecurityPolicyseqOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyseq)(nil)).Elem()
}

func (o SecurityPolicyseqOutput) ToSecurityPolicyseqOutput() SecurityPolicyseqOutput {
	return o
}

func (o SecurityPolicyseqOutput) ToSecurityPolicyseqOutputWithContext(ctx context.Context) SecurityPolicyseqOutput {
	return o
}

// The alter position: should only be "before" or "after"
func (o SecurityPolicyseqOutput) AlterPosition() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPolicyseq) pulumi.StringOutput { return v.AlterPosition }).(pulumi.StringOutput)
}

// Comment
func (o SecurityPolicyseqOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicyseq) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Enable status detection for policySrcId and policy_dst_id
func (o SecurityPolicyseqOutput) EnableStateChecking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityPolicyseq) pulumi.BoolPtrOutput { return v.EnableStateChecking }).(pulumi.BoolPtrOutput)
}

// The dest policy id which you want to alter
func (o SecurityPolicyseqOutput) PolicyDstId() pulumi.IntOutput {
	return o.ApplyT(func(v *SecurityPolicyseq) pulumi.IntOutput { return v.PolicyDstId }).(pulumi.IntOutput)
}

// The policy id which you want to alter
func (o SecurityPolicyseqOutput) PolicySrcId() pulumi.IntOutput {
	return o.ApplyT(func(v *SecurityPolicyseq) pulumi.IntOutput { return v.PolicySrcId }).(pulumi.IntOutput)
}

func (o SecurityPolicyseqOutput) StatePolicyLists() SecurityPolicyseqStatePolicyListArrayOutput {
	return o.ApplyT(func(v *SecurityPolicyseq) SecurityPolicyseqStatePolicyListArrayOutput { return v.StatePolicyLists }).(SecurityPolicyseqStatePolicyListArrayOutput)
}

func (o SecurityPolicyseqOutput) StatePolicySrcdstPos() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicyseq) pulumi.StringPtrOutput { return v.StatePolicySrcdstPos }).(pulumi.StringPtrOutput)
}

func (o SecurityPolicyseqOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicyseq) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SecurityPolicyseqArrayOutput struct{ *pulumi.OutputState }

func (SecurityPolicyseqArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityPolicyseq)(nil)).Elem()
}

func (o SecurityPolicyseqArrayOutput) ToSecurityPolicyseqArrayOutput() SecurityPolicyseqArrayOutput {
	return o
}

func (o SecurityPolicyseqArrayOutput) ToSecurityPolicyseqArrayOutputWithContext(ctx context.Context) SecurityPolicyseqArrayOutput {
	return o
}

func (o SecurityPolicyseqArrayOutput) Index(i pulumi.IntInput) SecurityPolicyseqOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityPolicyseq {
		return vs[0].([]*SecurityPolicyseq)[vs[1].(int)]
	}).(SecurityPolicyseqOutput)
}

type SecurityPolicyseqMapOutput struct{ *pulumi.OutputState }

func (SecurityPolicyseqMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityPolicyseq)(nil)).Elem()
}

func (o SecurityPolicyseqMapOutput) ToSecurityPolicyseqMapOutput() SecurityPolicyseqMapOutput {
	return o
}

func (o SecurityPolicyseqMapOutput) ToSecurityPolicyseqMapOutputWithContext(ctx context.Context) SecurityPolicyseqMapOutput {
	return o
}

func (o SecurityPolicyseqMapOutput) MapIndex(k pulumi.StringInput) SecurityPolicyseqOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityPolicyseq {
		return vs[0].(map[string]*SecurityPolicyseq)[vs[1].(string)]
	}).(SecurityPolicyseqOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPolicyseqInput)(nil)).Elem(), &SecurityPolicyseq{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPolicyseqArrayInput)(nil)).Elem(), SecurityPolicyseqArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPolicyseqMapInput)(nil)).Elem(), SecurityPolicyseqMap{})
	pulumi.RegisterOutputType(SecurityPolicyseqOutput{})
	pulumi.RegisterOutputType(SecurityPolicyseqArrayOutput{})
	pulumi.RegisterOutputType(SecurityPolicyseqMapOutput{})
}

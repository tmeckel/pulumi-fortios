// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProxypolicyMove struct {
	pulumi.CustomResourceState

	Comment              pulumi.StringPtrOutput `pulumi:"comment"`
	Move                 pulumi.StringOutput    `pulumi:"move"`
	PolicyidDst          pulumi.IntOutput       `pulumi:"policyidDst"`
	PolicyidSrc          pulumi.IntOutput       `pulumi:"policyidSrc"`
	StatePolicySrcdstPos pulumi.StringPtrOutput `pulumi:"statePolicySrcdstPos"`
	Vdomparam            pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewProxypolicyMove registers a new resource with the given unique name, arguments, and options.
func NewProxypolicyMove(ctx *pulumi.Context,
	name string, args *ProxypolicyMoveArgs, opts ...pulumi.ResourceOption) (*ProxypolicyMove, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Move == nil {
		return nil, errors.New("invalid value for required argument 'Move'")
	}
	if args.PolicyidDst == nil {
		return nil, errors.New("invalid value for required argument 'PolicyidDst'")
	}
	if args.PolicyidSrc == nil {
		return nil, errors.New("invalid value for required argument 'PolicyidSrc'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ProxypolicyMove
	err := ctx.RegisterResource("fortios:firewall/proxypolicyMove:ProxypolicyMove", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProxypolicyMove gets an existing ProxypolicyMove resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProxypolicyMove(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProxypolicyMoveState, opts ...pulumi.ResourceOption) (*ProxypolicyMove, error) {
	var resource ProxypolicyMove
	err := ctx.ReadResource("fortios:firewall/proxypolicyMove:ProxypolicyMove", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProxypolicyMove resources.
type proxypolicyMoveState struct {
	Comment              *string `pulumi:"comment"`
	Move                 *string `pulumi:"move"`
	PolicyidDst          *int    `pulumi:"policyidDst"`
	PolicyidSrc          *int    `pulumi:"policyidSrc"`
	StatePolicySrcdstPos *string `pulumi:"statePolicySrcdstPos"`
	Vdomparam            *string `pulumi:"vdomparam"`
}

type ProxypolicyMoveState struct {
	Comment              pulumi.StringPtrInput
	Move                 pulumi.StringPtrInput
	PolicyidDst          pulumi.IntPtrInput
	PolicyidSrc          pulumi.IntPtrInput
	StatePolicySrcdstPos pulumi.StringPtrInput
	Vdomparam            pulumi.StringPtrInput
}

func (ProxypolicyMoveState) ElementType() reflect.Type {
	return reflect.TypeOf((*proxypolicyMoveState)(nil)).Elem()
}

type proxypolicyMoveArgs struct {
	Comment              *string `pulumi:"comment"`
	Move                 string  `pulumi:"move"`
	PolicyidDst          int     `pulumi:"policyidDst"`
	PolicyidSrc          int     `pulumi:"policyidSrc"`
	StatePolicySrcdstPos *string `pulumi:"statePolicySrcdstPos"`
	Vdomparam            *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a ProxypolicyMove resource.
type ProxypolicyMoveArgs struct {
	Comment              pulumi.StringPtrInput
	Move                 pulumi.StringInput
	PolicyidDst          pulumi.IntInput
	PolicyidSrc          pulumi.IntInput
	StatePolicySrcdstPos pulumi.StringPtrInput
	Vdomparam            pulumi.StringPtrInput
}

func (ProxypolicyMoveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*proxypolicyMoveArgs)(nil)).Elem()
}

type ProxypolicyMoveInput interface {
	pulumi.Input

	ToProxypolicyMoveOutput() ProxypolicyMoveOutput
	ToProxypolicyMoveOutputWithContext(ctx context.Context) ProxypolicyMoveOutput
}

func (*ProxypolicyMove) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxypolicyMove)(nil)).Elem()
}

func (i *ProxypolicyMove) ToProxypolicyMoveOutput() ProxypolicyMoveOutput {
	return i.ToProxypolicyMoveOutputWithContext(context.Background())
}

func (i *ProxypolicyMove) ToProxypolicyMoveOutputWithContext(ctx context.Context) ProxypolicyMoveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxypolicyMoveOutput)
}

// ProxypolicyMoveArrayInput is an input type that accepts ProxypolicyMoveArray and ProxypolicyMoveArrayOutput values.
// You can construct a concrete instance of `ProxypolicyMoveArrayInput` via:
//
//	ProxypolicyMoveArray{ ProxypolicyMoveArgs{...} }
type ProxypolicyMoveArrayInput interface {
	pulumi.Input

	ToProxypolicyMoveArrayOutput() ProxypolicyMoveArrayOutput
	ToProxypolicyMoveArrayOutputWithContext(context.Context) ProxypolicyMoveArrayOutput
}

type ProxypolicyMoveArray []ProxypolicyMoveInput

func (ProxypolicyMoveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProxypolicyMove)(nil)).Elem()
}

func (i ProxypolicyMoveArray) ToProxypolicyMoveArrayOutput() ProxypolicyMoveArrayOutput {
	return i.ToProxypolicyMoveArrayOutputWithContext(context.Background())
}

func (i ProxypolicyMoveArray) ToProxypolicyMoveArrayOutputWithContext(ctx context.Context) ProxypolicyMoveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxypolicyMoveArrayOutput)
}

// ProxypolicyMoveMapInput is an input type that accepts ProxypolicyMoveMap and ProxypolicyMoveMapOutput values.
// You can construct a concrete instance of `ProxypolicyMoveMapInput` via:
//
//	ProxypolicyMoveMap{ "key": ProxypolicyMoveArgs{...} }
type ProxypolicyMoveMapInput interface {
	pulumi.Input

	ToProxypolicyMoveMapOutput() ProxypolicyMoveMapOutput
	ToProxypolicyMoveMapOutputWithContext(context.Context) ProxypolicyMoveMapOutput
}

type ProxypolicyMoveMap map[string]ProxypolicyMoveInput

func (ProxypolicyMoveMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProxypolicyMove)(nil)).Elem()
}

func (i ProxypolicyMoveMap) ToProxypolicyMoveMapOutput() ProxypolicyMoveMapOutput {
	return i.ToProxypolicyMoveMapOutputWithContext(context.Background())
}

func (i ProxypolicyMoveMap) ToProxypolicyMoveMapOutputWithContext(ctx context.Context) ProxypolicyMoveMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxypolicyMoveMapOutput)
}

type ProxypolicyMoveOutput struct{ *pulumi.OutputState }

func (ProxypolicyMoveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxypolicyMove)(nil)).Elem()
}

func (o ProxypolicyMoveOutput) ToProxypolicyMoveOutput() ProxypolicyMoveOutput {
	return o
}

func (o ProxypolicyMoveOutput) ToProxypolicyMoveOutputWithContext(ctx context.Context) ProxypolicyMoveOutput {
	return o
}

func (o ProxypolicyMoveOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProxypolicyMove) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o ProxypolicyMoveOutput) Move() pulumi.StringOutput {
	return o.ApplyT(func(v *ProxypolicyMove) pulumi.StringOutput { return v.Move }).(pulumi.StringOutput)
}

func (o ProxypolicyMoveOutput) PolicyidDst() pulumi.IntOutput {
	return o.ApplyT(func(v *ProxypolicyMove) pulumi.IntOutput { return v.PolicyidDst }).(pulumi.IntOutput)
}

func (o ProxypolicyMoveOutput) PolicyidSrc() pulumi.IntOutput {
	return o.ApplyT(func(v *ProxypolicyMove) pulumi.IntOutput { return v.PolicyidSrc }).(pulumi.IntOutput)
}

func (o ProxypolicyMoveOutput) StatePolicySrcdstPos() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProxypolicyMove) pulumi.StringPtrOutput { return v.StatePolicySrcdstPos }).(pulumi.StringPtrOutput)
}

func (o ProxypolicyMoveOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProxypolicyMove) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type ProxypolicyMoveArrayOutput struct{ *pulumi.OutputState }

func (ProxypolicyMoveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProxypolicyMove)(nil)).Elem()
}

func (o ProxypolicyMoveArrayOutput) ToProxypolicyMoveArrayOutput() ProxypolicyMoveArrayOutput {
	return o
}

func (o ProxypolicyMoveArrayOutput) ToProxypolicyMoveArrayOutputWithContext(ctx context.Context) ProxypolicyMoveArrayOutput {
	return o
}

func (o ProxypolicyMoveArrayOutput) Index(i pulumi.IntInput) ProxypolicyMoveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProxypolicyMove {
		return vs[0].([]*ProxypolicyMove)[vs[1].(int)]
	}).(ProxypolicyMoveOutput)
}

type ProxypolicyMoveMapOutput struct{ *pulumi.OutputState }

func (ProxypolicyMoveMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProxypolicyMove)(nil)).Elem()
}

func (o ProxypolicyMoveMapOutput) ToProxypolicyMoveMapOutput() ProxypolicyMoveMapOutput {
	return o
}

func (o ProxypolicyMoveMapOutput) ToProxypolicyMoveMapOutputWithContext(ctx context.Context) ProxypolicyMoveMapOutput {
	return o
}

func (o ProxypolicyMoveMapOutput) MapIndex(k pulumi.StringInput) ProxypolicyMoveOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProxypolicyMove {
		return vs[0].(map[string]*ProxypolicyMove)[vs[1].(string)]
	}).(ProxypolicyMoveOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProxypolicyMoveInput)(nil)).Elem(), &ProxypolicyMove{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxypolicyMoveArrayInput)(nil)).Elem(), ProxypolicyMoveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxypolicyMoveMapInput)(nil)).Elem(), ProxypolicyMoveMap{})
	pulumi.RegisterOutputType(ProxypolicyMoveOutput{})
	pulumi.RegisterOutputType(ProxypolicyMoveArrayOutput{})
	pulumi.RegisterOutputType(ProxypolicyMoveMapOutput{})
}

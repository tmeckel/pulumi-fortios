// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource to sort firewall security policies by policyid or policy name, in ascending or descending order.
//
// ## Example Usage
// ### Example1
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := firewall.NewSecurityPolicysort(ctx, "test", &firewall.SecurityPolicysortArgs{
//				Sortby:        pulumi.String("policyid"),
//				Sortdirection: pulumi.String("descending"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("policylistAfterApply", test.StatePolicyLists)
//			return nil
//		})
//	}
//
// ```
type SecurityPolicysort struct {
	pulumi.CustomResourceState

	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The argument is optional, if it is set, when the value changes, the resource will be re-created. It is usually used when new policies are added, or old policies are deleted, or when the policy name is changed when `sortby` is set to `name`, see Example2.
	ForceRecreate pulumi.StringPtrOutput `pulumi:"forceRecreate"`
	// Sort security policies by the value, it currently supports "policyid" and "name".
	Sortby pulumi.StringOutput `pulumi:"sortby"`
	// Sort dirction, supports "ascending" and "descending".
	Sortdirection    pulumi.StringOutput                          `pulumi:"sortdirection"`
	StatePolicyLists SecurityPolicysortStatePolicyListArrayOutput `pulumi:"statePolicyLists"`
	Status           pulumi.StringPtrOutput                       `pulumi:"status"`
	Vdomparam        pulumi.StringPtrOutput                       `pulumi:"vdomparam"`
}

// NewSecurityPolicysort registers a new resource with the given unique name, arguments, and options.
func NewSecurityPolicysort(ctx *pulumi.Context,
	name string, args *SecurityPolicysortArgs, opts ...pulumi.ResourceOption) (*SecurityPolicysort, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Sortby == nil {
		return nil, errors.New("invalid value for required argument 'Sortby'")
	}
	if args.Sortdirection == nil {
		return nil, errors.New("invalid value for required argument 'Sortdirection'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SecurityPolicysort
	err := ctx.RegisterResource("fortios:firewall/securityPolicysort:SecurityPolicysort", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityPolicysort gets an existing SecurityPolicysort resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityPolicysort(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityPolicysortState, opts ...pulumi.ResourceOption) (*SecurityPolicysort, error) {
	var resource SecurityPolicysort
	err := ctx.ReadResource("fortios:firewall/securityPolicysort:SecurityPolicysort", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityPolicysort resources.
type securityPolicysortState struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// The argument is optional, if it is set, when the value changes, the resource will be re-created. It is usually used when new policies are added, or old policies are deleted, or when the policy name is changed when `sortby` is set to `name`, see Example2.
	ForceRecreate *string `pulumi:"forceRecreate"`
	// Sort security policies by the value, it currently supports "policyid" and "name".
	Sortby *string `pulumi:"sortby"`
	// Sort dirction, supports "ascending" and "descending".
	Sortdirection    *string                             `pulumi:"sortdirection"`
	StatePolicyLists []SecurityPolicysortStatePolicyList `pulumi:"statePolicyLists"`
	Status           *string                             `pulumi:"status"`
	Vdomparam        *string                             `pulumi:"vdomparam"`
}

type SecurityPolicysortState struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// The argument is optional, if it is set, when the value changes, the resource will be re-created. It is usually used when new policies are added, or old policies are deleted, or when the policy name is changed when `sortby` is set to `name`, see Example2.
	ForceRecreate pulumi.StringPtrInput
	// Sort security policies by the value, it currently supports "policyid" and "name".
	Sortby pulumi.StringPtrInput
	// Sort dirction, supports "ascending" and "descending".
	Sortdirection    pulumi.StringPtrInput
	StatePolicyLists SecurityPolicysortStatePolicyListArrayInput
	Status           pulumi.StringPtrInput
	Vdomparam        pulumi.StringPtrInput
}

func (SecurityPolicysortState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityPolicysortState)(nil)).Elem()
}

type securityPolicysortArgs struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// The argument is optional, if it is set, when the value changes, the resource will be re-created. It is usually used when new policies are added, or old policies are deleted, or when the policy name is changed when `sortby` is set to `name`, see Example2.
	ForceRecreate *string `pulumi:"forceRecreate"`
	// Sort security policies by the value, it currently supports "policyid" and "name".
	Sortby string `pulumi:"sortby"`
	// Sort dirction, supports "ascending" and "descending".
	Sortdirection string  `pulumi:"sortdirection"`
	Status        *string `pulumi:"status"`
	Vdomparam     *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SecurityPolicysort resource.
type SecurityPolicysortArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// The argument is optional, if it is set, when the value changes, the resource will be re-created. It is usually used when new policies are added, or old policies are deleted, or when the policy name is changed when `sortby` is set to `name`, see Example2.
	ForceRecreate pulumi.StringPtrInput
	// Sort security policies by the value, it currently supports "policyid" and "name".
	Sortby pulumi.StringInput
	// Sort dirction, supports "ascending" and "descending".
	Sortdirection pulumi.StringInput
	Status        pulumi.StringPtrInput
	Vdomparam     pulumi.StringPtrInput
}

func (SecurityPolicysortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityPolicysortArgs)(nil)).Elem()
}

type SecurityPolicysortInput interface {
	pulumi.Input

	ToSecurityPolicysortOutput() SecurityPolicysortOutput
	ToSecurityPolicysortOutputWithContext(ctx context.Context) SecurityPolicysortOutput
}

func (*SecurityPolicysort) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicysort)(nil)).Elem()
}

func (i *SecurityPolicysort) ToSecurityPolicysortOutput() SecurityPolicysortOutput {
	return i.ToSecurityPolicysortOutputWithContext(context.Background())
}

func (i *SecurityPolicysort) ToSecurityPolicysortOutputWithContext(ctx context.Context) SecurityPolicysortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicysortOutput)
}

// SecurityPolicysortArrayInput is an input type that accepts SecurityPolicysortArray and SecurityPolicysortArrayOutput values.
// You can construct a concrete instance of `SecurityPolicysortArrayInput` via:
//
//	SecurityPolicysortArray{ SecurityPolicysortArgs{...} }
type SecurityPolicysortArrayInput interface {
	pulumi.Input

	ToSecurityPolicysortArrayOutput() SecurityPolicysortArrayOutput
	ToSecurityPolicysortArrayOutputWithContext(context.Context) SecurityPolicysortArrayOutput
}

type SecurityPolicysortArray []SecurityPolicysortInput

func (SecurityPolicysortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityPolicysort)(nil)).Elem()
}

func (i SecurityPolicysortArray) ToSecurityPolicysortArrayOutput() SecurityPolicysortArrayOutput {
	return i.ToSecurityPolicysortArrayOutputWithContext(context.Background())
}

func (i SecurityPolicysortArray) ToSecurityPolicysortArrayOutputWithContext(ctx context.Context) SecurityPolicysortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicysortArrayOutput)
}

// SecurityPolicysortMapInput is an input type that accepts SecurityPolicysortMap and SecurityPolicysortMapOutput values.
// You can construct a concrete instance of `SecurityPolicysortMapInput` via:
//
//	SecurityPolicysortMap{ "key": SecurityPolicysortArgs{...} }
type SecurityPolicysortMapInput interface {
	pulumi.Input

	ToSecurityPolicysortMapOutput() SecurityPolicysortMapOutput
	ToSecurityPolicysortMapOutputWithContext(context.Context) SecurityPolicysortMapOutput
}

type SecurityPolicysortMap map[string]SecurityPolicysortInput

func (SecurityPolicysortMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityPolicysort)(nil)).Elem()
}

func (i SecurityPolicysortMap) ToSecurityPolicysortMapOutput() SecurityPolicysortMapOutput {
	return i.ToSecurityPolicysortMapOutputWithContext(context.Background())
}

func (i SecurityPolicysortMap) ToSecurityPolicysortMapOutputWithContext(ctx context.Context) SecurityPolicysortMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicysortMapOutput)
}

type SecurityPolicysortOutput struct{ *pulumi.OutputState }

func (SecurityPolicysortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicysort)(nil)).Elem()
}

func (o SecurityPolicysortOutput) ToSecurityPolicysortOutput() SecurityPolicysortOutput {
	return o
}

func (o SecurityPolicysortOutput) ToSecurityPolicysortOutputWithContext(ctx context.Context) SecurityPolicysortOutput {
	return o
}

// Comment.
func (o SecurityPolicysortOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicysort) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// The argument is optional, if it is set, when the value changes, the resource will be re-created. It is usually used when new policies are added, or old policies are deleted, or when the policy name is changed when `sortby` is set to `name`, see Example2.
func (o SecurityPolicysortOutput) ForceRecreate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicysort) pulumi.StringPtrOutput { return v.ForceRecreate }).(pulumi.StringPtrOutput)
}

// Sort security policies by the value, it currently supports "policyid" and "name".
func (o SecurityPolicysortOutput) Sortby() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPolicysort) pulumi.StringOutput { return v.Sortby }).(pulumi.StringOutput)
}

// Sort dirction, supports "ascending" and "descending".
func (o SecurityPolicysortOutput) Sortdirection() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPolicysort) pulumi.StringOutput { return v.Sortdirection }).(pulumi.StringOutput)
}

func (o SecurityPolicysortOutput) StatePolicyLists() SecurityPolicysortStatePolicyListArrayOutput {
	return o.ApplyT(func(v *SecurityPolicysort) SecurityPolicysortStatePolicyListArrayOutput { return v.StatePolicyLists }).(SecurityPolicysortStatePolicyListArrayOutput)
}

func (o SecurityPolicysortOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicysort) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

func (o SecurityPolicysortOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicysort) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SecurityPolicysortArrayOutput struct{ *pulumi.OutputState }

func (SecurityPolicysortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityPolicysort)(nil)).Elem()
}

func (o SecurityPolicysortArrayOutput) ToSecurityPolicysortArrayOutput() SecurityPolicysortArrayOutput {
	return o
}

func (o SecurityPolicysortArrayOutput) ToSecurityPolicysortArrayOutputWithContext(ctx context.Context) SecurityPolicysortArrayOutput {
	return o
}

func (o SecurityPolicysortArrayOutput) Index(i pulumi.IntInput) SecurityPolicysortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityPolicysort {
		return vs[0].([]*SecurityPolicysort)[vs[1].(int)]
	}).(SecurityPolicysortOutput)
}

type SecurityPolicysortMapOutput struct{ *pulumi.OutputState }

func (SecurityPolicysortMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityPolicysort)(nil)).Elem()
}

func (o SecurityPolicysortMapOutput) ToSecurityPolicysortMapOutput() SecurityPolicysortMapOutput {
	return o
}

func (o SecurityPolicysortMapOutput) ToSecurityPolicysortMapOutputWithContext(ctx context.Context) SecurityPolicysortMapOutput {
	return o
}

func (o SecurityPolicysortMapOutput) MapIndex(k pulumi.StringInput) SecurityPolicysortOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityPolicysort {
		return vs[0].(map[string]*SecurityPolicysort)[vs[1].(string)]
	}).(SecurityPolicysortOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPolicysortInput)(nil)).Elem(), &SecurityPolicysort{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPolicysortArrayInput)(nil)).Elem(), SecurityPolicysortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPolicysortMapInput)(nil)).Elem(), SecurityPolicysortMap{})
	pulumi.RegisterOutputType(SecurityPolicysortOutput{})
	pulumi.RegisterOutputType(SecurityPolicysortArrayOutput{})
	pulumi.RegisterOutputType(SecurityPolicysortMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sys

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure NetFlow.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/sys"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sys.NewNetflow(ctx, "trname", &sys.NetflowArgs{
//				ActiveFlowTimeout:   pulumi.Int(30),
//				CollectorIp:         pulumi.String("0.0.0.0"),
//				CollectorPort:       pulumi.Int(2055),
//				InactiveFlowTimeout: pulumi.Int(15),
//				SourceIp:            pulumi.String("0.0.0.0"),
//				TemplateTxCounter:   pulumi.Int(20),
//				TemplateTxTimeout:   pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # System Netflow can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:sys/netflow:Netflow labelname SystemNetflow
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:sys/netflow:Netflow labelname SystemNetflow
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type Netflow struct {
	pulumi.CustomResourceState

	// Timeout to report active flows (1 - 60 min, default = 30).
	ActiveFlowTimeout pulumi.IntOutput `pulumi:"activeFlowTimeout"`
	// Collector IP.
	CollectorIp pulumi.StringOutput `pulumi:"collectorIp"`
	// NetFlow collector port number.
	CollectorPort pulumi.IntOutput `pulumi:"collectorPort"`
	// Timeout for periodic report of finished flows (10 - 600 sec, default = 15).
	InactiveFlowTimeout pulumi.IntOutput `pulumi:"inactiveFlowTimeout"`
	// Specify outgoing interface to reach server.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringOutput `pulumi:"interfaceSelectMethod"`
	// Source IP address for communication with the NetFlow agent.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Counter of flowset records before resending a template flowset record.
	TemplateTxCounter pulumi.IntOutput `pulumi:"templateTxCounter"`
	// Timeout for periodic template flowset transmission (1 - 1440 min, default = 30).
	TemplateTxTimeout pulumi.IntOutput `pulumi:"templateTxTimeout"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewNetflow registers a new resource with the given unique name, arguments, and options.
func NewNetflow(ctx *pulumi.Context,
	name string, args *NetflowArgs, opts ...pulumi.ResourceOption) (*Netflow, error) {
	if args == nil {
		args = &NetflowArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Netflow
	err := ctx.RegisterResource("fortios:sys/netflow:Netflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetflow gets an existing Netflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetflowState, opts ...pulumi.ResourceOption) (*Netflow, error) {
	var resource Netflow
	err := ctx.ReadResource("fortios:sys/netflow:Netflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Netflow resources.
type netflowState struct {
	// Timeout to report active flows (1 - 60 min, default = 30).
	ActiveFlowTimeout *int `pulumi:"activeFlowTimeout"`
	// Collector IP.
	CollectorIp *string `pulumi:"collectorIp"`
	// NetFlow collector port number.
	CollectorPort *int `pulumi:"collectorPort"`
	// Timeout for periodic report of finished flows (10 - 600 sec, default = 15).
	InactiveFlowTimeout *int `pulumi:"inactiveFlowTimeout"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Source IP address for communication with the NetFlow agent.
	SourceIp *string `pulumi:"sourceIp"`
	// Counter of flowset records before resending a template flowset record.
	TemplateTxCounter *int `pulumi:"templateTxCounter"`
	// Timeout for periodic template flowset transmission (1 - 1440 min, default = 30).
	TemplateTxTimeout *int `pulumi:"templateTxTimeout"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type NetflowState struct {
	// Timeout to report active flows (1 - 60 min, default = 30).
	ActiveFlowTimeout pulumi.IntPtrInput
	// Collector IP.
	CollectorIp pulumi.StringPtrInput
	// NetFlow collector port number.
	CollectorPort pulumi.IntPtrInput
	// Timeout for periodic report of finished flows (10 - 600 sec, default = 15).
	InactiveFlowTimeout pulumi.IntPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Source IP address for communication with the NetFlow agent.
	SourceIp pulumi.StringPtrInput
	// Counter of flowset records before resending a template flowset record.
	TemplateTxCounter pulumi.IntPtrInput
	// Timeout for periodic template flowset transmission (1 - 1440 min, default = 30).
	TemplateTxTimeout pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (NetflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*netflowState)(nil)).Elem()
}

type netflowArgs struct {
	// Timeout to report active flows (1 - 60 min, default = 30).
	ActiveFlowTimeout *int `pulumi:"activeFlowTimeout"`
	// Collector IP.
	CollectorIp *string `pulumi:"collectorIp"`
	// NetFlow collector port number.
	CollectorPort *int `pulumi:"collectorPort"`
	// Timeout for periodic report of finished flows (10 - 600 sec, default = 15).
	InactiveFlowTimeout *int `pulumi:"inactiveFlowTimeout"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Source IP address for communication with the NetFlow agent.
	SourceIp *string `pulumi:"sourceIp"`
	// Counter of flowset records before resending a template flowset record.
	TemplateTxCounter *int `pulumi:"templateTxCounter"`
	// Timeout for periodic template flowset transmission (1 - 1440 min, default = 30).
	TemplateTxTimeout *int `pulumi:"templateTxTimeout"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Netflow resource.
type NetflowArgs struct {
	// Timeout to report active flows (1 - 60 min, default = 30).
	ActiveFlowTimeout pulumi.IntPtrInput
	// Collector IP.
	CollectorIp pulumi.StringPtrInput
	// NetFlow collector port number.
	CollectorPort pulumi.IntPtrInput
	// Timeout for periodic report of finished flows (10 - 600 sec, default = 15).
	InactiveFlowTimeout pulumi.IntPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Source IP address for communication with the NetFlow agent.
	SourceIp pulumi.StringPtrInput
	// Counter of flowset records before resending a template flowset record.
	TemplateTxCounter pulumi.IntPtrInput
	// Timeout for periodic template flowset transmission (1 - 1440 min, default = 30).
	TemplateTxTimeout pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (NetflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*netflowArgs)(nil)).Elem()
}

type NetflowInput interface {
	pulumi.Input

	ToNetflowOutput() NetflowOutput
	ToNetflowOutputWithContext(ctx context.Context) NetflowOutput
}

func (*Netflow) ElementType() reflect.Type {
	return reflect.TypeOf((**Netflow)(nil)).Elem()
}

func (i *Netflow) ToNetflowOutput() NetflowOutput {
	return i.ToNetflowOutputWithContext(context.Background())
}

func (i *Netflow) ToNetflowOutputWithContext(ctx context.Context) NetflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetflowOutput)
}

// NetflowArrayInput is an input type that accepts NetflowArray and NetflowArrayOutput values.
// You can construct a concrete instance of `NetflowArrayInput` via:
//
//	NetflowArray{ NetflowArgs{...} }
type NetflowArrayInput interface {
	pulumi.Input

	ToNetflowArrayOutput() NetflowArrayOutput
	ToNetflowArrayOutputWithContext(context.Context) NetflowArrayOutput
}

type NetflowArray []NetflowInput

func (NetflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Netflow)(nil)).Elem()
}

func (i NetflowArray) ToNetflowArrayOutput() NetflowArrayOutput {
	return i.ToNetflowArrayOutputWithContext(context.Background())
}

func (i NetflowArray) ToNetflowArrayOutputWithContext(ctx context.Context) NetflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetflowArrayOutput)
}

// NetflowMapInput is an input type that accepts NetflowMap and NetflowMapOutput values.
// You can construct a concrete instance of `NetflowMapInput` via:
//
//	NetflowMap{ "key": NetflowArgs{...} }
type NetflowMapInput interface {
	pulumi.Input

	ToNetflowMapOutput() NetflowMapOutput
	ToNetflowMapOutputWithContext(context.Context) NetflowMapOutput
}

type NetflowMap map[string]NetflowInput

func (NetflowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Netflow)(nil)).Elem()
}

func (i NetflowMap) ToNetflowMapOutput() NetflowMapOutput {
	return i.ToNetflowMapOutputWithContext(context.Background())
}

func (i NetflowMap) ToNetflowMapOutputWithContext(ctx context.Context) NetflowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetflowMapOutput)
}

type NetflowOutput struct{ *pulumi.OutputState }

func (NetflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Netflow)(nil)).Elem()
}

func (o NetflowOutput) ToNetflowOutput() NetflowOutput {
	return o
}

func (o NetflowOutput) ToNetflowOutputWithContext(ctx context.Context) NetflowOutput {
	return o
}

// Timeout to report active flows (1 - 60 min, default = 30).
func (o NetflowOutput) ActiveFlowTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Netflow) pulumi.IntOutput { return v.ActiveFlowTimeout }).(pulumi.IntOutput)
}

// Collector IP.
func (o NetflowOutput) CollectorIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Netflow) pulumi.StringOutput { return v.CollectorIp }).(pulumi.StringOutput)
}

// NetFlow collector port number.
func (o NetflowOutput) CollectorPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Netflow) pulumi.IntOutput { return v.CollectorPort }).(pulumi.IntOutput)
}

// Timeout for periodic report of finished flows (10 - 600 sec, default = 15).
func (o NetflowOutput) InactiveFlowTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Netflow) pulumi.IntOutput { return v.InactiveFlowTimeout }).(pulumi.IntOutput)
}

// Specify outgoing interface to reach server.
func (o NetflowOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Netflow) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
func (o NetflowOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Netflow) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

// Source IP address for communication with the NetFlow agent.
func (o NetflowOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Netflow) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// Counter of flowset records before resending a template flowset record.
func (o NetflowOutput) TemplateTxCounter() pulumi.IntOutput {
	return o.ApplyT(func(v *Netflow) pulumi.IntOutput { return v.TemplateTxCounter }).(pulumi.IntOutput)
}

// Timeout for periodic template flowset transmission (1 - 1440 min, default = 30).
func (o NetflowOutput) TemplateTxTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Netflow) pulumi.IntOutput { return v.TemplateTxTimeout }).(pulumi.IntOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o NetflowOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Netflow) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type NetflowArrayOutput struct{ *pulumi.OutputState }

func (NetflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Netflow)(nil)).Elem()
}

func (o NetflowArrayOutput) ToNetflowArrayOutput() NetflowArrayOutput {
	return o
}

func (o NetflowArrayOutput) ToNetflowArrayOutputWithContext(ctx context.Context) NetflowArrayOutput {
	return o
}

func (o NetflowArrayOutput) Index(i pulumi.IntInput) NetflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Netflow {
		return vs[0].([]*Netflow)[vs[1].(int)]
	}).(NetflowOutput)
}

type NetflowMapOutput struct{ *pulumi.OutputState }

func (NetflowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Netflow)(nil)).Elem()
}

func (o NetflowMapOutput) ToNetflowMapOutput() NetflowMapOutput {
	return o
}

func (o NetflowMapOutput) ToNetflowMapOutputWithContext(ctx context.Context) NetflowMapOutput {
	return o
}

func (o NetflowMapOutput) MapIndex(k pulumi.StringInput) NetflowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Netflow {
		return vs[0].(map[string]*Netflow)[vs[1].(string)]
	}).(NetflowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetflowInput)(nil)).Elem(), &Netflow{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetflowArrayInput)(nil)).Elem(), NetflowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetflowMapInput)(nil)).Elem(), NetflowMap{})
	pulumi.RegisterOutputType(NetflowOutput{})
	pulumi.RegisterOutputType(NetflowArrayOutput{})
	pulumi.RegisterOutputType(NetflowMapOutput{})
}

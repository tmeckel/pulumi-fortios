// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sys

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information on an fortios system ipiptunnel
func LookupIpiptunnel(ctx *pulumi.Context, args *LookupIpiptunnelArgs, opts ...pulumi.InvokeOption) (*LookupIpiptunnelResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupIpiptunnelResult
	err := ctx.Invoke("fortios:sys/getIpiptunnel:getIpiptunnel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpiptunnel.
type LookupIpiptunnelArgs struct {
	// Specify the name of the desired system ipiptunnel.
	Name string `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by getIpiptunnel.
type LookupIpiptunnelResult struct {
	// Enable/disable tunnel ASIC offloading.
	AutoAsicOffload string `pulumi:"autoAsicOffload"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Interface name that is associated with the incoming traffic from available options.
	Interface string `pulumi:"interface"`
	// IPv4 address for the local gateway.
	LocalGw string `pulumi:"localGw"`
	// IPIP Tunnel name.
	Name string `pulumi:"name"`
	// IPv4 address for the remote gateway.
	RemoteGw string `pulumi:"remoteGw"`
	// Enable/disable use of SD-WAN to reach remote gateway.
	UseSdwan  string  `pulumi:"useSdwan"`
	Vdomparam *string `pulumi:"vdomparam"`
}

func LookupIpiptunnelOutput(ctx *pulumi.Context, args LookupIpiptunnelOutputArgs, opts ...pulumi.InvokeOption) LookupIpiptunnelResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIpiptunnelResult, error) {
			args := v.(LookupIpiptunnelArgs)
			r, err := LookupIpiptunnel(ctx, &args, opts...)
			var s LookupIpiptunnelResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIpiptunnelResultOutput)
}

// A collection of arguments for invoking getIpiptunnel.
type LookupIpiptunnelOutputArgs struct {
	// Specify the name of the desired system ipiptunnel.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupIpiptunnelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpiptunnelArgs)(nil)).Elem()
}

// A collection of values returned by getIpiptunnel.
type LookupIpiptunnelResultOutput struct{ *pulumi.OutputState }

func (LookupIpiptunnelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpiptunnelResult)(nil)).Elem()
}

func (o LookupIpiptunnelResultOutput) ToLookupIpiptunnelResultOutput() LookupIpiptunnelResultOutput {
	return o
}

func (o LookupIpiptunnelResultOutput) ToLookupIpiptunnelResultOutputWithContext(ctx context.Context) LookupIpiptunnelResultOutput {
	return o
}

// Enable/disable tunnel ASIC offloading.
func (o LookupIpiptunnelResultOutput) AutoAsicOffload() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpiptunnelResult) string { return v.AutoAsicOffload }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupIpiptunnelResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpiptunnelResult) string { return v.Id }).(pulumi.StringOutput)
}

// Interface name that is associated with the incoming traffic from available options.
func (o LookupIpiptunnelResultOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpiptunnelResult) string { return v.Interface }).(pulumi.StringOutput)
}

// IPv4 address for the local gateway.
func (o LookupIpiptunnelResultOutput) LocalGw() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpiptunnelResult) string { return v.LocalGw }).(pulumi.StringOutput)
}

// IPIP Tunnel name.
func (o LookupIpiptunnelResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpiptunnelResult) string { return v.Name }).(pulumi.StringOutput)
}

// IPv4 address for the remote gateway.
func (o LookupIpiptunnelResultOutput) RemoteGw() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpiptunnelResult) string { return v.RemoteGw }).(pulumi.StringOutput)
}

// Enable/disable use of SD-WAN to reach remote gateway.
func (o LookupIpiptunnelResultOutput) UseSdwan() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpiptunnelResult) string { return v.UseSdwan }).(pulumi.StringOutput)
}

func (o LookupIpiptunnelResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIpiptunnelResult) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIpiptunnelResultOutput{})
}

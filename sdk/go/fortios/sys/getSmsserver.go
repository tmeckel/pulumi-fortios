// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sys

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information on an fortios system smsserver
func LookupSmsserver(ctx *pulumi.Context, args *LookupSmsserverArgs, opts ...pulumi.InvokeOption) (*LookupSmsserverResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupSmsserverResult
	err := ctx.Invoke("fortios:sys/getSmsserver:getSmsserver", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSmsserver.
type LookupSmsserverArgs struct {
	// Specify the name of the desired system smsserver.
	Name string `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by getSmsserver.
type LookupSmsserverResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Email-to-SMS server domain name.
	MailServer string `pulumi:"mailServer"`
	// Name of SMS server.
	Name      string  `pulumi:"name"`
	Vdomparam *string `pulumi:"vdomparam"`
}

func LookupSmsserverOutput(ctx *pulumi.Context, args LookupSmsserverOutputArgs, opts ...pulumi.InvokeOption) LookupSmsserverResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSmsserverResult, error) {
			args := v.(LookupSmsserverArgs)
			r, err := LookupSmsserver(ctx, &args, opts...)
			var s LookupSmsserverResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSmsserverResultOutput)
}

// A collection of arguments for invoking getSmsserver.
type LookupSmsserverOutputArgs struct {
	// Specify the name of the desired system smsserver.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupSmsserverOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSmsserverArgs)(nil)).Elem()
}

// A collection of values returned by getSmsserver.
type LookupSmsserverResultOutput struct{ *pulumi.OutputState }

func (LookupSmsserverResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSmsserverResult)(nil)).Elem()
}

func (o LookupSmsserverResultOutput) ToLookupSmsserverResultOutput() LookupSmsserverResultOutput {
	return o
}

func (o LookupSmsserverResultOutput) ToLookupSmsserverResultOutputWithContext(ctx context.Context) LookupSmsserverResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSmsserverResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSmsserverResult) string { return v.Id }).(pulumi.StringOutput)
}

// Email-to-SMS server domain name.
func (o LookupSmsserverResultOutput) MailServer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSmsserverResult) string { return v.MailServer }).(pulumi.StringOutput)
}

// Name of SMS server.
func (o LookupSmsserverResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSmsserverResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSmsserverResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSmsserverResult) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSmsserverResultOutput{})
}

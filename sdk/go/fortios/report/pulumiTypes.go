// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package report

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ChartCategorySeries struct {
	// Category series value expression.
	Databind *string `pulumi:"databind"`
	// Font size of category-series title.
	FontSize *int `pulumi:"fontSize"`
}

// ChartCategorySeriesInput is an input type that accepts ChartCategorySeriesArgs and ChartCategorySeriesOutput values.
// You can construct a concrete instance of `ChartCategorySeriesInput` via:
//
//	ChartCategorySeriesArgs{...}
type ChartCategorySeriesInput interface {
	pulumi.Input

	ToChartCategorySeriesOutput() ChartCategorySeriesOutput
	ToChartCategorySeriesOutputWithContext(context.Context) ChartCategorySeriesOutput
}

type ChartCategorySeriesArgs struct {
	// Category series value expression.
	Databind pulumi.StringPtrInput `pulumi:"databind"`
	// Font size of category-series title.
	FontSize pulumi.IntPtrInput `pulumi:"fontSize"`
}

func (ChartCategorySeriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartCategorySeries)(nil)).Elem()
}

func (i ChartCategorySeriesArgs) ToChartCategorySeriesOutput() ChartCategorySeriesOutput {
	return i.ToChartCategorySeriesOutputWithContext(context.Background())
}

func (i ChartCategorySeriesArgs) ToChartCategorySeriesOutputWithContext(ctx context.Context) ChartCategorySeriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartCategorySeriesOutput)
}

func (i ChartCategorySeriesArgs) ToChartCategorySeriesPtrOutput() ChartCategorySeriesPtrOutput {
	return i.ToChartCategorySeriesPtrOutputWithContext(context.Background())
}

func (i ChartCategorySeriesArgs) ToChartCategorySeriesPtrOutputWithContext(ctx context.Context) ChartCategorySeriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartCategorySeriesOutput).ToChartCategorySeriesPtrOutputWithContext(ctx)
}

// ChartCategorySeriesPtrInput is an input type that accepts ChartCategorySeriesArgs, ChartCategorySeriesPtr and ChartCategorySeriesPtrOutput values.
// You can construct a concrete instance of `ChartCategorySeriesPtrInput` via:
//
//	        ChartCategorySeriesArgs{...}
//
//	or:
//
//	        nil
type ChartCategorySeriesPtrInput interface {
	pulumi.Input

	ToChartCategorySeriesPtrOutput() ChartCategorySeriesPtrOutput
	ToChartCategorySeriesPtrOutputWithContext(context.Context) ChartCategorySeriesPtrOutput
}

type chartCategorySeriesPtrType ChartCategorySeriesArgs

func ChartCategorySeriesPtr(v *ChartCategorySeriesArgs) ChartCategorySeriesPtrInput {
	return (*chartCategorySeriesPtrType)(v)
}

func (*chartCategorySeriesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChartCategorySeries)(nil)).Elem()
}

func (i *chartCategorySeriesPtrType) ToChartCategorySeriesPtrOutput() ChartCategorySeriesPtrOutput {
	return i.ToChartCategorySeriesPtrOutputWithContext(context.Background())
}

func (i *chartCategorySeriesPtrType) ToChartCategorySeriesPtrOutputWithContext(ctx context.Context) ChartCategorySeriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartCategorySeriesPtrOutput)
}

type ChartCategorySeriesOutput struct{ *pulumi.OutputState }

func (ChartCategorySeriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartCategorySeries)(nil)).Elem()
}

func (o ChartCategorySeriesOutput) ToChartCategorySeriesOutput() ChartCategorySeriesOutput {
	return o
}

func (o ChartCategorySeriesOutput) ToChartCategorySeriesOutputWithContext(ctx context.Context) ChartCategorySeriesOutput {
	return o
}

func (o ChartCategorySeriesOutput) ToChartCategorySeriesPtrOutput() ChartCategorySeriesPtrOutput {
	return o.ToChartCategorySeriesPtrOutputWithContext(context.Background())
}

func (o ChartCategorySeriesOutput) ToChartCategorySeriesPtrOutputWithContext(ctx context.Context) ChartCategorySeriesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChartCategorySeries) *ChartCategorySeries {
		return &v
	}).(ChartCategorySeriesPtrOutput)
}

// Category series value expression.
func (o ChartCategorySeriesOutput) Databind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartCategorySeries) *string { return v.Databind }).(pulumi.StringPtrOutput)
}

// Font size of category-series title.
func (o ChartCategorySeriesOutput) FontSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ChartCategorySeries) *int { return v.FontSize }).(pulumi.IntPtrOutput)
}

type ChartCategorySeriesPtrOutput struct{ *pulumi.OutputState }

func (ChartCategorySeriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChartCategorySeries)(nil)).Elem()
}

func (o ChartCategorySeriesPtrOutput) ToChartCategorySeriesPtrOutput() ChartCategorySeriesPtrOutput {
	return o
}

func (o ChartCategorySeriesPtrOutput) ToChartCategorySeriesPtrOutputWithContext(ctx context.Context) ChartCategorySeriesPtrOutput {
	return o
}

func (o ChartCategorySeriesPtrOutput) Elem() ChartCategorySeriesOutput {
	return o.ApplyT(func(v *ChartCategorySeries) ChartCategorySeries {
		if v != nil {
			return *v
		}
		var ret ChartCategorySeries
		return ret
	}).(ChartCategorySeriesOutput)
}

// Category series value expression.
func (o ChartCategorySeriesPtrOutput) Databind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartCategorySeries) *string {
		if v == nil {
			return nil
		}
		return v.Databind
	}).(pulumi.StringPtrOutput)
}

// Font size of category-series title.
func (o ChartCategorySeriesPtrOutput) FontSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ChartCategorySeries) *int {
		if v == nil {
			return nil
		}
		return v.FontSize
	}).(pulumi.IntPtrOutput)
}

type ChartColumn struct {
	// Detail unit of column.
	DetailUnit *string `pulumi:"detailUnit"`
	// Detail value of column.
	DetailValue *string `pulumi:"detailValue"`
	// Footer unit of column.
	FooterUnit *string `pulumi:"footerUnit"`
	// Footer value of column.
	FooterValue *string `pulumi:"footerValue"`
	// Display name of table header.
	HeaderValue *string `pulumi:"headerValue"`
	// ID.
	Id *int `pulumi:"id"`
	// Show detail in certain display value for certain condition. The structure of `mapping` block is documented below.
	Mappings []ChartColumnMapping `pulumi:"mappings"`
}

// ChartColumnInput is an input type that accepts ChartColumnArgs and ChartColumnOutput values.
// You can construct a concrete instance of `ChartColumnInput` via:
//
//	ChartColumnArgs{...}
type ChartColumnInput interface {
	pulumi.Input

	ToChartColumnOutput() ChartColumnOutput
	ToChartColumnOutputWithContext(context.Context) ChartColumnOutput
}

type ChartColumnArgs struct {
	// Detail unit of column.
	DetailUnit pulumi.StringPtrInput `pulumi:"detailUnit"`
	// Detail value of column.
	DetailValue pulumi.StringPtrInput `pulumi:"detailValue"`
	// Footer unit of column.
	FooterUnit pulumi.StringPtrInput `pulumi:"footerUnit"`
	// Footer value of column.
	FooterValue pulumi.StringPtrInput `pulumi:"footerValue"`
	// Display name of table header.
	HeaderValue pulumi.StringPtrInput `pulumi:"headerValue"`
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Show detail in certain display value for certain condition. The structure of `mapping` block is documented below.
	Mappings ChartColumnMappingArrayInput `pulumi:"mappings"`
}

func (ChartColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartColumn)(nil)).Elem()
}

func (i ChartColumnArgs) ToChartColumnOutput() ChartColumnOutput {
	return i.ToChartColumnOutputWithContext(context.Background())
}

func (i ChartColumnArgs) ToChartColumnOutputWithContext(ctx context.Context) ChartColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartColumnOutput)
}

// ChartColumnArrayInput is an input type that accepts ChartColumnArray and ChartColumnArrayOutput values.
// You can construct a concrete instance of `ChartColumnArrayInput` via:
//
//	ChartColumnArray{ ChartColumnArgs{...} }
type ChartColumnArrayInput interface {
	pulumi.Input

	ToChartColumnArrayOutput() ChartColumnArrayOutput
	ToChartColumnArrayOutputWithContext(context.Context) ChartColumnArrayOutput
}

type ChartColumnArray []ChartColumnInput

func (ChartColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChartColumn)(nil)).Elem()
}

func (i ChartColumnArray) ToChartColumnArrayOutput() ChartColumnArrayOutput {
	return i.ToChartColumnArrayOutputWithContext(context.Background())
}

func (i ChartColumnArray) ToChartColumnArrayOutputWithContext(ctx context.Context) ChartColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartColumnArrayOutput)
}

type ChartColumnOutput struct{ *pulumi.OutputState }

func (ChartColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartColumn)(nil)).Elem()
}

func (o ChartColumnOutput) ToChartColumnOutput() ChartColumnOutput {
	return o
}

func (o ChartColumnOutput) ToChartColumnOutputWithContext(ctx context.Context) ChartColumnOutput {
	return o
}

// Detail unit of column.
func (o ChartColumnOutput) DetailUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartColumn) *string { return v.DetailUnit }).(pulumi.StringPtrOutput)
}

// Detail value of column.
func (o ChartColumnOutput) DetailValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartColumn) *string { return v.DetailValue }).(pulumi.StringPtrOutput)
}

// Footer unit of column.
func (o ChartColumnOutput) FooterUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartColumn) *string { return v.FooterUnit }).(pulumi.StringPtrOutput)
}

// Footer value of column.
func (o ChartColumnOutput) FooterValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartColumn) *string { return v.FooterValue }).(pulumi.StringPtrOutput)
}

// Display name of table header.
func (o ChartColumnOutput) HeaderValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartColumn) *string { return v.HeaderValue }).(pulumi.StringPtrOutput)
}

// ID.
func (o ChartColumnOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ChartColumn) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Show detail in certain display value for certain condition. The structure of `mapping` block is documented below.
func (o ChartColumnOutput) Mappings() ChartColumnMappingArrayOutput {
	return o.ApplyT(func(v ChartColumn) []ChartColumnMapping { return v.Mappings }).(ChartColumnMappingArrayOutput)
}

type ChartColumnArrayOutput struct{ *pulumi.OutputState }

func (ChartColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChartColumn)(nil)).Elem()
}

func (o ChartColumnArrayOutput) ToChartColumnArrayOutput() ChartColumnArrayOutput {
	return o
}

func (o ChartColumnArrayOutput) ToChartColumnArrayOutputWithContext(ctx context.Context) ChartColumnArrayOutput {
	return o
}

func (o ChartColumnArrayOutput) Index(i pulumi.IntInput) ChartColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChartColumn {
		return vs[0].([]ChartColumn)[vs[1].(int)]
	}).(ChartColumnOutput)
}

type ChartColumnMapping struct {
	// Display name.
	Displayname *string `pulumi:"displayname"`
	// id
	Id *int `pulumi:"id"`
	// Comparision operater. Valid values: `none`, `greater`, `greater-equal`, `less`, `less-equal`, `equal`, `between`.
	Op *string `pulumi:"op"`
	// Value 1.
	Value1 *string `pulumi:"value1"`
	// Value 2.
	Value2 *string `pulumi:"value2"`
	// Value type. Valid values: `integer`, `string`.
	ValueType *string `pulumi:"valueType"`
}

// ChartColumnMappingInput is an input type that accepts ChartColumnMappingArgs and ChartColumnMappingOutput values.
// You can construct a concrete instance of `ChartColumnMappingInput` via:
//
//	ChartColumnMappingArgs{...}
type ChartColumnMappingInput interface {
	pulumi.Input

	ToChartColumnMappingOutput() ChartColumnMappingOutput
	ToChartColumnMappingOutputWithContext(context.Context) ChartColumnMappingOutput
}

type ChartColumnMappingArgs struct {
	// Display name.
	Displayname pulumi.StringPtrInput `pulumi:"displayname"`
	// id
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Comparision operater. Valid values: `none`, `greater`, `greater-equal`, `less`, `less-equal`, `equal`, `between`.
	Op pulumi.StringPtrInput `pulumi:"op"`
	// Value 1.
	Value1 pulumi.StringPtrInput `pulumi:"value1"`
	// Value 2.
	Value2 pulumi.StringPtrInput `pulumi:"value2"`
	// Value type. Valid values: `integer`, `string`.
	ValueType pulumi.StringPtrInput `pulumi:"valueType"`
}

func (ChartColumnMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartColumnMapping)(nil)).Elem()
}

func (i ChartColumnMappingArgs) ToChartColumnMappingOutput() ChartColumnMappingOutput {
	return i.ToChartColumnMappingOutputWithContext(context.Background())
}

func (i ChartColumnMappingArgs) ToChartColumnMappingOutputWithContext(ctx context.Context) ChartColumnMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartColumnMappingOutput)
}

// ChartColumnMappingArrayInput is an input type that accepts ChartColumnMappingArray and ChartColumnMappingArrayOutput values.
// You can construct a concrete instance of `ChartColumnMappingArrayInput` via:
//
//	ChartColumnMappingArray{ ChartColumnMappingArgs{...} }
type ChartColumnMappingArrayInput interface {
	pulumi.Input

	ToChartColumnMappingArrayOutput() ChartColumnMappingArrayOutput
	ToChartColumnMappingArrayOutputWithContext(context.Context) ChartColumnMappingArrayOutput
}

type ChartColumnMappingArray []ChartColumnMappingInput

func (ChartColumnMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChartColumnMapping)(nil)).Elem()
}

func (i ChartColumnMappingArray) ToChartColumnMappingArrayOutput() ChartColumnMappingArrayOutput {
	return i.ToChartColumnMappingArrayOutputWithContext(context.Background())
}

func (i ChartColumnMappingArray) ToChartColumnMappingArrayOutputWithContext(ctx context.Context) ChartColumnMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartColumnMappingArrayOutput)
}

type ChartColumnMappingOutput struct{ *pulumi.OutputState }

func (ChartColumnMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartColumnMapping)(nil)).Elem()
}

func (o ChartColumnMappingOutput) ToChartColumnMappingOutput() ChartColumnMappingOutput {
	return o
}

func (o ChartColumnMappingOutput) ToChartColumnMappingOutputWithContext(ctx context.Context) ChartColumnMappingOutput {
	return o
}

// Display name.
func (o ChartColumnMappingOutput) Displayname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartColumnMapping) *string { return v.Displayname }).(pulumi.StringPtrOutput)
}

// id
func (o ChartColumnMappingOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ChartColumnMapping) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Comparision operater. Valid values: `none`, `greater`, `greater-equal`, `less`, `less-equal`, `equal`, `between`.
func (o ChartColumnMappingOutput) Op() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartColumnMapping) *string { return v.Op }).(pulumi.StringPtrOutput)
}

// Value 1.
func (o ChartColumnMappingOutput) Value1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartColumnMapping) *string { return v.Value1 }).(pulumi.StringPtrOutput)
}

// Value 2.
func (o ChartColumnMappingOutput) Value2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartColumnMapping) *string { return v.Value2 }).(pulumi.StringPtrOutput)
}

// Value type. Valid values: `integer`, `string`.
func (o ChartColumnMappingOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartColumnMapping) *string { return v.ValueType }).(pulumi.StringPtrOutput)
}

type ChartColumnMappingArrayOutput struct{ *pulumi.OutputState }

func (ChartColumnMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChartColumnMapping)(nil)).Elem()
}

func (o ChartColumnMappingArrayOutput) ToChartColumnMappingArrayOutput() ChartColumnMappingArrayOutput {
	return o
}

func (o ChartColumnMappingArrayOutput) ToChartColumnMappingArrayOutputWithContext(ctx context.Context) ChartColumnMappingArrayOutput {
	return o
}

func (o ChartColumnMappingArrayOutput) Index(i pulumi.IntInput) ChartColumnMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChartColumnMapping {
		return vs[0].([]ChartColumnMapping)[vs[1].(int)]
	}).(ChartColumnMappingOutput)
}

type ChartDrillDownChart struct {
	// Drill down chart name.
	ChartName *string `pulumi:"chartName"`
	// Drill down chart ID.
	Id *int `pulumi:"id"`
	// Enable/disable this drill down chart. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
}

// ChartDrillDownChartInput is an input type that accepts ChartDrillDownChartArgs and ChartDrillDownChartOutput values.
// You can construct a concrete instance of `ChartDrillDownChartInput` via:
//
//	ChartDrillDownChartArgs{...}
type ChartDrillDownChartInput interface {
	pulumi.Input

	ToChartDrillDownChartOutput() ChartDrillDownChartOutput
	ToChartDrillDownChartOutputWithContext(context.Context) ChartDrillDownChartOutput
}

type ChartDrillDownChartArgs struct {
	// Drill down chart name.
	ChartName pulumi.StringPtrInput `pulumi:"chartName"`
	// Drill down chart ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Enable/disable this drill down chart. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ChartDrillDownChartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartDrillDownChart)(nil)).Elem()
}

func (i ChartDrillDownChartArgs) ToChartDrillDownChartOutput() ChartDrillDownChartOutput {
	return i.ToChartDrillDownChartOutputWithContext(context.Background())
}

func (i ChartDrillDownChartArgs) ToChartDrillDownChartOutputWithContext(ctx context.Context) ChartDrillDownChartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartDrillDownChartOutput)
}

// ChartDrillDownChartArrayInput is an input type that accepts ChartDrillDownChartArray and ChartDrillDownChartArrayOutput values.
// You can construct a concrete instance of `ChartDrillDownChartArrayInput` via:
//
//	ChartDrillDownChartArray{ ChartDrillDownChartArgs{...} }
type ChartDrillDownChartArrayInput interface {
	pulumi.Input

	ToChartDrillDownChartArrayOutput() ChartDrillDownChartArrayOutput
	ToChartDrillDownChartArrayOutputWithContext(context.Context) ChartDrillDownChartArrayOutput
}

type ChartDrillDownChartArray []ChartDrillDownChartInput

func (ChartDrillDownChartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChartDrillDownChart)(nil)).Elem()
}

func (i ChartDrillDownChartArray) ToChartDrillDownChartArrayOutput() ChartDrillDownChartArrayOutput {
	return i.ToChartDrillDownChartArrayOutputWithContext(context.Background())
}

func (i ChartDrillDownChartArray) ToChartDrillDownChartArrayOutputWithContext(ctx context.Context) ChartDrillDownChartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartDrillDownChartArrayOutput)
}

type ChartDrillDownChartOutput struct{ *pulumi.OutputState }

func (ChartDrillDownChartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartDrillDownChart)(nil)).Elem()
}

func (o ChartDrillDownChartOutput) ToChartDrillDownChartOutput() ChartDrillDownChartOutput {
	return o
}

func (o ChartDrillDownChartOutput) ToChartDrillDownChartOutputWithContext(ctx context.Context) ChartDrillDownChartOutput {
	return o
}

// Drill down chart name.
func (o ChartDrillDownChartOutput) ChartName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartDrillDownChart) *string { return v.ChartName }).(pulumi.StringPtrOutput)
}

// Drill down chart ID.
func (o ChartDrillDownChartOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ChartDrillDownChart) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Enable/disable this drill down chart. Valid values: `enable`, `disable`.
func (o ChartDrillDownChartOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartDrillDownChart) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ChartDrillDownChartArrayOutput struct{ *pulumi.OutputState }

func (ChartDrillDownChartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChartDrillDownChart)(nil)).Elem()
}

func (o ChartDrillDownChartArrayOutput) ToChartDrillDownChartArrayOutput() ChartDrillDownChartArrayOutput {
	return o
}

func (o ChartDrillDownChartArrayOutput) ToChartDrillDownChartArrayOutputWithContext(ctx context.Context) ChartDrillDownChartArrayOutput {
	return o
}

func (o ChartDrillDownChartArrayOutput) Index(i pulumi.IntInput) ChartDrillDownChartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChartDrillDownChart {
		return vs[0].([]ChartDrillDownChart)[vs[1].(int)]
	}).(ChartDrillDownChartOutput)
}

type ChartValueSeries struct {
	// Value series value expression.
	Databind *string `pulumi:"databind"`
}

// ChartValueSeriesInput is an input type that accepts ChartValueSeriesArgs and ChartValueSeriesOutput values.
// You can construct a concrete instance of `ChartValueSeriesInput` via:
//
//	ChartValueSeriesArgs{...}
type ChartValueSeriesInput interface {
	pulumi.Input

	ToChartValueSeriesOutput() ChartValueSeriesOutput
	ToChartValueSeriesOutputWithContext(context.Context) ChartValueSeriesOutput
}

type ChartValueSeriesArgs struct {
	// Value series value expression.
	Databind pulumi.StringPtrInput `pulumi:"databind"`
}

func (ChartValueSeriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartValueSeries)(nil)).Elem()
}

func (i ChartValueSeriesArgs) ToChartValueSeriesOutput() ChartValueSeriesOutput {
	return i.ToChartValueSeriesOutputWithContext(context.Background())
}

func (i ChartValueSeriesArgs) ToChartValueSeriesOutputWithContext(ctx context.Context) ChartValueSeriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartValueSeriesOutput)
}

func (i ChartValueSeriesArgs) ToChartValueSeriesPtrOutput() ChartValueSeriesPtrOutput {
	return i.ToChartValueSeriesPtrOutputWithContext(context.Background())
}

func (i ChartValueSeriesArgs) ToChartValueSeriesPtrOutputWithContext(ctx context.Context) ChartValueSeriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartValueSeriesOutput).ToChartValueSeriesPtrOutputWithContext(ctx)
}

// ChartValueSeriesPtrInput is an input type that accepts ChartValueSeriesArgs, ChartValueSeriesPtr and ChartValueSeriesPtrOutput values.
// You can construct a concrete instance of `ChartValueSeriesPtrInput` via:
//
//	        ChartValueSeriesArgs{...}
//
//	or:
//
//	        nil
type ChartValueSeriesPtrInput interface {
	pulumi.Input

	ToChartValueSeriesPtrOutput() ChartValueSeriesPtrOutput
	ToChartValueSeriesPtrOutputWithContext(context.Context) ChartValueSeriesPtrOutput
}

type chartValueSeriesPtrType ChartValueSeriesArgs

func ChartValueSeriesPtr(v *ChartValueSeriesArgs) ChartValueSeriesPtrInput {
	return (*chartValueSeriesPtrType)(v)
}

func (*chartValueSeriesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChartValueSeries)(nil)).Elem()
}

func (i *chartValueSeriesPtrType) ToChartValueSeriesPtrOutput() ChartValueSeriesPtrOutput {
	return i.ToChartValueSeriesPtrOutputWithContext(context.Background())
}

func (i *chartValueSeriesPtrType) ToChartValueSeriesPtrOutputWithContext(ctx context.Context) ChartValueSeriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartValueSeriesPtrOutput)
}

type ChartValueSeriesOutput struct{ *pulumi.OutputState }

func (ChartValueSeriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartValueSeries)(nil)).Elem()
}

func (o ChartValueSeriesOutput) ToChartValueSeriesOutput() ChartValueSeriesOutput {
	return o
}

func (o ChartValueSeriesOutput) ToChartValueSeriesOutputWithContext(ctx context.Context) ChartValueSeriesOutput {
	return o
}

func (o ChartValueSeriesOutput) ToChartValueSeriesPtrOutput() ChartValueSeriesPtrOutput {
	return o.ToChartValueSeriesPtrOutputWithContext(context.Background())
}

func (o ChartValueSeriesOutput) ToChartValueSeriesPtrOutputWithContext(ctx context.Context) ChartValueSeriesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChartValueSeries) *ChartValueSeries {
		return &v
	}).(ChartValueSeriesPtrOutput)
}

// Value series value expression.
func (o ChartValueSeriesOutput) Databind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartValueSeries) *string { return v.Databind }).(pulumi.StringPtrOutput)
}

type ChartValueSeriesPtrOutput struct{ *pulumi.OutputState }

func (ChartValueSeriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChartValueSeries)(nil)).Elem()
}

func (o ChartValueSeriesPtrOutput) ToChartValueSeriesPtrOutput() ChartValueSeriesPtrOutput {
	return o
}

func (o ChartValueSeriesPtrOutput) ToChartValueSeriesPtrOutputWithContext(ctx context.Context) ChartValueSeriesPtrOutput {
	return o
}

func (o ChartValueSeriesPtrOutput) Elem() ChartValueSeriesOutput {
	return o.ApplyT(func(v *ChartValueSeries) ChartValueSeries {
		if v != nil {
			return *v
		}
		var ret ChartValueSeries
		return ret
	}).(ChartValueSeriesOutput)
}

// Value series value expression.
func (o ChartValueSeriesPtrOutput) Databind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartValueSeries) *string {
		if v == nil {
			return nil
		}
		return v.Databind
	}).(pulumi.StringPtrOutput)
}

type ChartXSeries struct {
	// X-series caption.
	Caption *string `pulumi:"caption"`
	// X-series caption font size.
	CaptionFontSize *int `pulumi:"captionFontSize"`
	// X-series value expression.
	Databind *string `pulumi:"databind"`
	// X-series label font size.
	FontSize *int `pulumi:"fontSize"`
	// X-series represent category or not. Valid values: `yes`, `no`.
	IsCategory *string `pulumi:"isCategory"`
	// X-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
	LabelAngle *string `pulumi:"labelAngle"`
	// Scale increase or decrease. Valid values: `decrease`, `increase`.
	ScaleDirection *string `pulumi:"scaleDirection"`
	// Date/time format. Valid values: `YYYY-MM-DD-HH-MM`, `YYYY-MM-DD HH`, `YYYY-MM-DD`, `YYYY-MM`, `YYYY`, `HH-MM`, `MM-DD`.
	ScaleFormat *string `pulumi:"scaleFormat"`
	// Scale step.
	ScaleStep *int `pulumi:"scaleStep"`
	// Scale unit. Valid values: `minute`, `hour`, `day`, `month`, `year`.
	ScaleUnit *string `pulumi:"scaleUnit"`
	// X-series unit.
	Unit *string `pulumi:"unit"`
}

// ChartXSeriesInput is an input type that accepts ChartXSeriesArgs and ChartXSeriesOutput values.
// You can construct a concrete instance of `ChartXSeriesInput` via:
//
//	ChartXSeriesArgs{...}
type ChartXSeriesInput interface {
	pulumi.Input

	ToChartXSeriesOutput() ChartXSeriesOutput
	ToChartXSeriesOutputWithContext(context.Context) ChartXSeriesOutput
}

type ChartXSeriesArgs struct {
	// X-series caption.
	Caption pulumi.StringPtrInput `pulumi:"caption"`
	// X-series caption font size.
	CaptionFontSize pulumi.IntPtrInput `pulumi:"captionFontSize"`
	// X-series value expression.
	Databind pulumi.StringPtrInput `pulumi:"databind"`
	// X-series label font size.
	FontSize pulumi.IntPtrInput `pulumi:"fontSize"`
	// X-series represent category or not. Valid values: `yes`, `no`.
	IsCategory pulumi.StringPtrInput `pulumi:"isCategory"`
	// X-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
	LabelAngle pulumi.StringPtrInput `pulumi:"labelAngle"`
	// Scale increase or decrease. Valid values: `decrease`, `increase`.
	ScaleDirection pulumi.StringPtrInput `pulumi:"scaleDirection"`
	// Date/time format. Valid values: `YYYY-MM-DD-HH-MM`, `YYYY-MM-DD HH`, `YYYY-MM-DD`, `YYYY-MM`, `YYYY`, `HH-MM`, `MM-DD`.
	ScaleFormat pulumi.StringPtrInput `pulumi:"scaleFormat"`
	// Scale step.
	ScaleStep pulumi.IntPtrInput `pulumi:"scaleStep"`
	// Scale unit. Valid values: `minute`, `hour`, `day`, `month`, `year`.
	ScaleUnit pulumi.StringPtrInput `pulumi:"scaleUnit"`
	// X-series unit.
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (ChartXSeriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartXSeries)(nil)).Elem()
}

func (i ChartXSeriesArgs) ToChartXSeriesOutput() ChartXSeriesOutput {
	return i.ToChartXSeriesOutputWithContext(context.Background())
}

func (i ChartXSeriesArgs) ToChartXSeriesOutputWithContext(ctx context.Context) ChartXSeriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartXSeriesOutput)
}

func (i ChartXSeriesArgs) ToChartXSeriesPtrOutput() ChartXSeriesPtrOutput {
	return i.ToChartXSeriesPtrOutputWithContext(context.Background())
}

func (i ChartXSeriesArgs) ToChartXSeriesPtrOutputWithContext(ctx context.Context) ChartXSeriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartXSeriesOutput).ToChartXSeriesPtrOutputWithContext(ctx)
}

// ChartXSeriesPtrInput is an input type that accepts ChartXSeriesArgs, ChartXSeriesPtr and ChartXSeriesPtrOutput values.
// You can construct a concrete instance of `ChartXSeriesPtrInput` via:
//
//	        ChartXSeriesArgs{...}
//
//	or:
//
//	        nil
type ChartXSeriesPtrInput interface {
	pulumi.Input

	ToChartXSeriesPtrOutput() ChartXSeriesPtrOutput
	ToChartXSeriesPtrOutputWithContext(context.Context) ChartXSeriesPtrOutput
}

type chartXSeriesPtrType ChartXSeriesArgs

func ChartXSeriesPtr(v *ChartXSeriesArgs) ChartXSeriesPtrInput {
	return (*chartXSeriesPtrType)(v)
}

func (*chartXSeriesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChartXSeries)(nil)).Elem()
}

func (i *chartXSeriesPtrType) ToChartXSeriesPtrOutput() ChartXSeriesPtrOutput {
	return i.ToChartXSeriesPtrOutputWithContext(context.Background())
}

func (i *chartXSeriesPtrType) ToChartXSeriesPtrOutputWithContext(ctx context.Context) ChartXSeriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartXSeriesPtrOutput)
}

type ChartXSeriesOutput struct{ *pulumi.OutputState }

func (ChartXSeriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartXSeries)(nil)).Elem()
}

func (o ChartXSeriesOutput) ToChartXSeriesOutput() ChartXSeriesOutput {
	return o
}

func (o ChartXSeriesOutput) ToChartXSeriesOutputWithContext(ctx context.Context) ChartXSeriesOutput {
	return o
}

func (o ChartXSeriesOutput) ToChartXSeriesPtrOutput() ChartXSeriesPtrOutput {
	return o.ToChartXSeriesPtrOutputWithContext(context.Background())
}

func (o ChartXSeriesOutput) ToChartXSeriesPtrOutputWithContext(ctx context.Context) ChartXSeriesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChartXSeries) *ChartXSeries {
		return &v
	}).(ChartXSeriesPtrOutput)
}

// X-series caption.
func (o ChartXSeriesOutput) Caption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartXSeries) *string { return v.Caption }).(pulumi.StringPtrOutput)
}

// X-series caption font size.
func (o ChartXSeriesOutput) CaptionFontSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ChartXSeries) *int { return v.CaptionFontSize }).(pulumi.IntPtrOutput)
}

// X-series value expression.
func (o ChartXSeriesOutput) Databind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartXSeries) *string { return v.Databind }).(pulumi.StringPtrOutput)
}

// X-series label font size.
func (o ChartXSeriesOutput) FontSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ChartXSeries) *int { return v.FontSize }).(pulumi.IntPtrOutput)
}

// X-series represent category or not. Valid values: `yes`, `no`.
func (o ChartXSeriesOutput) IsCategory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartXSeries) *string { return v.IsCategory }).(pulumi.StringPtrOutput)
}

// X-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
func (o ChartXSeriesOutput) LabelAngle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartXSeries) *string { return v.LabelAngle }).(pulumi.StringPtrOutput)
}

// Scale increase or decrease. Valid values: `decrease`, `increase`.
func (o ChartXSeriesOutput) ScaleDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartXSeries) *string { return v.ScaleDirection }).(pulumi.StringPtrOutput)
}

// Date/time format. Valid values: `YYYY-MM-DD-HH-MM`, `YYYY-MM-DD HH`, `YYYY-MM-DD`, `YYYY-MM`, `YYYY`, `HH-MM`, `MM-DD`.
func (o ChartXSeriesOutput) ScaleFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartXSeries) *string { return v.ScaleFormat }).(pulumi.StringPtrOutput)
}

// Scale step.
func (o ChartXSeriesOutput) ScaleStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ChartXSeries) *int { return v.ScaleStep }).(pulumi.IntPtrOutput)
}

// Scale unit. Valid values: `minute`, `hour`, `day`, `month`, `year`.
func (o ChartXSeriesOutput) ScaleUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartXSeries) *string { return v.ScaleUnit }).(pulumi.StringPtrOutput)
}

// X-series unit.
func (o ChartXSeriesOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartXSeries) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type ChartXSeriesPtrOutput struct{ *pulumi.OutputState }

func (ChartXSeriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChartXSeries)(nil)).Elem()
}

func (o ChartXSeriesPtrOutput) ToChartXSeriesPtrOutput() ChartXSeriesPtrOutput {
	return o
}

func (o ChartXSeriesPtrOutput) ToChartXSeriesPtrOutputWithContext(ctx context.Context) ChartXSeriesPtrOutput {
	return o
}

func (o ChartXSeriesPtrOutput) Elem() ChartXSeriesOutput {
	return o.ApplyT(func(v *ChartXSeries) ChartXSeries {
		if v != nil {
			return *v
		}
		var ret ChartXSeries
		return ret
	}).(ChartXSeriesOutput)
}

// X-series caption.
func (o ChartXSeriesPtrOutput) Caption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartXSeries) *string {
		if v == nil {
			return nil
		}
		return v.Caption
	}).(pulumi.StringPtrOutput)
}

// X-series caption font size.
func (o ChartXSeriesPtrOutput) CaptionFontSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ChartXSeries) *int {
		if v == nil {
			return nil
		}
		return v.CaptionFontSize
	}).(pulumi.IntPtrOutput)
}

// X-series value expression.
func (o ChartXSeriesPtrOutput) Databind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartXSeries) *string {
		if v == nil {
			return nil
		}
		return v.Databind
	}).(pulumi.StringPtrOutput)
}

// X-series label font size.
func (o ChartXSeriesPtrOutput) FontSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ChartXSeries) *int {
		if v == nil {
			return nil
		}
		return v.FontSize
	}).(pulumi.IntPtrOutput)
}

// X-series represent category or not. Valid values: `yes`, `no`.
func (o ChartXSeriesPtrOutput) IsCategory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartXSeries) *string {
		if v == nil {
			return nil
		}
		return v.IsCategory
	}).(pulumi.StringPtrOutput)
}

// X-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
func (o ChartXSeriesPtrOutput) LabelAngle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartXSeries) *string {
		if v == nil {
			return nil
		}
		return v.LabelAngle
	}).(pulumi.StringPtrOutput)
}

// Scale increase or decrease. Valid values: `decrease`, `increase`.
func (o ChartXSeriesPtrOutput) ScaleDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartXSeries) *string {
		if v == nil {
			return nil
		}
		return v.ScaleDirection
	}).(pulumi.StringPtrOutput)
}

// Date/time format. Valid values: `YYYY-MM-DD-HH-MM`, `YYYY-MM-DD HH`, `YYYY-MM-DD`, `YYYY-MM`, `YYYY`, `HH-MM`, `MM-DD`.
func (o ChartXSeriesPtrOutput) ScaleFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartXSeries) *string {
		if v == nil {
			return nil
		}
		return v.ScaleFormat
	}).(pulumi.StringPtrOutput)
}

// Scale step.
func (o ChartXSeriesPtrOutput) ScaleStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ChartXSeries) *int {
		if v == nil {
			return nil
		}
		return v.ScaleStep
	}).(pulumi.IntPtrOutput)
}

// Scale unit. Valid values: `minute`, `hour`, `day`, `month`, `year`.
func (o ChartXSeriesPtrOutput) ScaleUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartXSeries) *string {
		if v == nil {
			return nil
		}
		return v.ScaleUnit
	}).(pulumi.StringPtrOutput)
}

// X-series unit.
func (o ChartXSeriesPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartXSeries) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

type ChartYSeries struct {
	// Y-series caption.
	Caption *string `pulumi:"caption"`
	// Y-series caption font size.
	CaptionFontSize *int `pulumi:"captionFontSize"`
	// Y-series value expression.
	Databind *string `pulumi:"databind"`
	// Extra Y-series value.
	ExtraDatabind *string `pulumi:"extraDatabind"`
	// Allow another Y-series value Valid values: `enable`, `disable`.
	ExtraY *string `pulumi:"extraY"`
	// Extra Y-series legend type/name.
	ExtraYLegend *string `pulumi:"extraYLegend"`
	// Y-series label font size.
	FontSize *int `pulumi:"fontSize"`
	// Y-series group option.
	Group *string `pulumi:"group"`
	// Y-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
	LabelAngle *string `pulumi:"labelAngle"`
	// Y-series unit.
	Unit *string `pulumi:"unit"`
	// First Y-series legend type/name.
	YLegend *string `pulumi:"yLegend"`
}

// ChartYSeriesInput is an input type that accepts ChartYSeriesArgs and ChartYSeriesOutput values.
// You can construct a concrete instance of `ChartYSeriesInput` via:
//
//	ChartYSeriesArgs{...}
type ChartYSeriesInput interface {
	pulumi.Input

	ToChartYSeriesOutput() ChartYSeriesOutput
	ToChartYSeriesOutputWithContext(context.Context) ChartYSeriesOutput
}

type ChartYSeriesArgs struct {
	// Y-series caption.
	Caption pulumi.StringPtrInput `pulumi:"caption"`
	// Y-series caption font size.
	CaptionFontSize pulumi.IntPtrInput `pulumi:"captionFontSize"`
	// Y-series value expression.
	Databind pulumi.StringPtrInput `pulumi:"databind"`
	// Extra Y-series value.
	ExtraDatabind pulumi.StringPtrInput `pulumi:"extraDatabind"`
	// Allow another Y-series value Valid values: `enable`, `disable`.
	ExtraY pulumi.StringPtrInput `pulumi:"extraY"`
	// Extra Y-series legend type/name.
	ExtraYLegend pulumi.StringPtrInput `pulumi:"extraYLegend"`
	// Y-series label font size.
	FontSize pulumi.IntPtrInput `pulumi:"fontSize"`
	// Y-series group option.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Y-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
	LabelAngle pulumi.StringPtrInput `pulumi:"labelAngle"`
	// Y-series unit.
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// First Y-series legend type/name.
	YLegend pulumi.StringPtrInput `pulumi:"yLegend"`
}

func (ChartYSeriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartYSeries)(nil)).Elem()
}

func (i ChartYSeriesArgs) ToChartYSeriesOutput() ChartYSeriesOutput {
	return i.ToChartYSeriesOutputWithContext(context.Background())
}

func (i ChartYSeriesArgs) ToChartYSeriesOutputWithContext(ctx context.Context) ChartYSeriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartYSeriesOutput)
}

func (i ChartYSeriesArgs) ToChartYSeriesPtrOutput() ChartYSeriesPtrOutput {
	return i.ToChartYSeriesPtrOutputWithContext(context.Background())
}

func (i ChartYSeriesArgs) ToChartYSeriesPtrOutputWithContext(ctx context.Context) ChartYSeriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartYSeriesOutput).ToChartYSeriesPtrOutputWithContext(ctx)
}

// ChartYSeriesPtrInput is an input type that accepts ChartYSeriesArgs, ChartYSeriesPtr and ChartYSeriesPtrOutput values.
// You can construct a concrete instance of `ChartYSeriesPtrInput` via:
//
//	        ChartYSeriesArgs{...}
//
//	or:
//
//	        nil
type ChartYSeriesPtrInput interface {
	pulumi.Input

	ToChartYSeriesPtrOutput() ChartYSeriesPtrOutput
	ToChartYSeriesPtrOutputWithContext(context.Context) ChartYSeriesPtrOutput
}

type chartYSeriesPtrType ChartYSeriesArgs

func ChartYSeriesPtr(v *ChartYSeriesArgs) ChartYSeriesPtrInput {
	return (*chartYSeriesPtrType)(v)
}

func (*chartYSeriesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChartYSeries)(nil)).Elem()
}

func (i *chartYSeriesPtrType) ToChartYSeriesPtrOutput() ChartYSeriesPtrOutput {
	return i.ToChartYSeriesPtrOutputWithContext(context.Background())
}

func (i *chartYSeriesPtrType) ToChartYSeriesPtrOutputWithContext(ctx context.Context) ChartYSeriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartYSeriesPtrOutput)
}

type ChartYSeriesOutput struct{ *pulumi.OutputState }

func (ChartYSeriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartYSeries)(nil)).Elem()
}

func (o ChartYSeriesOutput) ToChartYSeriesOutput() ChartYSeriesOutput {
	return o
}

func (o ChartYSeriesOutput) ToChartYSeriesOutputWithContext(ctx context.Context) ChartYSeriesOutput {
	return o
}

func (o ChartYSeriesOutput) ToChartYSeriesPtrOutput() ChartYSeriesPtrOutput {
	return o.ToChartYSeriesPtrOutputWithContext(context.Background())
}

func (o ChartYSeriesOutput) ToChartYSeriesPtrOutputWithContext(ctx context.Context) ChartYSeriesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChartYSeries) *ChartYSeries {
		return &v
	}).(ChartYSeriesPtrOutput)
}

// Y-series caption.
func (o ChartYSeriesOutput) Caption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartYSeries) *string { return v.Caption }).(pulumi.StringPtrOutput)
}

// Y-series caption font size.
func (o ChartYSeriesOutput) CaptionFontSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ChartYSeries) *int { return v.CaptionFontSize }).(pulumi.IntPtrOutput)
}

// Y-series value expression.
func (o ChartYSeriesOutput) Databind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartYSeries) *string { return v.Databind }).(pulumi.StringPtrOutput)
}

// Extra Y-series value.
func (o ChartYSeriesOutput) ExtraDatabind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartYSeries) *string { return v.ExtraDatabind }).(pulumi.StringPtrOutput)
}

// Allow another Y-series value Valid values: `enable`, `disable`.
func (o ChartYSeriesOutput) ExtraY() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartYSeries) *string { return v.ExtraY }).(pulumi.StringPtrOutput)
}

// Extra Y-series legend type/name.
func (o ChartYSeriesOutput) ExtraYLegend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartYSeries) *string { return v.ExtraYLegend }).(pulumi.StringPtrOutput)
}

// Y-series label font size.
func (o ChartYSeriesOutput) FontSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ChartYSeries) *int { return v.FontSize }).(pulumi.IntPtrOutput)
}

// Y-series group option.
func (o ChartYSeriesOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartYSeries) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Y-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
func (o ChartYSeriesOutput) LabelAngle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartYSeries) *string { return v.LabelAngle }).(pulumi.StringPtrOutput)
}

// Y-series unit.
func (o ChartYSeriesOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartYSeries) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// First Y-series legend type/name.
func (o ChartYSeriesOutput) YLegend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChartYSeries) *string { return v.YLegend }).(pulumi.StringPtrOutput)
}

type ChartYSeriesPtrOutput struct{ *pulumi.OutputState }

func (ChartYSeriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChartYSeries)(nil)).Elem()
}

func (o ChartYSeriesPtrOutput) ToChartYSeriesPtrOutput() ChartYSeriesPtrOutput {
	return o
}

func (o ChartYSeriesPtrOutput) ToChartYSeriesPtrOutputWithContext(ctx context.Context) ChartYSeriesPtrOutput {
	return o
}

func (o ChartYSeriesPtrOutput) Elem() ChartYSeriesOutput {
	return o.ApplyT(func(v *ChartYSeries) ChartYSeries {
		if v != nil {
			return *v
		}
		var ret ChartYSeries
		return ret
	}).(ChartYSeriesOutput)
}

// Y-series caption.
func (o ChartYSeriesPtrOutput) Caption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartYSeries) *string {
		if v == nil {
			return nil
		}
		return v.Caption
	}).(pulumi.StringPtrOutput)
}

// Y-series caption font size.
func (o ChartYSeriesPtrOutput) CaptionFontSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ChartYSeries) *int {
		if v == nil {
			return nil
		}
		return v.CaptionFontSize
	}).(pulumi.IntPtrOutput)
}

// Y-series value expression.
func (o ChartYSeriesPtrOutput) Databind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartYSeries) *string {
		if v == nil {
			return nil
		}
		return v.Databind
	}).(pulumi.StringPtrOutput)
}

// Extra Y-series value.
func (o ChartYSeriesPtrOutput) ExtraDatabind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartYSeries) *string {
		if v == nil {
			return nil
		}
		return v.ExtraDatabind
	}).(pulumi.StringPtrOutput)
}

// Allow another Y-series value Valid values: `enable`, `disable`.
func (o ChartYSeriesPtrOutput) ExtraY() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartYSeries) *string {
		if v == nil {
			return nil
		}
		return v.ExtraY
	}).(pulumi.StringPtrOutput)
}

// Extra Y-series legend type/name.
func (o ChartYSeriesPtrOutput) ExtraYLegend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartYSeries) *string {
		if v == nil {
			return nil
		}
		return v.ExtraYLegend
	}).(pulumi.StringPtrOutput)
}

// Y-series label font size.
func (o ChartYSeriesPtrOutput) FontSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ChartYSeries) *int {
		if v == nil {
			return nil
		}
		return v.FontSize
	}).(pulumi.IntPtrOutput)
}

// Y-series group option.
func (o ChartYSeriesPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartYSeries) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Y-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
func (o ChartYSeriesPtrOutput) LabelAngle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartYSeries) *string {
		if v == nil {
			return nil
		}
		return v.LabelAngle
	}).(pulumi.StringPtrOutput)
}

// Y-series unit.
func (o ChartYSeriesPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartYSeries) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// First Y-series legend type/name.
func (o ChartYSeriesPtrOutput) YLegend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChartYSeries) *string {
		if v == nil {
			return nil
		}
		return v.YLegend
	}).(pulumi.StringPtrOutput)
}

type DatasetField struct {
	// Display name.
	Displayname *string `pulumi:"displayname"`
	// Field ID (1 to number of columns in SQL result).
	Id *int `pulumi:"id"`
	// Name.
	Name *string `pulumi:"name"`
	// Field type. Valid values: `text`, `integer`, `double`.
	Type *string `pulumi:"type"`
}

// DatasetFieldInput is an input type that accepts DatasetFieldArgs and DatasetFieldOutput values.
// You can construct a concrete instance of `DatasetFieldInput` via:
//
//	DatasetFieldArgs{...}
type DatasetFieldInput interface {
	pulumi.Input

	ToDatasetFieldOutput() DatasetFieldOutput
	ToDatasetFieldOutputWithContext(context.Context) DatasetFieldOutput
}

type DatasetFieldArgs struct {
	// Display name.
	Displayname pulumi.StringPtrInput `pulumi:"displayname"`
	// Field ID (1 to number of columns in SQL result).
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Field type. Valid values: `text`, `integer`, `double`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DatasetFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetField)(nil)).Elem()
}

func (i DatasetFieldArgs) ToDatasetFieldOutput() DatasetFieldOutput {
	return i.ToDatasetFieldOutputWithContext(context.Background())
}

func (i DatasetFieldArgs) ToDatasetFieldOutputWithContext(ctx context.Context) DatasetFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFieldOutput)
}

// DatasetFieldArrayInput is an input type that accepts DatasetFieldArray and DatasetFieldArrayOutput values.
// You can construct a concrete instance of `DatasetFieldArrayInput` via:
//
//	DatasetFieldArray{ DatasetFieldArgs{...} }
type DatasetFieldArrayInput interface {
	pulumi.Input

	ToDatasetFieldArrayOutput() DatasetFieldArrayOutput
	ToDatasetFieldArrayOutputWithContext(context.Context) DatasetFieldArrayOutput
}

type DatasetFieldArray []DatasetFieldInput

func (DatasetFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetField)(nil)).Elem()
}

func (i DatasetFieldArray) ToDatasetFieldArrayOutput() DatasetFieldArrayOutput {
	return i.ToDatasetFieldArrayOutputWithContext(context.Background())
}

func (i DatasetFieldArray) ToDatasetFieldArrayOutputWithContext(ctx context.Context) DatasetFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFieldArrayOutput)
}

type DatasetFieldOutput struct{ *pulumi.OutputState }

func (DatasetFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetField)(nil)).Elem()
}

func (o DatasetFieldOutput) ToDatasetFieldOutput() DatasetFieldOutput {
	return o
}

func (o DatasetFieldOutput) ToDatasetFieldOutputWithContext(ctx context.Context) DatasetFieldOutput {
	return o
}

// Display name.
func (o DatasetFieldOutput) Displayname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetField) *string { return v.Displayname }).(pulumi.StringPtrOutput)
}

// Field ID (1 to number of columns in SQL result).
func (o DatasetFieldOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatasetField) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Name.
func (o DatasetFieldOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetField) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Field type. Valid values: `text`, `integer`, `double`.
func (o DatasetFieldOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetField) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DatasetFieldArrayOutput struct{ *pulumi.OutputState }

func (DatasetFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetField)(nil)).Elem()
}

func (o DatasetFieldArrayOutput) ToDatasetFieldArrayOutput() DatasetFieldArrayOutput {
	return o
}

func (o DatasetFieldArrayOutput) ToDatasetFieldArrayOutputWithContext(ctx context.Context) DatasetFieldArrayOutput {
	return o
}

func (o DatasetFieldArrayOutput) Index(i pulumi.IntInput) DatasetFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetField {
		return vs[0].([]DatasetField)[vs[1].(int)]
	}).(DatasetFieldOutput)
}

type DatasetParameter struct {
	// Data type. Valid values: `text`, `integer`, `double`, `long-integer`, `date-time`.
	DataType *string `pulumi:"dataType"`
	// Display name.
	DisplayName *string `pulumi:"displayName"`
	// SQL field name.
	Field *string `pulumi:"field"`
	// Parameter ID (1 to number of columns in SQL result).
	Id *int `pulumi:"id"`
}

// DatasetParameterInput is an input type that accepts DatasetParameterArgs and DatasetParameterOutput values.
// You can construct a concrete instance of `DatasetParameterInput` via:
//
//	DatasetParameterArgs{...}
type DatasetParameterInput interface {
	pulumi.Input

	ToDatasetParameterOutput() DatasetParameterOutput
	ToDatasetParameterOutputWithContext(context.Context) DatasetParameterOutput
}

type DatasetParameterArgs struct {
	// Data type. Valid values: `text`, `integer`, `double`, `long-integer`, `date-time`.
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// Display name.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// SQL field name.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// Parameter ID (1 to number of columns in SQL result).
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (DatasetParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetParameter)(nil)).Elem()
}

func (i DatasetParameterArgs) ToDatasetParameterOutput() DatasetParameterOutput {
	return i.ToDatasetParameterOutputWithContext(context.Background())
}

func (i DatasetParameterArgs) ToDatasetParameterOutputWithContext(ctx context.Context) DatasetParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetParameterOutput)
}

// DatasetParameterArrayInput is an input type that accepts DatasetParameterArray and DatasetParameterArrayOutput values.
// You can construct a concrete instance of `DatasetParameterArrayInput` via:
//
//	DatasetParameterArray{ DatasetParameterArgs{...} }
type DatasetParameterArrayInput interface {
	pulumi.Input

	ToDatasetParameterArrayOutput() DatasetParameterArrayOutput
	ToDatasetParameterArrayOutputWithContext(context.Context) DatasetParameterArrayOutput
}

type DatasetParameterArray []DatasetParameterInput

func (DatasetParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetParameter)(nil)).Elem()
}

func (i DatasetParameterArray) ToDatasetParameterArrayOutput() DatasetParameterArrayOutput {
	return i.ToDatasetParameterArrayOutputWithContext(context.Background())
}

func (i DatasetParameterArray) ToDatasetParameterArrayOutputWithContext(ctx context.Context) DatasetParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetParameterArrayOutput)
}

type DatasetParameterOutput struct{ *pulumi.OutputState }

func (DatasetParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetParameter)(nil)).Elem()
}

func (o DatasetParameterOutput) ToDatasetParameterOutput() DatasetParameterOutput {
	return o
}

func (o DatasetParameterOutput) ToDatasetParameterOutputWithContext(ctx context.Context) DatasetParameterOutput {
	return o
}

// Data type. Valid values: `text`, `integer`, `double`, `long-integer`, `date-time`.
func (o DatasetParameterOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetParameter) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Display name.
func (o DatasetParameterOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetParameter) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// SQL field name.
func (o DatasetParameterOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetParameter) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// Parameter ID (1 to number of columns in SQL result).
func (o DatasetParameterOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatasetParameter) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type DatasetParameterArrayOutput struct{ *pulumi.OutputState }

func (DatasetParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetParameter)(nil)).Elem()
}

func (o DatasetParameterArrayOutput) ToDatasetParameterArrayOutput() DatasetParameterArrayOutput {
	return o
}

func (o DatasetParameterArrayOutput) ToDatasetParameterArrayOutputWithContext(ctx context.Context) DatasetParameterArrayOutput {
	return o
}

func (o DatasetParameterArrayOutput) Index(i pulumi.IntInput) DatasetParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetParameter {
		return vs[0].([]DatasetParameter)[vs[1].(int)]
	}).(DatasetParameterOutput)
}

type LayoutBodyItem struct {
	// Report item chart name.
	Chart *string `pulumi:"chart"`
	// Report chart options. Valid values: `include-no-data`, `hide-title`, `show-caption`.
	ChartOptions *string `pulumi:"chartOptions"`
	// Report section column number.
	Column *int `pulumi:"column"`
	// Report item text content.
	Content *string `pulumi:"content"`
	// Description.
	Description *string `pulumi:"description"`
	// Control how drill down charts are shown.
	DrillDownItems *string `pulumi:"drillDownItems"`
	// Control whether keys from the parent being combined or not.
	DrillDownTypes *string `pulumi:"drillDownTypes"`
	// Enable/disable hide item in report. Valid values: `enable`, `disable`.
	Hide *string `pulumi:"hide"`
	// Report item ID.
	Id *int `pulumi:"id"`
	// Report item image file name.
	ImgSrc *string `pulumi:"imgSrc"`
	// Report item list component. Valid values: `bullet`, `numbered`.
	ListComponent *string `pulumi:"listComponent"`
	// Configure report list item. The structure of `list` block is documented below.
	Lists []LayoutBodyItemList `pulumi:"lists"`
	// Report item miscellaneous component. Valid values: `hline`, `page-break`, `column-break`, `section-start`.
	MiscComponent *string `pulumi:"miscComponent"`
	// Parameters. The structure of `parameters` block is documented below.
	Parameters []LayoutBodyItemParameter `pulumi:"parameters"`
	// Report item style.
	Style *string `pulumi:"style"`
	// Table chart caption style.
	TableCaptionStyle *string `pulumi:"tableCaptionStyle"`
	// Report item table column widths.
	TableColumnWidths *string `pulumi:"tableColumnWidths"`
	// Table chart even row style.
	TableEvenRowStyle *string `pulumi:"tableEvenRowStyle"`
	// Table chart head style.
	TableHeadStyle *string `pulumi:"tableHeadStyle"`
	// Table chart odd row style.
	TableOddRowStyle *string `pulumi:"tableOddRowStyle"`
	// Report item text component. Valid values: `text`, `heading1`, `heading2`, `heading3`.
	TextComponent *string `pulumi:"textComponent"`
	// Report section title.
	Title *string `pulumi:"title"`
	// Value of top.
	TopN *int `pulumi:"topN"`
	// Report item type. Valid values: `text`, `image`, `chart`, `misc`.
	Type *string `pulumi:"type"`
}

// LayoutBodyItemInput is an input type that accepts LayoutBodyItemArgs and LayoutBodyItemOutput values.
// You can construct a concrete instance of `LayoutBodyItemInput` via:
//
//	LayoutBodyItemArgs{...}
type LayoutBodyItemInput interface {
	pulumi.Input

	ToLayoutBodyItemOutput() LayoutBodyItemOutput
	ToLayoutBodyItemOutputWithContext(context.Context) LayoutBodyItemOutput
}

type LayoutBodyItemArgs struct {
	// Report item chart name.
	Chart pulumi.StringPtrInput `pulumi:"chart"`
	// Report chart options. Valid values: `include-no-data`, `hide-title`, `show-caption`.
	ChartOptions pulumi.StringPtrInput `pulumi:"chartOptions"`
	// Report section column number.
	Column pulumi.IntPtrInput `pulumi:"column"`
	// Report item text content.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// Description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Control how drill down charts are shown.
	DrillDownItems pulumi.StringPtrInput `pulumi:"drillDownItems"`
	// Control whether keys from the parent being combined or not.
	DrillDownTypes pulumi.StringPtrInput `pulumi:"drillDownTypes"`
	// Enable/disable hide item in report. Valid values: `enable`, `disable`.
	Hide pulumi.StringPtrInput `pulumi:"hide"`
	// Report item ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Report item image file name.
	ImgSrc pulumi.StringPtrInput `pulumi:"imgSrc"`
	// Report item list component. Valid values: `bullet`, `numbered`.
	ListComponent pulumi.StringPtrInput `pulumi:"listComponent"`
	// Configure report list item. The structure of `list` block is documented below.
	Lists LayoutBodyItemListArrayInput `pulumi:"lists"`
	// Report item miscellaneous component. Valid values: `hline`, `page-break`, `column-break`, `section-start`.
	MiscComponent pulumi.StringPtrInput `pulumi:"miscComponent"`
	// Parameters. The structure of `parameters` block is documented below.
	Parameters LayoutBodyItemParameterArrayInput `pulumi:"parameters"`
	// Report item style.
	Style pulumi.StringPtrInput `pulumi:"style"`
	// Table chart caption style.
	TableCaptionStyle pulumi.StringPtrInput `pulumi:"tableCaptionStyle"`
	// Report item table column widths.
	TableColumnWidths pulumi.StringPtrInput `pulumi:"tableColumnWidths"`
	// Table chart even row style.
	TableEvenRowStyle pulumi.StringPtrInput `pulumi:"tableEvenRowStyle"`
	// Table chart head style.
	TableHeadStyle pulumi.StringPtrInput `pulumi:"tableHeadStyle"`
	// Table chart odd row style.
	TableOddRowStyle pulumi.StringPtrInput `pulumi:"tableOddRowStyle"`
	// Report item text component. Valid values: `text`, `heading1`, `heading2`, `heading3`.
	TextComponent pulumi.StringPtrInput `pulumi:"textComponent"`
	// Report section title.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// Value of top.
	TopN pulumi.IntPtrInput `pulumi:"topN"`
	// Report item type. Valid values: `text`, `image`, `chart`, `misc`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LayoutBodyItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LayoutBodyItem)(nil)).Elem()
}

func (i LayoutBodyItemArgs) ToLayoutBodyItemOutput() LayoutBodyItemOutput {
	return i.ToLayoutBodyItemOutputWithContext(context.Background())
}

func (i LayoutBodyItemArgs) ToLayoutBodyItemOutputWithContext(ctx context.Context) LayoutBodyItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutBodyItemOutput)
}

// LayoutBodyItemArrayInput is an input type that accepts LayoutBodyItemArray and LayoutBodyItemArrayOutput values.
// You can construct a concrete instance of `LayoutBodyItemArrayInput` via:
//
//	LayoutBodyItemArray{ LayoutBodyItemArgs{...} }
type LayoutBodyItemArrayInput interface {
	pulumi.Input

	ToLayoutBodyItemArrayOutput() LayoutBodyItemArrayOutput
	ToLayoutBodyItemArrayOutputWithContext(context.Context) LayoutBodyItemArrayOutput
}

type LayoutBodyItemArray []LayoutBodyItemInput

func (LayoutBodyItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LayoutBodyItem)(nil)).Elem()
}

func (i LayoutBodyItemArray) ToLayoutBodyItemArrayOutput() LayoutBodyItemArrayOutput {
	return i.ToLayoutBodyItemArrayOutputWithContext(context.Background())
}

func (i LayoutBodyItemArray) ToLayoutBodyItemArrayOutputWithContext(ctx context.Context) LayoutBodyItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutBodyItemArrayOutput)
}

type LayoutBodyItemOutput struct{ *pulumi.OutputState }

func (LayoutBodyItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LayoutBodyItem)(nil)).Elem()
}

func (o LayoutBodyItemOutput) ToLayoutBodyItemOutput() LayoutBodyItemOutput {
	return o
}

func (o LayoutBodyItemOutput) ToLayoutBodyItemOutputWithContext(ctx context.Context) LayoutBodyItemOutput {
	return o
}

// Report item chart name.
func (o LayoutBodyItemOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.Chart }).(pulumi.StringPtrOutput)
}

// Report chart options. Valid values: `include-no-data`, `hide-title`, `show-caption`.
func (o LayoutBodyItemOutput) ChartOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.ChartOptions }).(pulumi.StringPtrOutput)
}

// Report section column number.
func (o LayoutBodyItemOutput) Column() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *int { return v.Column }).(pulumi.IntPtrOutput)
}

// Report item text content.
func (o LayoutBodyItemOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// Description.
func (o LayoutBodyItemOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Control how drill down charts are shown.
func (o LayoutBodyItemOutput) DrillDownItems() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.DrillDownItems }).(pulumi.StringPtrOutput)
}

// Control whether keys from the parent being combined or not.
func (o LayoutBodyItemOutput) DrillDownTypes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.DrillDownTypes }).(pulumi.StringPtrOutput)
}

// Enable/disable hide item in report. Valid values: `enable`, `disable`.
func (o LayoutBodyItemOutput) Hide() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.Hide }).(pulumi.StringPtrOutput)
}

// Report item ID.
func (o LayoutBodyItemOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Report item image file name.
func (o LayoutBodyItemOutput) ImgSrc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.ImgSrc }).(pulumi.StringPtrOutput)
}

// Report item list component. Valid values: `bullet`, `numbered`.
func (o LayoutBodyItemOutput) ListComponent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.ListComponent }).(pulumi.StringPtrOutput)
}

// Configure report list item. The structure of `list` block is documented below.
func (o LayoutBodyItemOutput) Lists() LayoutBodyItemListArrayOutput {
	return o.ApplyT(func(v LayoutBodyItem) []LayoutBodyItemList { return v.Lists }).(LayoutBodyItemListArrayOutput)
}

// Report item miscellaneous component. Valid values: `hline`, `page-break`, `column-break`, `section-start`.
func (o LayoutBodyItemOutput) MiscComponent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.MiscComponent }).(pulumi.StringPtrOutput)
}

// Parameters. The structure of `parameters` block is documented below.
func (o LayoutBodyItemOutput) Parameters() LayoutBodyItemParameterArrayOutput {
	return o.ApplyT(func(v LayoutBodyItem) []LayoutBodyItemParameter { return v.Parameters }).(LayoutBodyItemParameterArrayOutput)
}

// Report item style.
func (o LayoutBodyItemOutput) Style() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.Style }).(pulumi.StringPtrOutput)
}

// Table chart caption style.
func (o LayoutBodyItemOutput) TableCaptionStyle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.TableCaptionStyle }).(pulumi.StringPtrOutput)
}

// Report item table column widths.
func (o LayoutBodyItemOutput) TableColumnWidths() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.TableColumnWidths }).(pulumi.StringPtrOutput)
}

// Table chart even row style.
func (o LayoutBodyItemOutput) TableEvenRowStyle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.TableEvenRowStyle }).(pulumi.StringPtrOutput)
}

// Table chart head style.
func (o LayoutBodyItemOutput) TableHeadStyle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.TableHeadStyle }).(pulumi.StringPtrOutput)
}

// Table chart odd row style.
func (o LayoutBodyItemOutput) TableOddRowStyle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.TableOddRowStyle }).(pulumi.StringPtrOutput)
}

// Report item text component. Valid values: `text`, `heading1`, `heading2`, `heading3`.
func (o LayoutBodyItemOutput) TextComponent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.TextComponent }).(pulumi.StringPtrOutput)
}

// Report section title.
func (o LayoutBodyItemOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// Value of top.
func (o LayoutBodyItemOutput) TopN() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *int { return v.TopN }).(pulumi.IntPtrOutput)
}

// Report item type. Valid values: `text`, `image`, `chart`, `misc`.
func (o LayoutBodyItemOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItem) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type LayoutBodyItemArrayOutput struct{ *pulumi.OutputState }

func (LayoutBodyItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LayoutBodyItem)(nil)).Elem()
}

func (o LayoutBodyItemArrayOutput) ToLayoutBodyItemArrayOutput() LayoutBodyItemArrayOutput {
	return o
}

func (o LayoutBodyItemArrayOutput) ToLayoutBodyItemArrayOutputWithContext(ctx context.Context) LayoutBodyItemArrayOutput {
	return o
}

func (o LayoutBodyItemArrayOutput) Index(i pulumi.IntInput) LayoutBodyItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LayoutBodyItem {
		return vs[0].([]LayoutBodyItem)[vs[1].(int)]
	}).(LayoutBodyItemOutput)
}

type LayoutBodyItemList struct {
	// List entry content.
	Content *string `pulumi:"content"`
	// List entry ID.
	Id *int `pulumi:"id"`
}

// LayoutBodyItemListInput is an input type that accepts LayoutBodyItemListArgs and LayoutBodyItemListOutput values.
// You can construct a concrete instance of `LayoutBodyItemListInput` via:
//
//	LayoutBodyItemListArgs{...}
type LayoutBodyItemListInput interface {
	pulumi.Input

	ToLayoutBodyItemListOutput() LayoutBodyItemListOutput
	ToLayoutBodyItemListOutputWithContext(context.Context) LayoutBodyItemListOutput
}

type LayoutBodyItemListArgs struct {
	// List entry content.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// List entry ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (LayoutBodyItemListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LayoutBodyItemList)(nil)).Elem()
}

func (i LayoutBodyItemListArgs) ToLayoutBodyItemListOutput() LayoutBodyItemListOutput {
	return i.ToLayoutBodyItemListOutputWithContext(context.Background())
}

func (i LayoutBodyItemListArgs) ToLayoutBodyItemListOutputWithContext(ctx context.Context) LayoutBodyItemListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutBodyItemListOutput)
}

// LayoutBodyItemListArrayInput is an input type that accepts LayoutBodyItemListArray and LayoutBodyItemListArrayOutput values.
// You can construct a concrete instance of `LayoutBodyItemListArrayInput` via:
//
//	LayoutBodyItemListArray{ LayoutBodyItemListArgs{...} }
type LayoutBodyItemListArrayInput interface {
	pulumi.Input

	ToLayoutBodyItemListArrayOutput() LayoutBodyItemListArrayOutput
	ToLayoutBodyItemListArrayOutputWithContext(context.Context) LayoutBodyItemListArrayOutput
}

type LayoutBodyItemListArray []LayoutBodyItemListInput

func (LayoutBodyItemListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LayoutBodyItemList)(nil)).Elem()
}

func (i LayoutBodyItemListArray) ToLayoutBodyItemListArrayOutput() LayoutBodyItemListArrayOutput {
	return i.ToLayoutBodyItemListArrayOutputWithContext(context.Background())
}

func (i LayoutBodyItemListArray) ToLayoutBodyItemListArrayOutputWithContext(ctx context.Context) LayoutBodyItemListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutBodyItemListArrayOutput)
}

type LayoutBodyItemListOutput struct{ *pulumi.OutputState }

func (LayoutBodyItemListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LayoutBodyItemList)(nil)).Elem()
}

func (o LayoutBodyItemListOutput) ToLayoutBodyItemListOutput() LayoutBodyItemListOutput {
	return o
}

func (o LayoutBodyItemListOutput) ToLayoutBodyItemListOutputWithContext(ctx context.Context) LayoutBodyItemListOutput {
	return o
}

// List entry content.
func (o LayoutBodyItemListOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItemList) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// List entry ID.
func (o LayoutBodyItemListOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LayoutBodyItemList) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type LayoutBodyItemListArrayOutput struct{ *pulumi.OutputState }

func (LayoutBodyItemListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LayoutBodyItemList)(nil)).Elem()
}

func (o LayoutBodyItemListArrayOutput) ToLayoutBodyItemListArrayOutput() LayoutBodyItemListArrayOutput {
	return o
}

func (o LayoutBodyItemListArrayOutput) ToLayoutBodyItemListArrayOutputWithContext(ctx context.Context) LayoutBodyItemListArrayOutput {
	return o
}

func (o LayoutBodyItemListArrayOutput) Index(i pulumi.IntInput) LayoutBodyItemListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LayoutBodyItemList {
		return vs[0].([]LayoutBodyItemList)[vs[1].(int)]
	}).(LayoutBodyItemListOutput)
}

type LayoutBodyItemParameter struct {
	// ID.
	Id *int `pulumi:"id"`
	// Field name that match field of parameters defined in dataset.
	Name *string `pulumi:"name"`
	// Value to replace corresponding field of parameters defined in dataset.
	Value *string `pulumi:"value"`
}

// LayoutBodyItemParameterInput is an input type that accepts LayoutBodyItemParameterArgs and LayoutBodyItemParameterOutput values.
// You can construct a concrete instance of `LayoutBodyItemParameterInput` via:
//
//	LayoutBodyItemParameterArgs{...}
type LayoutBodyItemParameterInput interface {
	pulumi.Input

	ToLayoutBodyItemParameterOutput() LayoutBodyItemParameterOutput
	ToLayoutBodyItemParameterOutputWithContext(context.Context) LayoutBodyItemParameterOutput
}

type LayoutBodyItemParameterArgs struct {
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Field name that match field of parameters defined in dataset.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value to replace corresponding field of parameters defined in dataset.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LayoutBodyItemParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LayoutBodyItemParameter)(nil)).Elem()
}

func (i LayoutBodyItemParameterArgs) ToLayoutBodyItemParameterOutput() LayoutBodyItemParameterOutput {
	return i.ToLayoutBodyItemParameterOutputWithContext(context.Background())
}

func (i LayoutBodyItemParameterArgs) ToLayoutBodyItemParameterOutputWithContext(ctx context.Context) LayoutBodyItemParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutBodyItemParameterOutput)
}

// LayoutBodyItemParameterArrayInput is an input type that accepts LayoutBodyItemParameterArray and LayoutBodyItemParameterArrayOutput values.
// You can construct a concrete instance of `LayoutBodyItemParameterArrayInput` via:
//
//	LayoutBodyItemParameterArray{ LayoutBodyItemParameterArgs{...} }
type LayoutBodyItemParameterArrayInput interface {
	pulumi.Input

	ToLayoutBodyItemParameterArrayOutput() LayoutBodyItemParameterArrayOutput
	ToLayoutBodyItemParameterArrayOutputWithContext(context.Context) LayoutBodyItemParameterArrayOutput
}

type LayoutBodyItemParameterArray []LayoutBodyItemParameterInput

func (LayoutBodyItemParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LayoutBodyItemParameter)(nil)).Elem()
}

func (i LayoutBodyItemParameterArray) ToLayoutBodyItemParameterArrayOutput() LayoutBodyItemParameterArrayOutput {
	return i.ToLayoutBodyItemParameterArrayOutputWithContext(context.Background())
}

func (i LayoutBodyItemParameterArray) ToLayoutBodyItemParameterArrayOutputWithContext(ctx context.Context) LayoutBodyItemParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutBodyItemParameterArrayOutput)
}

type LayoutBodyItemParameterOutput struct{ *pulumi.OutputState }

func (LayoutBodyItemParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LayoutBodyItemParameter)(nil)).Elem()
}

func (o LayoutBodyItemParameterOutput) ToLayoutBodyItemParameterOutput() LayoutBodyItemParameterOutput {
	return o
}

func (o LayoutBodyItemParameterOutput) ToLayoutBodyItemParameterOutputWithContext(ctx context.Context) LayoutBodyItemParameterOutput {
	return o
}

// ID.
func (o LayoutBodyItemParameterOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LayoutBodyItemParameter) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Field name that match field of parameters defined in dataset.
func (o LayoutBodyItemParameterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItemParameter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value to replace corresponding field of parameters defined in dataset.
func (o LayoutBodyItemParameterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutBodyItemParameter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LayoutBodyItemParameterArrayOutput struct{ *pulumi.OutputState }

func (LayoutBodyItemParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LayoutBodyItemParameter)(nil)).Elem()
}

func (o LayoutBodyItemParameterArrayOutput) ToLayoutBodyItemParameterArrayOutput() LayoutBodyItemParameterArrayOutput {
	return o
}

func (o LayoutBodyItemParameterArrayOutput) ToLayoutBodyItemParameterArrayOutputWithContext(ctx context.Context) LayoutBodyItemParameterArrayOutput {
	return o
}

func (o LayoutBodyItemParameterArrayOutput) Index(i pulumi.IntInput) LayoutBodyItemParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LayoutBodyItemParameter {
		return vs[0].([]LayoutBodyItemParameter)[vs[1].(int)]
	}).(LayoutBodyItemParameterOutput)
}

type LayoutPage struct {
	// Report page auto column break before heading. Valid values: `heading1`, `heading2`, `heading3`.
	ColumnBreakBefore *string `pulumi:"columnBreakBefore"`
	// Configure report page footer. The structure of `footer` block is documented below.
	Footer *LayoutPageFooter `pulumi:"footer"`
	// Configure report page header. The structure of `header` block is documented below.
	Header *LayoutPageHeader `pulumi:"header"`
	// Report page options. Valid values: `header-on-first-page`, `footer-on-first-page`.
	Options *string `pulumi:"options"`
	// Report page auto page break before heading. Valid values: `heading1`, `heading2`, `heading3`.
	PageBreakBefore *string `pulumi:"pageBreakBefore"`
	// Report page paper. Valid values: `a4`, `letter`.
	Paper *string `pulumi:"paper"`
}

// LayoutPageInput is an input type that accepts LayoutPageArgs and LayoutPageOutput values.
// You can construct a concrete instance of `LayoutPageInput` via:
//
//	LayoutPageArgs{...}
type LayoutPageInput interface {
	pulumi.Input

	ToLayoutPageOutput() LayoutPageOutput
	ToLayoutPageOutputWithContext(context.Context) LayoutPageOutput
}

type LayoutPageArgs struct {
	// Report page auto column break before heading. Valid values: `heading1`, `heading2`, `heading3`.
	ColumnBreakBefore pulumi.StringPtrInput `pulumi:"columnBreakBefore"`
	// Configure report page footer. The structure of `footer` block is documented below.
	Footer LayoutPageFooterPtrInput `pulumi:"footer"`
	// Configure report page header. The structure of `header` block is documented below.
	Header LayoutPageHeaderPtrInput `pulumi:"header"`
	// Report page options. Valid values: `header-on-first-page`, `footer-on-first-page`.
	Options pulumi.StringPtrInput `pulumi:"options"`
	// Report page auto page break before heading. Valid values: `heading1`, `heading2`, `heading3`.
	PageBreakBefore pulumi.StringPtrInput `pulumi:"pageBreakBefore"`
	// Report page paper. Valid values: `a4`, `letter`.
	Paper pulumi.StringPtrInput `pulumi:"paper"`
}

func (LayoutPageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LayoutPage)(nil)).Elem()
}

func (i LayoutPageArgs) ToLayoutPageOutput() LayoutPageOutput {
	return i.ToLayoutPageOutputWithContext(context.Background())
}

func (i LayoutPageArgs) ToLayoutPageOutputWithContext(ctx context.Context) LayoutPageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutPageOutput)
}

func (i LayoutPageArgs) ToLayoutPagePtrOutput() LayoutPagePtrOutput {
	return i.ToLayoutPagePtrOutputWithContext(context.Background())
}

func (i LayoutPageArgs) ToLayoutPagePtrOutputWithContext(ctx context.Context) LayoutPagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutPageOutput).ToLayoutPagePtrOutputWithContext(ctx)
}

// LayoutPagePtrInput is an input type that accepts LayoutPageArgs, LayoutPagePtr and LayoutPagePtrOutput values.
// You can construct a concrete instance of `LayoutPagePtrInput` via:
//
//	        LayoutPageArgs{...}
//
//	or:
//
//	        nil
type LayoutPagePtrInput interface {
	pulumi.Input

	ToLayoutPagePtrOutput() LayoutPagePtrOutput
	ToLayoutPagePtrOutputWithContext(context.Context) LayoutPagePtrOutput
}

type layoutPagePtrType LayoutPageArgs

func LayoutPagePtr(v *LayoutPageArgs) LayoutPagePtrInput {
	return (*layoutPagePtrType)(v)
}

func (*layoutPagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LayoutPage)(nil)).Elem()
}

func (i *layoutPagePtrType) ToLayoutPagePtrOutput() LayoutPagePtrOutput {
	return i.ToLayoutPagePtrOutputWithContext(context.Background())
}

func (i *layoutPagePtrType) ToLayoutPagePtrOutputWithContext(ctx context.Context) LayoutPagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutPagePtrOutput)
}

type LayoutPageOutput struct{ *pulumi.OutputState }

func (LayoutPageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LayoutPage)(nil)).Elem()
}

func (o LayoutPageOutput) ToLayoutPageOutput() LayoutPageOutput {
	return o
}

func (o LayoutPageOutput) ToLayoutPageOutputWithContext(ctx context.Context) LayoutPageOutput {
	return o
}

func (o LayoutPageOutput) ToLayoutPagePtrOutput() LayoutPagePtrOutput {
	return o.ToLayoutPagePtrOutputWithContext(context.Background())
}

func (o LayoutPageOutput) ToLayoutPagePtrOutputWithContext(ctx context.Context) LayoutPagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LayoutPage) *LayoutPage {
		return &v
	}).(LayoutPagePtrOutput)
}

// Report page auto column break before heading. Valid values: `heading1`, `heading2`, `heading3`.
func (o LayoutPageOutput) ColumnBreakBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutPage) *string { return v.ColumnBreakBefore }).(pulumi.StringPtrOutput)
}

// Configure report page footer. The structure of `footer` block is documented below.
func (o LayoutPageOutput) Footer() LayoutPageFooterPtrOutput {
	return o.ApplyT(func(v LayoutPage) *LayoutPageFooter { return v.Footer }).(LayoutPageFooterPtrOutput)
}

// Configure report page header. The structure of `header` block is documented below.
func (o LayoutPageOutput) Header() LayoutPageHeaderPtrOutput {
	return o.ApplyT(func(v LayoutPage) *LayoutPageHeader { return v.Header }).(LayoutPageHeaderPtrOutput)
}

// Report page options. Valid values: `header-on-first-page`, `footer-on-first-page`.
func (o LayoutPageOutput) Options() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutPage) *string { return v.Options }).(pulumi.StringPtrOutput)
}

// Report page auto page break before heading. Valid values: `heading1`, `heading2`, `heading3`.
func (o LayoutPageOutput) PageBreakBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutPage) *string { return v.PageBreakBefore }).(pulumi.StringPtrOutput)
}

// Report page paper. Valid values: `a4`, `letter`.
func (o LayoutPageOutput) Paper() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutPage) *string { return v.Paper }).(pulumi.StringPtrOutput)
}

type LayoutPagePtrOutput struct{ *pulumi.OutputState }

func (LayoutPagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LayoutPage)(nil)).Elem()
}

func (o LayoutPagePtrOutput) ToLayoutPagePtrOutput() LayoutPagePtrOutput {
	return o
}

func (o LayoutPagePtrOutput) ToLayoutPagePtrOutputWithContext(ctx context.Context) LayoutPagePtrOutput {
	return o
}

func (o LayoutPagePtrOutput) Elem() LayoutPageOutput {
	return o.ApplyT(func(v *LayoutPage) LayoutPage {
		if v != nil {
			return *v
		}
		var ret LayoutPage
		return ret
	}).(LayoutPageOutput)
}

// Report page auto column break before heading. Valid values: `heading1`, `heading2`, `heading3`.
func (o LayoutPagePtrOutput) ColumnBreakBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayoutPage) *string {
		if v == nil {
			return nil
		}
		return v.ColumnBreakBefore
	}).(pulumi.StringPtrOutput)
}

// Configure report page footer. The structure of `footer` block is documented below.
func (o LayoutPagePtrOutput) Footer() LayoutPageFooterPtrOutput {
	return o.ApplyT(func(v *LayoutPage) *LayoutPageFooter {
		if v == nil {
			return nil
		}
		return v.Footer
	}).(LayoutPageFooterPtrOutput)
}

// Configure report page header. The structure of `header` block is documented below.
func (o LayoutPagePtrOutput) Header() LayoutPageHeaderPtrOutput {
	return o.ApplyT(func(v *LayoutPage) *LayoutPageHeader {
		if v == nil {
			return nil
		}
		return v.Header
	}).(LayoutPageHeaderPtrOutput)
}

// Report page options. Valid values: `header-on-first-page`, `footer-on-first-page`.
func (o LayoutPagePtrOutput) Options() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayoutPage) *string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringPtrOutput)
}

// Report page auto page break before heading. Valid values: `heading1`, `heading2`, `heading3`.
func (o LayoutPagePtrOutput) PageBreakBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayoutPage) *string {
		if v == nil {
			return nil
		}
		return v.PageBreakBefore
	}).(pulumi.StringPtrOutput)
}

// Report page paper. Valid values: `a4`, `letter`.
func (o LayoutPagePtrOutput) Paper() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayoutPage) *string {
		if v == nil {
			return nil
		}
		return v.Paper
	}).(pulumi.StringPtrOutput)
}

type LayoutPageFooter struct {
	// Configure report footer item. The structure of `footerItem` block is documented below.
	FooterItems []LayoutPageFooterFooterItem `pulumi:"footerItems"`
	// Report footer style.
	Style *string `pulumi:"style"`
}

// LayoutPageFooterInput is an input type that accepts LayoutPageFooterArgs and LayoutPageFooterOutput values.
// You can construct a concrete instance of `LayoutPageFooterInput` via:
//
//	LayoutPageFooterArgs{...}
type LayoutPageFooterInput interface {
	pulumi.Input

	ToLayoutPageFooterOutput() LayoutPageFooterOutput
	ToLayoutPageFooterOutputWithContext(context.Context) LayoutPageFooterOutput
}

type LayoutPageFooterArgs struct {
	// Configure report footer item. The structure of `footerItem` block is documented below.
	FooterItems LayoutPageFooterFooterItemArrayInput `pulumi:"footerItems"`
	// Report footer style.
	Style pulumi.StringPtrInput `pulumi:"style"`
}

func (LayoutPageFooterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LayoutPageFooter)(nil)).Elem()
}

func (i LayoutPageFooterArgs) ToLayoutPageFooterOutput() LayoutPageFooterOutput {
	return i.ToLayoutPageFooterOutputWithContext(context.Background())
}

func (i LayoutPageFooterArgs) ToLayoutPageFooterOutputWithContext(ctx context.Context) LayoutPageFooterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutPageFooterOutput)
}

func (i LayoutPageFooterArgs) ToLayoutPageFooterPtrOutput() LayoutPageFooterPtrOutput {
	return i.ToLayoutPageFooterPtrOutputWithContext(context.Background())
}

func (i LayoutPageFooterArgs) ToLayoutPageFooterPtrOutputWithContext(ctx context.Context) LayoutPageFooterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutPageFooterOutput).ToLayoutPageFooterPtrOutputWithContext(ctx)
}

// LayoutPageFooterPtrInput is an input type that accepts LayoutPageFooterArgs, LayoutPageFooterPtr and LayoutPageFooterPtrOutput values.
// You can construct a concrete instance of `LayoutPageFooterPtrInput` via:
//
//	        LayoutPageFooterArgs{...}
//
//	or:
//
//	        nil
type LayoutPageFooterPtrInput interface {
	pulumi.Input

	ToLayoutPageFooterPtrOutput() LayoutPageFooterPtrOutput
	ToLayoutPageFooterPtrOutputWithContext(context.Context) LayoutPageFooterPtrOutput
}

type layoutPageFooterPtrType LayoutPageFooterArgs

func LayoutPageFooterPtr(v *LayoutPageFooterArgs) LayoutPageFooterPtrInput {
	return (*layoutPageFooterPtrType)(v)
}

func (*layoutPageFooterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LayoutPageFooter)(nil)).Elem()
}

func (i *layoutPageFooterPtrType) ToLayoutPageFooterPtrOutput() LayoutPageFooterPtrOutput {
	return i.ToLayoutPageFooterPtrOutputWithContext(context.Background())
}

func (i *layoutPageFooterPtrType) ToLayoutPageFooterPtrOutputWithContext(ctx context.Context) LayoutPageFooterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutPageFooterPtrOutput)
}

type LayoutPageFooterOutput struct{ *pulumi.OutputState }

func (LayoutPageFooterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LayoutPageFooter)(nil)).Elem()
}

func (o LayoutPageFooterOutput) ToLayoutPageFooterOutput() LayoutPageFooterOutput {
	return o
}

func (o LayoutPageFooterOutput) ToLayoutPageFooterOutputWithContext(ctx context.Context) LayoutPageFooterOutput {
	return o
}

func (o LayoutPageFooterOutput) ToLayoutPageFooterPtrOutput() LayoutPageFooterPtrOutput {
	return o.ToLayoutPageFooterPtrOutputWithContext(context.Background())
}

func (o LayoutPageFooterOutput) ToLayoutPageFooterPtrOutputWithContext(ctx context.Context) LayoutPageFooterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LayoutPageFooter) *LayoutPageFooter {
		return &v
	}).(LayoutPageFooterPtrOutput)
}

// Configure report footer item. The structure of `footerItem` block is documented below.
func (o LayoutPageFooterOutput) FooterItems() LayoutPageFooterFooterItemArrayOutput {
	return o.ApplyT(func(v LayoutPageFooter) []LayoutPageFooterFooterItem { return v.FooterItems }).(LayoutPageFooterFooterItemArrayOutput)
}

// Report footer style.
func (o LayoutPageFooterOutput) Style() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutPageFooter) *string { return v.Style }).(pulumi.StringPtrOutput)
}

type LayoutPageFooterPtrOutput struct{ *pulumi.OutputState }

func (LayoutPageFooterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LayoutPageFooter)(nil)).Elem()
}

func (o LayoutPageFooterPtrOutput) ToLayoutPageFooterPtrOutput() LayoutPageFooterPtrOutput {
	return o
}

func (o LayoutPageFooterPtrOutput) ToLayoutPageFooterPtrOutputWithContext(ctx context.Context) LayoutPageFooterPtrOutput {
	return o
}

func (o LayoutPageFooterPtrOutput) Elem() LayoutPageFooterOutput {
	return o.ApplyT(func(v *LayoutPageFooter) LayoutPageFooter {
		if v != nil {
			return *v
		}
		var ret LayoutPageFooter
		return ret
	}).(LayoutPageFooterOutput)
}

// Configure report footer item. The structure of `footerItem` block is documented below.
func (o LayoutPageFooterPtrOutput) FooterItems() LayoutPageFooterFooterItemArrayOutput {
	return o.ApplyT(func(v *LayoutPageFooter) []LayoutPageFooterFooterItem {
		if v == nil {
			return nil
		}
		return v.FooterItems
	}).(LayoutPageFooterFooterItemArrayOutput)
}

// Report footer style.
func (o LayoutPageFooterPtrOutput) Style() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayoutPageFooter) *string {
		if v == nil {
			return nil
		}
		return v.Style
	}).(pulumi.StringPtrOutput)
}

type LayoutPageFooterFooterItem struct {
	// Report item text content.
	Content *string `pulumi:"content"`
	// Description.
	Description *string `pulumi:"description"`
	// Report item ID.
	Id *int `pulumi:"id"`
	// Report item image file name.
	ImgSrc *string `pulumi:"imgSrc"`
	// Report item style.
	Style *string `pulumi:"style"`
	// Report item type. Valid values: `text`, `image`.
	Type *string `pulumi:"type"`
}

// LayoutPageFooterFooterItemInput is an input type that accepts LayoutPageFooterFooterItemArgs and LayoutPageFooterFooterItemOutput values.
// You can construct a concrete instance of `LayoutPageFooterFooterItemInput` via:
//
//	LayoutPageFooterFooterItemArgs{...}
type LayoutPageFooterFooterItemInput interface {
	pulumi.Input

	ToLayoutPageFooterFooterItemOutput() LayoutPageFooterFooterItemOutput
	ToLayoutPageFooterFooterItemOutputWithContext(context.Context) LayoutPageFooterFooterItemOutput
}

type LayoutPageFooterFooterItemArgs struct {
	// Report item text content.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// Description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Report item ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Report item image file name.
	ImgSrc pulumi.StringPtrInput `pulumi:"imgSrc"`
	// Report item style.
	Style pulumi.StringPtrInput `pulumi:"style"`
	// Report item type. Valid values: `text`, `image`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LayoutPageFooterFooterItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LayoutPageFooterFooterItem)(nil)).Elem()
}

func (i LayoutPageFooterFooterItemArgs) ToLayoutPageFooterFooterItemOutput() LayoutPageFooterFooterItemOutput {
	return i.ToLayoutPageFooterFooterItemOutputWithContext(context.Background())
}

func (i LayoutPageFooterFooterItemArgs) ToLayoutPageFooterFooterItemOutputWithContext(ctx context.Context) LayoutPageFooterFooterItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutPageFooterFooterItemOutput)
}

// LayoutPageFooterFooterItemArrayInput is an input type that accepts LayoutPageFooterFooterItemArray and LayoutPageFooterFooterItemArrayOutput values.
// You can construct a concrete instance of `LayoutPageFooterFooterItemArrayInput` via:
//
//	LayoutPageFooterFooterItemArray{ LayoutPageFooterFooterItemArgs{...} }
type LayoutPageFooterFooterItemArrayInput interface {
	pulumi.Input

	ToLayoutPageFooterFooterItemArrayOutput() LayoutPageFooterFooterItemArrayOutput
	ToLayoutPageFooterFooterItemArrayOutputWithContext(context.Context) LayoutPageFooterFooterItemArrayOutput
}

type LayoutPageFooterFooterItemArray []LayoutPageFooterFooterItemInput

func (LayoutPageFooterFooterItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LayoutPageFooterFooterItem)(nil)).Elem()
}

func (i LayoutPageFooterFooterItemArray) ToLayoutPageFooterFooterItemArrayOutput() LayoutPageFooterFooterItemArrayOutput {
	return i.ToLayoutPageFooterFooterItemArrayOutputWithContext(context.Background())
}

func (i LayoutPageFooterFooterItemArray) ToLayoutPageFooterFooterItemArrayOutputWithContext(ctx context.Context) LayoutPageFooterFooterItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutPageFooterFooterItemArrayOutput)
}

type LayoutPageFooterFooterItemOutput struct{ *pulumi.OutputState }

func (LayoutPageFooterFooterItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LayoutPageFooterFooterItem)(nil)).Elem()
}

func (o LayoutPageFooterFooterItemOutput) ToLayoutPageFooterFooterItemOutput() LayoutPageFooterFooterItemOutput {
	return o
}

func (o LayoutPageFooterFooterItemOutput) ToLayoutPageFooterFooterItemOutputWithContext(ctx context.Context) LayoutPageFooterFooterItemOutput {
	return o
}

// Report item text content.
func (o LayoutPageFooterFooterItemOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutPageFooterFooterItem) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// Description.
func (o LayoutPageFooterFooterItemOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutPageFooterFooterItem) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Report item ID.
func (o LayoutPageFooterFooterItemOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LayoutPageFooterFooterItem) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Report item image file name.
func (o LayoutPageFooterFooterItemOutput) ImgSrc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutPageFooterFooterItem) *string { return v.ImgSrc }).(pulumi.StringPtrOutput)
}

// Report item style.
func (o LayoutPageFooterFooterItemOutput) Style() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutPageFooterFooterItem) *string { return v.Style }).(pulumi.StringPtrOutput)
}

// Report item type. Valid values: `text`, `image`.
func (o LayoutPageFooterFooterItemOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutPageFooterFooterItem) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type LayoutPageFooterFooterItemArrayOutput struct{ *pulumi.OutputState }

func (LayoutPageFooterFooterItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LayoutPageFooterFooterItem)(nil)).Elem()
}

func (o LayoutPageFooterFooterItemArrayOutput) ToLayoutPageFooterFooterItemArrayOutput() LayoutPageFooterFooterItemArrayOutput {
	return o
}

func (o LayoutPageFooterFooterItemArrayOutput) ToLayoutPageFooterFooterItemArrayOutputWithContext(ctx context.Context) LayoutPageFooterFooterItemArrayOutput {
	return o
}

func (o LayoutPageFooterFooterItemArrayOutput) Index(i pulumi.IntInput) LayoutPageFooterFooterItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LayoutPageFooterFooterItem {
		return vs[0].([]LayoutPageFooterFooterItem)[vs[1].(int)]
	}).(LayoutPageFooterFooterItemOutput)
}

type LayoutPageHeader struct {
	// Configure report header item. The structure of `headerItem` block is documented below.
	HeaderItems []LayoutPageHeaderHeaderItem `pulumi:"headerItems"`
	// Report header style.
	Style *string `pulumi:"style"`
}

// LayoutPageHeaderInput is an input type that accepts LayoutPageHeaderArgs and LayoutPageHeaderOutput values.
// You can construct a concrete instance of `LayoutPageHeaderInput` via:
//
//	LayoutPageHeaderArgs{...}
type LayoutPageHeaderInput interface {
	pulumi.Input

	ToLayoutPageHeaderOutput() LayoutPageHeaderOutput
	ToLayoutPageHeaderOutputWithContext(context.Context) LayoutPageHeaderOutput
}

type LayoutPageHeaderArgs struct {
	// Configure report header item. The structure of `headerItem` block is documented below.
	HeaderItems LayoutPageHeaderHeaderItemArrayInput `pulumi:"headerItems"`
	// Report header style.
	Style pulumi.StringPtrInput `pulumi:"style"`
}

func (LayoutPageHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LayoutPageHeader)(nil)).Elem()
}

func (i LayoutPageHeaderArgs) ToLayoutPageHeaderOutput() LayoutPageHeaderOutput {
	return i.ToLayoutPageHeaderOutputWithContext(context.Background())
}

func (i LayoutPageHeaderArgs) ToLayoutPageHeaderOutputWithContext(ctx context.Context) LayoutPageHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutPageHeaderOutput)
}

func (i LayoutPageHeaderArgs) ToLayoutPageHeaderPtrOutput() LayoutPageHeaderPtrOutput {
	return i.ToLayoutPageHeaderPtrOutputWithContext(context.Background())
}

func (i LayoutPageHeaderArgs) ToLayoutPageHeaderPtrOutputWithContext(ctx context.Context) LayoutPageHeaderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutPageHeaderOutput).ToLayoutPageHeaderPtrOutputWithContext(ctx)
}

// LayoutPageHeaderPtrInput is an input type that accepts LayoutPageHeaderArgs, LayoutPageHeaderPtr and LayoutPageHeaderPtrOutput values.
// You can construct a concrete instance of `LayoutPageHeaderPtrInput` via:
//
//	        LayoutPageHeaderArgs{...}
//
//	or:
//
//	        nil
type LayoutPageHeaderPtrInput interface {
	pulumi.Input

	ToLayoutPageHeaderPtrOutput() LayoutPageHeaderPtrOutput
	ToLayoutPageHeaderPtrOutputWithContext(context.Context) LayoutPageHeaderPtrOutput
}

type layoutPageHeaderPtrType LayoutPageHeaderArgs

func LayoutPageHeaderPtr(v *LayoutPageHeaderArgs) LayoutPageHeaderPtrInput {
	return (*layoutPageHeaderPtrType)(v)
}

func (*layoutPageHeaderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LayoutPageHeader)(nil)).Elem()
}

func (i *layoutPageHeaderPtrType) ToLayoutPageHeaderPtrOutput() LayoutPageHeaderPtrOutput {
	return i.ToLayoutPageHeaderPtrOutputWithContext(context.Background())
}

func (i *layoutPageHeaderPtrType) ToLayoutPageHeaderPtrOutputWithContext(ctx context.Context) LayoutPageHeaderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutPageHeaderPtrOutput)
}

type LayoutPageHeaderOutput struct{ *pulumi.OutputState }

func (LayoutPageHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LayoutPageHeader)(nil)).Elem()
}

func (o LayoutPageHeaderOutput) ToLayoutPageHeaderOutput() LayoutPageHeaderOutput {
	return o
}

func (o LayoutPageHeaderOutput) ToLayoutPageHeaderOutputWithContext(ctx context.Context) LayoutPageHeaderOutput {
	return o
}

func (o LayoutPageHeaderOutput) ToLayoutPageHeaderPtrOutput() LayoutPageHeaderPtrOutput {
	return o.ToLayoutPageHeaderPtrOutputWithContext(context.Background())
}

func (o LayoutPageHeaderOutput) ToLayoutPageHeaderPtrOutputWithContext(ctx context.Context) LayoutPageHeaderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LayoutPageHeader) *LayoutPageHeader {
		return &v
	}).(LayoutPageHeaderPtrOutput)
}

// Configure report header item. The structure of `headerItem` block is documented below.
func (o LayoutPageHeaderOutput) HeaderItems() LayoutPageHeaderHeaderItemArrayOutput {
	return o.ApplyT(func(v LayoutPageHeader) []LayoutPageHeaderHeaderItem { return v.HeaderItems }).(LayoutPageHeaderHeaderItemArrayOutput)
}

// Report header style.
func (o LayoutPageHeaderOutput) Style() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutPageHeader) *string { return v.Style }).(pulumi.StringPtrOutput)
}

type LayoutPageHeaderPtrOutput struct{ *pulumi.OutputState }

func (LayoutPageHeaderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LayoutPageHeader)(nil)).Elem()
}

func (o LayoutPageHeaderPtrOutput) ToLayoutPageHeaderPtrOutput() LayoutPageHeaderPtrOutput {
	return o
}

func (o LayoutPageHeaderPtrOutput) ToLayoutPageHeaderPtrOutputWithContext(ctx context.Context) LayoutPageHeaderPtrOutput {
	return o
}

func (o LayoutPageHeaderPtrOutput) Elem() LayoutPageHeaderOutput {
	return o.ApplyT(func(v *LayoutPageHeader) LayoutPageHeader {
		if v != nil {
			return *v
		}
		var ret LayoutPageHeader
		return ret
	}).(LayoutPageHeaderOutput)
}

// Configure report header item. The structure of `headerItem` block is documented below.
func (o LayoutPageHeaderPtrOutput) HeaderItems() LayoutPageHeaderHeaderItemArrayOutput {
	return o.ApplyT(func(v *LayoutPageHeader) []LayoutPageHeaderHeaderItem {
		if v == nil {
			return nil
		}
		return v.HeaderItems
	}).(LayoutPageHeaderHeaderItemArrayOutput)
}

// Report header style.
func (o LayoutPageHeaderPtrOutput) Style() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayoutPageHeader) *string {
		if v == nil {
			return nil
		}
		return v.Style
	}).(pulumi.StringPtrOutput)
}

type LayoutPageHeaderHeaderItem struct {
	// Report item text content.
	Content *string `pulumi:"content"`
	// Description.
	Description *string `pulumi:"description"`
	// Report item ID.
	Id *int `pulumi:"id"`
	// Report item image file name.
	ImgSrc *string `pulumi:"imgSrc"`
	// Report item style.
	Style *string `pulumi:"style"`
	// Report item type. Valid values: `text`, `image`.
	Type *string `pulumi:"type"`
}

// LayoutPageHeaderHeaderItemInput is an input type that accepts LayoutPageHeaderHeaderItemArgs and LayoutPageHeaderHeaderItemOutput values.
// You can construct a concrete instance of `LayoutPageHeaderHeaderItemInput` via:
//
//	LayoutPageHeaderHeaderItemArgs{...}
type LayoutPageHeaderHeaderItemInput interface {
	pulumi.Input

	ToLayoutPageHeaderHeaderItemOutput() LayoutPageHeaderHeaderItemOutput
	ToLayoutPageHeaderHeaderItemOutputWithContext(context.Context) LayoutPageHeaderHeaderItemOutput
}

type LayoutPageHeaderHeaderItemArgs struct {
	// Report item text content.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// Description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Report item ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Report item image file name.
	ImgSrc pulumi.StringPtrInput `pulumi:"imgSrc"`
	// Report item style.
	Style pulumi.StringPtrInput `pulumi:"style"`
	// Report item type. Valid values: `text`, `image`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LayoutPageHeaderHeaderItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LayoutPageHeaderHeaderItem)(nil)).Elem()
}

func (i LayoutPageHeaderHeaderItemArgs) ToLayoutPageHeaderHeaderItemOutput() LayoutPageHeaderHeaderItemOutput {
	return i.ToLayoutPageHeaderHeaderItemOutputWithContext(context.Background())
}

func (i LayoutPageHeaderHeaderItemArgs) ToLayoutPageHeaderHeaderItemOutputWithContext(ctx context.Context) LayoutPageHeaderHeaderItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutPageHeaderHeaderItemOutput)
}

// LayoutPageHeaderHeaderItemArrayInput is an input type that accepts LayoutPageHeaderHeaderItemArray and LayoutPageHeaderHeaderItemArrayOutput values.
// You can construct a concrete instance of `LayoutPageHeaderHeaderItemArrayInput` via:
//
//	LayoutPageHeaderHeaderItemArray{ LayoutPageHeaderHeaderItemArgs{...} }
type LayoutPageHeaderHeaderItemArrayInput interface {
	pulumi.Input

	ToLayoutPageHeaderHeaderItemArrayOutput() LayoutPageHeaderHeaderItemArrayOutput
	ToLayoutPageHeaderHeaderItemArrayOutputWithContext(context.Context) LayoutPageHeaderHeaderItemArrayOutput
}

type LayoutPageHeaderHeaderItemArray []LayoutPageHeaderHeaderItemInput

func (LayoutPageHeaderHeaderItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LayoutPageHeaderHeaderItem)(nil)).Elem()
}

func (i LayoutPageHeaderHeaderItemArray) ToLayoutPageHeaderHeaderItemArrayOutput() LayoutPageHeaderHeaderItemArrayOutput {
	return i.ToLayoutPageHeaderHeaderItemArrayOutputWithContext(context.Background())
}

func (i LayoutPageHeaderHeaderItemArray) ToLayoutPageHeaderHeaderItemArrayOutputWithContext(ctx context.Context) LayoutPageHeaderHeaderItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutPageHeaderHeaderItemArrayOutput)
}

type LayoutPageHeaderHeaderItemOutput struct{ *pulumi.OutputState }

func (LayoutPageHeaderHeaderItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LayoutPageHeaderHeaderItem)(nil)).Elem()
}

func (o LayoutPageHeaderHeaderItemOutput) ToLayoutPageHeaderHeaderItemOutput() LayoutPageHeaderHeaderItemOutput {
	return o
}

func (o LayoutPageHeaderHeaderItemOutput) ToLayoutPageHeaderHeaderItemOutputWithContext(ctx context.Context) LayoutPageHeaderHeaderItemOutput {
	return o
}

// Report item text content.
func (o LayoutPageHeaderHeaderItemOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutPageHeaderHeaderItem) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// Description.
func (o LayoutPageHeaderHeaderItemOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutPageHeaderHeaderItem) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Report item ID.
func (o LayoutPageHeaderHeaderItemOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LayoutPageHeaderHeaderItem) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Report item image file name.
func (o LayoutPageHeaderHeaderItemOutput) ImgSrc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutPageHeaderHeaderItem) *string { return v.ImgSrc }).(pulumi.StringPtrOutput)
}

// Report item style.
func (o LayoutPageHeaderHeaderItemOutput) Style() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutPageHeaderHeaderItem) *string { return v.Style }).(pulumi.StringPtrOutput)
}

// Report item type. Valid values: `text`, `image`.
func (o LayoutPageHeaderHeaderItemOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayoutPageHeaderHeaderItem) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type LayoutPageHeaderHeaderItemArrayOutput struct{ *pulumi.OutputState }

func (LayoutPageHeaderHeaderItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LayoutPageHeaderHeaderItem)(nil)).Elem()
}

func (o LayoutPageHeaderHeaderItemArrayOutput) ToLayoutPageHeaderHeaderItemArrayOutput() LayoutPageHeaderHeaderItemArrayOutput {
	return o
}

func (o LayoutPageHeaderHeaderItemArrayOutput) ToLayoutPageHeaderHeaderItemArrayOutputWithContext(ctx context.Context) LayoutPageHeaderHeaderItemArrayOutput {
	return o
}

func (o LayoutPageHeaderHeaderItemArrayOutput) Index(i pulumi.IntInput) LayoutPageHeaderHeaderItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LayoutPageHeaderHeaderItem {
		return vs[0].([]LayoutPageHeaderHeaderItem)[vs[1].(int)]
	}).(LayoutPageHeaderHeaderItemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChartCategorySeriesInput)(nil)).Elem(), ChartCategorySeriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChartCategorySeriesPtrInput)(nil)).Elem(), ChartCategorySeriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChartColumnInput)(nil)).Elem(), ChartColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChartColumnArrayInput)(nil)).Elem(), ChartColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChartColumnMappingInput)(nil)).Elem(), ChartColumnMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChartColumnMappingArrayInput)(nil)).Elem(), ChartColumnMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChartDrillDownChartInput)(nil)).Elem(), ChartDrillDownChartArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChartDrillDownChartArrayInput)(nil)).Elem(), ChartDrillDownChartArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChartValueSeriesInput)(nil)).Elem(), ChartValueSeriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChartValueSeriesPtrInput)(nil)).Elem(), ChartValueSeriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChartXSeriesInput)(nil)).Elem(), ChartXSeriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChartXSeriesPtrInput)(nil)).Elem(), ChartXSeriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChartYSeriesInput)(nil)).Elem(), ChartYSeriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChartYSeriesPtrInput)(nil)).Elem(), ChartYSeriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetFieldInput)(nil)).Elem(), DatasetFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetFieldArrayInput)(nil)).Elem(), DatasetFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetParameterInput)(nil)).Elem(), DatasetParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetParameterArrayInput)(nil)).Elem(), DatasetParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutBodyItemInput)(nil)).Elem(), LayoutBodyItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutBodyItemArrayInput)(nil)).Elem(), LayoutBodyItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutBodyItemListInput)(nil)).Elem(), LayoutBodyItemListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutBodyItemListArrayInput)(nil)).Elem(), LayoutBodyItemListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutBodyItemParameterInput)(nil)).Elem(), LayoutBodyItemParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutBodyItemParameterArrayInput)(nil)).Elem(), LayoutBodyItemParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutPageInput)(nil)).Elem(), LayoutPageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutPagePtrInput)(nil)).Elem(), LayoutPageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutPageFooterInput)(nil)).Elem(), LayoutPageFooterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutPageFooterPtrInput)(nil)).Elem(), LayoutPageFooterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutPageFooterFooterItemInput)(nil)).Elem(), LayoutPageFooterFooterItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutPageFooterFooterItemArrayInput)(nil)).Elem(), LayoutPageFooterFooterItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutPageHeaderInput)(nil)).Elem(), LayoutPageHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutPageHeaderPtrInput)(nil)).Elem(), LayoutPageHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutPageHeaderHeaderItemInput)(nil)).Elem(), LayoutPageHeaderHeaderItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutPageHeaderHeaderItemArrayInput)(nil)).Elem(), LayoutPageHeaderHeaderItemArray{})
	pulumi.RegisterOutputType(ChartCategorySeriesOutput{})
	pulumi.RegisterOutputType(ChartCategorySeriesPtrOutput{})
	pulumi.RegisterOutputType(ChartColumnOutput{})
	pulumi.RegisterOutputType(ChartColumnArrayOutput{})
	pulumi.RegisterOutputType(ChartColumnMappingOutput{})
	pulumi.RegisterOutputType(ChartColumnMappingArrayOutput{})
	pulumi.RegisterOutputType(ChartDrillDownChartOutput{})
	pulumi.RegisterOutputType(ChartDrillDownChartArrayOutput{})
	pulumi.RegisterOutputType(ChartValueSeriesOutput{})
	pulumi.RegisterOutputType(ChartValueSeriesPtrOutput{})
	pulumi.RegisterOutputType(ChartXSeriesOutput{})
	pulumi.RegisterOutputType(ChartXSeriesPtrOutput{})
	pulumi.RegisterOutputType(ChartYSeriesOutput{})
	pulumi.RegisterOutputType(ChartYSeriesPtrOutput{})
	pulumi.RegisterOutputType(DatasetFieldOutput{})
	pulumi.RegisterOutputType(DatasetFieldArrayOutput{})
	pulumi.RegisterOutputType(DatasetParameterOutput{})
	pulumi.RegisterOutputType(DatasetParameterArrayOutput{})
	pulumi.RegisterOutputType(LayoutBodyItemOutput{})
	pulumi.RegisterOutputType(LayoutBodyItemArrayOutput{})
	pulumi.RegisterOutputType(LayoutBodyItemListOutput{})
	pulumi.RegisterOutputType(LayoutBodyItemListArrayOutput{})
	pulumi.RegisterOutputType(LayoutBodyItemParameterOutput{})
	pulumi.RegisterOutputType(LayoutBodyItemParameterArrayOutput{})
	pulumi.RegisterOutputType(LayoutPageOutput{})
	pulumi.RegisterOutputType(LayoutPagePtrOutput{})
	pulumi.RegisterOutputType(LayoutPageFooterOutput{})
	pulumi.RegisterOutputType(LayoutPageFooterPtrOutput{})
	pulumi.RegisterOutputType(LayoutPageFooterFooterItemOutput{})
	pulumi.RegisterOutputType(LayoutPageFooterFooterItemArrayOutput{})
	pulumi.RegisterOutputType(LayoutPageHeaderOutput{})
	pulumi.RegisterOutputType(LayoutPageHeaderPtrOutput{})
	pulumi.RegisterOutputType(LayoutPageHeaderHeaderItemOutput{})
	pulumi.RegisterOutputType(LayoutPageHeaderHeaderItemArrayOutput{})
}

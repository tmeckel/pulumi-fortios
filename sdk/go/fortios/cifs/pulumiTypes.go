// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cifs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProfileFileFilter struct {
	// File filter entries. The structure of `entries` block is documented below.
	Entries []ProfileFileFilterEntry `pulumi:"entries"`
	// Enable/disable file filter logging. Valid values: `enable`, `disable`.
	Log *string `pulumi:"log"`
	// Enable/disable file filter. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
}

// ProfileFileFilterInput is an input type that accepts ProfileFileFilterArgs and ProfileFileFilterOutput values.
// You can construct a concrete instance of `ProfileFileFilterInput` via:
//
//	ProfileFileFilterArgs{...}
type ProfileFileFilterInput interface {
	pulumi.Input

	ToProfileFileFilterOutput() ProfileFileFilterOutput
	ToProfileFileFilterOutputWithContext(context.Context) ProfileFileFilterOutput
}

type ProfileFileFilterArgs struct {
	// File filter entries. The structure of `entries` block is documented below.
	Entries ProfileFileFilterEntryArrayInput `pulumi:"entries"`
	// Enable/disable file filter logging. Valid values: `enable`, `disable`.
	Log pulumi.StringPtrInput `pulumi:"log"`
	// Enable/disable file filter. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ProfileFileFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileFileFilter)(nil)).Elem()
}

func (i ProfileFileFilterArgs) ToProfileFileFilterOutput() ProfileFileFilterOutput {
	return i.ToProfileFileFilterOutputWithContext(context.Background())
}

func (i ProfileFileFilterArgs) ToProfileFileFilterOutputWithContext(ctx context.Context) ProfileFileFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileFileFilterOutput)
}

func (i ProfileFileFilterArgs) ToProfileFileFilterPtrOutput() ProfileFileFilterPtrOutput {
	return i.ToProfileFileFilterPtrOutputWithContext(context.Background())
}

func (i ProfileFileFilterArgs) ToProfileFileFilterPtrOutputWithContext(ctx context.Context) ProfileFileFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileFileFilterOutput).ToProfileFileFilterPtrOutputWithContext(ctx)
}

// ProfileFileFilterPtrInput is an input type that accepts ProfileFileFilterArgs, ProfileFileFilterPtr and ProfileFileFilterPtrOutput values.
// You can construct a concrete instance of `ProfileFileFilterPtrInput` via:
//
//	        ProfileFileFilterArgs{...}
//
//	or:
//
//	        nil
type ProfileFileFilterPtrInput interface {
	pulumi.Input

	ToProfileFileFilterPtrOutput() ProfileFileFilterPtrOutput
	ToProfileFileFilterPtrOutputWithContext(context.Context) ProfileFileFilterPtrOutput
}

type profileFileFilterPtrType ProfileFileFilterArgs

func ProfileFileFilterPtr(v *ProfileFileFilterArgs) ProfileFileFilterPtrInput {
	return (*profileFileFilterPtrType)(v)
}

func (*profileFileFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileFileFilter)(nil)).Elem()
}

func (i *profileFileFilterPtrType) ToProfileFileFilterPtrOutput() ProfileFileFilterPtrOutput {
	return i.ToProfileFileFilterPtrOutputWithContext(context.Background())
}

func (i *profileFileFilterPtrType) ToProfileFileFilterPtrOutputWithContext(ctx context.Context) ProfileFileFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileFileFilterPtrOutput)
}

type ProfileFileFilterOutput struct{ *pulumi.OutputState }

func (ProfileFileFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileFileFilter)(nil)).Elem()
}

func (o ProfileFileFilterOutput) ToProfileFileFilterOutput() ProfileFileFilterOutput {
	return o
}

func (o ProfileFileFilterOutput) ToProfileFileFilterOutputWithContext(ctx context.Context) ProfileFileFilterOutput {
	return o
}

func (o ProfileFileFilterOutput) ToProfileFileFilterPtrOutput() ProfileFileFilterPtrOutput {
	return o.ToProfileFileFilterPtrOutputWithContext(context.Background())
}

func (o ProfileFileFilterOutput) ToProfileFileFilterPtrOutputWithContext(ctx context.Context) ProfileFileFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileFileFilter) *ProfileFileFilter {
		return &v
	}).(ProfileFileFilterPtrOutput)
}

// File filter entries. The structure of `entries` block is documented below.
func (o ProfileFileFilterOutput) Entries() ProfileFileFilterEntryArrayOutput {
	return o.ApplyT(func(v ProfileFileFilter) []ProfileFileFilterEntry { return v.Entries }).(ProfileFileFilterEntryArrayOutput)
}

// Enable/disable file filter logging. Valid values: `enable`, `disable`.
func (o ProfileFileFilterOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileFileFilter) *string { return v.Log }).(pulumi.StringPtrOutput)
}

// Enable/disable file filter. Valid values: `enable`, `disable`.
func (o ProfileFileFilterOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileFileFilter) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ProfileFileFilterPtrOutput struct{ *pulumi.OutputState }

func (ProfileFileFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileFileFilter)(nil)).Elem()
}

func (o ProfileFileFilterPtrOutput) ToProfileFileFilterPtrOutput() ProfileFileFilterPtrOutput {
	return o
}

func (o ProfileFileFilterPtrOutput) ToProfileFileFilterPtrOutputWithContext(ctx context.Context) ProfileFileFilterPtrOutput {
	return o
}

func (o ProfileFileFilterPtrOutput) Elem() ProfileFileFilterOutput {
	return o.ApplyT(func(v *ProfileFileFilter) ProfileFileFilter {
		if v != nil {
			return *v
		}
		var ret ProfileFileFilter
		return ret
	}).(ProfileFileFilterOutput)
}

// File filter entries. The structure of `entries` block is documented below.
func (o ProfileFileFilterPtrOutput) Entries() ProfileFileFilterEntryArrayOutput {
	return o.ApplyT(func(v *ProfileFileFilter) []ProfileFileFilterEntry {
		if v == nil {
			return nil
		}
		return v.Entries
	}).(ProfileFileFilterEntryArrayOutput)
}

// Enable/disable file filter logging. Valid values: `enable`, `disable`.
func (o ProfileFileFilterPtrOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileFileFilter) *string {
		if v == nil {
			return nil
		}
		return v.Log
	}).(pulumi.StringPtrOutput)
}

// Enable/disable file filter. Valid values: `enable`, `disable`.
func (o ProfileFileFilterPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileFileFilter) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type ProfileFileFilterEntry struct {
	// Action taken for matched file. Valid values: `log`, `block`.
	Action *string `pulumi:"action"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
	Direction *string `pulumi:"direction"`
	// Select file type. The structure of `fileType` block is documented below.
	FileTypes []ProfileFileFilterEntryFileType `pulumi:"fileTypes"`
	// Add a file filter.
	Filter *string `pulumi:"filter"`
}

// ProfileFileFilterEntryInput is an input type that accepts ProfileFileFilterEntryArgs and ProfileFileFilterEntryOutput values.
// You can construct a concrete instance of `ProfileFileFilterEntryInput` via:
//
//	ProfileFileFilterEntryArgs{...}
type ProfileFileFilterEntryInput interface {
	pulumi.Input

	ToProfileFileFilterEntryOutput() ProfileFileFilterEntryOutput
	ToProfileFileFilterEntryOutputWithContext(context.Context) ProfileFileFilterEntryOutput
}

type ProfileFileFilterEntryArgs struct {
	// Action taken for matched file. Valid values: `log`, `block`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Comment.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Select file type. The structure of `fileType` block is documented below.
	FileTypes ProfileFileFilterEntryFileTypeArrayInput `pulumi:"fileTypes"`
	// Add a file filter.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
}

func (ProfileFileFilterEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileFileFilterEntry)(nil)).Elem()
}

func (i ProfileFileFilterEntryArgs) ToProfileFileFilterEntryOutput() ProfileFileFilterEntryOutput {
	return i.ToProfileFileFilterEntryOutputWithContext(context.Background())
}

func (i ProfileFileFilterEntryArgs) ToProfileFileFilterEntryOutputWithContext(ctx context.Context) ProfileFileFilterEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileFileFilterEntryOutput)
}

// ProfileFileFilterEntryArrayInput is an input type that accepts ProfileFileFilterEntryArray and ProfileFileFilterEntryArrayOutput values.
// You can construct a concrete instance of `ProfileFileFilterEntryArrayInput` via:
//
//	ProfileFileFilterEntryArray{ ProfileFileFilterEntryArgs{...} }
type ProfileFileFilterEntryArrayInput interface {
	pulumi.Input

	ToProfileFileFilterEntryArrayOutput() ProfileFileFilterEntryArrayOutput
	ToProfileFileFilterEntryArrayOutputWithContext(context.Context) ProfileFileFilterEntryArrayOutput
}

type ProfileFileFilterEntryArray []ProfileFileFilterEntryInput

func (ProfileFileFilterEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileFileFilterEntry)(nil)).Elem()
}

func (i ProfileFileFilterEntryArray) ToProfileFileFilterEntryArrayOutput() ProfileFileFilterEntryArrayOutput {
	return i.ToProfileFileFilterEntryArrayOutputWithContext(context.Background())
}

func (i ProfileFileFilterEntryArray) ToProfileFileFilterEntryArrayOutputWithContext(ctx context.Context) ProfileFileFilterEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileFileFilterEntryArrayOutput)
}

type ProfileFileFilterEntryOutput struct{ *pulumi.OutputState }

func (ProfileFileFilterEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileFileFilterEntry)(nil)).Elem()
}

func (o ProfileFileFilterEntryOutput) ToProfileFileFilterEntryOutput() ProfileFileFilterEntryOutput {
	return o
}

func (o ProfileFileFilterEntryOutput) ToProfileFileFilterEntryOutputWithContext(ctx context.Context) ProfileFileFilterEntryOutput {
	return o
}

// Action taken for matched file. Valid values: `log`, `block`.
func (o ProfileFileFilterEntryOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileFileFilterEntry) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Comment.
func (o ProfileFileFilterEntryOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileFileFilterEntry) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
func (o ProfileFileFilterEntryOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileFileFilterEntry) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Select file type. The structure of `fileType` block is documented below.
func (o ProfileFileFilterEntryOutput) FileTypes() ProfileFileFilterEntryFileTypeArrayOutput {
	return o.ApplyT(func(v ProfileFileFilterEntry) []ProfileFileFilterEntryFileType { return v.FileTypes }).(ProfileFileFilterEntryFileTypeArrayOutput)
}

// Add a file filter.
func (o ProfileFileFilterEntryOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileFileFilterEntry) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

type ProfileFileFilterEntryArrayOutput struct{ *pulumi.OutputState }

func (ProfileFileFilterEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileFileFilterEntry)(nil)).Elem()
}

func (o ProfileFileFilterEntryArrayOutput) ToProfileFileFilterEntryArrayOutput() ProfileFileFilterEntryArrayOutput {
	return o
}

func (o ProfileFileFilterEntryArrayOutput) ToProfileFileFilterEntryArrayOutputWithContext(ctx context.Context) ProfileFileFilterEntryArrayOutput {
	return o
}

func (o ProfileFileFilterEntryArrayOutput) Index(i pulumi.IntInput) ProfileFileFilterEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileFileFilterEntry {
		return vs[0].([]ProfileFileFilterEntry)[vs[1].(int)]
	}).(ProfileFileFilterEntryOutput)
}

type ProfileFileFilterEntryFileType struct {
	// File type name.
	Name *string `pulumi:"name"`
}

// ProfileFileFilterEntryFileTypeInput is an input type that accepts ProfileFileFilterEntryFileTypeArgs and ProfileFileFilterEntryFileTypeOutput values.
// You can construct a concrete instance of `ProfileFileFilterEntryFileTypeInput` via:
//
//	ProfileFileFilterEntryFileTypeArgs{...}
type ProfileFileFilterEntryFileTypeInput interface {
	pulumi.Input

	ToProfileFileFilterEntryFileTypeOutput() ProfileFileFilterEntryFileTypeOutput
	ToProfileFileFilterEntryFileTypeOutputWithContext(context.Context) ProfileFileFilterEntryFileTypeOutput
}

type ProfileFileFilterEntryFileTypeArgs struct {
	// File type name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ProfileFileFilterEntryFileTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileFileFilterEntryFileType)(nil)).Elem()
}

func (i ProfileFileFilterEntryFileTypeArgs) ToProfileFileFilterEntryFileTypeOutput() ProfileFileFilterEntryFileTypeOutput {
	return i.ToProfileFileFilterEntryFileTypeOutputWithContext(context.Background())
}

func (i ProfileFileFilterEntryFileTypeArgs) ToProfileFileFilterEntryFileTypeOutputWithContext(ctx context.Context) ProfileFileFilterEntryFileTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileFileFilterEntryFileTypeOutput)
}

// ProfileFileFilterEntryFileTypeArrayInput is an input type that accepts ProfileFileFilterEntryFileTypeArray and ProfileFileFilterEntryFileTypeArrayOutput values.
// You can construct a concrete instance of `ProfileFileFilterEntryFileTypeArrayInput` via:
//
//	ProfileFileFilterEntryFileTypeArray{ ProfileFileFilterEntryFileTypeArgs{...} }
type ProfileFileFilterEntryFileTypeArrayInput interface {
	pulumi.Input

	ToProfileFileFilterEntryFileTypeArrayOutput() ProfileFileFilterEntryFileTypeArrayOutput
	ToProfileFileFilterEntryFileTypeArrayOutputWithContext(context.Context) ProfileFileFilterEntryFileTypeArrayOutput
}

type ProfileFileFilterEntryFileTypeArray []ProfileFileFilterEntryFileTypeInput

func (ProfileFileFilterEntryFileTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileFileFilterEntryFileType)(nil)).Elem()
}

func (i ProfileFileFilterEntryFileTypeArray) ToProfileFileFilterEntryFileTypeArrayOutput() ProfileFileFilterEntryFileTypeArrayOutput {
	return i.ToProfileFileFilterEntryFileTypeArrayOutputWithContext(context.Background())
}

func (i ProfileFileFilterEntryFileTypeArray) ToProfileFileFilterEntryFileTypeArrayOutputWithContext(ctx context.Context) ProfileFileFilterEntryFileTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileFileFilterEntryFileTypeArrayOutput)
}

type ProfileFileFilterEntryFileTypeOutput struct{ *pulumi.OutputState }

func (ProfileFileFilterEntryFileTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileFileFilterEntryFileType)(nil)).Elem()
}

func (o ProfileFileFilterEntryFileTypeOutput) ToProfileFileFilterEntryFileTypeOutput() ProfileFileFilterEntryFileTypeOutput {
	return o
}

func (o ProfileFileFilterEntryFileTypeOutput) ToProfileFileFilterEntryFileTypeOutputWithContext(ctx context.Context) ProfileFileFilterEntryFileTypeOutput {
	return o
}

// File type name.
func (o ProfileFileFilterEntryFileTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileFileFilterEntryFileType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ProfileFileFilterEntryFileTypeArrayOutput struct{ *pulumi.OutputState }

func (ProfileFileFilterEntryFileTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileFileFilterEntryFileType)(nil)).Elem()
}

func (o ProfileFileFilterEntryFileTypeArrayOutput) ToProfileFileFilterEntryFileTypeArrayOutput() ProfileFileFilterEntryFileTypeArrayOutput {
	return o
}

func (o ProfileFileFilterEntryFileTypeArrayOutput) ToProfileFileFilterEntryFileTypeArrayOutputWithContext(ctx context.Context) ProfileFileFilterEntryFileTypeArrayOutput {
	return o
}

func (o ProfileFileFilterEntryFileTypeArrayOutput) Index(i pulumi.IntInput) ProfileFileFilterEntryFileTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileFileFilterEntryFileType {
		return vs[0].([]ProfileFileFilterEntryFileType)[vs[1].(int)]
	}).(ProfileFileFilterEntryFileTypeOutput)
}

type ProfileServerKeytab struct {
	// Base64 encoded keytab file containing credential of the server.
	Keytab *string `pulumi:"keytab"`
	// Service principal.  For example, "host/cifsserver.example.com@example.com".
	Principal *string `pulumi:"principal"`
}

// ProfileServerKeytabInput is an input type that accepts ProfileServerKeytabArgs and ProfileServerKeytabOutput values.
// You can construct a concrete instance of `ProfileServerKeytabInput` via:
//
//	ProfileServerKeytabArgs{...}
type ProfileServerKeytabInput interface {
	pulumi.Input

	ToProfileServerKeytabOutput() ProfileServerKeytabOutput
	ToProfileServerKeytabOutputWithContext(context.Context) ProfileServerKeytabOutput
}

type ProfileServerKeytabArgs struct {
	// Base64 encoded keytab file containing credential of the server.
	Keytab pulumi.StringPtrInput `pulumi:"keytab"`
	// Service principal.  For example, "host/cifsserver.example.com@example.com".
	Principal pulumi.StringPtrInput `pulumi:"principal"`
}

func (ProfileServerKeytabArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileServerKeytab)(nil)).Elem()
}

func (i ProfileServerKeytabArgs) ToProfileServerKeytabOutput() ProfileServerKeytabOutput {
	return i.ToProfileServerKeytabOutputWithContext(context.Background())
}

func (i ProfileServerKeytabArgs) ToProfileServerKeytabOutputWithContext(ctx context.Context) ProfileServerKeytabOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileServerKeytabOutput)
}

// ProfileServerKeytabArrayInput is an input type that accepts ProfileServerKeytabArray and ProfileServerKeytabArrayOutput values.
// You can construct a concrete instance of `ProfileServerKeytabArrayInput` via:
//
//	ProfileServerKeytabArray{ ProfileServerKeytabArgs{...} }
type ProfileServerKeytabArrayInput interface {
	pulumi.Input

	ToProfileServerKeytabArrayOutput() ProfileServerKeytabArrayOutput
	ToProfileServerKeytabArrayOutputWithContext(context.Context) ProfileServerKeytabArrayOutput
}

type ProfileServerKeytabArray []ProfileServerKeytabInput

func (ProfileServerKeytabArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileServerKeytab)(nil)).Elem()
}

func (i ProfileServerKeytabArray) ToProfileServerKeytabArrayOutput() ProfileServerKeytabArrayOutput {
	return i.ToProfileServerKeytabArrayOutputWithContext(context.Background())
}

func (i ProfileServerKeytabArray) ToProfileServerKeytabArrayOutputWithContext(ctx context.Context) ProfileServerKeytabArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileServerKeytabArrayOutput)
}

type ProfileServerKeytabOutput struct{ *pulumi.OutputState }

func (ProfileServerKeytabOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileServerKeytab)(nil)).Elem()
}

func (o ProfileServerKeytabOutput) ToProfileServerKeytabOutput() ProfileServerKeytabOutput {
	return o
}

func (o ProfileServerKeytabOutput) ToProfileServerKeytabOutputWithContext(ctx context.Context) ProfileServerKeytabOutput {
	return o
}

// Base64 encoded keytab file containing credential of the server.
func (o ProfileServerKeytabOutput) Keytab() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileServerKeytab) *string { return v.Keytab }).(pulumi.StringPtrOutput)
}

// Service principal.  For example, "host/cifsserver.example.com@example.com".
func (o ProfileServerKeytabOutput) Principal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileServerKeytab) *string { return v.Principal }).(pulumi.StringPtrOutput)
}

type ProfileServerKeytabArrayOutput struct{ *pulumi.OutputState }

func (ProfileServerKeytabArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileServerKeytab)(nil)).Elem()
}

func (o ProfileServerKeytabArrayOutput) ToProfileServerKeytabArrayOutput() ProfileServerKeytabArrayOutput {
	return o
}

func (o ProfileServerKeytabArrayOutput) ToProfileServerKeytabArrayOutputWithContext(ctx context.Context) ProfileServerKeytabArrayOutput {
	return o
}

func (o ProfileServerKeytabArrayOutput) Index(i pulumi.IntInput) ProfileServerKeytabOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileServerKeytab {
		return vs[0].([]ProfileServerKeytab)[vs[1].(int)]
	}).(ProfileServerKeytabOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileFileFilterInput)(nil)).Elem(), ProfileFileFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileFileFilterPtrInput)(nil)).Elem(), ProfileFileFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileFileFilterEntryInput)(nil)).Elem(), ProfileFileFilterEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileFileFilterEntryArrayInput)(nil)).Elem(), ProfileFileFilterEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileFileFilterEntryFileTypeInput)(nil)).Elem(), ProfileFileFilterEntryFileTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileFileFilterEntryFileTypeArrayInput)(nil)).Elem(), ProfileFileFilterEntryFileTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileServerKeytabInput)(nil)).Elem(), ProfileServerKeytabArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileServerKeytabArrayInput)(nil)).Elem(), ProfileServerKeytabArray{})
	pulumi.RegisterOutputType(ProfileFileFilterOutput{})
	pulumi.RegisterOutputType(ProfileFileFilterPtrOutput{})
	pulumi.RegisterOutputType(ProfileFileFilterEntryOutput{})
	pulumi.RegisterOutputType(ProfileFileFilterEntryArrayOutput{})
	pulumi.RegisterOutputType(ProfileFileFilterEntryFileTypeOutput{})
	pulumi.RegisterOutputType(ProfileFileFilterEntryFileTypeArrayOutput{})
	pulumi.RegisterOutputType(ProfileServerKeytabOutput{})
	pulumi.RegisterOutputType(ProfileServerKeytabArrayOutput{})
}

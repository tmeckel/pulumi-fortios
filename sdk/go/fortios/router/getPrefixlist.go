// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package router

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information on an fortios router prefixlist
func LookupPrefixlist(ctx *pulumi.Context, args *LookupPrefixlistArgs, opts ...pulumi.InvokeOption) (*LookupPrefixlistResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupPrefixlistResult
	err := ctx.Invoke("fortios:router/getPrefixlist:getPrefixlist", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPrefixlist.
type LookupPrefixlistArgs struct {
	// Specify the name of the desired router prefixlist.
	Name string `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by getPrefixlist.
type LookupPrefixlistResult struct {
	// Comment.
	Comments string `pulumi:"comments"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name.
	Name string `pulumi:"name"`
	// IPv4 prefix list rule. The structure of `rule` block is documented below.
	Rules     []GetPrefixlistRule `pulumi:"rules"`
	Vdomparam *string             `pulumi:"vdomparam"`
}

func LookupPrefixlistOutput(ctx *pulumi.Context, args LookupPrefixlistOutputArgs, opts ...pulumi.InvokeOption) LookupPrefixlistResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPrefixlistResult, error) {
			args := v.(LookupPrefixlistArgs)
			r, err := LookupPrefixlist(ctx, &args, opts...)
			var s LookupPrefixlistResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPrefixlistResultOutput)
}

// A collection of arguments for invoking getPrefixlist.
type LookupPrefixlistOutputArgs struct {
	// Specify the name of the desired router prefixlist.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupPrefixlistOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPrefixlistArgs)(nil)).Elem()
}

// A collection of values returned by getPrefixlist.
type LookupPrefixlistResultOutput struct{ *pulumi.OutputState }

func (LookupPrefixlistResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPrefixlistResult)(nil)).Elem()
}

func (o LookupPrefixlistResultOutput) ToLookupPrefixlistResultOutput() LookupPrefixlistResultOutput {
	return o
}

func (o LookupPrefixlistResultOutput) ToLookupPrefixlistResultOutputWithContext(ctx context.Context) LookupPrefixlistResultOutput {
	return o
}

// Comment.
func (o LookupPrefixlistResultOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrefixlistResult) string { return v.Comments }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPrefixlistResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrefixlistResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name.
func (o LookupPrefixlistResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrefixlistResult) string { return v.Name }).(pulumi.StringOutput)
}

// IPv4 prefix list rule. The structure of `rule` block is documented below.
func (o LookupPrefixlistResultOutput) Rules() GetPrefixlistRuleArrayOutput {
	return o.ApplyT(func(v LookupPrefixlistResult) []GetPrefixlistRule { return v.Rules }).(GetPrefixlistRuleArrayOutput)
}

func (o LookupPrefixlistResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPrefixlistResult) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPrefixlistResultOutput{})
}

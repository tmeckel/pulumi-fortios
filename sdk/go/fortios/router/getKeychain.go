// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package router

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information on an fortios router keychain
func LookupKeychain(ctx *pulumi.Context, args *LookupKeychainArgs, opts ...pulumi.InvokeOption) (*LookupKeychainResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupKeychainResult
	err := ctx.Invoke("fortios:router/getKeychain:getKeychain", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKeychain.
type LookupKeychainArgs struct {
	// Specify the name of the desired router keychain.
	Name string `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by getKeychain.
type LookupKeychainResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Configuration method to edit key settings. The structure of `key` block is documented below.
	Keys []GetKeychainKey `pulumi:"keys"`
	// Key-chain name.
	Name      string  `pulumi:"name"`
	Vdomparam *string `pulumi:"vdomparam"`
}

func LookupKeychainOutput(ctx *pulumi.Context, args LookupKeychainOutputArgs, opts ...pulumi.InvokeOption) LookupKeychainResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupKeychainResult, error) {
			args := v.(LookupKeychainArgs)
			r, err := LookupKeychain(ctx, &args, opts...)
			var s LookupKeychainResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupKeychainResultOutput)
}

// A collection of arguments for invoking getKeychain.
type LookupKeychainOutputArgs struct {
	// Specify the name of the desired router keychain.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupKeychainOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeychainArgs)(nil)).Elem()
}

// A collection of values returned by getKeychain.
type LookupKeychainResultOutput struct{ *pulumi.OutputState }

func (LookupKeychainResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeychainResult)(nil)).Elem()
}

func (o LookupKeychainResultOutput) ToLookupKeychainResultOutput() LookupKeychainResultOutput {
	return o
}

func (o LookupKeychainResultOutput) ToLookupKeychainResultOutputWithContext(ctx context.Context) LookupKeychainResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupKeychainResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeychainResult) string { return v.Id }).(pulumi.StringOutput)
}

// Configuration method to edit key settings. The structure of `key` block is documented below.
func (o LookupKeychainResultOutput) Keys() GetKeychainKeyArrayOutput {
	return o.ApplyT(func(v LookupKeychainResult) []GetKeychainKey { return v.Keys }).(GetKeychainKeyArrayOutput)
}

// Key-chain name.
func (o LookupKeychainResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeychainResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupKeychainResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupKeychainResult) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKeychainResultOutput{})
}

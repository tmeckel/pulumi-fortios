// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentication

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RuleDstaddr6 struct {
	// Authentication rule name.
	Name *string `pulumi:"name"`
}

// RuleDstaddr6Input is an input type that accepts RuleDstaddr6Args and RuleDstaddr6Output values.
// You can construct a concrete instance of `RuleDstaddr6Input` via:
//
//	RuleDstaddr6Args{...}
type RuleDstaddr6Input interface {
	pulumi.Input

	ToRuleDstaddr6Output() RuleDstaddr6Output
	ToRuleDstaddr6OutputWithContext(context.Context) RuleDstaddr6Output
}

type RuleDstaddr6Args struct {
	// Authentication rule name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RuleDstaddr6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleDstaddr6)(nil)).Elem()
}

func (i RuleDstaddr6Args) ToRuleDstaddr6Output() RuleDstaddr6Output {
	return i.ToRuleDstaddr6OutputWithContext(context.Background())
}

func (i RuleDstaddr6Args) ToRuleDstaddr6OutputWithContext(ctx context.Context) RuleDstaddr6Output {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDstaddr6Output)
}

// RuleDstaddr6ArrayInput is an input type that accepts RuleDstaddr6Array and RuleDstaddr6ArrayOutput values.
// You can construct a concrete instance of `RuleDstaddr6ArrayInput` via:
//
//	RuleDstaddr6Array{ RuleDstaddr6Args{...} }
type RuleDstaddr6ArrayInput interface {
	pulumi.Input

	ToRuleDstaddr6ArrayOutput() RuleDstaddr6ArrayOutput
	ToRuleDstaddr6ArrayOutputWithContext(context.Context) RuleDstaddr6ArrayOutput
}

type RuleDstaddr6Array []RuleDstaddr6Input

func (RuleDstaddr6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleDstaddr6)(nil)).Elem()
}

func (i RuleDstaddr6Array) ToRuleDstaddr6ArrayOutput() RuleDstaddr6ArrayOutput {
	return i.ToRuleDstaddr6ArrayOutputWithContext(context.Background())
}

func (i RuleDstaddr6Array) ToRuleDstaddr6ArrayOutputWithContext(ctx context.Context) RuleDstaddr6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDstaddr6ArrayOutput)
}

type RuleDstaddr6Output struct{ *pulumi.OutputState }

func (RuleDstaddr6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleDstaddr6)(nil)).Elem()
}

func (o RuleDstaddr6Output) ToRuleDstaddr6Output() RuleDstaddr6Output {
	return o
}

func (o RuleDstaddr6Output) ToRuleDstaddr6OutputWithContext(ctx context.Context) RuleDstaddr6Output {
	return o
}

// Authentication rule name.
func (o RuleDstaddr6Output) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleDstaddr6) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RuleDstaddr6ArrayOutput struct{ *pulumi.OutputState }

func (RuleDstaddr6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleDstaddr6)(nil)).Elem()
}

func (o RuleDstaddr6ArrayOutput) ToRuleDstaddr6ArrayOutput() RuleDstaddr6ArrayOutput {
	return o
}

func (o RuleDstaddr6ArrayOutput) ToRuleDstaddr6ArrayOutputWithContext(ctx context.Context) RuleDstaddr6ArrayOutput {
	return o
}

func (o RuleDstaddr6ArrayOutput) Index(i pulumi.IntInput) RuleDstaddr6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleDstaddr6 {
		return vs[0].([]RuleDstaddr6)[vs[1].(int)]
	}).(RuleDstaddr6Output)
}

type RuleDstaddr struct {
	// Address name.
	Name *string `pulumi:"name"`
}

// RuleDstaddrInput is an input type that accepts RuleDstaddrArgs and RuleDstaddrOutput values.
// You can construct a concrete instance of `RuleDstaddrInput` via:
//
//	RuleDstaddrArgs{...}
type RuleDstaddrInput interface {
	pulumi.Input

	ToRuleDstaddrOutput() RuleDstaddrOutput
	ToRuleDstaddrOutputWithContext(context.Context) RuleDstaddrOutput
}

type RuleDstaddrArgs struct {
	// Address name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RuleDstaddrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleDstaddr)(nil)).Elem()
}

func (i RuleDstaddrArgs) ToRuleDstaddrOutput() RuleDstaddrOutput {
	return i.ToRuleDstaddrOutputWithContext(context.Background())
}

func (i RuleDstaddrArgs) ToRuleDstaddrOutputWithContext(ctx context.Context) RuleDstaddrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDstaddrOutput)
}

// RuleDstaddrArrayInput is an input type that accepts RuleDstaddrArray and RuleDstaddrArrayOutput values.
// You can construct a concrete instance of `RuleDstaddrArrayInput` via:
//
//	RuleDstaddrArray{ RuleDstaddrArgs{...} }
type RuleDstaddrArrayInput interface {
	pulumi.Input

	ToRuleDstaddrArrayOutput() RuleDstaddrArrayOutput
	ToRuleDstaddrArrayOutputWithContext(context.Context) RuleDstaddrArrayOutput
}

type RuleDstaddrArray []RuleDstaddrInput

func (RuleDstaddrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleDstaddr)(nil)).Elem()
}

func (i RuleDstaddrArray) ToRuleDstaddrArrayOutput() RuleDstaddrArrayOutput {
	return i.ToRuleDstaddrArrayOutputWithContext(context.Background())
}

func (i RuleDstaddrArray) ToRuleDstaddrArrayOutputWithContext(ctx context.Context) RuleDstaddrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDstaddrArrayOutput)
}

type RuleDstaddrOutput struct{ *pulumi.OutputState }

func (RuleDstaddrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleDstaddr)(nil)).Elem()
}

func (o RuleDstaddrOutput) ToRuleDstaddrOutput() RuleDstaddrOutput {
	return o
}

func (o RuleDstaddrOutput) ToRuleDstaddrOutputWithContext(ctx context.Context) RuleDstaddrOutput {
	return o
}

// Address name.
func (o RuleDstaddrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleDstaddr) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RuleDstaddrArrayOutput struct{ *pulumi.OutputState }

func (RuleDstaddrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleDstaddr)(nil)).Elem()
}

func (o RuleDstaddrArrayOutput) ToRuleDstaddrArrayOutput() RuleDstaddrArrayOutput {
	return o
}

func (o RuleDstaddrArrayOutput) ToRuleDstaddrArrayOutputWithContext(ctx context.Context) RuleDstaddrArrayOutput {
	return o
}

func (o RuleDstaddrArrayOutput) Index(i pulumi.IntInput) RuleDstaddrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleDstaddr {
		return vs[0].([]RuleDstaddr)[vs[1].(int)]
	}).(RuleDstaddrOutput)
}

type RuleSrcaddr6 struct {
	// Authentication rule name.
	Name *string `pulumi:"name"`
}

// RuleSrcaddr6Input is an input type that accepts RuleSrcaddr6Args and RuleSrcaddr6Output values.
// You can construct a concrete instance of `RuleSrcaddr6Input` via:
//
//	RuleSrcaddr6Args{...}
type RuleSrcaddr6Input interface {
	pulumi.Input

	ToRuleSrcaddr6Output() RuleSrcaddr6Output
	ToRuleSrcaddr6OutputWithContext(context.Context) RuleSrcaddr6Output
}

type RuleSrcaddr6Args struct {
	// Authentication rule name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RuleSrcaddr6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSrcaddr6)(nil)).Elem()
}

func (i RuleSrcaddr6Args) ToRuleSrcaddr6Output() RuleSrcaddr6Output {
	return i.ToRuleSrcaddr6OutputWithContext(context.Background())
}

func (i RuleSrcaddr6Args) ToRuleSrcaddr6OutputWithContext(ctx context.Context) RuleSrcaddr6Output {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSrcaddr6Output)
}

// RuleSrcaddr6ArrayInput is an input type that accepts RuleSrcaddr6Array and RuleSrcaddr6ArrayOutput values.
// You can construct a concrete instance of `RuleSrcaddr6ArrayInput` via:
//
//	RuleSrcaddr6Array{ RuleSrcaddr6Args{...} }
type RuleSrcaddr6ArrayInput interface {
	pulumi.Input

	ToRuleSrcaddr6ArrayOutput() RuleSrcaddr6ArrayOutput
	ToRuleSrcaddr6ArrayOutputWithContext(context.Context) RuleSrcaddr6ArrayOutput
}

type RuleSrcaddr6Array []RuleSrcaddr6Input

func (RuleSrcaddr6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleSrcaddr6)(nil)).Elem()
}

func (i RuleSrcaddr6Array) ToRuleSrcaddr6ArrayOutput() RuleSrcaddr6ArrayOutput {
	return i.ToRuleSrcaddr6ArrayOutputWithContext(context.Background())
}

func (i RuleSrcaddr6Array) ToRuleSrcaddr6ArrayOutputWithContext(ctx context.Context) RuleSrcaddr6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSrcaddr6ArrayOutput)
}

type RuleSrcaddr6Output struct{ *pulumi.OutputState }

func (RuleSrcaddr6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSrcaddr6)(nil)).Elem()
}

func (o RuleSrcaddr6Output) ToRuleSrcaddr6Output() RuleSrcaddr6Output {
	return o
}

func (o RuleSrcaddr6Output) ToRuleSrcaddr6OutputWithContext(ctx context.Context) RuleSrcaddr6Output {
	return o
}

// Authentication rule name.
func (o RuleSrcaddr6Output) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleSrcaddr6) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RuleSrcaddr6ArrayOutput struct{ *pulumi.OutputState }

func (RuleSrcaddr6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleSrcaddr6)(nil)).Elem()
}

func (o RuleSrcaddr6ArrayOutput) ToRuleSrcaddr6ArrayOutput() RuleSrcaddr6ArrayOutput {
	return o
}

func (o RuleSrcaddr6ArrayOutput) ToRuleSrcaddr6ArrayOutputWithContext(ctx context.Context) RuleSrcaddr6ArrayOutput {
	return o
}

func (o RuleSrcaddr6ArrayOutput) Index(i pulumi.IntInput) RuleSrcaddr6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleSrcaddr6 {
		return vs[0].([]RuleSrcaddr6)[vs[1].(int)]
	}).(RuleSrcaddr6Output)
}

type RuleSrcaddr struct {
	// Address name.
	Name *string `pulumi:"name"`
}

// RuleSrcaddrInput is an input type that accepts RuleSrcaddrArgs and RuleSrcaddrOutput values.
// You can construct a concrete instance of `RuleSrcaddrInput` via:
//
//	RuleSrcaddrArgs{...}
type RuleSrcaddrInput interface {
	pulumi.Input

	ToRuleSrcaddrOutput() RuleSrcaddrOutput
	ToRuleSrcaddrOutputWithContext(context.Context) RuleSrcaddrOutput
}

type RuleSrcaddrArgs struct {
	// Address name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RuleSrcaddrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSrcaddr)(nil)).Elem()
}

func (i RuleSrcaddrArgs) ToRuleSrcaddrOutput() RuleSrcaddrOutput {
	return i.ToRuleSrcaddrOutputWithContext(context.Background())
}

func (i RuleSrcaddrArgs) ToRuleSrcaddrOutputWithContext(ctx context.Context) RuleSrcaddrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSrcaddrOutput)
}

// RuleSrcaddrArrayInput is an input type that accepts RuleSrcaddrArray and RuleSrcaddrArrayOutput values.
// You can construct a concrete instance of `RuleSrcaddrArrayInput` via:
//
//	RuleSrcaddrArray{ RuleSrcaddrArgs{...} }
type RuleSrcaddrArrayInput interface {
	pulumi.Input

	ToRuleSrcaddrArrayOutput() RuleSrcaddrArrayOutput
	ToRuleSrcaddrArrayOutputWithContext(context.Context) RuleSrcaddrArrayOutput
}

type RuleSrcaddrArray []RuleSrcaddrInput

func (RuleSrcaddrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleSrcaddr)(nil)).Elem()
}

func (i RuleSrcaddrArray) ToRuleSrcaddrArrayOutput() RuleSrcaddrArrayOutput {
	return i.ToRuleSrcaddrArrayOutputWithContext(context.Background())
}

func (i RuleSrcaddrArray) ToRuleSrcaddrArrayOutputWithContext(ctx context.Context) RuleSrcaddrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSrcaddrArrayOutput)
}

type RuleSrcaddrOutput struct{ *pulumi.OutputState }

func (RuleSrcaddrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSrcaddr)(nil)).Elem()
}

func (o RuleSrcaddrOutput) ToRuleSrcaddrOutput() RuleSrcaddrOutput {
	return o
}

func (o RuleSrcaddrOutput) ToRuleSrcaddrOutputWithContext(ctx context.Context) RuleSrcaddrOutput {
	return o
}

// Address name.
func (o RuleSrcaddrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleSrcaddr) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RuleSrcaddrArrayOutput struct{ *pulumi.OutputState }

func (RuleSrcaddrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleSrcaddr)(nil)).Elem()
}

func (o RuleSrcaddrArrayOutput) ToRuleSrcaddrArrayOutput() RuleSrcaddrArrayOutput {
	return o
}

func (o RuleSrcaddrArrayOutput) ToRuleSrcaddrArrayOutputWithContext(ctx context.Context) RuleSrcaddrArrayOutput {
	return o
}

func (o RuleSrcaddrArrayOutput) Index(i pulumi.IntInput) RuleSrcaddrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleSrcaddr {
		return vs[0].([]RuleSrcaddr)[vs[1].(int)]
	}).(RuleSrcaddrOutput)
}

type RuleSrcintf struct {
	// Interface name.
	Name *string `pulumi:"name"`
}

// RuleSrcintfInput is an input type that accepts RuleSrcintfArgs and RuleSrcintfOutput values.
// You can construct a concrete instance of `RuleSrcintfInput` via:
//
//	RuleSrcintfArgs{...}
type RuleSrcintfInput interface {
	pulumi.Input

	ToRuleSrcintfOutput() RuleSrcintfOutput
	ToRuleSrcintfOutputWithContext(context.Context) RuleSrcintfOutput
}

type RuleSrcintfArgs struct {
	// Interface name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RuleSrcintfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSrcintf)(nil)).Elem()
}

func (i RuleSrcintfArgs) ToRuleSrcintfOutput() RuleSrcintfOutput {
	return i.ToRuleSrcintfOutputWithContext(context.Background())
}

func (i RuleSrcintfArgs) ToRuleSrcintfOutputWithContext(ctx context.Context) RuleSrcintfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSrcintfOutput)
}

// RuleSrcintfArrayInput is an input type that accepts RuleSrcintfArray and RuleSrcintfArrayOutput values.
// You can construct a concrete instance of `RuleSrcintfArrayInput` via:
//
//	RuleSrcintfArray{ RuleSrcintfArgs{...} }
type RuleSrcintfArrayInput interface {
	pulumi.Input

	ToRuleSrcintfArrayOutput() RuleSrcintfArrayOutput
	ToRuleSrcintfArrayOutputWithContext(context.Context) RuleSrcintfArrayOutput
}

type RuleSrcintfArray []RuleSrcintfInput

func (RuleSrcintfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleSrcintf)(nil)).Elem()
}

func (i RuleSrcintfArray) ToRuleSrcintfArrayOutput() RuleSrcintfArrayOutput {
	return i.ToRuleSrcintfArrayOutputWithContext(context.Background())
}

func (i RuleSrcintfArray) ToRuleSrcintfArrayOutputWithContext(ctx context.Context) RuleSrcintfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSrcintfArrayOutput)
}

type RuleSrcintfOutput struct{ *pulumi.OutputState }

func (RuleSrcintfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSrcintf)(nil)).Elem()
}

func (o RuleSrcintfOutput) ToRuleSrcintfOutput() RuleSrcintfOutput {
	return o
}

func (o RuleSrcintfOutput) ToRuleSrcintfOutputWithContext(ctx context.Context) RuleSrcintfOutput {
	return o
}

// Interface name.
func (o RuleSrcintfOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleSrcintf) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RuleSrcintfArrayOutput struct{ *pulumi.OutputState }

func (RuleSrcintfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleSrcintf)(nil)).Elem()
}

func (o RuleSrcintfArrayOutput) ToRuleSrcintfArrayOutput() RuleSrcintfArrayOutput {
	return o
}

func (o RuleSrcintfArrayOutput) ToRuleSrcintfArrayOutputWithContext(ctx context.Context) RuleSrcintfArrayOutput {
	return o
}

func (o RuleSrcintfArrayOutput) Index(i pulumi.IntInput) RuleSrcintfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleSrcintf {
		return vs[0].([]RuleSrcintf)[vs[1].(int)]
	}).(RuleSrcintfOutput)
}

type SchemeUserDatabase struct {
	// Authentication server name.
	Name *string `pulumi:"name"`
}

// SchemeUserDatabaseInput is an input type that accepts SchemeUserDatabaseArgs and SchemeUserDatabaseOutput values.
// You can construct a concrete instance of `SchemeUserDatabaseInput` via:
//
//	SchemeUserDatabaseArgs{...}
type SchemeUserDatabaseInput interface {
	pulumi.Input

	ToSchemeUserDatabaseOutput() SchemeUserDatabaseOutput
	ToSchemeUserDatabaseOutputWithContext(context.Context) SchemeUserDatabaseOutput
}

type SchemeUserDatabaseArgs struct {
	// Authentication server name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SchemeUserDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemeUserDatabase)(nil)).Elem()
}

func (i SchemeUserDatabaseArgs) ToSchemeUserDatabaseOutput() SchemeUserDatabaseOutput {
	return i.ToSchemeUserDatabaseOutputWithContext(context.Background())
}

func (i SchemeUserDatabaseArgs) ToSchemeUserDatabaseOutputWithContext(ctx context.Context) SchemeUserDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemeUserDatabaseOutput)
}

// SchemeUserDatabaseArrayInput is an input type that accepts SchemeUserDatabaseArray and SchemeUserDatabaseArrayOutput values.
// You can construct a concrete instance of `SchemeUserDatabaseArrayInput` via:
//
//	SchemeUserDatabaseArray{ SchemeUserDatabaseArgs{...} }
type SchemeUserDatabaseArrayInput interface {
	pulumi.Input

	ToSchemeUserDatabaseArrayOutput() SchemeUserDatabaseArrayOutput
	ToSchemeUserDatabaseArrayOutputWithContext(context.Context) SchemeUserDatabaseArrayOutput
}

type SchemeUserDatabaseArray []SchemeUserDatabaseInput

func (SchemeUserDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemeUserDatabase)(nil)).Elem()
}

func (i SchemeUserDatabaseArray) ToSchemeUserDatabaseArrayOutput() SchemeUserDatabaseArrayOutput {
	return i.ToSchemeUserDatabaseArrayOutputWithContext(context.Background())
}

func (i SchemeUserDatabaseArray) ToSchemeUserDatabaseArrayOutputWithContext(ctx context.Context) SchemeUserDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemeUserDatabaseArrayOutput)
}

type SchemeUserDatabaseOutput struct{ *pulumi.OutputState }

func (SchemeUserDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemeUserDatabase)(nil)).Elem()
}

func (o SchemeUserDatabaseOutput) ToSchemeUserDatabaseOutput() SchemeUserDatabaseOutput {
	return o
}

func (o SchemeUserDatabaseOutput) ToSchemeUserDatabaseOutputWithContext(ctx context.Context) SchemeUserDatabaseOutput {
	return o
}

// Authentication server name.
func (o SchemeUserDatabaseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemeUserDatabase) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SchemeUserDatabaseArrayOutput struct{ *pulumi.OutputState }

func (SchemeUserDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemeUserDatabase)(nil)).Elem()
}

func (o SchemeUserDatabaseArrayOutput) ToSchemeUserDatabaseArrayOutput() SchemeUserDatabaseArrayOutput {
	return o
}

func (o SchemeUserDatabaseArrayOutput) ToSchemeUserDatabaseArrayOutputWithContext(ctx context.Context) SchemeUserDatabaseArrayOutput {
	return o
}

func (o SchemeUserDatabaseArrayOutput) Index(i pulumi.IntInput) SchemeUserDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchemeUserDatabase {
		return vs[0].([]SchemeUserDatabase)[vs[1].(int)]
	}).(SchemeUserDatabaseOutput)
}

type SettingDevRange struct {
	// Address name.
	Name *string `pulumi:"name"`
}

// SettingDevRangeInput is an input type that accepts SettingDevRangeArgs and SettingDevRangeOutput values.
// You can construct a concrete instance of `SettingDevRangeInput` via:
//
//	SettingDevRangeArgs{...}
type SettingDevRangeInput interface {
	pulumi.Input

	ToSettingDevRangeOutput() SettingDevRangeOutput
	ToSettingDevRangeOutputWithContext(context.Context) SettingDevRangeOutput
}

type SettingDevRangeArgs struct {
	// Address name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SettingDevRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingDevRange)(nil)).Elem()
}

func (i SettingDevRangeArgs) ToSettingDevRangeOutput() SettingDevRangeOutput {
	return i.ToSettingDevRangeOutputWithContext(context.Background())
}

func (i SettingDevRangeArgs) ToSettingDevRangeOutputWithContext(ctx context.Context) SettingDevRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingDevRangeOutput)
}

// SettingDevRangeArrayInput is an input type that accepts SettingDevRangeArray and SettingDevRangeArrayOutput values.
// You can construct a concrete instance of `SettingDevRangeArrayInput` via:
//
//	SettingDevRangeArray{ SettingDevRangeArgs{...} }
type SettingDevRangeArrayInput interface {
	pulumi.Input

	ToSettingDevRangeArrayOutput() SettingDevRangeArrayOutput
	ToSettingDevRangeArrayOutputWithContext(context.Context) SettingDevRangeArrayOutput
}

type SettingDevRangeArray []SettingDevRangeInput

func (SettingDevRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingDevRange)(nil)).Elem()
}

func (i SettingDevRangeArray) ToSettingDevRangeArrayOutput() SettingDevRangeArrayOutput {
	return i.ToSettingDevRangeArrayOutputWithContext(context.Background())
}

func (i SettingDevRangeArray) ToSettingDevRangeArrayOutputWithContext(ctx context.Context) SettingDevRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingDevRangeArrayOutput)
}

type SettingDevRangeOutput struct{ *pulumi.OutputState }

func (SettingDevRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingDevRange)(nil)).Elem()
}

func (o SettingDevRangeOutput) ToSettingDevRangeOutput() SettingDevRangeOutput {
	return o
}

func (o SettingDevRangeOutput) ToSettingDevRangeOutputWithContext(ctx context.Context) SettingDevRangeOutput {
	return o
}

// Address name.
func (o SettingDevRangeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingDevRange) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SettingDevRangeArrayOutput struct{ *pulumi.OutputState }

func (SettingDevRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingDevRange)(nil)).Elem()
}

func (o SettingDevRangeArrayOutput) ToSettingDevRangeArrayOutput() SettingDevRangeArrayOutput {
	return o
}

func (o SettingDevRangeArrayOutput) ToSettingDevRangeArrayOutputWithContext(ctx context.Context) SettingDevRangeArrayOutput {
	return o
}

func (o SettingDevRangeArrayOutput) Index(i pulumi.IntInput) SettingDevRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingDevRange {
		return vs[0].([]SettingDevRange)[vs[1].(int)]
	}).(SettingDevRangeOutput)
}

type SettingUserCertCa struct {
	// CA certificate list.
	Name *string `pulumi:"name"`
}

// SettingUserCertCaInput is an input type that accepts SettingUserCertCaArgs and SettingUserCertCaOutput values.
// You can construct a concrete instance of `SettingUserCertCaInput` via:
//
//	SettingUserCertCaArgs{...}
type SettingUserCertCaInput interface {
	pulumi.Input

	ToSettingUserCertCaOutput() SettingUserCertCaOutput
	ToSettingUserCertCaOutputWithContext(context.Context) SettingUserCertCaOutput
}

type SettingUserCertCaArgs struct {
	// CA certificate list.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SettingUserCertCaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingUserCertCa)(nil)).Elem()
}

func (i SettingUserCertCaArgs) ToSettingUserCertCaOutput() SettingUserCertCaOutput {
	return i.ToSettingUserCertCaOutputWithContext(context.Background())
}

func (i SettingUserCertCaArgs) ToSettingUserCertCaOutputWithContext(ctx context.Context) SettingUserCertCaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingUserCertCaOutput)
}

// SettingUserCertCaArrayInput is an input type that accepts SettingUserCertCaArray and SettingUserCertCaArrayOutput values.
// You can construct a concrete instance of `SettingUserCertCaArrayInput` via:
//
//	SettingUserCertCaArray{ SettingUserCertCaArgs{...} }
type SettingUserCertCaArrayInput interface {
	pulumi.Input

	ToSettingUserCertCaArrayOutput() SettingUserCertCaArrayOutput
	ToSettingUserCertCaArrayOutputWithContext(context.Context) SettingUserCertCaArrayOutput
}

type SettingUserCertCaArray []SettingUserCertCaInput

func (SettingUserCertCaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingUserCertCa)(nil)).Elem()
}

func (i SettingUserCertCaArray) ToSettingUserCertCaArrayOutput() SettingUserCertCaArrayOutput {
	return i.ToSettingUserCertCaArrayOutputWithContext(context.Background())
}

func (i SettingUserCertCaArray) ToSettingUserCertCaArrayOutputWithContext(ctx context.Context) SettingUserCertCaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingUserCertCaArrayOutput)
}

type SettingUserCertCaOutput struct{ *pulumi.OutputState }

func (SettingUserCertCaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingUserCertCa)(nil)).Elem()
}

func (o SettingUserCertCaOutput) ToSettingUserCertCaOutput() SettingUserCertCaOutput {
	return o
}

func (o SettingUserCertCaOutput) ToSettingUserCertCaOutputWithContext(ctx context.Context) SettingUserCertCaOutput {
	return o
}

// CA certificate list.
func (o SettingUserCertCaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingUserCertCa) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SettingUserCertCaArrayOutput struct{ *pulumi.OutputState }

func (SettingUserCertCaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingUserCertCa)(nil)).Elem()
}

func (o SettingUserCertCaArrayOutput) ToSettingUserCertCaArrayOutput() SettingUserCertCaArrayOutput {
	return o
}

func (o SettingUserCertCaArrayOutput) ToSettingUserCertCaArrayOutputWithContext(ctx context.Context) SettingUserCertCaArrayOutput {
	return o
}

func (o SettingUserCertCaArrayOutput) Index(i pulumi.IntInput) SettingUserCertCaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingUserCertCa {
		return vs[0].([]SettingUserCertCa)[vs[1].(int)]
	}).(SettingUserCertCaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleDstaddr6Input)(nil)).Elem(), RuleDstaddr6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleDstaddr6ArrayInput)(nil)).Elem(), RuleDstaddr6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleDstaddrInput)(nil)).Elem(), RuleDstaddrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleDstaddrArrayInput)(nil)).Elem(), RuleDstaddrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSrcaddr6Input)(nil)).Elem(), RuleSrcaddr6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSrcaddr6ArrayInput)(nil)).Elem(), RuleSrcaddr6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSrcaddrInput)(nil)).Elem(), RuleSrcaddrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSrcaddrArrayInput)(nil)).Elem(), RuleSrcaddrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSrcintfInput)(nil)).Elem(), RuleSrcintfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSrcintfArrayInput)(nil)).Elem(), RuleSrcintfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemeUserDatabaseInput)(nil)).Elem(), SchemeUserDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemeUserDatabaseArrayInput)(nil)).Elem(), SchemeUserDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingDevRangeInput)(nil)).Elem(), SettingDevRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingDevRangeArrayInput)(nil)).Elem(), SettingDevRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingUserCertCaInput)(nil)).Elem(), SettingUserCertCaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingUserCertCaArrayInput)(nil)).Elem(), SettingUserCertCaArray{})
	pulumi.RegisterOutputType(RuleDstaddr6Output{})
	pulumi.RegisterOutputType(RuleDstaddr6ArrayOutput{})
	pulumi.RegisterOutputType(RuleDstaddrOutput{})
	pulumi.RegisterOutputType(RuleDstaddrArrayOutput{})
	pulumi.RegisterOutputType(RuleSrcaddr6Output{})
	pulumi.RegisterOutputType(RuleSrcaddr6ArrayOutput{})
	pulumi.RegisterOutputType(RuleSrcaddrOutput{})
	pulumi.RegisterOutputType(RuleSrcaddrArrayOutput{})
	pulumi.RegisterOutputType(RuleSrcintfOutput{})
	pulumi.RegisterOutputType(RuleSrcintfArrayOutput{})
	pulumi.RegisterOutputType(SchemeUserDatabaseOutput{})
	pulumi.RegisterOutputType(SchemeUserDatabaseArrayOutput{})
	pulumi.RegisterOutputType(SettingDevRangeOutput{})
	pulumi.RegisterOutputType(SettingDevRangeArrayOutput{})
	pulumi.RegisterOutputType(SettingUserCertCaOutput{})
	pulumi.RegisterOutputType(SettingUserCertCaArrayOutput{})
}

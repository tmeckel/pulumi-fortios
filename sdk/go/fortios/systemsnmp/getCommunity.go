// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package systemsnmp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information on an fortios systemsnmp community
func LookupCommunity(ctx *pulumi.Context, args *LookupCommunityArgs, opts ...pulumi.InvokeOption) (*LookupCommunityResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupCommunityResult
	err := ctx.Invoke("fortios:systemsnmp/getCommunity:getCommunity", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCommunity.
type LookupCommunityArgs struct {
	// Specify the fosid of the desired systemsnmp community.
	Fosid int `pulumi:"fosid"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by getCommunity.
type LookupCommunityResult struct {
	// SNMP trap events.
	Events string `pulumi:"events"`
	// Community ID.
	Fosid int `pulumi:"fosid"`
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts []GetCommunityHost `pulumi:"hosts"`
	// Configure IPv6 SNMP managers. The structure of `hosts6` block is documented below.
	Hosts6s []GetCommunityHosts6 `pulumi:"hosts6s"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// SNMP access control MIB view.
	MibView string `pulumi:"mibView"`
	// VDOM name
	Name string `pulumi:"name"`
	// SNMP v1 query port (default = 161).
	QueryV1Port int `pulumi:"queryV1Port"`
	// Enable/disable SNMP v1 queries.
	QueryV1Status string `pulumi:"queryV1Status"`
	// SNMP v2c query port (default = 161).
	QueryV2cPort int `pulumi:"queryV2cPort"`
	// Enable/disable SNMP v2c queries.
	QueryV2cStatus string `pulumi:"queryV2cStatus"`
	// Enable/disable this SNMP community.
	Status string `pulumi:"status"`
	// SNMP v1 trap local port (default = 162).
	TrapV1Lport int `pulumi:"trapV1Lport"`
	// SNMP v1 trap remote port (default = 162).
	TrapV1Rport int `pulumi:"trapV1Rport"`
	// Enable/disable SNMP v1 traps.
	TrapV1Status string `pulumi:"trapV1Status"`
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport int `pulumi:"trapV2cLport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport int `pulumi:"trapV2cRport"`
	// Enable/disable SNMP v2c traps.
	TrapV2cStatus string  `pulumi:"trapV2cStatus"`
	Vdomparam     *string `pulumi:"vdomparam"`
	// SNMP access control VDOMs. The structure of `vdoms` block is documented below.
	Vdoms []GetCommunityVdom `pulumi:"vdoms"`
}

func LookupCommunityOutput(ctx *pulumi.Context, args LookupCommunityOutputArgs, opts ...pulumi.InvokeOption) LookupCommunityResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCommunityResult, error) {
			args := v.(LookupCommunityArgs)
			r, err := LookupCommunity(ctx, &args, opts...)
			var s LookupCommunityResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCommunityResultOutput)
}

// A collection of arguments for invoking getCommunity.
type LookupCommunityOutputArgs struct {
	// Specify the fosid of the desired systemsnmp community.
	Fosid pulumi.IntInput `pulumi:"fosid"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupCommunityOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCommunityArgs)(nil)).Elem()
}

// A collection of values returned by getCommunity.
type LookupCommunityResultOutput struct{ *pulumi.OutputState }

func (LookupCommunityResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCommunityResult)(nil)).Elem()
}

func (o LookupCommunityResultOutput) ToLookupCommunityResultOutput() LookupCommunityResultOutput {
	return o
}

func (o LookupCommunityResultOutput) ToLookupCommunityResultOutputWithContext(ctx context.Context) LookupCommunityResultOutput {
	return o
}

// SNMP trap events.
func (o LookupCommunityResultOutput) Events() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCommunityResult) string { return v.Events }).(pulumi.StringOutput)
}

// Community ID.
func (o LookupCommunityResultOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCommunityResult) int { return v.Fosid }).(pulumi.IntOutput)
}

// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
func (o LookupCommunityResultOutput) Hosts() GetCommunityHostArrayOutput {
	return o.ApplyT(func(v LookupCommunityResult) []GetCommunityHost { return v.Hosts }).(GetCommunityHostArrayOutput)
}

// Configure IPv6 SNMP managers. The structure of `hosts6` block is documented below.
func (o LookupCommunityResultOutput) Hosts6s() GetCommunityHosts6ArrayOutput {
	return o.ApplyT(func(v LookupCommunityResult) []GetCommunityHosts6 { return v.Hosts6s }).(GetCommunityHosts6ArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCommunityResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCommunityResult) string { return v.Id }).(pulumi.StringOutput)
}

// SNMP access control MIB view.
func (o LookupCommunityResultOutput) MibView() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCommunityResult) string { return v.MibView }).(pulumi.StringOutput)
}

// VDOM name
func (o LookupCommunityResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCommunityResult) string { return v.Name }).(pulumi.StringOutput)
}

// SNMP v1 query port (default = 161).
func (o LookupCommunityResultOutput) QueryV1Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCommunityResult) int { return v.QueryV1Port }).(pulumi.IntOutput)
}

// Enable/disable SNMP v1 queries.
func (o LookupCommunityResultOutput) QueryV1Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCommunityResult) string { return v.QueryV1Status }).(pulumi.StringOutput)
}

// SNMP v2c query port (default = 161).
func (o LookupCommunityResultOutput) QueryV2cPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCommunityResult) int { return v.QueryV2cPort }).(pulumi.IntOutput)
}

// Enable/disable SNMP v2c queries.
func (o LookupCommunityResultOutput) QueryV2cStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCommunityResult) string { return v.QueryV2cStatus }).(pulumi.StringOutput)
}

// Enable/disable this SNMP community.
func (o LookupCommunityResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCommunityResult) string { return v.Status }).(pulumi.StringOutput)
}

// SNMP v1 trap local port (default = 162).
func (o LookupCommunityResultOutput) TrapV1Lport() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCommunityResult) int { return v.TrapV1Lport }).(pulumi.IntOutput)
}

// SNMP v1 trap remote port (default = 162).
func (o LookupCommunityResultOutput) TrapV1Rport() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCommunityResult) int { return v.TrapV1Rport }).(pulumi.IntOutput)
}

// Enable/disable SNMP v1 traps.
func (o LookupCommunityResultOutput) TrapV1Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCommunityResult) string { return v.TrapV1Status }).(pulumi.StringOutput)
}

// SNMP v2c trap local port (default = 162).
func (o LookupCommunityResultOutput) TrapV2cLport() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCommunityResult) int { return v.TrapV2cLport }).(pulumi.IntOutput)
}

// SNMP v2c trap remote port (default = 162).
func (o LookupCommunityResultOutput) TrapV2cRport() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCommunityResult) int { return v.TrapV2cRport }).(pulumi.IntOutput)
}

// Enable/disable SNMP v2c traps.
func (o LookupCommunityResultOutput) TrapV2cStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCommunityResult) string { return v.TrapV2cStatus }).(pulumi.StringOutput)
}

func (o LookupCommunityResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCommunityResult) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// SNMP access control VDOMs. The structure of `vdoms` block is documented below.
func (o LookupCommunityResultOutput) Vdoms() GetCommunityVdomArrayOutput {
	return o.ApplyT(func(v LookupCommunityResult) []GetCommunityVdom { return v.Vdoms }).(GetCommunityVdomArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCommunityResultOutput{})
}

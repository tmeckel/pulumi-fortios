// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package systemsnmp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information on an fortios systemsnmp user
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("fortios:systemsnmp/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// Specify the name of the desired systemsnmp user.
	Name string `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// Authentication protocol.
	AuthProto string `pulumi:"authProto"`
	// Password for authentication protocol.
	AuthPwd string `pulumi:"authPwd"`
	// SNMP notifications (traps) to send.
	Events string `pulumi:"events"`
	// Enable/disable direct management of HA cluster members.
	HaDirect string `pulumi:"haDirect"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// SNMP access control MIB view.
	MibView string `pulumi:"mibView"`
	// VDOM name
	Name string `pulumi:"name"`
	// SNMP managers to send notifications (traps) to.
	NotifyHosts string `pulumi:"notifyHosts"`
	// IPv6 SNMP managers to send notifications (traps) to.
	NotifyHosts6 string `pulumi:"notifyHosts6"`
	// Privacy (encryption) protocol.
	PrivProto string `pulumi:"privProto"`
	// Password for privacy (encryption) protocol.
	PrivPwd string `pulumi:"privPwd"`
	// Enable/disable SNMP queries for this user.
	Queries string `pulumi:"queries"`
	// SNMPv3 query port (default = 161).
	QueryPort int `pulumi:"queryPort"`
	// Security level for message authentication and encryption.
	SecurityLevel string `pulumi:"securityLevel"`
	// Source IP for SNMP trap.
	SourceIp string `pulumi:"sourceIp"`
	// Source IPv6 for SNMP trap.
	SourceIpv6 string `pulumi:"sourceIpv6"`
	// Enable/disable this SNMP user.
	Status string `pulumi:"status"`
	// SNMPv3 local trap port (default = 162).
	TrapLport int `pulumi:"trapLport"`
	// SNMPv3 trap remote port (default = 162).
	TrapRport int `pulumi:"trapRport"`
	// Enable/disable traps for this SNMP user.
	TrapStatus string  `pulumi:"trapStatus"`
	Vdomparam  *string `pulumi:"vdomparam"`
	// SNMP access control VDOMs. The structure of `vdoms` block is documented below.
	Vdoms []GetUserVdom `pulumi:"vdoms"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserResult, error) {
			args := v.(LookupUserArgs)
			r, err := LookupUser(ctx, &args, opts...)
			var s LookupUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// Specify the name of the desired systemsnmp user.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

// Authentication protocol.
func (o LookupUserResultOutput) AuthProto() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.AuthProto }).(pulumi.StringOutput)
}

// Password for authentication protocol.
func (o LookupUserResultOutput) AuthPwd() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.AuthPwd }).(pulumi.StringOutput)
}

// SNMP notifications (traps) to send.
func (o LookupUserResultOutput) Events() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Events }).(pulumi.StringOutput)
}

// Enable/disable direct management of HA cluster members.
func (o LookupUserResultOutput) HaDirect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.HaDirect }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// SNMP access control MIB view.
func (o LookupUserResultOutput) MibView() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.MibView }).(pulumi.StringOutput)
}

// VDOM name
func (o LookupUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Name }).(pulumi.StringOutput)
}

// SNMP managers to send notifications (traps) to.
func (o LookupUserResultOutput) NotifyHosts() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.NotifyHosts }).(pulumi.StringOutput)
}

// IPv6 SNMP managers to send notifications (traps) to.
func (o LookupUserResultOutput) NotifyHosts6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.NotifyHosts6 }).(pulumi.StringOutput)
}

// Privacy (encryption) protocol.
func (o LookupUserResultOutput) PrivProto() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.PrivProto }).(pulumi.StringOutput)
}

// Password for privacy (encryption) protocol.
func (o LookupUserResultOutput) PrivPwd() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.PrivPwd }).(pulumi.StringOutput)
}

// Enable/disable SNMP queries for this user.
func (o LookupUserResultOutput) Queries() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Queries }).(pulumi.StringOutput)
}

// SNMPv3 query port (default = 161).
func (o LookupUserResultOutput) QueryPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupUserResult) int { return v.QueryPort }).(pulumi.IntOutput)
}

// Security level for message authentication and encryption.
func (o LookupUserResultOutput) SecurityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.SecurityLevel }).(pulumi.StringOutput)
}

// Source IP for SNMP trap.
func (o LookupUserResultOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.SourceIp }).(pulumi.StringOutput)
}

// Source IPv6 for SNMP trap.
func (o LookupUserResultOutput) SourceIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.SourceIpv6 }).(pulumi.StringOutput)
}

// Enable/disable this SNMP user.
func (o LookupUserResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Status }).(pulumi.StringOutput)
}

// SNMPv3 local trap port (default = 162).
func (o LookupUserResultOutput) TrapLport() pulumi.IntOutput {
	return o.ApplyT(func(v LookupUserResult) int { return v.TrapLport }).(pulumi.IntOutput)
}

// SNMPv3 trap remote port (default = 162).
func (o LookupUserResultOutput) TrapRport() pulumi.IntOutput {
	return o.ApplyT(func(v LookupUserResult) int { return v.TrapRport }).(pulumi.IntOutput)
}

// Enable/disable traps for this SNMP user.
func (o LookupUserResultOutput) TrapStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.TrapStatus }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// SNMP access control VDOMs. The structure of `vdoms` block is documented below.
func (o LookupUserResultOutput) Vdoms() GetUserVdomArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserVdom { return v.Vdoms }).(GetUserVdomArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
